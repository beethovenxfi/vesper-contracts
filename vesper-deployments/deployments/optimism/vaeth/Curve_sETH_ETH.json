{
  "address": "0xb1458639956402B3f96E514f5A7dbe1bbC58A981",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "crvPool_",
          "type": "address"
        },
        {
          "internalType": "enum CurveBase.PoolType",
          "name": "curvePoolType_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "depositZap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "crvToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "crvSlippage_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "masterOracle_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapper_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralIdx_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "contract TokenLike",
          "name": "wethLike_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCrvSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCrvSlippage",
          "type": "uint256"
        }
      ],
      "name": "CrvSlippageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IMasterOracle",
          "name": "oldMasterOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle",
          "type": "address"
        }
      ],
      "name": "MasterOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_MINTER",
      "outputs": [
        {
          "internalType": "contract ITokenMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract TokenLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "claimAndSwapRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvGauge",
      "outputs": [
        {
          "internalType": "contract ILiquidityGaugeV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvLp",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curvePoolType",
      "outputs": [
        {
          "internalType": "enum CurveBase.PoolType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceHere",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpHere",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceHereAndStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpHereAndStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterOracle",
      "outputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refetchRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swapToCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCrvSlippage_",
          "type": "uint256"
        }
      ],
      "name": "updateCrvSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle_",
          "type": "address"
        }
      ],
      "name": "updateMasterOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc68e3046f289e5ace9d54973682e08cdbe154cc1c0f27c3e8b60e3d8ba40d904",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xb1458639956402B3f96E514f5A7dbe1bbC58A981",
    "transactionIndex": 0,
    "gasUsed": "5174381",
    "logsBloom": "0x
    "blockHash": "0x55818c5cc3e64a385573aa2aa34b868f6ae8313423a3bc6a3e5cf335d6cbfd6f",
    "transactionHash": "0xc68e3046f289e5ace9d54973682e08cdbe154cc1c0f27c3e8b60e3d8ba40d904",
    "logs": [],
    "blockNumber": 75560710,
    "cumulativeGasUsed": "5174381",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCcF3d1AcF799bAe67F6e354d685295557cf64761",
    "0x7Bc5728BC2b59B45a58d9A576E2Ffc5f0505B35E",
    0,
    "0x0000000000000000000000000000000000000000",
    "0x0994206dfE8De6Ec6920FF4D779B0d950605Fb53",
    100,
    "0x0aac835162D368F246dc71628AfcD6d2930c47d3",
    "0xDAf982c67712780D54C298A91D86788165B701A4",
    0,
    "Curve_sETH_ETH",
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 1,
  "solcInputHash": "0436ceda8640306b0b3348e44a487638",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvPool_\",\"type\":\"address\"},{\"internalType\":\"enum CurveBase.PoolType\",\"name\":\"curvePoolType_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositZap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"crvSlippage_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"masterOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdx_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"contract TokenLike\",\"name\":\"wethLike_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCrvSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCrvSlippage\",\"type\":\"uint256\"}],\"name\":\"CrvSlippageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IMasterOracle\",\"name\":\"oldMasterOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle\",\"type\":\"address\"}],\"name\":\"MasterOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_MINTER\",\"outputs\":[{\"internalType\":\"contract ITokenMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"claimAndSwapRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvGauge\",\"outputs\":[{\"internalType\":\"contract ILiquidityGaugeV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvLp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePoolType\",\"outputs\":[{\"internalType\":\"enum CurveBase.PoolType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceHere\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpHere\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceHereAndStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpHereAndStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOracle\",\"outputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refetchRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapToCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCrvSlippage_\",\"type\":\"uint256\"}],\"name\":\"updateCrvSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle_\",\"type\":\"address\"}],\"name\":\"updateMasterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken(uint256)\":{\"details\":\"Approve all required tokens\"},\"isReservedToken(address)\":{\"details\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweep(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"Deposit ETH to Curve Pool and earn interest.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"claimAndSwapRewards(uint256)\":{\"notice\":\"Claim rewardToken and convert rewardToken into collateral token.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"refetchRewardTokens()\":{\"notice\":\"Rewards token in gauge can be updated any time. This method refresh list. It is recommended to claimAndSwapRewards before calling this function.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"swapToCollateral(address,uint256)\":{\"notice\":\"onlyKeeper:: Swap given token into collateral token.\"},\"sweep(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns collateral balance + collateral deposited to curve\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/curve/CurveETH.sol\":\"CurveETH\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function sweep(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf7b06736a402e8548dd9cd3752418ab23e44426652f0fee6e0a40e37fbacdcab\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc37d85b96c2a8d7bc09f25958e0a81394bf5780286444147ddf875fa628d53ce\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokenLike is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x003b4063990378d64f20d02f3da97c58338d85c0ca65955ed4a21065e2bb559a\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 profit_) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 collateralAmount_) external;\\n\\n    function excessDebt(address strategy_) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(uint256 profit_, uint256 loss_, uint256 payback_) external;\\n\\n    function reportLoss(uint256 loss_) external;\\n\\n    function sweepERC20(address fromToken_) external;\\n\\n    function withdraw(uint256 share_) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address address_) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address address_) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(\\n        address strategy_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address strategy_) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e04db3bafbcc5985db33ae168ada16fed2bbc42a6cd26bbe936a71a4f537e0c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0x475e55655e2868cd6d31dea7a571bb9c73337937529df19563054d08f8c1f73c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IDeposit2x {\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\\n}\\n\\ninterface IDeposit3x {\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\\n}\\n\\ninterface IDeposit4x {\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external payable;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8130414bc2c2a1540e9d5218285322eb72399b1880051849fda2f06a187b76e3\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IDepositZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IDepositZap {\\n    function remove_liquidity_one_coin(address _pool, uint256 _burn_amount, int128 i, uint256 _min_amount) external;\\n\\n    function calc_withdraw_one_coin(address _pool, uint256 _token_amount, int128 i) external view returns (uint256);\\n}\\n\\ninterface IDepositZap3x is IDepositZap {\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[3] memory _amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        address _pool,\\n        uint256[3] memory _deposit_amounts,\\n        uint256 _min_mint_amount\\n    ) external payable;\\n\\n    function remove_liquidity(address _pool, uint256 _burn_amount, uint256[3] memory _min_amounts) external;\\n}\\n\\ninterface IDepositZap4x is IDepositZap {\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(address _pool, uint256[4] memory _amounts, uint256 _min_mint_amount) external payable;\\n\\n    function remove_liquidity(address _pool, uint256 _amount, uint256[4] memory _min_amounts) external;\\n}\\n\",\"keccak256\":\"0x9cf378020a3def5427fa690a881a911e62fb2d12ba498f2084baed8c385d97e3\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILiquidityGauge {\\n    function lp_token() external view returns (address);\\n\\n    function integrate_fraction(address addr) external view returns (uint256);\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function user_checkpoint(address addr) external returns (bool);\\n\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address addr) external;\\n\\n    function withdraw(uint256 _value) external;\\n}\\n\\ninterface ILiquidityGaugeReward is ILiquidityGauge {\\n    function reward_contract() external view returns (address);\\n\\n    function rewarded_token() external view returns (address);\\n}\\n\\ninterface ILiquidityGaugeV2 is IERC20, ILiquidityGauge {\\n    function claim_rewards(address addr) external;\\n\\n    function claim_rewards() external;\\n\\n    function claimable_reward(address, address) external returns (uint256);\\n\\n    function reward_integral(address) external view returns (uint256);\\n\\n    function reward_integral_for(address, address) external view returns (uint256);\\n\\n    function reward_count() external view returns (uint256);\\n\\n    function reward_tokens(uint256 _i) external view returns (address);\\n}\\n\\ninterface ILiquidityGaugeV3 is ILiquidityGaugeV2 {\\n    function claimable_reward(address addr, address token) external view override returns (uint256);\\n\\n    function claimable_reward_write(address addr, address token) external returns (uint256);\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0x1f8015b262eefac49a84e0d8e0fe8eccd5aa2f98e3de13607bfb11d44985104d\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IMetapoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/* solhint-disable func-name-mixedcase*/\\npragma solidity 0.8.9;\\n\\ninterface IMetapoolFactory {\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_decimals(address pool) external view returns (uint256[8] memory);\\n\\n    function get_coins(address pool) external view returns (address[4] memory);\\n\\n    function get_n_coins(address pool) external view returns (uint256);\\n\\n    function get_meta_n_coins(address pool) external view returns (uint256[2] memory);\\n\\n    function get_decimals(address pool) external view returns (uint256[4] memory);\\n\\n    function get_gauge(address pool) external view returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0b34a43d929c27a7f0fe8cfcda363e5bf02cd08e66a283d402181ef0a072c3f7\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IRegistry {\\n    function get_pool_from_lp_token() external view returns (address);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function get_n_coins(address pool) external view returns (uint256[2] memory);\\n\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_decimals(address pool) external view returns (uint256[8] memory);\\n\\n    function get_gauges(address pool) external view returns (address[10] memory);\\n}\\n\",\"keccak256\":\"0x2ebd1ea8b845d34dd2a389b994a396a57cc8c423f03272ed51dcea203d3b6288\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\n// Not a complete interface, but should have what we need\\ninterface IStableSwap {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function fee() external view returns (uint256); // fee * 1e10\\n\\n    function lp_token() external view returns (address);\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n\\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\\n}\\n\\ninterface IStableSwapV2 {\\n    function coins(int128 i) external view returns (address);\\n}\\n\\ninterface IStableSwapUnderlying is IStableSwap {\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount,\\n        bool _use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap2x is IStableSwap {\\n    function calc_token_amount(uint256[2] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external payable;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n}\\n\\ninterface IStableSwap3x is IStableSwap {\\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external payable;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n}\\n\\ninterface IStableSwap4x is IStableSwap {\\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external payable;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n}\\n\\ninterface IStableSwap2xUnderlying is IStableSwap2x, IStableSwapUnderlying {\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount, bool use_underlying) external payable;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(uint256 amount, uint256[2] calldata min_amounts, bool use_underlying) external;\\n}\\n\\ninterface IStableSwap3xUnderlying is IStableSwap3x, IStableSwapUnderlying {\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount, bool use_underlying) external payable;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(uint256 amount, uint256[3] calldata min_amounts, bool use_underlying) external;\\n}\\n\\ninterface IStableSwap4xUnderlying is IStableSwap4x, IStableSwapUnderlying {\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount, bool use_underlying) external payable;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(uint256 amount, uint256[4] calldata min_amounts, bool use_underlying) external;\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0x74a4ef282b8e76aac6d0d95db650b4ced204368a0f861807921a649ce5c6ad05\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/ITokenMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\n// Not a complete interface, but should have what we need\\ninterface ITokenMinter {\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n\\n    function mint(address gauge_addr) external;\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x4c11e543dddafeaa1f90af55d8aa750d943a050cf7cb1100456832fce39617cf\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/one-oracle/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    function quote(address tokenIn_, address tokenOut_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xc134b62d3ff80516002caf4d1644a47ef466e656d3ca791cbc088165536b335a\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(address tokenIn_, address tokenOut_, uint256 amountOut_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(address tokenIn_, address tokenOut_, uint256 amountIn_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x853ff5f9fbdd441f535370e39d43221d72d7a02fd5e48e343bbecb716a633f10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(address _pool, address _swapper, address _receiptToken) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken(uint256 _approvalAmount) external onlyKeeper {\\n        _approveToken(_approvalAmount);\\n    }\\n\\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\\n    function claimAndSwapRewards(uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        _claimAndSwapRewards();\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance() external onlyKeeper returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /// @notice onlyKeeper:: Swap given token into collateral token.\\n    function swapToCollateral(IERC20 _tokenIn, uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        require(address(_tokenIn) != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(address(_tokenIn)), \\\"not-allowed-to-sweep\\\");\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        uint256 _amountIn = _tokenIn.balanceOf(address(this));\\n        if (_amountIn > 0) {\\n            if (_amountIn > _tokenIn.allowance(address(this), address(swapper))) {\\n                _tokenIn.safeApprove(address(swapper), 0);\\n                _tokenIn.safeApprove(address(swapper), MAX_UINT_VALUE);\\n            }\\n            _swapExactInput(address(_tokenIn), address(collateralToken), _amountIn);\\n        }\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweep(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _claimAndSwapRewards() internal virtual {\\n        (address _rewardToken, uint256 _rewardsAmount) = _claimRewards();\\n        if (_rewardsAmount > 0) {\\n            _safeSwapExactInput(_rewardToken, address(collateralToken), _rewardsAmount);\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _claimRewards() internal virtual returns (address, uint256) {}\\n\\n    function _rebalance() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(address _tokenIn, address _tokenOut, uint256 _amountIn) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x58711ce2d409c8069e25980d2df4d09fd73e66c8ed41ba9ade1829bbb4ad6d80\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/curve/Curve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./CurveBase.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Curve Pool and earn interest.\\n// solhint-disable no-empty-blocks\\ncontract Curve is CurveBase {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address pool_,\\n        address crvPool_,\\n        CurveBase.PoolType curvePoolType_,\\n        address depositZap_,\\n        address crvToken_,\\n        uint256 crvSlippage_,\\n        address masterOracle_,\\n        address swapper_,\\n        uint256 collateralIdx_,\\n        string memory name_\\n    )\\n        CurveBase(\\n            pool_,\\n            crvPool_,\\n            curvePoolType_,\\n            depositZap_,\\n            crvToken_,\\n            crvSlippage_,\\n            masterOracle_,\\n            swapper_,\\n            collateralIdx_,\\n            name_\\n        )\\n    {\\n        rewardTokens = _getRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Prepare rewardToken array\\n     * @return _rewardTokens The array of reward tokens (both base and extra rewards)\\n     */\\n    function _getRewardTokens() internal view virtual override returns (address[] memory _rewardTokens) {\\n        _rewardTokens = new address[](1);\\n        _rewardTokens[0] = CRV;\\n\\n        // If there is no gauge, CRV only\\n        if (address(crvGauge) == address(0)) {\\n            return _rewardTokens;\\n        }\\n\\n        // If LiquidityGaugeReward, `rewarded_token` only\\n        try ILiquidityGaugeReward(address(crvGauge)).rewarded_token() returns (address _rewardToken) {\\n            _rewardTokens = new address[](2);\\n            _rewardTokens[0] = CRV;\\n            _rewardTokens[1] = _rewardToken;\\n            return _rewardTokens;\\n        } catch {}\\n\\n        // If LiquidityGaugeV2 or LiquidityGaugeV3, CRV + extra reward tokens\\n        try ILiquidityGaugeV2(address(crvGauge)).reward_tokens(0) returns (address _rewardToken) {\\n            // If no extra reward token, CRV only\\n            if (_rewardToken == address(0)) {\\n                return _rewardTokens;\\n            }\\n\\n            try ILiquidityGaugeV2(address(crvGauge)).reward_count() returns (uint256 _len) {\\n                _rewardTokens = new address[](1 + _len);\\n                _rewardTokens[0] = _rewardToken;\\n                for (uint256 i = 1; i < _len; ++i) {\\n                    _rewardTokens[i] = ILiquidityGaugeV2(address(crvGauge)).reward_tokens(i);\\n                }\\n                _rewardTokens[_len] = CRV;\\n                return _rewardTokens;\\n            } catch {\\n                // If doesn't implement `reward_count` assuming only one extra reward token\\n                // E.g. stETH pool\\n                _rewardTokens = new address[](2);\\n                _rewardTokens[0] = CRV;\\n                _rewardTokens[1] = _rewardToken;\\n                return _rewardTokens;\\n            }\\n        } catch {}\\n\\n        // If LiquidityGauge, CRV only\\n        return _rewardTokens;\\n    }\\n}\\n\",\"keccak256\":\"0xcfa9e739aaf220c40da8f52b2c5a3c2dddb840fa701e065b11b649104cc4c8f8\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/curve/CurveBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../interfaces/curve/IDeposit.sol\\\";\\nimport \\\"../../interfaces/curve/IDepositZap.sol\\\";\\nimport \\\"../../interfaces/curve/IStableSwap.sol\\\";\\nimport \\\"../../interfaces/curve/ILiquidityGauge.sol\\\";\\nimport \\\"../../interfaces/curve/ITokenMinter.sol\\\";\\nimport \\\"../../interfaces/curve/IMetapoolFactory.sol\\\";\\nimport \\\"../../interfaces/curve/IRegistry.sol\\\";\\nimport \\\"../../interfaces/curve/IAddressProvider.sol\\\";\\nimport \\\"../../interfaces/one-oracle/IMasterOracle.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\n\\n/// @title Base contract for Curve-related strategies\\nabstract contract CurveBase is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    enum PoolType {\\n        PLAIN_2_POOL,\\n        PLAIN_3_POOL,\\n        PLAIN_4_POOL,\\n        LENDING_2_POOL,\\n        LENDING_3_POOL,\\n        LENDING_4_POOL,\\n        META_3_POOL,\\n        META_4_POOL\\n    }\\n\\n    string public constant VERSION = \\\"5.1.0\\\";\\n    uint256 internal constant MAX_BPS = 10_000;\\n    ITokenMinter public constant CRV_MINTER = ITokenMinter(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0); // This contract only exists on mainnet\\n    IAddressProvider public constant ADDRESS_PROVIDER = IAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383); // Same address to all chains\\n    uint256 private constant FACTORY_ADDRESS_ID = 3;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable CRV;\\n    IERC20 public immutable crvLp; // Note: Same as `receiptToken` but using this in order to save gas since it's `immutable` and `receiptToken` isn't\\n    address public immutable crvPool;\\n    ILiquidityGaugeV2 public immutable crvGauge;\\n    uint256 public immutable collateralIdx;\\n    address internal immutable depositZap;\\n    PoolType public immutable curvePoolType;\\n    bool private immutable isFactoryPool;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    uint256 public crvSlippage;\\n    IMasterOracle public masterOracle;\\n    address[] public rewardTokens;\\n\\n    event CrvSlippageUpdated(uint256 oldCrvSlippage, uint256 newCrvSlippage);\\n    event MasterOracleUpdated(IMasterOracle oldMasterOracle, IMasterOracle newMasterOracle);\\n\\n    constructor(\\n        address pool_,\\n        address crvPool_,\\n        PoolType curvePoolType_,\\n        address depositZap_,\\n        address crvToken_,\\n        uint256 crvSlippage_,\\n        address masterOracle_,\\n        address swapper_,\\n        uint256 collateralIdx_,\\n        string memory name_\\n    ) Strategy(pool_, swapper_, address(0)) {\\n        require(crvToken_ != address(0), \\\"crv-token-is-null\\\");\\n\\n        address _crvGauge;\\n        IRegistry _registry = IRegistry(ADDRESS_PROVIDER.get_registry());\\n        address _crvLp = _registry.get_lp_token(crvPool_);\\n\\n        if (_crvLp != address(0)) {\\n            // Get data from Registry contract\\n            require(collateralIdx_ < _registry.get_n_coins(crvPool_)[1], \\\"invalid-collateral\\\");\\n            require(\\n                _registry.get_underlying_coins(crvPool_)[collateralIdx_] == address(collateralToken),\\n                \\\"collateral-mismatch\\\"\\n            );\\n            _crvGauge = _registry.get_gauges(crvPool_)[0];\\n        } else {\\n            // Get data from Factory contract\\n            IMetapoolFactory _factory = IMetapoolFactory(ADDRESS_PROVIDER.get_address(FACTORY_ADDRESS_ID));\\n\\n            if (_factory.is_meta(crvPool_)) {\\n                require(collateralIdx_ < _factory.get_meta_n_coins(crvPool_)[1], \\\"invalid-collateral\\\");\\n                require(\\n                    _factory.get_underlying_coins(crvPool_)[collateralIdx_] == address(collateralToken),\\n                    \\\"collateral-mismatch\\\"\\n                );\\n            } else {\\n                require(collateralIdx_ < _factory.get_n_coins(crvPool_), \\\"invalid-collateral\\\");\\n                address _coinFromCrvPool = _factory.get_coins(crvPool_)[collateralIdx_];\\n                // For wrapped collateral, factory may return wrapped/native token.\\n                if (_coinFromCrvPool == ETH) _coinFromCrvPool = address(collateralToken);\\n                require(_coinFromCrvPool == address(collateralToken), \\\"collateral-mismatch\\\");\\n            }\\n            _crvLp = crvPool_;\\n\\n            // Note: OP sETH/ETH has gauge but `factory` contract is returning null\\n            // See more: https://github.com/bloqpriv/vesper-contracts/issues/475\\n            if (crvPool_ == 0x7Bc5728BC2b59B45a58d9A576E2Ffc5f0505B35E) {\\n                _crvGauge = 0xCB8883D1D8c560003489Df43B30612AAbB8013bb;\\n            } else {\\n                _crvGauge = _factory.get_gauge(crvPool_);\\n            }\\n        }\\n\\n        require(crvPool_ != address(0), \\\"pool-is-null\\\");\\n        require(_crvLp != address(0), \\\"lp-is-null\\\");\\n        require(_crvGauge != address(0), \\\"gauge-is-null\\\");\\n\\n        CRV = crvToken_;\\n        crvPool = crvPool_;\\n        crvLp = IERC20(_crvLp);\\n        crvGauge = ILiquidityGaugeV2(_crvGauge);\\n        crvSlippage = crvSlippage_;\\n        receiptToken = _crvLp;\\n        collateralIdx = collateralIdx_;\\n        curvePoolType = curvePoolType_;\\n        isFactoryPool = _crvLp == crvPool_;\\n        depositZap = depositZap_;\\n        masterOracle = IMasterOracle(masterOracle_);\\n        NAME = name_;\\n    }\\n\\n    function getRewardTokens() external view returns (address[] memory) {\\n        return rewardTokens;\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address token_) public view override returns (bool) {\\n        return token_ == address(crvLp) || token_ == address(collateralToken);\\n    }\\n\\n    // Gets LP value not staked in gauge\\n    function lpBalanceHere() public view virtual returns (uint256 _lpHere) {\\n        _lpHere = crvLp.balanceOf(address(this));\\n    }\\n\\n    function lpBalanceHereAndStaked() public view virtual returns (uint256 _lpHereAndStaked) {\\n        _lpHereAndStaked = crvLp.balanceOf(address(this)) + lpBalanceStaked();\\n    }\\n\\n    function lpBalanceStaked() public view virtual returns (uint256 _lpStaked) {\\n        _lpStaked = crvGauge.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns collateral balance + collateral deposited to curve\\n    function tvl() external view override returns (uint256) {\\n        return\\n            collateralToken.balanceOf(address(this)) +\\n            _quoteLpToCoin(lpBalanceHereAndStaked(), SafeCast.toInt128(int256(collateralIdx)));\\n    }\\n\\n    function _approveToken(uint256 amount_) internal virtual override {\\n        super._approveToken(amount_);\\n\\n        address _swapper = address(swapper);\\n\\n        collateralToken.safeApprove(crvPool, amount_);\\n        collateralToken.safeApprove(_swapper, amount_);\\n\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; ++i) {\\n            IERC20(rewardTokens[i]).safeApprove(_swapper, amount_);\\n        }\\n        crvLp.safeApprove(address(crvGauge), amount_);\\n\\n        if (depositZap != address(0)) {\\n            collateralToken.safeApprove(depositZap, amount_);\\n            crvLp.safeApprove(depositZap, amount_);\\n        }\\n    }\\n\\n    /// @notice Unstake LP tokens in order to transfer to the new strategy\\n    function _beforeMigration(address newStrategy_) internal override {\\n        require(IStrategy(newStrategy_).collateral() == address(collateralToken), \\\"wrong-collateral-token\\\");\\n        require(IStrategy(newStrategy_).token() == address(crvLp), \\\"wrong-receipt-token\\\");\\n        _unstakeAllLp();\\n    }\\n\\n    function _calculateAmountOutMin(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOutMin) {\\n        _amountOutMin = (masterOracle.quote(tokenIn_, tokenOut_, amountIn_) * (MAX_BPS - crvSlippage)) / MAX_BPS;\\n    }\\n\\n    /**\\n     * @dev Curve pool may have more than one reward token.\\n     */\\n    function _claimAndSwapRewards() internal virtual override {\\n        _claimRewards();\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; ++i) {\\n            address _rewardToken = rewardTokens[i];\\n            uint256 _amountIn = IERC20(_rewardToken).balanceOf(address(this));\\n            if (_amountIn > 0) {\\n                _safeSwapExactInput(_rewardToken, address(collateralToken), _amountIn);\\n            }\\n        }\\n    }\\n\\n    /// @dev Return values are not being used hence returning 0\\n    function _claimRewards() internal virtual override returns (address, uint256) {\\n        if (block.chainid == 1) {\\n            // Side-chains don't have minter contract\\n            CRV_MINTER.mint(address(crvGauge));\\n        }\\n        try crvGauge.claim_rewards() {} catch {\\n            // This call may fail in some scenarios\\n            // e.g. 3Crv gauge doesn't have such function\\n        }\\n        return (address(0), 0);\\n    }\\n\\n    function _deposit() internal {\\n        _depositToCurve(collateralToken.balanceOf(address(this)));\\n        _stakeAllLp();\\n    }\\n\\n    function _depositTo2PlainPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[2] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        IStableSwap2x(crvPool).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(_depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo2LendingPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[2] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: Using use_underlying = true to deposit underlying instead of IB token\\n        IStableSwap2xUnderlying(crvPool).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(\\n            _depositAmounts,\\n            lpAmountOutMin_,\\n            true\\n        );\\n    }\\n\\n    function _depositTo3PlainPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[3] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        IStableSwap3x(crvPool).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(_depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo3LendingPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[3] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: Using use_underlying = true to deposit underlying instead of IB token\\n        IStableSwap3xUnderlying(crvPool).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(\\n            _depositAmounts,\\n            lpAmountOutMin_,\\n            true\\n        );\\n    }\\n\\n    function _depositTo4PlainOrMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[4] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        IDeposit4x(depositZap).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(_depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo3FactoryMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[3] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: The function below won't return a reason when reverting due to slippage\\n        IDepositZap3x(depositZap).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(\\n            address(crvPool),\\n            _depositAmounts,\\n            lpAmountOutMin_\\n        );\\n    }\\n\\n    function _depositTo4FactoryMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[4] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: The function below won't return a reason when reverting due to slippage\\n        IDepositZap4x(depositZap).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(\\n            address(crvPool),\\n            _depositAmounts,\\n            lpAmountOutMin_\\n        );\\n    }\\n\\n    function _depositToCurve(uint256 coinAmountIn_) internal virtual {\\n        _depositToCurve(coinAmountIn_, false);\\n    }\\n\\n    function _depositToCurve(uint256 coinAmountIn_, bool useEth_) internal virtual {\\n        if (coinAmountIn_ == 0) {\\n            return;\\n        }\\n\\n        uint256 _lpAmountOutMin = _calculateAmountOutMin(address(collateralToken), address(crvLp), coinAmountIn_);\\n\\n        if (curvePoolType == PoolType.PLAIN_2_POOL) {\\n            return _depositTo2PlainPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n        if (curvePoolType == PoolType.LENDING_2_POOL) {\\n            return _depositTo2LendingPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n        if (curvePoolType == PoolType.PLAIN_3_POOL) {\\n            return _depositTo3PlainPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n        if (curvePoolType == PoolType.LENDING_3_POOL) {\\n            return _depositTo3LendingPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n        if (curvePoolType == PoolType.PLAIN_4_POOL) {\\n            return _depositTo4PlainOrMetaPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n        if (curvePoolType == PoolType.META_3_POOL) {\\n            return _depositTo3FactoryMetaPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n        if (curvePoolType == PoolType.META_4_POOL) {\\n            if (isFactoryPool) {\\n                return _depositTo4FactoryMetaPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n            }\\n            return _depositTo4PlainOrMetaPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n\\n        revert(\\\"deposit-to-curve-failed\\\");\\n    }\\n\\n    function _generateReport() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _strategyDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        int128 _i = SafeCast.toInt128(int256(collateralIdx));\\n        uint256 _lpHere = lpBalanceHere();\\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\\n        uint256 _collateralInCurve = _quoteLpToCoin(_totalLp, _i);\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = _collateralHere + _collateralInCurve;\\n\\n        if (_totalCollateral > _strategyDebt) {\\n            _profit = _totalCollateral - _strategyDebt;\\n        } else {\\n            _loss = _strategyDebt - _totalCollateral;\\n        }\\n\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_profitAndExcessDebt > _collateralHere) {\\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _collateralInCurve);\\n            if (_totalAmountToWithdraw > 0) {\\n                uint256 _lpToBurn = Math.min((_totalAmountToWithdraw * _totalLp) / _collateralInCurve, _totalLp);\\n\\n                if (_lpToBurn > 0) {\\n                    if (_lpToBurn > _lpHere) {\\n                        _unstakeLp(_lpToBurn - _lpHere);\\n                    }\\n\\n                    _withdrawFromCurve(_lpToBurn, _i);\\n\\n                    _collateralHere = collateralToken.balanceOf(address(this));\\n                }\\n            }\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n    }\\n\\n    function _getRewardTokens() internal view virtual returns (address[] memory _rewardTokens);\\n\\n    function _quoteLpToCoin(uint256 amountIn_, int128 toIdx_) private view returns (uint256 _amountOut) {\\n        if (amountIn_ == 0) {\\n            return 0;\\n        }\\n\\n        if (curvePoolType == PoolType.PLAIN_4_POOL || (curvePoolType == PoolType.META_4_POOL && !isFactoryPool)) {\\n            return IDeposit4x(depositZap).calc_withdraw_one_coin(amountIn_, toIdx_);\\n        }\\n        if (curvePoolType == PoolType.META_3_POOL || curvePoolType == PoolType.META_4_POOL) {\\n            return IDepositZap(depositZap).calc_withdraw_one_coin(address(crvLp), amountIn_, toIdx_);\\n        }\\n\\n        return IStableSwap(crvPool).calc_withdraw_one_coin(amountIn_, toIdx_);\\n    }\\n\\n    function _rebalance() internal virtual override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        (_profit, _loss, _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _deposit();\\n    }\\n\\n    // Requires that gauge has approval for lp token\\n    function _stakeAllLp() internal virtual {\\n        uint256 _balance = crvLp.balanceOf(address(this));\\n        if (_balance > 0) {\\n            crvGauge.deposit(_balance);\\n        }\\n    }\\n\\n    function _unstakeAllLp() internal virtual {\\n        _unstakeLp(crvGauge.balanceOf(address(this)));\\n    }\\n\\n    function _unstakeLp(uint256 amount_) internal virtual {\\n        if (amount_ > 0) {\\n            crvGauge.withdraw(amount_);\\n        }\\n    }\\n\\n    function _withdrawFromPlainPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\\n        IStableSwap(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_);\\n    }\\n\\n    function _withdrawFrom2LendingPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\\n        // Note: Using use_underlying = true to withdraw underlying instead of IB token\\n        IStableSwap2xUnderlying(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_, true);\\n    }\\n\\n    function _withdrawFrom3LendingPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\\n        // Note: Using use_underlying = true to withdraw underlying instead of IB token\\n        IStableSwap3xUnderlying(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_, true);\\n    }\\n\\n    function _withdrawFrom4PlainOrMetaPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\\n        IDeposit4x(depositZap).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_);\\n    }\\n\\n    function _withdrawFrom3FactoryMetaOr4FactoryMetaPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\\n        // Note: The function below won't return a reason when reverting due to slippage\\n        IDepositZap(depositZap).remove_liquidity_one_coin(address(crvLp), lpAmount_, i_, minAmountOut_);\\n    }\\n\\n    function _withdrawFromCurve(uint256 lpToBurn_, int128 coinIdx_) internal {\\n        if (lpToBurn_ == 0) {\\n            return;\\n        }\\n\\n        uint256 _minCoinAmountOut = _calculateAmountOutMin(address(crvLp), address(collateralToken), lpToBurn_);\\n\\n        if (curvePoolType == PoolType.PLAIN_2_POOL || curvePoolType == PoolType.PLAIN_3_POOL) {\\n            _withdrawFromPlainPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        } else if (curvePoolType == PoolType.LENDING_2_POOL) {\\n            _withdrawFrom2LendingPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        } else if (curvePoolType == PoolType.LENDING_3_POOL) {\\n            _withdrawFrom3LendingPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        } else if (curvePoolType == PoolType.PLAIN_4_POOL) {\\n            _withdrawFrom4PlainOrMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        } else if (curvePoolType == PoolType.META_3_POOL) {\\n            _withdrawFrom3FactoryMetaOr4FactoryMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        } else if (curvePoolType == PoolType.META_4_POOL) {\\n            if (isFactoryPool) {\\n                _withdrawFrom3FactoryMetaOr4FactoryMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n            } else {\\n                _withdrawFrom4PlainOrMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n            }\\n        } else {\\n            revert(\\\"withdraw-from-curve-failed\\\");\\n        }\\n    }\\n\\n    function _withdrawHere(uint256 coinAmountOut_) internal override {\\n        int128 _i = SafeCast.toInt128(int256(collateralIdx));\\n\\n        uint256 _lpHere = lpBalanceHere();\\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\\n        uint256 _lpToBurn = Math.min((coinAmountOut_ * _totalLp) / _quoteLpToCoin(_totalLp, _i), _totalLp);\\n\\n        if (_lpToBurn == 0) return;\\n\\n        if (_lpToBurn > _lpHere) {\\n            _unstakeLp(_lpToBurn - _lpHere);\\n        }\\n\\n        _withdrawFromCurve(_lpToBurn, _i);\\n    }\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n\\n    /**\\n     * @notice Rewards token in gauge can be updated any time. This method refresh list.\\n     * It is recommended to claimAndSwapRewards before calling this function.\\n     */\\n    function refetchRewardTokens() external virtual onlyGovernor {\\n        // Before updating the reward list, claim rewards and swap into collateral.\\n        _claimAndSwapRewards();\\n        rewardTokens = _getRewardTokens();\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function updateCrvSlippage(uint256 newCrvSlippage_) external onlyGovernor {\\n        require(newCrvSlippage_ < MAX_BPS, \\\"invalid-slippage-value\\\");\\n        emit CrvSlippageUpdated(crvSlippage, newCrvSlippage_);\\n        crvSlippage = newCrvSlippage_;\\n    }\\n\\n    function updateMasterOracle(IMasterOracle newMasterOracle_) external onlyGovernor {\\n        emit MasterOracleUpdated(masterOracle, newMasterOracle_);\\n        masterOracle = newMasterOracle_;\\n    }\\n}\\n\",\"keccak256\":\"0x1620c8acaa4b9856339c46855fb8a2598d163d42d7b25dbc85f82328aea29594\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/curve/CurveETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./Curve.sol\\\";\\nimport \\\"vesper-pools/contracts/interfaces/token/IToken.sol\\\";\\n\\n/// @title Deposit ETH to Curve Pool and earn interest.\\ncontract CurveETH is Curve {\\n    using SafeERC20 for IERC20;\\n\\n    TokenLike public immutable WETH;\\n\\n    constructor(\\n        address pool_,\\n        address crvPool_,\\n        CurveBase.PoolType curvePoolType_,\\n        address depositZap_,\\n        address crvToken_,\\n        uint256 crvSlippage_,\\n        address masterOracle_,\\n        address swapper_,\\n        uint256 collateralIdx_,\\n        string memory name_,\\n        TokenLike wethLike_\\n    )\\n        Curve(\\n            pool_,\\n            crvPool_,\\n            curvePoolType_,\\n            depositZap_,\\n            crvToken_,\\n            crvSlippage_,\\n            masterOracle_,\\n            swapper_,\\n            collateralIdx_,\\n            name_\\n        )\\n    {\\n        WETH = wethLike_;\\n    }\\n\\n    /**\\n     * @dev During reinvest we have WETH as collateral but Curve accepts ETH.\\n     * Withdraw ETH from WETH before adding liquidity to Curve pool.\\n     */\\n    function _depositToCurve(uint256 coinAmountIn_) internal override {\\n        if (coinAmountIn_ == 0) {\\n            return;\\n        }\\n\\n        WETH.withdraw(coinAmountIn_);\\n\\n        super._depositToCurve(coinAmountIn_, true);\\n    }\\n\\n    /**\\n     *  @dev Only receive ETH from either pool or WETH\\n     */\\n    receive() external payable {\\n        require(msg.sender == address(crvPool) || msg.sender == address(WETH), \\\"not-allowed-to-send-ether\\\");\\n        if (msg.sender == address(crvPool)) {\\n            WETH.deposit{value: address(this).balance}();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9aac37d3c31b1e2d2c8b313bf3dce9da644cacd3aab598a467cdcd36f44f79e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101e06040523480156200001257600080fd5b50604051620071b9380380620071b98339810160408190526200003591620013d5565b8a8a8a8a8a8a8a8a8a8a89898989898989898989898360006001600160a01b038316620000a95760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620001015760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f0000000000000000006044820152606401620000a0565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200015f57600080fd5b505afa15801562000174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019a9190620014c7565b6001600160a01b03908116608052600080546001600160a01b031916918316919091179055620001e1620001cb3390565b600362000d3060201b620023371790919060201c565b620002235760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401620000a0565b5050506001600160a01b038616620002725760405162461bcd60e51b815260206004820152601160248201527018dc9d8b5d1bdad95b8b5a5ccb5b9d5b1b607a1b6044820152606401620000a0565b6000806f22d53366457f9d5e68ec105046fc43836001600160a01b031663a262904b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620002bf57600080fd5b505afa158015620002d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002fa9190620014c7565b604051633795104960e01b81526001600160a01b038d8116600483015291925060009183169063379510499060240160206040518083038186803b1580156200034257600080fd5b505afa15801562000357573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200037d9190620014c7565b90506001600160a01b03811615620005c75760405163940494f160e01b81526001600160a01b038d8116600483015283169063940494f190602401604080518083038186803b158015620003d057600080fd5b505afa158015620003e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200040b9190620014ee565b602001518510620004545760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b6044820152606401620000a0565b60805160405163a77576ef60e01b81526001600160a01b038e811660048301529182169184169063a77576ef906024016101006040518083038186803b1580156200049e57600080fd5b505afa158015620004b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004d991906200158b565b8660088110620004ed57620004ed62001575565b60200201516001600160a01b031614620005405760405162461bcd60e51b81526020600482015260136024820152720c6ded8d8c2e8cae4c2d85adad2e6dac2e8c6d606b1b6044820152606401620000a0565b6040516356059ffb60e01b81526001600160a01b038d811660048301528316906356059ffb906024016101406040518083038186803b1580156200058357600080fd5b505afa15801562000598573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005be91906200161c565b51925062000b39565b60405163124fd3dd60e21b8152600360048201526000906f22d53366457f9d5e68ec105046fc43839063493f4f749060240160206040518083038186803b1580156200061257600080fd5b505afa15801562000627573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200064d9190620014c7565b60405163e4d332a960e01b81526001600160a01b038f811660048301529192509082169063e4d332a99060240160206040518083038186803b1580156200069357600080fd5b505afa158015620006a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006ce9190620016a2565b156200088b5760405163eb73f37d60e01b81526001600160a01b038e8116600483015282169063eb73f37d90602401604080518083038186803b1580156200071557600080fd5b505afa1580156200072a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007509190620014ee565b602001518610620007995760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b6044820152606401620000a0565b60805160405163a77576ef60e01b81526001600160a01b038f811660048301529182169183169063a77576ef906024016101006040518083038186803b158015620007e357600080fd5b505afa158015620007f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200081e91906200158b565b876008811062000832576200083262001575565b60200201516001600160a01b031614620008855760405162461bcd60e51b81526020600482015260136024820152720c6ded8d8c2e8cae4c2d85adad2e6dac2e8c6d606b1b6044820152606401620000a0565b62000a71565b60405163940494f160e01b81526001600160a01b038e8116600483015282169063940494f19060240160206040518083038186803b158015620008cd57600080fd5b505afa158015620008e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009089190620016c6565b86106200094d5760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b6044820152606401620000a0565b604051639ac90d3d60e01b81526001600160a01b038e8116600483015260009190831690639ac90d3d9060240160806040518083038186803b1580156200099357600080fd5b505afa158015620009a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009ce9190620016e0565b8760048110620009e257620009e262001575565b602002015190506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141562000a1457506080515b6080516001600160a01b0316816001600160a01b03161462000a6f5760405162461bcd60e51b81526020600482015260136024820152720c6ded8d8c2e8cae4c2d85adad2e6dac2e8c6d606b1b6044820152606401620000a0565b505b8c9150737bc5728bc2b59b45a58d9a576e2ffc5f0505b35e6001600160a01b038316141562000ab75773cb8883d1d8c560003489df43b30612aabb8013bb935062000b37565b60405163daf297b960e01b81526001600160a01b038e8116600483015282169063daf297b99060240160206040518083038186803b15801562000af957600080fd5b505afa15801562000b0e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b349190620014c7565b93505b505b6001600160a01b038c1662000b805760405162461bcd60e51b815260206004820152600c60248201526b1c1bdbdb0b5a5ccb5b9d5b1b60a21b6044820152606401620000a0565b6001600160a01b03811662000bc55760405162461bcd60e51b815260206004820152600a6024820152691b1c0b5a5ccb5b9d5b1b60b21b6044820152606401620000a0565b6001600160a01b03831662000c0d5760405162461bcd60e51b815260206004820152600d60248201526c19d85d59d94b5a5ccb5b9d5b1b609a1b6044820152606401620000a0565b6001600160a01b03808a1660c0528c81166101005281811660e0819052908416610120526006899055600080546001600160a01b03191690911790556101408590528a600781111562000c645762000c6462001765565b61018081600781111562000c7c5762000c7c62001765565b9052506001600160a01b038c8116828216146101a0528a811661016052600780546001600160a01b031916918916919091179055835162000cc5906005906020870190620011c2565b505050505050505050505050505062000ce362000d5060201b60201c565b805162000cf9916008916020909101906200124d565b5050505050505050505050806001600160a01b03166101c0816001600160a01b031681525050505050505050505050505062001807565b600062000d47836001600160a01b03841662001170565b90505b92915050565b6040805160018082528183019092526060916020808301908036833701905050905060c0518160008151811062000d8b5762000d8b62001575565b6001600160a01b039283166020918202929092010152610120511662000dae5790565b610120516001600160a01b03166316fa50b16040518163ffffffff1660e01b815260040160206040518083038186803b15801562000deb57600080fd5b505afa92505050801562000e1e575060408051601f3d908101601f1916820190925262000e1b91810190620014c7565b60015b62000e295762000ecd565b60025b60405190808252806020026020018201604052801562000e56578160200160208202803683370190505b50915060c0518260008151811062000e725762000e7262001575565b60200260200101906001600160a01b031690816001600160a01b031681525050808260018151811062000ea95762000ea962001575565b60200260200101906001600160a01b031690816001600160a01b0316815250505090565b610120516040516354c49fe960e01b8152600060048201526001600160a01b03909116906354c49fe99060240160206040518083038186803b15801562000f1357600080fd5b505afa92505050801562000f46575060408051601f3d908101601f1916820190925262000f4391810190620014c7565b60015b62000f4e5790565b6001600160a01b03811662000f61575090565b610120516001600160a01b031663963c94b96040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f9e57600080fd5b505afa92505050801562000fd1575060408051601f3d908101601f1916820190925262000fce91810190620016c6565b60015b62000fde57600262000e2c565b62000feb81600162001791565b6001600160401b03811115620010055762001005620012f7565b6040519080825280602002602001820160405280156200102f578160200160208202803683370190505b509250818360008151811062001049576200104962001575565b6001600160a01b039092166020928302919091019091015260015b818110156200112e57610120516040516354c49fe960e01b8152600481018390526001600160a01b03909116906354c49fe99060240160206040518083038186803b158015620010b357600080fd5b505afa158015620010c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010ee9190620014c7565b84828151811062001103576200110362001575565b6001600160a01b03909216602092830291909101909101526200112681620017ac565b905062001064565b5060c05183828151811062001147576200114762001575565b60200260200101906001600160a01b031690816001600160a01b031681525050505090565b5090565b6000818152600183016020526040812054620011b95750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000d4a565b50600062000d4a565b828054620011d090620017ca565b90600052602060002090601f016020900481019282620011f457600085556200123f565b82601f106200120f57805160ff19168380011785556200123f565b828001600101855582156200123f579182015b828111156200123f57825182559160200191906001019062001222565b506200116c929150620012a5565b8280548282559060005260206000209081019282156200123f579160200282015b828111156200123f57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200126e565b5b808211156200116c5760008155600101620012a6565b6001600160a01b0381168114620012d257600080fd5b50565b8051620012e281620012bc565b919050565b805160088110620012e257600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620013385762001338620012f7565b604052919050565b600082601f8301126200135257600080fd5b81516001600160401b038111156200136e576200136e620012f7565b602062001384601f8301601f191682016200130d565b82815285828487010111156200139957600080fd5b60005b83811015620013b95785810183015182820184015282016200139c565b83811115620013cb5760008385840101525b5095945050505050565b60008060008060008060008060008060006101608c8e031215620013f857600080fd5b8b516200140581620012bc565b60208d0151909b506200141881620012bc565b99506200142860408d01620012e7565b98506200143860608d01620012d5565b97506200144860808d01620012d5565b965060a08c015195506200145f60c08d01620012d5565b94506200146f60e08d01620012d5565b6101008d01516101208e015191955093506001600160401b038111156200149557600080fd5b620014a38e828f0162001340565b925050620014b56101408d01620012d5565b90509295989b509295989b9093969950565b600060208284031215620014da57600080fd5b8151620014e781620012bc565b9392505050565b6000604082840312156200150157600080fd5b82601f8301126200151157600080fd5b604080519081016001600160401b0381118282101715620015365762001536620012f7565b80604052508060408401858111156200154e57600080fd5b845b818110156200156a57805183526020928301920162001550565b509195945050505050565b634e487b7160e01b600052603260045260246000fd5b6000610100808385031215620015a057600080fd5b83601f840112620015b057600080fd5b6040518181016001600160401b0381118282101715620015d457620015d4620012f7565b604052908301908085831115620015ea57600080fd5b845b83811015620016115780516200160281620012bc565b825260209182019101620015ec565b509095945050505050565b60006101408083850312156200163157600080fd5b83601f8401126200164157600080fd5b6040518181016001600160401b0381118282101715620016655762001665620012f7565b6040529083019080858311156200167b57600080fd5b845b83811015620016115780516200169381620012bc565b8252602091820191016200167d565b600060208284031215620016b557600080fd5b81518015158114620014e757600080fd5b600060208284031215620016d957600080fd5b5051919050565b600060808284031215620016f357600080fd5b82601f8301126200170357600080fd5b604051608081016001600160401b0381118282101715620017285762001728620012f7565b6040528060808401858111156200173e57600080fd5b845b818110156200156a5780516200175681620012bc565b83526020928301920162001740565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115620017a757620017a76200177b565b500190565b6000600019821415620017c357620017c36200177b565b5060010190565b600181811c90821680620017df57607f821691505b602082108114156200180157634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516155d562001be460003960008181610297015281816103390152818161075401526144c701526000818161314701528181613bbd0152614984015260008181610405015281816130d20152818161310d0152818161321b01528181613256015281816139f001528181613a2b01528181613a7101528181613ab601528181613afb01528181613b4001528181613b85015281816147ae015281816147f3015281816148380152818161487d015281816148c201528181614907015261494c0152600081816128120152818161286e015281816128c20152818161318d015281816132dd015281816143ec0152818161447a01528181614d3101528181614dcd0152614e8b0152600081816105b201528181611f3d0152818161261001528181613dde01528181614a4501528181614b1901528181614bb801528181614c5401528181614cf301528181614d8f0152614e4d01526000818161098b015281816117f6015281816127eb015281816129550152818161297e01528181612adf01528181612b7401528181612ca2015281816136c10152818161371e015281816139330152818161418601526145f301526000818161026501528181610311015281816107bc015281816127100152818161332c015281816142f60152818161438e01528181614a8301528181614b5701528181614bf601528181614c9201528181614e020152614ec001526000818161068801528181611339015281816114c501528181611e9c015281816127c9015281816128a001528181612f59015281816132a4015281816139a40152818161443a0152818161455001526147830152600081816106bc0152818161290b01528181612a3f0152612d6101526000818161049d01528181610baf01528181610e9b01528181610fab015281816110c7015281816111a10152818161122b015281816113b0015281816116520152818161182e015281816118cb01528181611af701528181611cc001528181612df401528181613c6e01528181613c9b0152613d3b015260008181610788015281816108ad01528181610a5901528181610d3a01528181610de20152818161100a015281816110a501528181611115015281816111d40152818161137401528181611a5b01528181611f7d01528181611fdb0152818161206b0152818161223e0152818161227e015281816125bc015281816126ee015281816127420152818161284c01528181612e6f015281816139c501528181613c4c01528181613e3801528181613f990152818161407d015261476201526155d56000f3fe6080604052600436106102555760003560e01c8063a3f4df7e11610139578063d3033c39116100b6578063eaada3821161007a578063eaada382146108fb578063ec78e8321461091b578063ee330ee31461093b578063fc0c546a1461095b578063fd57a4df14610979578063ffa1ad74146109ad57600080fd5b8063d3033c3914610868578063d572fd7f14610888578063d8dfeb451461089e578063de603fdc146108d1578063e5328e06146108e657600080fd5b8063c415b95c116100fd578063c415b95c146107de578063c4f59f9b146107fe578063c965fa8a14610813578063ce5494bb14610828578063d2c35ce81461084857600080fd5b8063a3f4df7e14610700578063abc9b45e14610722578063ad5c464814610742578063b2016bd414610776578063b20fdc0d146107aa57600080fd5b80634032b72b116101d2578063795dae6611610196578063795dae66146106115780637bb7bed1146106265780637d7c2a1c146106465780637f44579b14610676578063945c9142146106aa578063951dc22c146106de57600080fd5b80634032b72b14610550578063440d72481461057057806348cd2ddd146105a057806374db9ad4146105d45780637752e194146105fc57600080fd5b806316f0115b1161021957806316f0115b1461048b5780631848effa146104cc5780632b3297f9146104f05780632e1a7d4d146105105780633ac9fc111461053057600080fd5b806301681a62146103b357806304f4efc5146103d357806306beb80a146103f35780631026013a1461043d57806314ae9f2e1461046b57600080fd5b366103ae57336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806102b95750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b6103065760405162461bcd60e51b81526020600482015260196024820152783737ba16b0b63637bbb2b216ba3796b9b2b73216b2ba3432b960391b60448201526064015b60405180910390fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103ac577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561039257600080fd5b505af11580156103a6573d6000803e3d6000fd5b50505050505b005b600080fd5b3480156103bf57600080fd5b506103ac6103ce366004614fe4565b6109de565b3480156103df57600080fd5b506103ac6103ee366004615001565b610bad565b3480156103ff57600080fd5b506104277f000000000000000000000000000000000000000000000000000000000000000081565b6040516104349190615030565b60405180910390f35b34801561044957600080fd5b5061045d610458366004615001565b610cf9565b604051908152602001610434565b34801561047757600080fd5b506103ac610486366004614fe4565b610e99565b34801561049757600080fd5b506104bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516104349190615058565b3480156104d857600080fd5b506104bf6f22d53366457f9d5e68ec105046fc438381565b3480156104fc57600080fd5b506002546104bf906001600160a01b031681565b34801561051c57600080fd5b506103ac61052b366004615001565b610fa8565b34801561053c57600080fd5b506103ac61054b366004615001565b6111fb565b34801561055c57600080fd5b506103ac61056b366004614fe4565b611229565b34801561057c57600080fd5b5061059061058b366004614fe4565b611335565b6040519015158152602001610434565b3480156105ac57600080fd5b5061045d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105e057600080fd5b506104bf73d061d61a4d941c39e5453435b6345dc261c2fce081565b34801561060857600080fd5b506103ac6113ae565b34801561061d57600080fd5b5061045d6114ab565b34801561063257600080fd5b506104bf610641366004615001565b61154f565b34801561065257600080fd5b5061065b611579565b60408051938452602084019290925290820152606001610434565b34801561068257600080fd5b506104bf7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106b657600080fd5b506104bf7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106ea57600080fd5b506106f36115b6565b604051610434919061506c565b34801561070c57600080fd5b506107156115c2565b60405161043491906150e5565b34801561072e57600080fd5b506103ac61073d366004614fe4565b611650565b34801561074e57600080fd5b506104bf7f000000000000000000000000000000000000000000000000000000000000000081565b34801561078257600080fd5b506104bf7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107b657600080fd5b506104bf7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107ea57600080fd5b506001546104bf906001600160a01b031681565b34801561080a57600080fd5b506106f361177a565b34801561081f57600080fd5b5061045d6117dc565b34801561083457600080fd5b506103ac610843366004614fe4565b61182b565b34801561085457600080fd5b506103ac610863366004614fe4565b611af5565b34801561087457600080fd5b506103ac610883366004614fe4565b611cbe565b34801561089457600080fd5b5061045d60065481565b3480156108aa57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006104bf565b3480156108dd57600080fd5b5061045d611e7b565b3480156108f257600080fd5b5061045d611f2b565b34801561090757600080fd5b506007546104bf906001600160a01b031681565b34801561092757600080fd5b506000546104bf906001600160a01b031681565b34801561094757600080fd5b5061045d610956366004615118565b611fb2565b34801561096757600080fd5b506000546001600160a01b03166104bf565b34801561098557600080fd5b506104bf7f000000000000000000000000000000000000000000000000000000000000000081565b3480156109b957600080fd5b50610715604051806040016040528060058152602001640352e312e360dc1b81525081565b6109eb335b600390612353565b610a075760405162461bcd60e51b81526004016102fd90615144565b6001546001600160a01b0316610a575760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016102fd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415610aa95760405162461bcd60e51b81526004016102fd90615174565b610ab281611335565b15610acf5760405162461bcd60e51b81526004016102fd906151ab565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610b0d57600154610b0a906001600160a01b031647612375565b50565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610b3c903090600401615058565b60206040518083038186803b158015610b5457600080fd5b505afa158015610b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8c91906151d9565b600154909150610ba9906001600160a01b03848116911683612493565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0657600080fd5b505afa158015610c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3e91906151f2565b6001600160a01b0316336001600160a01b031614610c6e5760405162461bcd60e51b81526004016102fd9061520f565b6127108110610cb85760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b60448201526064016102fd565b60065460408051918252602082018390527f43a94473b3422f31e660358900c02b907f22142a3224beace1f2b9f1fa079a9e910160405180910390a1600655565b6000610d04336109e3565b610d205760405162461bcd60e51b81526004016102fd90615144565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610d6f903090600401615058565b60206040518083038186803b158015610d8757600080fd5b505afa158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf91906151d9565b9050610dc96124f6565b6040516370a0823160e01b815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610e17903090600401615058565b60206040518083038186803b158015610e2f57600080fd5b505afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6791906151d9565b610e71919061525c565b915082821015610e935760405162461bcd60e51b81526004016102fd90615273565b50919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ef257600080fd5b505afa158015610f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2a91906151f2565b6001600160a01b0316336001600160a01b031614610f5a5760405162461bcd60e51b81526004016102fd9061520f565b610f656003826125f4565b610b0a5760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016102fd565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ff05760405162461bcd60e51b81526004016102fd906152a1565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061103f903090600401615058565b60206040518083038186803b15801561105757600080fd5b505afa15801561106b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108f91906151d9565b90508181106110ec57610ba96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612493565b6110fe6110f9828461525c565b612609565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061114a903090600401615058565b60206040518083038186803b15801561116257600080fd5b505afa158015611176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119a91906151d9565b9050610ba97f00000000000000000000000000000000000000000000000000000000000000006111ca84846126ba565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612493565b611204336109e3565b6112205760405162461bcd60e51b81526004016102fd90615144565b610b0a816126d0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba91906151f2565b6001600160a01b0316336001600160a01b0316146112ea5760405162461bcd60e51b81526004016102fd9061520f565b6112f5600382612337565b610b0a5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016102fd565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614806113a857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561140757600080fd5b505afa15801561141b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143f91906151f2565b6001600160a01b0316336001600160a01b03161461146f5760405162461bcd60e51b81526004016102fd9061520f565b6114776124f6565b61147f6128e7565b805161149391600891602090910190614eff565b5061149e60006126d0565b6114a96000196126d0565b565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906114fa903090600401615058565b60206040518083038186803b15801561151257600080fd5b505afa158015611526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a91906151d9565b905090565b6008818154811061155f57600080fd5b6000918252602090912001546001600160a01b0316905081565b60008080611586336109e3565b6115a25760405162461bcd60e51b81526004016102fd90615144565b6115aa612dbb565b9250925092505b909192565b606061154a6003612e60565b600580546115cf906152d4565b80601f01602080910402602001604051908101604052809291908181526020018280546115fb906152d4565b80156116485780601f1061161d57610100808354040283529160200191611648565b820191906000526020600020905b81548152906001019060200180831161162b57829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a957600080fd5b505afa1580156116bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e191906151f2565b6001600160a01b0316336001600160a01b0316146117115760405162461bcd60e51b81526004016102fd9061520f565b6007546040517fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c91611750916001600160a01b03909116908490615309565b60405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b606060088054806020026020016040519081016040528092919081815260200182805480156117d257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117b4575b5050505050905090565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906114fa903090600401615058565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146118735760405162461bcd60e51b81526004016102fd906152a1565b6001600160a01b0381166118c95760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016102fd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192c57600080fd5b505afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196491906151f2565b6001600160a01b0316146119b35760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016102fd565b6119bc81612e6d565b6000546040516370a0823160e01b8152611a559183916001600160a01b03909116906370a08231906119f2903090600401615058565b60206040518083038186803b158015611a0a57600080fd5b505afa158015611a1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4291906151d9565b6000546001600160a01b03169190612493565b610b0a817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611aa59190615058565b60206040518083038186803b158015611abd57600080fd5b505afa158015611ad1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ca91906151d9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4e57600080fd5b505afa158015611b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8691906151f2565b6001600160a01b0316336001600160a01b031614611bb65760405162461bcd60e51b81526004016102fd9061520f565b6001600160a01b038116611c0c5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016102fd565b6001546001600160a01b0382811691161415611c625760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016102fd565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1757600080fd5b505afa158015611d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4f91906151f2565b6001600160a01b0316336001600160a01b031614611d7f5760405162461bcd60e51b81526004016102fd9061520f565b6001600160a01b038116611dcf5760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b60448201526064016102fd565b6002546001600160a01b0382811691161415611e1f5760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b60448201526064016102fd565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000611e856117dc565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611ed1903090600401615058565b60206040518083038186803b158015611ee957600080fd5b505afa158015611efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2191906151d9565b61154a9190615323565b6000611f66611f38611e7b565b611f617f0000000000000000000000000000000000000000000000000000000000000000613046565b6130bf565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611ed1903090600401615058565b6000611fbd336109e3565b611fd95760405162461bcd60e51b81526004016102fd90615144565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561202b5760405162461bcd60e51b81526004016102fd90615174565b61203483611335565b156120515760405162461bcd60e51b81526004016102fd906151ab565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906120a0903090600401615058565b60206040518083038186803b1580156120b857600080fd5b505afa1580156120cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f091906151d9565b90506000846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016121209190615058565b60206040518083038186803b15801561213857600080fd5b505afa15801561214c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217091906151d9565b9050801561226557600254604051636eb1769f60e11b81526001600160a01b038088169263dd62ed3e926121aa9230921690600401615309565b60206040518083038186803b1580156121c257600080fd5b505afa1580156121d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fa91906151d9565b8111156122385760025461221c906001600160a01b03878116911660006133ae565b600254612238906001600160a01b0387811691166000196133ae565b612263857f0000000000000000000000000000000000000000000000000000000000000000836134d1565b505b6040516370a0823160e01b815282906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906122b3903090600401615058565b60206040518083038186803b1580156122cb57600080fd5b505afa1580156122df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230391906151d9565b61230d919061525c565b92508383101561232f5760405162461bcd60e51b81526004016102fd90615273565b505092915050565b600061234c836001600160a01b038416613565565b9392505050565b6001600160a01b0381166000908152600183016020526040812054151561234c565b804710156123c55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102fd565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612412576040519150601f19603f3d011682016040523d82523d6000602084013e612417565b606091505b505090508061248e5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016102fd565b505050565b6040516001600160a01b03831660248201526044810182905261248e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526135b4565b6124fe613686565b505060085460005b81811015610ba9576000600882815481106125235761252361533b565b60009182526020822001546040516370a0823160e01b81526001600160a01b03909116925082906370a082319061255e903090600401615058565b60206040518083038186803b15801561257657600080fd5b505afa15801561258a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ae91906151d9565b905080156125e1576125e1827f000000000000000000000000000000000000000000000000000000000000000083613792565b5050806125ed90615351565b9050612506565b600061234c836001600160a01b038416613824565b60006126347f0000000000000000000000000000000000000000000000000000000000000000613046565b905060006126406114ab565b9050600061264c6117dc565b6126569083615323565b9050600061268161266783866130bf565b612671848861536c565b61267b919061538b565b836126ba565b90508061268f575050505050565b828111156126a9576126a96126a4848361525c565b613917565b6126b38185613994565b5050505050565b60008183106126c9578161234c565b5090919050565b6126d981613c3f565b6002546001600160a01b0390811690612735907f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846133ae565b6127696001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682846133ae565b60085460005b818110156127bb576127ab83856008848154811061278f5761278f61533b565b6000918252602090912001546001600160a01b031691906133ae565b6127b481615351565b905061276f565b506128106001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000856133ae565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161561248e576128936001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000856133ae565b61248e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000856133ae565b604080516001808252818301909252606091602080830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061293d5761293d61533b565b6001600160a01b0392831660209182029290920101527f00000000000000000000000000000000000000000000000000000000000000001661297c5790565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166316fa50b16040518163ffffffff1660e01b815260040160206040518083038186803b1580156129d557600080fd5b505afa925050508015612a05575060408051601f3d908101601f19168201909252612a02918101906151f2565b60015b612a0e57612ac9565b60025b604051908082528060200260200182016040528015612a3a578160200160208202803683370190505b5091507f000000000000000000000000000000000000000000000000000000000000000082600081518110612a7157612a7161533b565b60200260200101906001600160a01b031690816001600160a01b0316815250508082600181518110612aa557612aa561533b565b60200260200101906001600160a01b031690816001600160a01b0316815250505090565b6040516354c49fe960e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906354c49fe99060240160206040518083038186803b158015612b2957600080fd5b505afa925050508015612b59575060408051601f3d908101601f19168201909252612b56918101906151f2565b60015b612b605790565b6001600160a01b038116612b72575090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663963c94b96040518163ffffffff1660e01b815260040160206040518083038186803b158015612bcb57600080fd5b505afa925050508015612bfb575060408051601f3d908101601f19168201909252612bf8918101906151d9565b60015b612c06576002612a11565b612c11816001615323565b67ffffffffffffffff811115612c2957612c296153ad565b604051908082528060200260200182016040528015612c52578160200160208202803683370190505b5092508183600081518110612c6957612c6961533b565b6001600160a01b039092166020928302919091019091015260015b81811015612d5e576040516354c49fe960e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906354c49fe99060240160206040518083038186803b158015612cec57600080fd5b505afa158015612d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2491906151f2565b848281518110612d3657612d3661533b565b6001600160a01b0390921660209283029190910190910152612d5781615351565b9050612c84565b507f0000000000000000000000000000000000000000000000000000000000000000838281518110612d9257612d9261533b565b60200260200101906001600160a01b031690816001600160a01b031681525050505090565b5090565b6000806000612dc8613c93565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b158015612e4057600080fd5b505af1158015612e54573d6000803e3d6000fd5b505050506115b1614062565b6060600061234c8361410f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015612ed057600080fd5b505afa158015612ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0891906151f2565b6001600160a01b031614612f575760405162461bcd60e51b81526020600482015260166024820152753bb937b73396b1b7b63630ba32b930b616ba37b5b2b760511b60448201526064016102fd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612fba57600080fd5b505afa158015612fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff291906151f2565b6001600160a01b03161461303e5760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b60448201526064016102fd565b610b0a61416b565b600060016001607f1b0319821215801561306357506001607f1b82125b612db75760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b60648201526084016102fd565b6000826130ce575060006113a8565b60027f000000000000000000000000000000000000000000000000000000000000000060078111156131025761310261501a565b1480613168575060077f0000000000000000000000000000000000000000000000000000000000000000600781111561313d5761313d61501a565b14801561316857507f0000000000000000000000000000000000000000000000000000000000000000155b156132175760405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d7906044015b60206040518083038186803b1580156131d857600080fd5b505afa1580156131ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321091906151d9565b90506113a8565b60067f0000000000000000000000000000000000000000000000000000000000000000600781111561324b5761324b61501a565b1480613288575060077f000000000000000000000000000000000000000000000000000000000000000060078111156132865761328661501a565b145b1561330c576040516341b028f360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600f84900b60448301527f000000000000000000000000000000000000000000000000000000000000000016906341b028f3906064016131c0565b60405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d79060440160206040518083038186803b15801561337657600080fd5b505afa15801561338a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234c91906151d9565b8015806134365750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906133e49030908690600401615309565b60206040518083038186803b1580156133fc57600080fd5b505afa158015613410573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343491906151d9565b155b6134a15760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016102fd565b6040516001600160a01b03831660248201526044810182905261248e90849063095ea7b360e01b906064016124bf565b600254604051636ccb2b0160e01b81526000916001600160a01b031690636ccb2b019061350b9087908790879060019030906004016153c3565b602060405180830381600087803b15801561352557600080fd5b505af1158015613539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061355d91906151d9565b949350505050565b60008181526001830160205260408120546135ac575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556113a8565b5060006113a8565b6000613609826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661420b9092919063ffffffff16565b80519091501561248e578080602001905181019061362791906153f3565b61248e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102fd565b600080466001141561371c576040516335313c2160e11b815273d061d61a4d941c39e5453435b6345dc261c2fce090636a627842906136e9907f000000000000000000000000000000000000000000000000000000000000000090600401615058565b600060405180830381600087803b15801561370357600080fd5b505af1158015613717573d6000803e3d6000fd5b505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561377757600080fd5b505af1925050508015613788575060015b5050600091829150565b600254604051636ccb2b0160e01b81526001600160a01b0390911690636ccb2b01906137cb9086908690869060019030906004016153c3565b602060405180830381600087803b1580156137e557600080fd5b505af1925050508015613815575060408051601f3d908101601f19168201909252613812918101906151d9565b60015b61381e57505050565b50505050565b6000818152600183016020526040812054801561390d57600061384860018361525c565b855490915060009061385c9060019061525c565b90508181146138c157600086600001828154811061387c5761387c61533b565b906000526020600020015490508087600001848154811061389f5761389f61533b565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806138d2576138d2615415565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506113a8565b60009150506113a8565b8015610b0a57604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015b600060405180830381600087803b15801561398057600080fd5b505af11580156126b3573d6000803e3d6000fd5b8161399d575050565b60006139ea7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008561421a565b905060007f00000000000000000000000000000000000000000000000000000000000000006007811115613a2057613a2061501a565b1480613a5d575060017f00000000000000000000000000000000000000000000000000000000000000006007811115613a5b57613a5b61501a565b145b15613a6d5761248e8382846142cf565b60037f00000000000000000000000000000000000000000000000000000000000000006007811115613aa157613aa161501a565b1415613ab25761248e838284614360565b60047f00000000000000000000000000000000000000000000000000000000000000006007811115613ae657613ae661501a565b1415613af75761248e838284614360565b60027f00000000000000000000000000000000000000000000000000000000000000006007811115613b2b57613b2b61501a565b1415613b3c5761248e8382846143c5565b60067f00000000000000000000000000000000000000000000000000000000000000006007811115613b7057613b7061501a565b1415613b815761248e838284614423565b60077f00000000000000000000000000000000000000000000000000000000000000006007811115613bb557613bb561501a565b1415613bf7577f000000000000000000000000000000000000000000000000000000000000000015613bec5761248e838284614423565b61248e8382846143c5565b60405162461bcd60e51b815260206004820152601a60248201527f77697468647261772d66726f6d2d63757276652d6661696c656400000000000060448201526064016102fd565b610b0a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836133ae565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401613ce59190615058565b60206040518083038186803b158015613cfd57600080fd5b505afa158015613d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d3591906151d9565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401613d859190615058565b60206040518083038186803b158015613d9d57600080fd5b505afa158015613db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dd591906151d9565b90506000613e027f0000000000000000000000000000000000000000000000000000000000000000613046565b90506000613e0e6114ab565b90506000613e1a6117dc565b613e249083615323565b90506000613e3282856130bf565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613e829190615058565b60206040518083038186803b158015613e9a57600080fd5b505afa158015613eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ed291906151d9565b90506000613ee08383615323565b905086811115613efb57613ef4878261525c565b9a50613f08565b613f05818861525c565b99505b6000613f14898d615323565b905082811115614025576000613f33613f2d858461525c565b866126ba565b90508015614023576000613f5b86613f4b898561536c565b613f55919061538b565b886126ba565b905080156140215787811115613f7857613f786126a4898361525c565b613f82818a613994565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613fce903090600401615058565b60206040518083038186803b158015613fe657600080fd5b505afa158015613ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061401e91906151d9565b94505b505b505b61402f838a6126ba565b995089831161403f576000614052565b61405261404c8b8561525c565b8d6126ba565b9b50505050505050505050909192565b6040516370a0823160e01b8152614107906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906140b2903090600401615058565b60206040518083038186803b1580156140ca57600080fd5b505afa1580156140de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061410291906151d9565b6144a9565b6114a9614536565b60608160000180548060200260200160405190810160405280929190818152602001828054801561415f57602002820191906000526020600020905b81548152602001906001019080831161414b575b50505050509050919050565b6040516370a0823160e01b81526114a9906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906141bb903090600401615058565b60206040518083038186803b1580156141d357600080fd5b505afa1580156141e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a491906151d9565b606061355d848460008561462a565b600061271060065461271061422f919061525c565b600754604051632d9198e160e21b81526001600160a01b0388811660048301528781166024830152604482018790529091169063b64663849060640160206040518083038186803b15801561428357600080fd5b505afa158015614297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142bb91906151d9565b6142c5919061536c565b61355d919061538b565b604051630d2680e960e11b815260048101849052600f82900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d2906064015b600060405180830381600087803b15801561434357600080fd5b505af1158015614357573d6000803e3d6000fd5b50505050505050565b60405163517a55a360e01b815260048101849052600f82900b602482015260448101839052600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063517a55a390608401614329565b604051630d2680e960e11b815260048101849052600f82900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d290606401614329565b6040516314f6943160e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600f83900b6044830152606482018490527f000000000000000000000000000000000000000000000000000000000000000016906329ed286290608401614329565b806144b15750565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561451357600080fd5b505af1158015614527573d6000803e3d6000fd5b50505050610b0a816001614752565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190614585903090600401615058565b60206040518083038186803b15801561459d57600080fd5b505afa1580156145b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d591906151d9565b90508015610b0a5760405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401613966565b60608247101561468b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102fd565b843b6146d95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102fd565b600080866001600160a01b031685876040516146f5919061542b565b60006040518083038185875af1925050503d8060008114614732576040519150601f19603f3d011682016040523d82523d6000602084013e614737565b606091505b5091509150614747828286614a00565b979650505050505050565b8161475b575050565b60006147a87f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008561421a565b905060007f000000000000000000000000000000000000000000000000000000000000000060078111156147de576147de61501a565b14156147ef5761248e838284614a39565b60037f000000000000000000000000000000000000000000000000000000000000000060078111156148235761482361501a565b14156148345761248e838284614b0d565b60017f000000000000000000000000000000000000000000000000000000000000000060078111156148685761486861501a565b14156148795761248e838284614bac565b60047f000000000000000000000000000000000000000000000000000000000000000060078111156148ad576148ad61501a565b14156148be5761248e838284614c48565b60027f000000000000000000000000000000000000000000000000000000000000000060078111156148f2576148f261501a565b14156149035761248e838284614ce7565b60067f000000000000000000000000000000000000000000000000000000000000000060078111156149375761493761501a565b14156149485761248e838284614d83565b60077f0000000000000000000000000000000000000000000000000000000000000000600781111561497c5761497c61501a565b14156149be577f0000000000000000000000000000000000000000000000000000000000000000156149b35761248e838284614e41565b61248e838284614ce7565b60405162461bcd60e51b815260206004820152601760248201527619195c1bdcda5d0b5d1bcb58dd5c9d994b59985a5b1959604a1b60448201526064016102fd565b60608315614a0f57508161234c565b825115614a1f5782518084602001fd5b8160405162461bcd60e51b81526004016102fd91906150e5565b614a41614f60565b83817f000000000000000000000000000000000000000000000000000000000000000060028110614a7457614a7461533b565b60200201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016630b4c7e4d83614ab4576000614ab6565b855b83866040518463ffffffff1660e01b8152600401614ad592919061546a565b6000604051808303818588803b158015614aee57600080fd5b505af1158015614b02573d6000803e3d6000fd5b505050505050505050565b614b15614f60565b83817f000000000000000000000000000000000000000000000000000000000000000060028110614b4857614b4861533b565b60200201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ee22be2383614b88576000614b8a565b855b838660016040518563ffffffff1660e01b8152600401614ad593929190615485565b614bb4614f7e565b83817f000000000000000000000000000000000000000000000000000000000000000060038110614be757614be761533b565b60200201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016634515cef383614c27576000614c29565b855b83866040518463ffffffff1660e01b8152600401614ad59291906154cc565b614c50614f7e565b83817f000000000000000000000000000000000000000000000000000000000000000060038110614c8357614c8361533b565b60200201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016632b6e993a83614cc3576000614cc5565b855b838660016040518563ffffffff1660e01b8152600401614ad5939291906154e7565b614cef614f9c565b83817f000000000000000000000000000000000000000000000000000000000000000060048110614d2257614d2261533b565b60200201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663029b2f3483614d62576000614d64565b855b83866040518463ffffffff1660e01b8152600401614ad592919061552e565b614d8b614f7e565b83817f000000000000000000000000000000000000000000000000000000000000000060038110614dbe57614dbe61533b565b60200201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a318517983614dfe576000614e00565b855b7f000000000000000000000000000000000000000000000000000000000000000084876040518563ffffffff1660e01b8152600401614ad593929190615549565b614e49614f9c565b83817f000000000000000000000000000000000000000000000000000000000000000060048110614e7c57614e7c61533b565b60200201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663384e03db83614ebc576000614ebe565b855b7f000000000000000000000000000000000000000000000000000000000000000084876040518563ffffffff1660e01b8152600401614ad593929190615574565b828054828255906000526020600020908101928215614f54579160200282015b82811115614f5457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614f1f565b50612db7929150614fba565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b5b80821115612db75760008155600101614fbb565b6001600160a01b0381168114610b0a57600080fd5b600060208284031215614ff657600080fd5b813561234c81614fcf565b60006020828403121561501357600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061505257634e487b7160e01b600052602160045260246000fd5b91905290565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156150ad5783516001600160a01b031683529284019291840191600101615088565b50909695505050505050565b60005b838110156150d45781810151838201526020016150bc565b8381111561381e5750506000910152565b60208152600082518060208401526151048160408501602087016150b9565b601f01601f19169190910160400192915050565b6000806040838503121561512b57600080fd5b823561513681614fcf565b946020939093013593505050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601f908201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604082015260600190565b60208082526014908201527306e6f742d616c6c6f7765642d746f2d73776565760641b604082015260600190565b6000602082840312156151eb57600080fd5b5051919050565b60006020828403121561520457600080fd5b815161234c81614fcf565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101561526e5761526e615246565b500390565b6020808252601490820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600181811c908216806152e857607f821691505b60208210811415610e9357634e487b7160e01b600052602260045260246000fd5b6001600160a01b0392831681529116602082015260400190565b6000821982111561533657615336615246565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982141561536557615365615246565b5060010190565b600081600019048311821515161561538657615386615246565b500290565b6000826153a857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b60006020828403121561540557600080fd5b8151801515811461234c57600080fd5b634e487b7160e01b600052603160045260246000fd5b6000825161543d8184602087016150b9565b9190910192915050565b8060005b600281101561381e57815184526020938401939091019060010161544b565b606081016154788285615447565b8260408301529392505050565b608081016154938286615447565b8360408301528215156060830152949350505050565b8060005b600381101561381e5781518452602093840193909101906001016154ad565b608081016154da82856154a9565b8260608301529392505050565b60a081016154f582866154a9565b8360608301528215156080830152949350505050565b8060005b600481101561381e57815184526020938401939091019060010161550f565b60a0810161553c828561550b565b8260808301529392505050565b6001600160a01b038416815260a0810161556660208301856154a9565b826080830152949350505050565b6001600160a01b038416815260c08101615591602083018561550b565b8260a083015294935050505056fea264697066735822122097e6833b9e9157d02de545b77cc039c25a1bf3417f0e23706ed1d3d746a4ef0e64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken(uint256)": {
        "details": "Approve all required tokens"
      },
      "isReservedToken(address)": {
        "details": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweep(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "Deposit ETH to Curve Pool and earn interest.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "claimAndSwapRewards(uint256)": {
        "notice": "Claim rewardToken and convert rewardToken into collateral token."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "refetchRewardTokens()": {
        "notice": "Rewards token in gauge can be updated any time. This method refresh list. It is recommended to claimAndSwapRewards before calling this function."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "swapToCollateral(address,uint256)": {
        "notice": "onlyKeeper:: Swap given token into collateral token."
      },
      "sweep(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns collateral balance + collateral deposited to curve"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14393,
        "contract": "vesper-strategies/contracts/strategies/curve/CurveETH.sol:CurveETH",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14399,
        "contract": "vesper-strategies/contracts/strategies/curve/CurveETH.sol:CurveETH",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14402,
        "contract": "vesper-strategies/contracts/strategies/curve/CurveETH.sol:CurveETH",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)13241"
      },
      {
        "astId": 14415,
        "contract": "vesper-strategies/contracts/strategies/curve/CurveETH.sol:CurveETH",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3025_storage"
      },
      {
        "astId": 26926,
        "contract": "vesper-strategies/contracts/strategies/curve/CurveETH.sol:CurveETH",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 26928,
        "contract": "vesper-strategies/contracts/strategies/curve/CurveETH.sol:CurveETH",
        "label": "crvSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 26931,
        "contract": "vesper-strategies/contracts/strategies/curve/CurveETH.sol:CurveETH",
        "label": "masterOracle",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IMasterOracle)12925"
      },
      {
        "astId": 26934,
        "contract": "vesper-strategies/contracts/strategies/curve/CurveETH.sol:CurveETH",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMasterOracle)12925": {
        "encoding": "inplace",
        "label": "contract IMasterOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IRoutedSwapper)13241": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3025_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3024,
            "contract": "vesper-strategies/contracts/strategies/curve/CurveETH.sol:CurveETH",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2724_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2724_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2719,
            "contract": "vesper-strategies/contracts/strategies/curve/CurveETH.sol:CurveETH",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2723,
            "contract": "vesper-strategies/contracts/strategies/curve/CurveETH.sol:CurveETH",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}