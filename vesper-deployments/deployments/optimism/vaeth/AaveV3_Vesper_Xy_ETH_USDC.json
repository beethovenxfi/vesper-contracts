{
  "address": "0x5cd23c6fCC61fa33Fc36ABCf696129A85a99DB31",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiptToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aaveAddressProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vPool",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMaxBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBorrowLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveAddressProvider",
      "outputs": [
        {
          "internalType": "contract PoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "claimAndSwapRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swapToCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBorrowLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "updateBorrowLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vPool",
      "outputs": [
        {
          "internalType": "contract IVesperPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vdToken",
      "outputs": [
        {
          "internalType": "contract AToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb167b847426ceb5a4c6fa7cabd679aac089e855bc37d087c2f084bf62ecf4886",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x5cd23c6fCC61fa33Fc36ABCf696129A85a99DB31",
    "transactionIndex": 0,
    "gasUsed": "4978055",
    "logsBloom": "0x
    "blockHash": "0x9b3cc0603173697cdb198ee17def5f3a786755d8e415be8cdac6c6ff2aad2dc6",
    "transactionHash": "0xb167b847426ceb5a4c6fa7cabd679aac089e855bc37d087c2f084bf62ecf4886",
    "logs": [],
    "blockNumber": 77738062,
    "cumulativeGasUsed": "4978055",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCcF3d1AcF799bAe67F6e354d685295557cf64761",
    "0xDAf982c67712780D54C298A91D86788165B701A4",
    "0xe50fA9b3c56FfB159cB0FCA61F5c9D750e8128c8",
    "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
    "0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb",
    "0x539505Dde2B9771dEBE0898a84441c5E7fDF6BC0",
    "AaveV3_Vesper_Xy_ETH_USDC"
  ],
  "numDeployments": 1,
  "solcInputHash": "3b00eedabf43c9ebbe9c3e29c0d887db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveAddressProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vPool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaxBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"UpdatedBorrowLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveAddressProvider\",\"outputs\":[{\"internalType\":\"contract PoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"claimAndSwapRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapToCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"updateBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vPool\",\"outputs\":[{\"internalType\":\"contract IVesperPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vdToken\",\"outputs\":[{\"internalType\":\"contract AToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken(uint256)\":{\"details\":\"Approve all required tokens\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweep(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateBorrowLimit(uint256,uint256)\":{\"details\":\"It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything\",\"params\":{\"_maxBorrowLimit\":\"It is % of actual collateral factor of protocol\",\"_minBorrowLimit\":\"It is % of actual collateral factor of protocol\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"claimAndSwapRewards(uint256)\":{\"notice\":\"Claim rewardToken and convert rewardToken into collateral token.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"swapToCollateral(address,uint256)\":{\"notice\":\"onlyKeeper:: Swap given token into collateral token.\"},\"sweep(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns total collateral locked in the strategy\"},\"updateBorrowLimit(uint256,uint256)\":{\"notice\":\"Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol\":\"AaveV3VesperXy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function sweep(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf7b06736a402e8548dd9cd3752418ab23e44426652f0fee6e0a40e37fbacdcab\",\"license\":\"MIT\"},\"vesper-pools/contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title Errors library\\nlibrary Errors {\\n    string public constant INVALID_COLLATERAL_AMOUNT = \\\"1\\\"; // Collateral must be greater than 0 or > defined limit\\n    string public constant INVALID_SHARE_AMOUNT = \\\"2\\\"; // Share must be greater than 0\\n    string public constant INVALID_INPUT_LENGTH = \\\"3\\\"; // Input array length must be greater than 0\\n    string public constant INPUT_LENGTH_MISMATCH = \\\"4\\\"; // Input array length mismatch with another array length\\n    string public constant NOT_WHITELISTED_ADDRESS = \\\"5\\\"; // Caller is not whitelisted to withdraw without fee\\n    string public constant MULTI_TRANSFER_FAILED = \\\"6\\\"; // Multi transfer of tokens has failed\\n    string public constant FEE_COLLECTOR_NOT_SET = \\\"7\\\"; // Fee Collector is not set\\n    string public constant NOT_ALLOWED_TO_SWEEP = \\\"8\\\"; // Token is not allowed to sweep\\n    string public constant INSUFFICIENT_BALANCE = \\\"9\\\"; // Insufficient balance to performs operations to follow\\n    string public constant INPUT_ADDRESS_IS_ZERO = \\\"10\\\"; // Input address is zero\\n    string public constant FEE_LIMIT_REACHED = \\\"11\\\"; // Fee must be less than MAX_BPS\\n    string public constant ALREADY_INITIALIZED = \\\"12\\\"; // Data structure, contract, or logic already initialized and can not be called again\\n    string public constant ADD_IN_LIST_FAILED = \\\"13\\\"; // Cannot add address in address list\\n    string public constant REMOVE_FROM_LIST_FAILED = \\\"14\\\"; // Cannot remove address from address list\\n    string public constant STRATEGY_IS_ACTIVE = \\\"15\\\"; // Strategy is already active, an inactive strategy is required\\n    string public constant STRATEGY_IS_NOT_ACTIVE = \\\"16\\\"; // Strategy is not active, an active strategy is required\\n    string public constant INVALID_STRATEGY = \\\"17\\\"; // Given strategy is not a strategy of this pool\\n    string public constant DEBT_RATIO_LIMIT_REACHED = \\\"18\\\"; // Debt ratio limit reached. It must be less than MAX_BPS\\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \\\"19\\\"; // Strategy total debt must be 0\\n    string public constant LOSS_TOO_HIGH = \\\"20\\\"; // Strategy reported loss must be less than current debt\\n    string public constant INVALID_MAX_BORROW_LIMIT = \\\"21\\\"; // Max borrow limit is beyond range.\\n    string public constant MAX_LIMIT_LESS_THAN_MIN = \\\"22\\\"; // Max limit should be greater than min limit.\\n    string public constant INVALID_SLIPPAGE = \\\"23\\\"; // Slippage should be less than MAX_BPS\\n    string public constant WRONG_RECEIPT_TOKEN = \\\"24\\\"; // Wrong receipt token address\\n    string public constant AAVE_FLASH_LOAN_NOT_ACTIVE = \\\"25\\\"; // aave flash loan is not active\\n    string public constant DYDX_FLASH_LOAN_NOT_ACTIVE = \\\"26\\\"; // DYDX flash loan is not active\\n    string public constant INVALID_FLASH_LOAN = \\\"27\\\"; // invalid-flash-loan\\n    string public constant INVALID_INITIATOR = \\\"28\\\"; // \\\"invalid-initiator\\\"\\n    string public constant INCORRECT_WITHDRAW_AMOUNT = \\\"29\\\"; // withdrawn amount is not correct\\n    string public constant NO_MARKET_ID_FOUND = \\\"30\\\"; // dydx flash loan no marketId found for token\\n    string public constant SAME_AS_PREVIOUS = \\\"31\\\"; // Input should not be same as previous value.\\n    string public constant INVALID_INPUT = \\\"32\\\"; // Generic invalid input error code\\n}\\n\",\"keccak256\":\"0x96be83cb172a1efef0ff9771392f0b1d192a680fb2b36b061efbd49177afb947\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(address rewardToken_, uint256 _rewardAmount, uint256 _rewardDuration) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory rewardTokens_,\\n        uint256[] memory rewardAmounts_,\\n        uint256[] memory rewardDurations_\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(\\n        address account_\\n    ) external view returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address rewardToken_) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xa253c0217d5c0ed2eff68a80c795c9c6c26e8e9d4958405b12dc17307a3cbf8a\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 profit_) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 collateralAmount_) external;\\n\\n    function excessDebt(address strategy_) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(uint256 profit_, uint256 loss_, uint256 payback_) external;\\n\\n    function reportLoss(uint256 loss_) external;\\n\\n    function sweepERC20(address fromToken_) external;\\n\\n    function withdraw(uint256 share_) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address address_) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address address_) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(\\n        address strategy_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address strategy_) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e04db3bafbcc5985db33ae168ada16fed2bbc42a6cd26bbe936a71a4f537e0c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/aave/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// @dev Interface support both Aave v2 and v3 methods\\ninterface PoolAddressesProvider {\\n    function getPool() external view returns (address);\\n\\n    // Aave v2 method.\\n    function getLendingPool() external view returns (address);\\n\\n    function getPoolDataProvider() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\\ninterface AaveOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\\n\\ninterface AToken is IERC20 {\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (address);\\n\\n    function mint(address user, uint256 amount, uint256 index) external returns (bool);\\n\\n    function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n    //solhint-disable func-name-mixedcase\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\\ninterface AaveIncentivesController {\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\n\\n    function claimAllRewards(\\n        address[] calldata assets,\\n        address to\\n    ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    function getRewardsList() external view returns (address[] memory);\\n}\\n\\ninterface AaveLendingPool {\\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function repay(address asset, uint256 amount, uint256 interestRateMode, address onBehalfOf) external;\\n\\n    function getUserAccountData(\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n}\\n\\ninterface AaveProtocolDataProvider {\\n    function getReserveTokensAddresses(\\n        address asset\\n    ) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\\n\\n    function getReserveData(\\n        address asset\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getReserveConfigurationData(\\n        address asset\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n}\\n\\n//solhint-disable func-name-mixedcase\\ninterface StakedAave is IERC20 {\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function stake(address onBehalfOf, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73d64ddc81110f2517a97664a7d4873279e005f1bc44d0679a5b09c83656dd8d\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(address tokenIn_, address tokenOut_, uint256 amountOut_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(address tokenIn_, address tokenOut_, uint256 amountIn_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x853ff5f9fbdd441f535370e39d43221d72d7a02fd5e48e343bbecb716a633f10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(address _pool, address _swapper, address _receiptToken) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken(uint256 _approvalAmount) external onlyKeeper {\\n        _approveToken(_approvalAmount);\\n    }\\n\\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\\n    function claimAndSwapRewards(uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        _claimAndSwapRewards();\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance() external onlyKeeper returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /// @notice onlyKeeper:: Swap given token into collateral token.\\n    function swapToCollateral(IERC20 _tokenIn, uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        require(address(_tokenIn) != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(address(_tokenIn)), \\\"not-allowed-to-sweep\\\");\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        uint256 _amountIn = _tokenIn.balanceOf(address(this));\\n        if (_amountIn > 0) {\\n            if (_amountIn > _tokenIn.allowance(address(this), address(swapper))) {\\n                _tokenIn.safeApprove(address(swapper), 0);\\n                _tokenIn.safeApprove(address(swapper), MAX_UINT_VALUE);\\n            }\\n            _swapExactInput(address(_tokenIn), address(collateralToken), _amountIn);\\n        }\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweep(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _claimAndSwapRewards() internal virtual {\\n        (address _rewardToken, uint256 _rewardsAmount) = _claimRewards();\\n        if (_rewardsAmount > 0) {\\n            _safeSwapExactInput(_rewardToken, address(collateralToken), _rewardsAmount);\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _claimRewards() internal virtual returns (address, uint256) {}\\n\\n    function _rebalance() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(address _tokenIn, address _tokenOut, uint256 _amountIn) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x58711ce2d409c8069e25980d2df4d09fd73e66c8ed41ba9ade1829bbb4ad6d80\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/aave/v3/AaveV3Incentive.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport \\\"../../../interfaces/aave/IAave.sol\\\";\\n\\n/// @title This contract provide core operations for Aave v3\\nlibrary AaveV3Incentive {\\n    /**\\n     * @notice Claim rewards from Aave incentive controller\\n     */\\n    function _claimRewards(\\n        address _aToken\\n    ) internal returns (address[] memory rewardsList, uint256[] memory claimedAmounts) {\\n        // Some aTokens may have no incentive controller method/variable. Better use try catch\\n        try AToken(_aToken).getIncentivesController() returns (address _aaveIncentivesController) {\\n            address[] memory assets = new address[](1);\\n            assets[0] = address(_aToken);\\n            return AaveIncentivesController(_aaveIncentivesController).claimAllRewards(assets, address(this));\\n            //solhint-disable no-empty-blocks\\n        } catch {}\\n    }\\n}\\n\",\"keccak256\":\"0x60215b92787042dcae008835e13fad9ac22b9c3b840af527a8eb077de9859b67\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"./AaveV3Xy.sol\\\";\\n\\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\\ncontract AaveV3VesperXy is AaveV3Xy {\\n    using SafeERC20 for IERC20;\\n\\n    // Destination Grow Pool for borrowed Token\\n    IVesperPool public immutable vPool;\\n    // reward token address\\n    address public rewardToken;\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _receiptToken,\\n        address _borrowToken,\\n        address _aaveAddressProvider,\\n        address _vPool,\\n        string memory _name\\n    ) AaveV3Xy(_pool, _swapper, _receiptToken, _borrowToken, _aaveAddressProvider, _name) {\\n        require(address(IVesperPool(_vPool).token()) == borrowToken, \\\"invalid-grow-pool\\\");\\n        vPool = IVesperPool(_vPool);\\n        address _poolRewards = vPool.poolRewards();\\n        if (_poolRewards != address(0)) {\\n            rewardToken = IPoolRewards(_poolRewards).getRewardTokens()[0]; // mostly it is VSP\\n        }\\n    }\\n\\n    /// @notice After borrowing Y, deposit to Vesper Pool\\n    function _afterBorrowY(uint256 _amount) internal virtual override {\\n        vPool.deposit(_amount);\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        IERC20(borrowToken).safeApprove(address(vPool), _amount);\\n        if (rewardToken != address(0)) {\\n            IERC20(rewardToken).safeApprove(address(swapper), _amount);\\n        }\\n    }\\n\\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\\n    function _beforeRepayY(uint256 _amount) internal virtual override {\\n        _withdrawFromVesperPool(_amount);\\n    }\\n\\n    /// @dev Claim all rewards and convert to collateral.\\n    function _claimAndSwapRewards() internal override {\\n        // Claim rewards from Aave\\n        AaveV3Xy._claimAndSwapRewards();\\n\\n        // Claim VSP\\n        address _poolRewards = vPool.poolRewards();\\n        if (_poolRewards != address(0)) {\\n            IPoolRewards(_poolRewards).claimReward(address(this));\\n        }\\n        if (rewardToken != address(0)) {\\n            uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n            if (_rewardAmount > 0) {\\n                _safeSwapExactInput(rewardToken, address(collateralToken), _rewardAmount);\\n            }\\n        }\\n    }\\n\\n    /// @notice Borrowed Y balance deposited in Vesper Pool\\n    function _getInvestedBorrowBalance() internal view virtual override returns (uint256) {\\n        return\\n            IERC20(borrowToken).balanceOf(address(this)) +\\n            ((vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18);\\n    }\\n\\n    /// @notice Swap excess borrow for more collateral when underlying  vPool is making profits\\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual override {\\n        if (_excessBorrow > 0) {\\n            _withdrawFromVesperPool(_excessBorrow);\\n            uint256 _borrowedHere = IERC20(borrowToken).balanceOf(address(this));\\n            if (_borrowedHere > 0) {\\n                _safeSwapExactInput(borrowToken, address(collateralToken), _borrowedHere);\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\\n    function _withdrawFromVesperPool(uint256 _amount) internal {\\n        if (_amount > 0) {\\n            uint256 _pricePerShare = vPool.pricePerShare();\\n            uint256 _shares = (_amount * 1e18) / _pricePerShare;\\n            _shares = _amount > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\\n            vPool.withdraw(Math.min(_shares, vPool.balanceOf(address(this))));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8c9aee1a3edb0d04aa7077a49c83a16ab312cf696d0347b4a898e0c137921bf\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/aave/v3/AaveV3Xy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"vesper-pools/contracts/Errors.sol\\\";\\nimport \\\"../../../interfaces/aave/IAave.sol\\\";\\nimport \\\"./AaveV3Incentive.sol\\\";\\nimport \\\"../../Strategy.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\\ncontract AaveV3Xy is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"5.1.0\\\";\\n\\n    uint256 internal constant MAX_BPS = 10_000; //100%\\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\\n\\n    PoolAddressesProvider public immutable aaveAddressProvider;\\n    address public borrowToken;\\n    AToken public vdToken; // Variable Debt Token\\n    address internal aBorrowToken;\\n    event UpdatedBorrowLimit(\\n        uint256 previousMinBorrowLimit,\\n        uint256 newMinBorrowLimit,\\n        uint256 previousMaxBorrowLimit,\\n        uint256 newMaxBorrowLimit\\n    );\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _receiptToken,\\n        address _borrowToken,\\n        address _aaveAddressProvider,\\n        string memory _name\\n    ) Strategy(_pool, _swapper, _receiptToken) {\\n        NAME = _name;\\n        require(_aaveAddressProvider != address(0), \\\"addressProvider-is-zero\\\");\\n        require(\\n            AToken(_receiptToken).UNDERLYING_ASSET_ADDRESS() == address(IVesperPool(_pool).token()),\\n            \\\"invalid-receipt-token\\\"\\n        );\\n        (address _aBorrowToken, , address _vdToken) = AaveProtocolDataProvider(\\n            PoolAddressesProvider(_aaveAddressProvider).getPoolDataProvider()\\n        ).getReserveTokensAddresses(_borrowToken);\\n        vdToken = AToken(_vdToken);\\n        borrowToken = _borrowToken;\\n        aBorrowToken = _aBorrowToken;\\n        aaveAddressProvider = PoolAddressesProvider(_aaveAddressProvider);\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return\\n            _token == address(collateralToken) ||\\n            _token == receiptToken ||\\n            address(vdToken) == _token ||\\n            borrowToken == _token;\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view override returns (uint256) {\\n        // receiptToken is aToken. aToken is 1:1 of collateral token\\n        return IERC20(receiptToken).balanceOf(address(this)) + collateralToken.balanceOf(address(this));\\n    }\\n\\n    /// @notice After borrowing Y Hook\\n    function _afterBorrowY(uint256 _amount) internal virtual {}\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        address _swapper = address(swapper);\\n        collateralToken.safeApprove(aaveAddressProvider.getPool(), _amount);\\n        collateralToken.safeApprove(_swapper, _amount);\\n        IERC20(borrowToken).safeApprove(aaveAddressProvider.getPool(), _amount);\\n        IERC20(borrowToken).safeApprove(_swapper, _amount);\\n        try AToken(receiptToken).getIncentivesController() returns (address _aaveIncentivesController) {\\n            address[] memory _rewardTokens = AaveIncentivesController(_aaveIncentivesController).getRewardsList();\\n            for (uint256 i; i < _rewardTokens.length; ++i) {\\n                if (_rewardTokens[i] != address(collateralToken) && _rewardTokens[i] != borrowToken) {\\n                    IERC20(_rewardTokens[i]).safeApprove(_swapper, _amount);\\n                }\\n            }\\n            //solhint-disable no-empty-blocks\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Claim rewardToken and transfer to new strategy\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual override {\\n        require(IStrategy(_newStrategy).token() == receiptToken, \\\"wrong-receipt-token\\\");\\n        _repayY(vdToken.balanceOf(address(this)), AaveLendingPool(aaveAddressProvider.getPool()));\\n    }\\n\\n    /// @notice Before repaying Y Hook\\n    function _beforeRepayY(uint256 _amount) internal virtual {}\\n\\n    /**\\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\\n     * @param _depositAmount deposit amount\\n     * @param _withdrawAmount withdraw amount\\n     * @return _borrowAmount borrow more amount\\n     * @return _repayAmount repay amount to keep ltv within limit\\n     */\\n    function _calculateBorrowPosition(\\n        uint256 _depositAmount,\\n        uint256 _withdrawAmount,\\n        uint256 _borrowed,\\n        uint256 _supplied\\n    ) internal view returns (uint256 _borrowAmount, uint256 _repayAmount) {\\n        require(_depositAmount == 0 || _withdrawAmount == 0, \\\"all-input-gt-zero\\\");\\n        // If maximum borrow limit set to 0 then repay borrow\\n        if (maxBorrowLimit == 0) {\\n            return (0, _borrowed);\\n        }\\n        // In case of withdraw, _amount can be greater than _supply\\n        uint256 _hypotheticalCollateral = _depositAmount > 0 ? _supplied + _depositAmount : _supplied > _withdrawAmount\\n            ? _supplied - _withdrawAmount\\n            : 0;\\n        if (_hypotheticalCollateral == 0) {\\n            return (0, _borrowed);\\n        }\\n        AaveOracle _aaveOracle = AaveOracle(aaveAddressProvider.getPriceOracle());\\n\\n        uint256 _borrowTokenPrice = _aaveOracle.getAssetPrice(borrowToken);\\n        uint256 _collateralTokenPrice = _aaveOracle.getAssetPrice(address(collateralToken));\\n        if (_borrowTokenPrice == 0 || _collateralTokenPrice == 0) {\\n            // Oracle problem. Lets payback all\\n            return (0, _borrowed);\\n        }\\n        // _collateralFactor in 4 decimal. 10_000 = 100%\\n        (, uint256 _collateralFactor, , , , , , , , ) = AaveProtocolDataProvider(\\n            aaveAddressProvider.getPoolDataProvider()\\n        ).getReserveConfigurationData(address(collateralToken));\\n\\n        // Collateral in base currency based on oracle price and cf;\\n        uint256 _actualCollateralForBorrow = (_hypotheticalCollateral * _collateralFactor * _collateralTokenPrice) /\\n            (MAX_BPS * (10 ** IERC20Metadata(address(collateralToken)).decimals()));\\n        // Calculate max borrow possible in borrow token number\\n        uint256 _maxBorrowPossible = (_actualCollateralForBorrow *\\n            (10 ** IERC20Metadata(address(borrowToken)).decimals())) / _borrowTokenPrice;\\n        if (_maxBorrowPossible == 0) {\\n            return (0, _borrowed);\\n        }\\n        // Safe buffer to avoid liquidation due to price variations.\\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\\n\\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\\n\\n        // If current borrow is greater than max borrow, then repay to achieve safe position.\\n        if (_borrowed > _borrowUpperBound) {\\n            // If borrow > upperBound then it is greater than lowerBound too.\\n            _repayAmount = _borrowed - _borrowLowerBound;\\n        } else if (_borrowLowerBound > _borrowed) {\\n            _borrowAmount = _borrowLowerBound - _borrowed;\\n            uint256 _availableLiquidity = IERC20(borrowToken).balanceOf(aBorrowToken);\\n            if (_borrowAmount > _availableLiquidity) {\\n                _borrowAmount = _availableLiquidity;\\n            }\\n        }\\n    }\\n\\n    /// @dev Claim all rewards and convert to collateral.\\n    /// Overriding _claimAndSwapRewards will help child contract otherwise override _claimReward.\\n    function _claimAndSwapRewards() internal virtual override {\\n        (address[] memory _tokens, uint256[] memory _amounts) = AaveV3Incentive._claimRewards(receiptToken);\\n        uint256 _length = _tokens.length;\\n        for (uint256 i; i < _length; ++i) {\\n            if (_amounts[i] > 0 && _tokens[i] != address(collateralToken)) {\\n                _safeSwapExactInput(_tokens[i], address(collateralToken), _amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Aave support WETH as collateral.\\n     */\\n    function _depositToAave(uint256 _amount, AaveLendingPool _aaveLendingPool) internal virtual {\\n        if (_amount > 0) {\\n            try _aaveLendingPool.supply(address(collateralToken), _amount, address(this), 0) {} catch Error(\\n                string memory _reason\\n            ) {\\n                // Aave uses liquidityIndex and some other indexes as needed to normalize input.\\n                // If normalized input equals to 0 then error will be thrown with '56' error code.\\n                // CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n                // Hence discard error where error code is '56'\\n                require(bytes32(bytes(_reason)) == \\\"56\\\", \\\"deposit failed\\\");\\n            }\\n        }\\n    }\\n\\n    /// @notice Borrowed Y balance deposited here or elsewhere hook\\n    function _getInvestedBorrowBalance() internal view virtual returns (uint256) {\\n        return IERC20(borrowToken).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Generate report for pools accounting and also send profit and any payback to pool.\\n     */\\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _borrowed = vdToken.balanceOf(address(this));\\n        uint256 _investedBorrowBalance = _getInvestedBorrowBalance();\\n        AaveLendingPool _aaveLendingPool = AaveLendingPool(aaveAddressProvider.getPool());\\n\\n        // _borrow increases every block. Convert collateral to borrowToken.\\n        if (_borrowed > _investedBorrowBalance) {\\n            _swapToBorrowToken(_borrowed - _investedBorrowBalance, _aaveLendingPool);\\n        } else {\\n            // When _investedBorrowBalance exceeds _borrow balance from Aave\\n            // Customize this hook to handle the excess borrowToken for profit\\n            _rebalanceBorrow(_investedBorrowBalance - _borrowed);\\n        }\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _supplied = IERC20(receiptToken).balanceOf(address(this));\\n        uint256 _totalCollateral = _supplied + _collateralHere;\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_collateralHere < _profitAndExcessDebt) {\\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _supplied);\\n            if (_totalAmountToWithdraw > 0) {\\n                _withdrawHere(_totalAmountToWithdraw, _aaveLendingPool, _borrowed, _supplied);\\n                _collateralHere = collateralToken.balanceOf(address(this));\\n            }\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        uint256 _newSupply = collateralToken.balanceOf(address(this));\\n        _depositToAave(_newSupply, _aaveLendingPool);\\n\\n        // There are scenarios when we want to call _calculateBorrowPosition and act on it.\\n        // 1. Strategy got some collateral from pool which will allow strategy to borrow more.\\n        // 2. Collateral and/or borrow token price is changed which leads to repay or borrow.\\n        // 3. BorrowLimits are updated.\\n        // In some edge scenarios, below call is redundant but keeping it as is for simplicity.\\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(\\n            0,\\n            0,\\n            vdToken.balanceOf(address(this)),\\n            IERC20(receiptToken).balanceOf(address(this))\\n        );\\n        if (_repayAmount > 0) {\\n            // Repay _borrowAmount to maintain safe position\\n            _repayY(_repayAmount, _aaveLendingPool);\\n        } else if (_borrowAmount > 0) {\\n            // 2 for variable rate borrow, 0 for referralCode\\n            _aaveLendingPool.borrow(borrowToken, _borrowAmount, 2, 0, address(this));\\n        }\\n        uint256 _borrowTokenBalance = IERC20(borrowToken).balanceOf(address(this));\\n        if (_borrowTokenBalance > 0) {\\n            _afterBorrowY(_borrowTokenBalance);\\n        }\\n    }\\n\\n    /// @notice Swap excess borrow for more collateral hook\\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual {}\\n\\n    function _repayY(uint256 _amount, AaveLendingPool _aaveLendingPool) internal virtual {\\n        _beforeRepayY(_amount);\\n        _aaveLendingPool.repay(borrowToken, _amount, 2, address(this));\\n    }\\n\\n    /**\\n     * @notice Swap given token to borrowToken\\n     * @param _shortOnBorrow Expected output of this swap\\n     */\\n    function _swapToBorrowToken(uint256 _shortOnBorrow, AaveLendingPool _aaveLendingPool) internal {\\n        // Looking for _amountIn using fixed output amount\\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, _shortOnBorrow);\\n        if (_amountIn > 0) {\\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n            if (_amountIn > _collateralHere) {\\n                // Withdraw some collateral from Aave so that we have enough collateral to get expected output\\n                uint256 _amount = _amountIn - _collateralHere;\\n                require(\\n                    _aaveLendingPool.withdraw(address(collateralToken), _amount, address(this)) == _amount,\\n                    Errors.INCORRECT_WITHDRAW_AMOUNT\\n                );\\n            }\\n            swapper.swapExactOutput(address(collateralToken), borrowToken, _shortOnBorrow, _amountIn, address(this));\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 _requireAmount) internal override {\\n        _withdrawHere(\\n            _requireAmount,\\n            AaveLendingPool(aaveAddressProvider.getPool()),\\n            vdToken.balanceOf(address(this)),\\n            IERC20(receiptToken).balanceOf(address(this))\\n        );\\n    }\\n\\n    function _withdrawHere(\\n        uint256 _requireAmount,\\n        AaveLendingPool _aaveLendingPool,\\n        uint256 _borrowed,\\n        uint256 _supplied\\n    ) internal {\\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, _requireAmount, _borrowed, _supplied);\\n        if (_repayAmount > 0) {\\n            _repayY(_repayAmount, _aaveLendingPool);\\n        }\\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\\n        // _requireAmount against available liquidity.\\n        uint256 _possibleWithdraw = Math.min(\\n            _requireAmount,\\n            Math.min(IERC20(receiptToken).balanceOf(address(this)), collateralToken.balanceOf(receiptToken))\\n        );\\n        require(\\n            _aaveLendingPool.withdraw(address(collateralToken), _possibleWithdraw, address(this)) == _possibleWithdraw,\\n            Errors.INCORRECT_WITHDRAW_AMOUNT\\n        );\\n    }\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n    /**\\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\\n     * @dev It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything\\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\\n     */\\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\\n        require(_maxBorrowLimit < MAX_BPS, \\\"invalid-max-borrow-limit\\\");\\n        // set _maxBorrowLimit and _minBorrowLimit to disable borrow;\\n        require(\\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\\n            \\\"max-should-be-higher-than-min\\\"\\n        );\\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\\n        minBorrowLimit = _minBorrowLimit;\\n        maxBorrowLimit = _maxBorrowLimit;\\n    }\\n}\\n\",\"keccak256\":\"0x7e8eb24e7b8d3f5a30bb9d0d68e28a375aeaa5c3089ae75c1dcd27e4b16334a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052611b586006556121346007553480156200001e57600080fd5b5060405162006016380380620060168339810160408190526200004191620008bd565b8686868686858585856001600160a01b038316620000a65760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000fe5760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f00000000000000000060448201526064016200009d565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200015c57600080fd5b505afa15801562000171573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000197919062000a00565b6001600160a01b03908116608052600080546001600160a01b031916918316919091179055620001de620001c83390565b60036200074360201b62001ac81790919060201c565b620002205760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016200009d565b505081516200023891506005906020840190620007b5565b506001600160a01b038216620002915760405162461bcd60e51b815260206004820152601760248201527f6164647265737350726f76696465722d69732d7a65726f00000000000000000060448201526064016200009d565b856001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620002cb57600080fd5b505afa158015620002e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000306919062000a00565b6001600160a01b0316846001600160a01b031663b16a19de6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200034957600080fd5b505afa1580156200035e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000384919062000a00565b6001600160a01b031614620003dc5760405162461bcd60e51b815260206004820152601560248201527f696e76616c69642d726563656970742d746f6b656e000000000000000000000060448201526064016200009d565b600080836001600160a01b031663e860accb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200041957600080fd5b505afa1580156200042e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000454919062000a00565b6040516334924edb60e21b81526001600160a01b038781166004830152919091169063d2493b6c9060240160606040518083038186803b1580156200049857600080fd5b505afa158015620004ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004d3919062000a27565b600980546001600160a01b03199081166001600160a01b0393841617909155600880548216998316998a179055600a8054909116938216939093179092555093841660c052505060408051637e062a3560e11b81529051939650918816945063fc0c546a935050600480820192602092909190829003018186803b1580156200055b57600080fd5b505afa15801562000570573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000596919062000a00565b6001600160a01b031614620005e25760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a590b59dc9bddcb5c1bdbdb607a1b60448201526064016200009d565b6001600160a01b03821660e0819052604080516345e35f5960e11b8152905160009291638bc6beb2916004808301926020929190829003018186803b1580156200062b57600080fd5b505afa15801562000640573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000666919062000a00565b90506001600160a01b038116156200073557806001600160a01b031663c4f59f9b6040518163ffffffff1660e01b815260040160006040518083038186803b158015620006b257600080fd5b505afa158015620006c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620006f1919081019062000a7b565b60008151811062000706576200070662000b39565b6020026020010151600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b505050505050505062000b8c565b60006200075a836001600160a01b03841662000763565b90505b92915050565b6000818152600183016020526040812054620007ac575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200075d565b5060006200075d565b828054620007c39062000b4f565b90600052602060002090601f016020900481019282620007e7576000855562000832565b82601f106200080257805160ff191683800117855562000832565b8280016001018555821562000832579182015b828111156200083257825182559160200191906001019062000815565b506200084092915062000844565b5090565b5b8082111562000840576000815560010162000845565b6001600160a01b03811681146200087157600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620008b557620008b562000874565b604052919050565b600080600080600080600060e0888a031215620008d957600080fd5b8751620008e6816200085b565b80975050602080890151620008fb816200085b565b60408a01519097506200090e816200085b565b60608a015190965062000921816200085b565b60808a015190955062000934816200085b565b60a08a015190945062000947816200085b565b60c08a01519093506001600160401b03808211156200096557600080fd5b818b0191508b601f8301126200097a57600080fd5b8151818111156200098f576200098f62000874565b620009a3601f8201601f191685016200088a565b91508082528c84828501011115620009ba57600080fd5b60005b81811015620009da578381018501518382018601528401620009bd565b81811115620009ec5760008583850101525b505080935050505092959891949750929550565b60006020828403121562000a1357600080fd5b815162000a20816200085b565b9392505050565b60008060006060848603121562000a3d57600080fd5b835162000a4a816200085b565b602085015190935062000a5d816200085b565b604085015190925062000a70816200085b565b809150509250925092565b6000602080838503121562000a8f57600080fd5b82516001600160401b038082111562000aa757600080fd5b818501915085601f83011262000abc57600080fd5b81518181111562000ad15762000ad162000874565b8060051b915062000ae48483016200088a565b818152918301840191848101908884111562000aff57600080fd5b938501935b8385101562000b2d578451925062000b1c836200085b565b828252938501939085019062000b04565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168062000b6457607f821691505b6020821081141562000b8657634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161528962000d8d600039600081816102bc01528181611c93015281816120430152818161369801528181613734015281816143e0015281816146520152818161473c015261476f01526000818161037d01528181611e7e015281816121d001528181612a8b015281816132f0015281816133e901528181613d940152613f710152600081816102060152818161080a0152818161091a01528181610a3601528181610b1001528181610b9a01528181610e0701528181610ea4015281816110d001528181611299015281816119050152818161209e015281816123cc015281816125c20152614623015260008181610343015281816103da01528181610514015281816106a9015281816107510152818161097901528181610a1401528181610a8401528181610b4301528181610ca8015281816110340152818161146e015281816115a6015281816116360152818161180a0152818161184a01528181611e3e015281816122ad015281816124e40152818161263f01528181612e4801528181612eba01528181613152015281816131f401528181613389015281816133bd015281816135ad01528181613824015281816138de0152818161398d01528181613a8601528181613bb401528181613bf601528181613ec001528181614010015281816140ab015261460101526152896000f3fe608060405234801561001057600080fd5b50600436106101a55760003560e01c8063a3f4df7e116100ef578063e260d74711610092578063e260d747146103fe578063e5328e0614610407578063ec78e8321461040f578063ee330ee314610422578063f7c618c114610435578063fb7ee10214610448578063fc0c546a1461045b578063ffa1ad741461046c57600080fd5b8063a3f4df7e14610329578063b2016bd41461033e578063c415b95c14610365578063cdaabe4114610378578063ce5494bb1461039f578063d2c35ce8146103b2578063d3033c39146103c5578063d8dfeb45146103d857600080fd5b80633ac9fc11116101575780633ac9fc111461025b5780634032b72b1461026e578063440d724814610281578063456dc17a146102a45780636719578c146102b75780637d7c2a1c146102de57806390d6751414610301578063951dc22c1461031457600080fd5b806301681a62146101aa5780630181686c146101bf5780631026013a146101db57806314ae9f2e146101ee57806316f0115b146102015780632b3297f9146102355780632e1a7d4d14610248575b600080fd5b6101bd6101b8366004614984565b610490565b005b6101c860075481565b6040519081526020015b60405180910390f35b6101c86101e93660046149a1565b610668565b6101bd6101fc366004614984565b610808565b6102287f000000000000000000000000000000000000000000000000000000000000000081565b6040516101d291906149ba565b600254610228906001600160a01b031681565b6101bd6102563660046149a1565b610917565b6101bd6102693660046149a1565b610b6a565b6101bd61027c366004614984565b610b98565b61029461028f366004614984565b610ca4565b60405190151581526020016101d2565b600854610228906001600160a01b031681565b6102287f000000000000000000000000000000000000000000000000000000000000000081565b6102e6610d29565b604080519384526020840192909252908201526060016101d2565b600954610228906001600160a01b031681565b61031c610d65565b6040516101d29190614a12565b610331610d76565b6040516101d29190614a51565b6102287f000000000000000000000000000000000000000000000000000000000000000081565b600154610228906001600160a01b031681565b6102287f000000000000000000000000000000000000000000000000000000000000000081565b6101bd6103ad366004614984565b610e04565b6101bd6103c0366004614984565b6110ce565b6101bd6103d3366004614984565b611297565b7f0000000000000000000000000000000000000000000000000000000000000000610228565b6101c860065481565b6101c8611454565b600054610228906001600160a01b031681565b6101c8610430366004614a84565b61157d565b600b54610228906001600160a01b031681565b6101bd610456366004614ab0565b611903565b6000546001600160a01b0316610228565b610331604051806040016040528060058152602001640352e312e360dc1b81525081565b61049d335b600390611ae4565b6104c25760405162461bcd60e51b81526004016104b990614ad2565b60405180910390fd5b6001546001600160a01b03166105125760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016104b9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156105645760405162461bcd60e51b81526004016104b990614b02565b61056d81610ca4565b1561058a5760405162461bcd60e51b81526004016104b990614b39565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156105c8576001546105c5906001600160a01b031647611b06565b50565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906105f79030906004016149ba565b60206040518083038186803b15801561060f57600080fd5b505afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106479190614b67565b600154909150610664906001600160a01b03848116911683611c24565b5050565b600061067333610495565b61068f5760405162461bcd60e51b81526004016104b990614ad2565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906106de9030906004016149ba565b60206040518083038186803b1580156106f657600080fd5b505afa15801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e9190614b67565b9050610738611c87565b6040516370a0823160e01b815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906107869030906004016149ba565b60206040518083038186803b15801561079e57600080fd5b505afa1580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d69190614b67565b6107e09190614b96565b9150828210156108025760405162461bcd60e51b81526004016104b990614bad565b50919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190614bdb565b6001600160a01b0316336001600160a01b0316146108c95760405162461bcd60e51b81526004016104b990614bf8565b6108d4600382611e63565b6105c55760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016104b9565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461095f5760405162461bcd60e51b81526004016104b990614c2f565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906109ae9030906004016149ba565b60206040518083038186803b1580156109c657600080fd5b505afa1580156109da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fe9190614b67565b9050818110610a5b576106646001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611c24565b610a6d610a688284614b96565b611e78565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610ab99030906004016149ba565b60206040518083038186803b158015610ad157600080fd5b505afa158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b099190614b67565b90506106647f0000000000000000000000000000000000000000000000000000000000000000610b398484612012565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611c24565b610b7333610495565b610b8f5760405162461bcd60e51b81526004016104b990614ad2565b6105c581612028565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf157600080fd5b505afa158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190614bdb565b6001600160a01b0316336001600160a01b031614610c595760405162461bcd60e51b81526004016104b990614bf8565b610c64600382611ac8565b6105c55760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016104b9565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610cf357506000546001600160a01b038381169116145b80610d0b57506009546001600160a01b038381169116145b80610d2357506008546001600160a01b038381169116145b92915050565b60008080610d3633610495565b610d525760405162461bcd60e51b81526004016104b990614ad2565b610d5a612096565b925092509250909192565b6060610d716003612920565b905090565b60058054610d8390614c62565b80601f0160208091040260200160405190810160405280929190818152602001828054610daf90614c62565b8015610dfc5780601f10610dd157610100808354040283529160200191610dfc565b820191906000526020600020905b815481529060010190602001808311610ddf57829003601f168201915b505050505081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610e4c5760405162461bcd60e51b81526004016104b990614c2f565b6001600160a01b038116610ea25760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016104b9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0557600080fd5b505afa158015610f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3d9190614bdb565b6001600160a01b031614610f8c5760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016104b9565b610f958161292d565b6000546040516370a0823160e01b815261102e9183916001600160a01b03909116906370a0823190610fcb9030906004016149ba565b60206040518083038186803b158015610fe357600080fd5b505afa158015610ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101b9190614b67565b6000546001600160a01b03169190611c24565b6105c5817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161107e91906149ba565b60206040518083038186803b15801561109657600080fd5b505afa1580156110aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b399190614b67565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f9190614bdb565b6001600160a01b0316336001600160a01b03161461118f5760405162461bcd60e51b81526004016104b990614bf8565b6001600160a01b0381166111e55760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016104b9565b6001546001600160a01b038281169116141561123b5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016104b9565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156112f057600080fd5b505afa158015611304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113289190614bdb565b6001600160a01b0316336001600160a01b0316146113585760405162461bcd60e51b81526004016104b990614bf8565b6001600160a01b0381166113a85760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b60448201526064016104b9565b6002546001600160a01b03828116911614156113f85760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b60448201526064016104b9565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906114a39030906004016149ba565b60206040518083038186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f39190614b67565b6000546040516370a0823160e01b81526001600160a01b03909116906370a08231906115239030906004016149ba565b60206040518083038186803b15801561153b57600080fd5b505afa15801561154f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115739190614b67565b610d719190614c97565b600061158833610495565b6115a45760405162461bcd60e51b81526004016104b990614ad2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156115f65760405162461bcd60e51b81526004016104b990614b02565b6115ff83610ca4565b1561161c5760405162461bcd60e51b81526004016104b990614b39565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061166b9030906004016149ba565b60206040518083038186803b15801561168357600080fd5b505afa158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb9190614b67565b90506000846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016116eb91906149ba565b60206040518083038186803b15801561170357600080fd5b505afa158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190614b67565b9050801561183157600254604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529086169063dd62ed3e9060440160206040518083038186803b15801561178e57600080fd5b505afa1580156117a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c69190614b67565b811115611804576002546117e8906001600160a01b0387811691166000612b1f565b600254611804906001600160a01b038781169116600019612b1f565b61182f857f000000000000000000000000000000000000000000000000000000000000000083612c43565b505b6040516370a0823160e01b815282906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061187f9030906004016149ba565b60206040518083038186803b15801561189757600080fd5b505afa1580156118ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cf9190614b67565b6118d99190614b96565b9250838310156118fb5760405162461bcd60e51b81526004016104b990614bad565b505092915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561195c57600080fd5b505afa158015611970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119949190614bdb565b6001600160a01b0316336001600160a01b0316146119c45760405162461bcd60e51b81526004016104b990614bf8565b6127108110611a105760405162461bcd60e51b81526020600482015260186024820152771a5b9d985b1a590b5b585e0b589bdc9c9bddcb5b1a5b5a5d60421b60448201526064016104b9565b80158015611a1c575081155b80611a2657508181115b611a725760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e00000060448201526064016104b9565b6006546007546040805192835260208301859052820152606081018290527fedd77444afdf63401315e81ffe86d08f7865796e8ad2e11acf1d56a1393f07d59060800160405180910390a1600691909155600755565b6000611add836001600160a01b038416612cd7565b9392505050565b6001600160a01b03811660009081526001830160205260408120541515611add565b80471015611b565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016104b9565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611ba3576040519150601f19603f3d011682016040523d82523d6000602084013e611ba8565b606091505b5050905080611c1f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016104b9565b505050565b6040516001600160a01b038316602482015260448101829052611c1f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d26565b611c8f612df8565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b158015611cea57600080fd5b505afa158015611cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d229190614bdb565b90506001600160a01b03811615611d925760405163d279c19160e01b81526001600160a01b0382169063d279c19190611d5f9030906004016149ba565b600060405180830381600087803b158015611d7957600080fd5b505af1158015611d8d573d6000803e3d6000fd5b505050505b600b546001600160a01b0316156105c557600b546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611dd49030906004016149ba565b60206040518083038186803b158015611dec57600080fd5b505afa158015611e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e249190614b67565b9050801561066457600b54610664906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083612f0e565b6000611add836001600160a01b038416612f9a565b6105c5817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ed557600080fd5b505afa158015611ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0d9190614bdb565b6009546040516370a0823160e01b81526001600160a01b03909116906370a0823190611f3d9030906004016149ba565b60206040518083038186803b158015611f5557600080fd5b505afa158015611f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8d9190614b67565b6000546040516370a0823160e01b81526001600160a01b03909116906370a0823190611fbd9030906004016149ba565b60206040518083038186803b158015611fd557600080fd5b505afa158015611fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200d9190614b67565b61308d565b60008183106120215781611add565b5090919050565b612031816132c8565b600854612068906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083612b1f565b600b546001600160a01b0316156105c557600254600b546105c5916001600160a01b03918216911683612b1f565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b81526004016120e891906149ba565b60206040518083038186803b15801561210057600080fd5b505afa158015612114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121389190614b67565b6009546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061216e9030906004016149ba565b60206040518083038186803b15801561218657600080fd5b505afa15801561219a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121be9190614b67565b905060006121ca61368b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222757600080fd5b505afa15801561223b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225f9190614bdb565b9050818311156122815761227c6122768385614b96565b82613807565b612293565b61229361228e8484614b96565b613b0a565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906122e29030906004016149ba565b60206040518083038186803b1580156122fa57600080fd5b505afa15801561230e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123329190614b67565b600080546040516370a0823160e01b815292935090916001600160a01b03909116906370a08231906123689030906004016149ba565b60206040518083038186803b15801561238057600080fd5b505afa158015612394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b89190614b67565b905060006123c68383614c97565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b815260040161241691906149ba565b60206040518083038186803b15801561242e57600080fd5b505afa158015612442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124669190614b67565b9050808211156124815761247a8183614b96565b9a5061248e565b61248b8282614b96565b99505b600061249a898d614c97565b90508085101561256e5760006124b96124b38784614b96565b86612012565b9050801561256c576124cd81888b8861308d565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906125199030906004016149ba565b60206040518083038186803b15801561253157600080fd5b505afa158015612545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125699190614b67565b95505b505b612578858a612012565b995089851161258857600061259b565b61259b6125958b87614b96565b8d612012565b6040516302df682360e11b815260048101829052602481018d9052604481018c9052909c507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b15801561260e57600080fd5b505af1158015612622573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a08231906126759030906004016149ba565b60206040518083038186803b15801561268d57600080fd5b505afa1580156126a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c59190614b67565b90506126d18188613bd9565b6009546040516370a0823160e01b815260009182916127e191839182916001600160a01b0316906370a082319061270c9030906004016149ba565b60206040518083038186803b15801561272457600080fd5b505afa158015612738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275c9190614b67565b6000546040516370a0823160e01b81526001600160a01b03909116906370a082319061278c9030906004016149ba565b60206040518083038186803b1580156127a457600080fd5b505afa1580156127b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127dc9190614b67565b613cec565b909250905080156127fb576127f6818a61434a565b61287c565b811561287c5760085460405163a415bcad60e01b81526001600160a01b039182166004820152602481018490526002604482015260006064820152306084820152908a169063a415bcad9060a401600060405180830381600087803b15801561286357600080fd5b505af1158015612877573d6000803e3d6000fd5b505050505b6008546040516370a0823160e01b81526000916001600160a01b0316906370a08231906128ad9030906004016149ba565b60206040518083038186803b1580156128c557600080fd5b505afa1580156128d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fd9190614b67565b9050801561290e5761290e816143ca565b50505050505050505050505050909192565b60606000611add83614440565b60008054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561298357600080fd5b505afa158015612997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129bb9190614bdb565b6001600160a01b031614612a075760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b60448201526064016104b9565b6009546040516370a0823160e01b81526105c5916001600160a01b0316906370a0823190612a399030906004016149ba565b60206040518083038186803b158015612a5157600080fd5b505afa158015612a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a899190614b67565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ae257600080fd5b505afa158015612af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1a9190614bdb565b61434a565b801580612ba85750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612b6e57600080fd5b505afa158015612b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba69190614b67565b155b612c135760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104b9565b6040516001600160a01b038316602482015260448101829052611c1f90849063095ea7b360e01b90606401611c50565b600254604051636ccb2b0160e01b81526000916001600160a01b031690636ccb2b0190612c7d908790879087906001903090600401614caf565b602060405180830381600087803b158015612c9757600080fd5b505af1158015612cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccf9190614b67565b949350505050565b6000818152600183016020526040812054612d1e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d23565b506000610d23565b6000612d7b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661449c9092919063ffffffff16565b805190915015611c1f5780806020019051810190612d999190614cf4565b611c1f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104b9565b600080548190612e10906001600160a01b03166144ab565b8151919350915060005b81811015612f08576000838281518110612e3657612e36614d0f565b6020026020010151118015612e9657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316848281518110612e8257612e82614d0f565b60200260200101516001600160a01b031614155b15612ef857612ef8848281518110612eb057612eb0614d0f565b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000858481518110612eeb57612eeb614d0f565b6020026020010151612f0e565b612f0181614d25565b9050612e1a565b50505050565b600254604051636ccb2b0160e01b81526001600160a01b0390911690636ccb2b0190612f47908690869086906001903090600401614caf565b602060405180830381600087803b158015612f6157600080fd5b505af1925050508015612f91575060408051601f3d908101601f19168201909252612f8e91810190614b67565b60015b612f0857505050565b60008181526001830160205260408120548015613083576000612fbe600183614b96565b8554909150600090612fd290600190614b96565b9050818114613037576000866000018281548110612ff257612ff2614d0f565b906000526020600020015490508087600001848154811061301557613015614d0f565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061304857613048614d40565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d23565b6000915050610d23565b600061309c6000868585613cec565b91505080156130af576130af818561434a565b600080546040516370a0823160e01b81526131e09188916131db916001600160a01b0316906370a08231906130e89030906004016149ba565b60206040518083038186803b15801561310057600080fd5b505afa158015613114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131389190614b67565b6000546040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926370a082319261318b9291909116906004016149ba565b60206040518083038186803b1580156131a357600080fd5b505afa1580156131b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131db9190614b67565b612012565b905080856001600160a01b03166369328dec7f000000000000000000000000000000000000000000000000000000000000000084306040518463ffffffff1660e01b815260040161323393929190614d56565b602060405180830381600087803b15801561324d57600080fd5b505af1158015613261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132859190614b67565b1460405180604001604052806002815260200161323960f01b815250906132bf5760405162461bcd60e51b81526004016104b99190614a51565b50505050505050565b6132d1816145f4565b6000600260009054906101000a90046001600160a01b031690506133b07f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561334757600080fd5b505afa15801561335b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061337f9190614bdb565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084612b1f565b6133e46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284612b1f565b61348b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561344057600080fd5b505afa158015613454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134789190614bdb565b6008546001600160a01b03169084612b1f565b6008546134a2906001600160a01b03168284612b1f565b60008054906101000a90046001600160a01b03166001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b1580156134ee57600080fd5b505afa92505050801561351e575060408051601f3d908101601f1916820190925261351b91810190614bdb565b60015b613526575050565b6000816001600160a01b031663b45ac1a96040518163ffffffff1660e01b815260040160006040518083038186803b15801561356157600080fd5b505afa158015613575573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261359d9190810190614e5a565b905060005b8151811015613684577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168282815181106135e7576135e7614d0f565b60200260200101516001600160a01b031614158015613638575060085482516001600160a01b039091169083908390811061362457613624614d0f565b60200260200101516001600160a01b031614155b1561367457613674848684848151811061365457613654614d0f565b60200260200101516001600160a01b0316612b1f9092919063ffffffff16565b61367d81614d25565b90506135a2565b5050505050565b6000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016136e291906149ba565b60206040518083038186803b1580156136fa57600080fd5b505afa15801561370e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137329190614b67565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561378b57600080fd5b505afa15801561379f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c39190614b67565b6137cd9190614e8f565b6137d79190614eae565b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906115239030906004016149ba565b6002546008546040516353b609b560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291821660248201526044810185905260009291909116906353b609b590606401602060405180830381600087803b15801561388457600080fd5b505af1158015613898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138bc9190614b67565b90508015611c1f576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906139139030906004016149ba565b60206040518083038186803b15801561392b57600080fd5b505afa15801561393f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139639190614b67565b905080821115613a5b5760006139798284614b96565b905080846001600160a01b03166369328dec7f000000000000000000000000000000000000000000000000000000000000000084306040518463ffffffff1660e01b81526004016139cc93929190614d56565b602060405180830381600087803b1580156139e657600080fd5b505af11580156139fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1e9190614b67565b1460405180604001604052806002815260200161323960f01b81525090613a585760405162461bcd60e51b81526004016104b99190614a51565b50505b6002546008546040516381cc619b60e01b81526001600160a01b03928316926381cc619b92613ab8927f00000000000000000000000000000000000000000000000000000000000000009290911690899088903090600401614caf565b602060405180830381600087803b158015613ad257600080fd5b505af1158015613ae6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136849190614b67565b80156105c557613b1981614648565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613b4a9030906004016149ba565b60206040518083038186803b158015613b6257600080fd5b505afa158015613b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b9a9190614b67565b9050801561066457600854610664906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083612f0e565b81156106645760405163617ba03760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490523060448301526000606483015282169063617ba03790608401600060405180830381600087803b158015613c5657600080fd5b505af1925050508015613c67575060015b61066457613c73614ed0565b806308c379a01415613ce05750613c88614eec565b80613c935750613ce2565b613c9c81614f76565b611a9b60f11b14611c1f5760405162461bcd60e51b815260206004820152600e60248201526d19195c1bdcda5d0819985a5b195960921b60448201526064016104b9565b505b3d6000803e3d6000fd5b600080851580613cfa575084155b613d3a5760405162461bcd60e51b8152602060048201526011602482015270616c6c2d696e7075742d67742d7a65726f60781b60448201526064016104b9565b600754613d4c57506000905082614341565b6000808711613d7257858411613d63576000613d7c565b613d6d8685614b96565b613d7c565b613d7c8785614c97565b905080613d90576000859250925050614341565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015613deb57600080fd5b505afa158015613dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e239190614bdb565b60085460405163b3596f0760e01b81529192506000916001600160a01b038085169263b3596f0792613e5b92909116906004016149ba565b60206040518083038186803b158015613e7357600080fd5b505afa158015613e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eab9190614b67565b90506000826001600160a01b031663b3596f077f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401613efb91906149ba565b60206040518083038186803b158015613f1357600080fd5b505afa158015613f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f4b9190614b67565b9050811580613f58575080155b15613f6d576000889550955050505050614341565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e860accb6040518163ffffffff1660e01b815260040160206040518083038186803b158015613fc857600080fd5b505afa158015613fdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140009190614bdb565b6001600160a01b0316633e1501417f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161404b91906149ba565b6101406040518083038186803b15801561406457600080fd5b505afa158015614078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061409c9190614f9a565b505050505050505091505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561410257600080fd5b505afa158015614116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061413a9190615031565b61414590600a615138565b61415190612710614e8f565b8361415c8489614e8f565b6141669190614e8f565b6141709190614eae565b9050600084600860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156141c357600080fd5b505afa1580156141d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141fb9190615031565b61420690600a615138565b6142109084614e8f565b61421a9190614eae565b9050806142345760008b9850985050505050505050614341565b6000612710600754836142479190614e8f565b6142519190614eae565b90506000612710600654846142669190614e8f565b6142709190614eae565b9050818d111561428b57614284818e614b96565b9950614337565b8c8111156143375761429d8d82614b96565b600854600a546040516370a0823160e01b8152929d506000926001600160a01b03928316926370a08231926142d7929116906004016149ba565b60206040518083038186803b1580156142ef57600080fd5b505afa158015614303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143279190614b67565b9050808c111561433557809b505b505b5050505050505050505b94509492505050565b61435382614805565b60085460405163573ade8160e01b81526001600160a01b03918216600482015260248101849052600260448201523060648201529082169063573ade8190608401600060405180830381600087803b1580156143ae57600080fd5b505af11580156143c2573d6000803e3d6000fd5b505050505050565b60405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b15801561442c57600080fd5b505af1158015613684573d6000803e3d6000fd5b60608160000180548060200260200160405190810160405280929190818152602001828054801561449057602002820191906000526020600020905b81548152602001906001019080831161447c575b50505050509050919050565b6060612ccf848460008561480e565b606080826001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b1580156144e757600080fd5b505afa925050508015614517575060408051601f3d908101601f1916820190925261451491810190614bdb565b60015b61452057915091565b60408051600180825281830190925260009160208083019080368337019050509050848160008151811061455657614556614d0f565b6001600160a01b03928316602091820292909201015260405163bb492bf560e01b81529083169063bb492bf5906145939084903090600401615147565b600060405180830381600087803b1580156145ad57600080fd5b505af11580156145c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145e99190810190615171565b935093505050915091565b6105c56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612b1f565b80156105c55760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156146a957600080fd5b505afa1580156146bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146e19190614b67565b90506000816146f884670de0b6b3a7640000614e8f565b6147029190614eae565b9050670de0b6b3a76400006147178383614e8f565b6147219190614eae565b831161472d5780614738565b614738816001614c97565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d6147b9837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161318b91906149ba565b6040518263ffffffff1660e01b81526004016147d791815260200190565b600060405180830381600087803b1580156147f157600080fd5b505af11580156132bf573d6000803e3d6000fd5b6105c581614648565b60608247101561486f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104b9565b843b6148bd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104b9565b600080866001600160a01b031685876040516148d99190615237565b60006040518083038185875af1925050503d8060008114614916576040519150601f19603f3d011682016040523d82523d6000602084013e61491b565b606091505b509150915061492b828286614936565b979650505050505050565b60608315614945575081611add565b8251156149555782518084602001fd5b8160405162461bcd60e51b81526004016104b99190614a51565b6001600160a01b03811681146105c557600080fd5b60006020828403121561499657600080fd5b8135611add8161496f565b6000602082840312156149b357600080fd5b5035919050565b6001600160a01b0391909116815260200190565b600081518084526020808501945080840160005b83811015614a075781516001600160a01b0316875295820195908201906001016149e2565b509495945050505050565b602081526000611add60208301846149ce565b60005b83811015614a40578181015183820152602001614a28565b83811115612f085750506000910152565b6020815260008251806020840152614a70816040850160208701614a25565b601f01601f19169190910160400192915050565b60008060408385031215614a9757600080fd5b8235614aa28161496f565b946020939093013593505050565b60008060408385031215614ac357600080fd5b50508035926020909101359150565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601f908201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604082015260600190565b60208082526014908201527306e6f742d616c6c6f7765642d746f2d73776565760641b604082015260600190565b600060208284031215614b7957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015614ba857614ba8614b80565b500390565b6020808252601490820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b604082015260600190565b600060208284031215614bed57600080fd5b8151611add8161496f565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600181811c90821680614c7657607f821691505b6020821081141561080257634e487b7160e01b600052602260045260246000fd5b60008219821115614caa57614caa614b80565b500190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b80518015158114614cef57600080fd5b919050565b600060208284031215614d0657600080fd5b611add82614cdf565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614d3957614d39614b80565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b0393841681526020810192909252909116604082015260600190565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715614db557614db5614d79565b6040525050565b600067ffffffffffffffff821115614dd657614dd6614d79565b5060051b60200190565b600082601f830112614df157600080fd5b81516020614dfe82614dbc565b604051614e0b8282614d8f565b83815260059390931b8501820192828101915086841115614e2b57600080fd5b8286015b84811015614e4f578051614e428161496f565b8352918301918301614e2f565b509695505050505050565b600060208284031215614e6c57600080fd5b815167ffffffffffffffff811115614e8357600080fd5b612ccf84828501614de0565b6000816000190483118215151615614ea957614ea9614b80565b500290565b600082614ecb57634e487b7160e01b600052601260045260246000fd5b500490565b600060033d1115614ee95760046000803e5060005160e01c5b90565b600060443d1015614efa5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715614f2a57505050505090565b8285019150815181811115614f425750505050505090565b843d8701016020828501011115614f5c5750505050505090565b614f6b60208286010187614d8f565b509095945050505050565b805160208083015191908110156108025760001960209190910360031b1b16919050565b6000806000806000806000806000806101408b8d031215614fba57600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b01519550614fe660a08c01614cdf565b9450614ff460c08c01614cdf565b935061500260e08c01614cdf565b92506150116101008c01614cdf565b91506150206101208c01614cdf565b90509295989b9194979a5092959850565b60006020828403121561504357600080fd5b815160ff81168114611add57600080fd5b600181815b8085111561508f57816000190482111561507557615075614b80565b8085161561508257918102915b93841c9390800290615059565b509250929050565b6000826150a657506001610d23565b816150b357506000610d23565b81600181146150c957600281146150d3576150ef565b6001915050610d23565b60ff8411156150e4576150e4614b80565b50506001821b610d23565b5060208310610133831016604e8410600b8410161715615112575081810a610d23565b61511c8383615054565b806000190482111561513057615130614b80565b029392505050565b6000611add60ff841683615097565b60408152600061515a60408301856149ce565b905060018060a01b03831660208301529392505050565b6000806040838503121561518457600080fd5b825167ffffffffffffffff8082111561519c57600080fd5b6151a886838701614de0565b93506020915081850151818111156151bf57600080fd5b85019050601f810186136151d257600080fd5b80516151dd81614dbc565b6040516151ea8282614d8f565b82815260059290921b830184019184810191508883111561520a57600080fd5b928401925b828410156152285783518252928401929084019061520f565b80955050505050509250929050565b60008251615249818460208701614a25565b919091019291505056fea264697066735822122050e8bbcba9eb58efd74814dd969f9ac6cb597657ac78d2ef1878ecfa59a597e764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a55760003560e01c8063a3f4df7e116100ef578063e260d74711610092578063e260d747146103fe578063e5328e0614610407578063ec78e8321461040f578063ee330ee314610422578063f7c618c114610435578063fb7ee10214610448578063fc0c546a1461045b578063ffa1ad741461046c57600080fd5b8063a3f4df7e14610329578063b2016bd41461033e578063c415b95c14610365578063cdaabe4114610378578063ce5494bb1461039f578063d2c35ce8146103b2578063d3033c39146103c5578063d8dfeb45146103d857600080fd5b80633ac9fc11116101575780633ac9fc111461025b5780634032b72b1461026e578063440d724814610281578063456dc17a146102a45780636719578c146102b75780637d7c2a1c146102de57806390d6751414610301578063951dc22c1461031457600080fd5b806301681a62146101aa5780630181686c146101bf5780631026013a146101db57806314ae9f2e146101ee57806316f0115b146102015780632b3297f9146102355780632e1a7d4d14610248575b600080fd5b6101bd6101b8366004614984565b610490565b005b6101c860075481565b6040519081526020015b60405180910390f35b6101c86101e93660046149a1565b610668565b6101bd6101fc366004614984565b610808565b6102287f000000000000000000000000000000000000000000000000000000000000000081565b6040516101d291906149ba565b600254610228906001600160a01b031681565b6101bd6102563660046149a1565b610917565b6101bd6102693660046149a1565b610b6a565b6101bd61027c366004614984565b610b98565b61029461028f366004614984565b610ca4565b60405190151581526020016101d2565b600854610228906001600160a01b031681565b6102287f000000000000000000000000000000000000000000000000000000000000000081565b6102e6610d29565b604080519384526020840192909252908201526060016101d2565b600954610228906001600160a01b031681565b61031c610d65565b6040516101d29190614a12565b610331610d76565b6040516101d29190614a51565b6102287f000000000000000000000000000000000000000000000000000000000000000081565b600154610228906001600160a01b031681565b6102287f000000000000000000000000000000000000000000000000000000000000000081565b6101bd6103ad366004614984565b610e04565b6101bd6103c0366004614984565b6110ce565b6101bd6103d3366004614984565b611297565b7f0000000000000000000000000000000000000000000000000000000000000000610228565b6101c860065481565b6101c8611454565b600054610228906001600160a01b031681565b6101c8610430366004614a84565b61157d565b600b54610228906001600160a01b031681565b6101bd610456366004614ab0565b611903565b6000546001600160a01b0316610228565b610331604051806040016040528060058152602001640352e312e360dc1b81525081565b61049d335b600390611ae4565b6104c25760405162461bcd60e51b81526004016104b990614ad2565b60405180910390fd5b6001546001600160a01b03166105125760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016104b9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156105645760405162461bcd60e51b81526004016104b990614b02565b61056d81610ca4565b1561058a5760405162461bcd60e51b81526004016104b990614b39565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156105c8576001546105c5906001600160a01b031647611b06565b50565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906105f79030906004016149ba565b60206040518083038186803b15801561060f57600080fd5b505afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106479190614b67565b600154909150610664906001600160a01b03848116911683611c24565b5050565b600061067333610495565b61068f5760405162461bcd60e51b81526004016104b990614ad2565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906106de9030906004016149ba565b60206040518083038186803b1580156106f657600080fd5b505afa15801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e9190614b67565b9050610738611c87565b6040516370a0823160e01b815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906107869030906004016149ba565b60206040518083038186803b15801561079e57600080fd5b505afa1580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d69190614b67565b6107e09190614b96565b9150828210156108025760405162461bcd60e51b81526004016104b990614bad565b50919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190614bdb565b6001600160a01b0316336001600160a01b0316146108c95760405162461bcd60e51b81526004016104b990614bf8565b6108d4600382611e63565b6105c55760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016104b9565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461095f5760405162461bcd60e51b81526004016104b990614c2f565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906109ae9030906004016149ba565b60206040518083038186803b1580156109c657600080fd5b505afa1580156109da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fe9190614b67565b9050818110610a5b576106646001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611c24565b610a6d610a688284614b96565b611e78565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610ab99030906004016149ba565b60206040518083038186803b158015610ad157600080fd5b505afa158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b099190614b67565b90506106647f0000000000000000000000000000000000000000000000000000000000000000610b398484612012565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611c24565b610b7333610495565b610b8f5760405162461bcd60e51b81526004016104b990614ad2565b6105c581612028565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610bf157600080fd5b505afa158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190614bdb565b6001600160a01b0316336001600160a01b031614610c595760405162461bcd60e51b81526004016104b990614bf8565b610c64600382611ac8565b6105c55760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016104b9565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610cf357506000546001600160a01b038381169116145b80610d0b57506009546001600160a01b038381169116145b80610d2357506008546001600160a01b038381169116145b92915050565b60008080610d3633610495565b610d525760405162461bcd60e51b81526004016104b990614ad2565b610d5a612096565b925092509250909192565b6060610d716003612920565b905090565b60058054610d8390614c62565b80601f0160208091040260200160405190810160405280929190818152602001828054610daf90614c62565b8015610dfc5780601f10610dd157610100808354040283529160200191610dfc565b820191906000526020600020905b815481529060010190602001808311610ddf57829003601f168201915b505050505081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610e4c5760405162461bcd60e51b81526004016104b990614c2f565b6001600160a01b038116610ea25760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016104b9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0557600080fd5b505afa158015610f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3d9190614bdb565b6001600160a01b031614610f8c5760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016104b9565b610f958161292d565b6000546040516370a0823160e01b815261102e9183916001600160a01b03909116906370a0823190610fcb9030906004016149ba565b60206040518083038186803b158015610fe357600080fd5b505afa158015610ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101b9190614b67565b6000546001600160a01b03169190611c24565b6105c5817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161107e91906149ba565b60206040518083038186803b15801561109657600080fd5b505afa1580156110aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b399190614b67565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561112757600080fd5b505afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f9190614bdb565b6001600160a01b0316336001600160a01b03161461118f5760405162461bcd60e51b81526004016104b990614bf8565b6001600160a01b0381166111e55760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016104b9565b6001546001600160a01b038281169116141561123b5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016104b9565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156112f057600080fd5b505afa158015611304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113289190614bdb565b6001600160a01b0316336001600160a01b0316146113585760405162461bcd60e51b81526004016104b990614bf8565b6001600160a01b0381166113a85760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b60448201526064016104b9565b6002546001600160a01b03828116911614156113f85760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b60448201526064016104b9565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906114a39030906004016149ba565b60206040518083038186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f39190614b67565b6000546040516370a0823160e01b81526001600160a01b03909116906370a08231906115239030906004016149ba565b60206040518083038186803b15801561153b57600080fd5b505afa15801561154f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115739190614b67565b610d719190614c97565b600061158833610495565b6115a45760405162461bcd60e51b81526004016104b990614ad2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156115f65760405162461bcd60e51b81526004016104b990614b02565b6115ff83610ca4565b1561161c5760405162461bcd60e51b81526004016104b990614b39565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061166b9030906004016149ba565b60206040518083038186803b15801561168357600080fd5b505afa158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb9190614b67565b90506000846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016116eb91906149ba565b60206040518083038186803b15801561170357600080fd5b505afa158015611717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b9190614b67565b9050801561183157600254604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529086169063dd62ed3e9060440160206040518083038186803b15801561178e57600080fd5b505afa1580156117a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c69190614b67565b811115611804576002546117e8906001600160a01b0387811691166000612b1f565b600254611804906001600160a01b038781169116600019612b1f565b61182f857f000000000000000000000000000000000000000000000000000000000000000083612c43565b505b6040516370a0823160e01b815282906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061187f9030906004016149ba565b60206040518083038186803b15801561189757600080fd5b505afa1580156118ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cf9190614b67565b6118d99190614b96565b9250838310156118fb5760405162461bcd60e51b81526004016104b990614bad565b505092915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561195c57600080fd5b505afa158015611970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119949190614bdb565b6001600160a01b0316336001600160a01b0316146119c45760405162461bcd60e51b81526004016104b990614bf8565b6127108110611a105760405162461bcd60e51b81526020600482015260186024820152771a5b9d985b1a590b5b585e0b589bdc9c9bddcb5b1a5b5a5d60421b60448201526064016104b9565b80158015611a1c575081155b80611a2657508181115b611a725760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e00000060448201526064016104b9565b6006546007546040805192835260208301859052820152606081018290527fedd77444afdf63401315e81ffe86d08f7865796e8ad2e11acf1d56a1393f07d59060800160405180910390a1600691909155600755565b6000611add836001600160a01b038416612cd7565b9392505050565b6001600160a01b03811660009081526001830160205260408120541515611add565b80471015611b565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016104b9565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611ba3576040519150601f19603f3d011682016040523d82523d6000602084013e611ba8565b606091505b5050905080611c1f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016104b9565b505050565b6040516001600160a01b038316602482015260448101829052611c1f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612d26565b611c8f612df8565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b158015611cea57600080fd5b505afa158015611cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d229190614bdb565b90506001600160a01b03811615611d925760405163d279c19160e01b81526001600160a01b0382169063d279c19190611d5f9030906004016149ba565b600060405180830381600087803b158015611d7957600080fd5b505af1158015611d8d573d6000803e3d6000fd5b505050505b600b546001600160a01b0316156105c557600b546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611dd49030906004016149ba565b60206040518083038186803b158015611dec57600080fd5b505afa158015611e00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e249190614b67565b9050801561066457600b54610664906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083612f0e565b6000611add836001600160a01b038416612f9a565b6105c5817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ed557600080fd5b505afa158015611ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0d9190614bdb565b6009546040516370a0823160e01b81526001600160a01b03909116906370a0823190611f3d9030906004016149ba565b60206040518083038186803b158015611f5557600080fd5b505afa158015611f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8d9190614b67565b6000546040516370a0823160e01b81526001600160a01b03909116906370a0823190611fbd9030906004016149ba565b60206040518083038186803b158015611fd557600080fd5b505afa158015611fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200d9190614b67565b61308d565b60008183106120215781611add565b5090919050565b612031816132c8565b600854612068906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083612b1f565b600b546001600160a01b0316156105c557600254600b546105c5916001600160a01b03918216911683612b1f565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b81526004016120e891906149ba565b60206040518083038186803b15801561210057600080fd5b505afa158015612114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121389190614b67565b6009546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061216e9030906004016149ba565b60206040518083038186803b15801561218657600080fd5b505afa15801561219a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121be9190614b67565b905060006121ca61368b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222757600080fd5b505afa15801561223b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225f9190614bdb565b9050818311156122815761227c6122768385614b96565b82613807565b612293565b61229361228e8484614b96565b613b0a565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906122e29030906004016149ba565b60206040518083038186803b1580156122fa57600080fd5b505afa15801561230e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123329190614b67565b600080546040516370a0823160e01b815292935090916001600160a01b03909116906370a08231906123689030906004016149ba565b60206040518083038186803b15801561238057600080fd5b505afa158015612394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b89190614b67565b905060006123c68383614c97565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b815260040161241691906149ba565b60206040518083038186803b15801561242e57600080fd5b505afa158015612442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124669190614b67565b9050808211156124815761247a8183614b96565b9a5061248e565b61248b8282614b96565b99505b600061249a898d614c97565b90508085101561256e5760006124b96124b38784614b96565b86612012565b9050801561256c576124cd81888b8861308d565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906125199030906004016149ba565b60206040518083038186803b15801561253157600080fd5b505afa158015612545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125699190614b67565b95505b505b612578858a612012565b995089851161258857600061259b565b61259b6125958b87614b96565b8d612012565b6040516302df682360e11b815260048101829052602481018d9052604481018c9052909c507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b15801561260e57600080fd5b505af1158015612622573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a08231906126759030906004016149ba565b60206040518083038186803b15801561268d57600080fd5b505afa1580156126a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c59190614b67565b90506126d18188613bd9565b6009546040516370a0823160e01b815260009182916127e191839182916001600160a01b0316906370a082319061270c9030906004016149ba565b60206040518083038186803b15801561272457600080fd5b505afa158015612738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275c9190614b67565b6000546040516370a0823160e01b81526001600160a01b03909116906370a082319061278c9030906004016149ba565b60206040518083038186803b1580156127a457600080fd5b505afa1580156127b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127dc9190614b67565b613cec565b909250905080156127fb576127f6818a61434a565b61287c565b811561287c5760085460405163a415bcad60e01b81526001600160a01b039182166004820152602481018490526002604482015260006064820152306084820152908a169063a415bcad9060a401600060405180830381600087803b15801561286357600080fd5b505af1158015612877573d6000803e3d6000fd5b505050505b6008546040516370a0823160e01b81526000916001600160a01b0316906370a08231906128ad9030906004016149ba565b60206040518083038186803b1580156128c557600080fd5b505afa1580156128d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fd9190614b67565b9050801561290e5761290e816143ca565b50505050505050505050505050909192565b60606000611add83614440565b60008054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561298357600080fd5b505afa158015612997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129bb9190614bdb565b6001600160a01b031614612a075760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b60448201526064016104b9565b6009546040516370a0823160e01b81526105c5916001600160a01b0316906370a0823190612a399030906004016149ba565b60206040518083038186803b158015612a5157600080fd5b505afa158015612a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a899190614b67565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ae257600080fd5b505afa158015612af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1a9190614bdb565b61434a565b801580612ba85750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612b6e57600080fd5b505afa158015612b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba69190614b67565b155b612c135760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016104b9565b6040516001600160a01b038316602482015260448101829052611c1f90849063095ea7b360e01b90606401611c50565b600254604051636ccb2b0160e01b81526000916001600160a01b031690636ccb2b0190612c7d908790879087906001903090600401614caf565b602060405180830381600087803b158015612c9757600080fd5b505af1158015612cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccf9190614b67565b949350505050565b6000818152600183016020526040812054612d1e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d23565b506000610d23565b6000612d7b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661449c9092919063ffffffff16565b805190915015611c1f5780806020019051810190612d999190614cf4565b611c1f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104b9565b600080548190612e10906001600160a01b03166144ab565b8151919350915060005b81811015612f08576000838281518110612e3657612e36614d0f565b6020026020010151118015612e9657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316848281518110612e8257612e82614d0f565b60200260200101516001600160a01b031614155b15612ef857612ef8848281518110612eb057612eb0614d0f565b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000858481518110612eeb57612eeb614d0f565b6020026020010151612f0e565b612f0181614d25565b9050612e1a565b50505050565b600254604051636ccb2b0160e01b81526001600160a01b0390911690636ccb2b0190612f47908690869086906001903090600401614caf565b602060405180830381600087803b158015612f6157600080fd5b505af1925050508015612f91575060408051601f3d908101601f19168201909252612f8e91810190614b67565b60015b612f0857505050565b60008181526001830160205260408120548015613083576000612fbe600183614b96565b8554909150600090612fd290600190614b96565b9050818114613037576000866000018281548110612ff257612ff2614d0f565b906000526020600020015490508087600001848154811061301557613015614d0f565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061304857613048614d40565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d23565b6000915050610d23565b600061309c6000868585613cec565b91505080156130af576130af818561434a565b600080546040516370a0823160e01b81526131e09188916131db916001600160a01b0316906370a08231906130e89030906004016149ba565b60206040518083038186803b15801561310057600080fd5b505afa158015613114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131389190614b67565b6000546040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926370a082319261318b9291909116906004016149ba565b60206040518083038186803b1580156131a357600080fd5b505afa1580156131b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131db9190614b67565b612012565b905080856001600160a01b03166369328dec7f000000000000000000000000000000000000000000000000000000000000000084306040518463ffffffff1660e01b815260040161323393929190614d56565b602060405180830381600087803b15801561324d57600080fd5b505af1158015613261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132859190614b67565b1460405180604001604052806002815260200161323960f01b815250906132bf5760405162461bcd60e51b81526004016104b99190614a51565b50505050505050565b6132d1816145f4565b6000600260009054906101000a90046001600160a01b031690506133b07f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561334757600080fd5b505afa15801561335b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061337f9190614bdb565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084612b1f565b6133e46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284612b1f565b61348b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561344057600080fd5b505afa158015613454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134789190614bdb565b6008546001600160a01b03169084612b1f565b6008546134a2906001600160a01b03168284612b1f565b60008054906101000a90046001600160a01b03166001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b1580156134ee57600080fd5b505afa92505050801561351e575060408051601f3d908101601f1916820190925261351b91810190614bdb565b60015b613526575050565b6000816001600160a01b031663b45ac1a96040518163ffffffff1660e01b815260040160006040518083038186803b15801561356157600080fd5b505afa158015613575573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261359d9190810190614e5a565b905060005b8151811015613684577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168282815181106135e7576135e7614d0f565b60200260200101516001600160a01b031614158015613638575060085482516001600160a01b039091169083908390811061362457613624614d0f565b60200260200101516001600160a01b031614155b1561367457613674848684848151811061365457613654614d0f565b60200260200101516001600160a01b0316612b1f9092919063ffffffff16565b61367d81614d25565b90506135a2565b5050505050565b6000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016136e291906149ba565b60206040518083038186803b1580156136fa57600080fd5b505afa15801561370e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137329190614b67565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561378b57600080fd5b505afa15801561379f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c39190614b67565b6137cd9190614e8f565b6137d79190614eae565b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906115239030906004016149ba565b6002546008546040516353b609b560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291821660248201526044810185905260009291909116906353b609b590606401602060405180830381600087803b15801561388457600080fd5b505af1158015613898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138bc9190614b67565b90508015611c1f576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906139139030906004016149ba565b60206040518083038186803b15801561392b57600080fd5b505afa15801561393f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139639190614b67565b905080821115613a5b5760006139798284614b96565b905080846001600160a01b03166369328dec7f000000000000000000000000000000000000000000000000000000000000000084306040518463ffffffff1660e01b81526004016139cc93929190614d56565b602060405180830381600087803b1580156139e657600080fd5b505af11580156139fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1e9190614b67565b1460405180604001604052806002815260200161323960f01b81525090613a585760405162461bcd60e51b81526004016104b99190614a51565b50505b6002546008546040516381cc619b60e01b81526001600160a01b03928316926381cc619b92613ab8927f00000000000000000000000000000000000000000000000000000000000000009290911690899088903090600401614caf565b602060405180830381600087803b158015613ad257600080fd5b505af1158015613ae6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136849190614b67565b80156105c557613b1981614648565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613b4a9030906004016149ba565b60206040518083038186803b158015613b6257600080fd5b505afa158015613b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b9a9190614b67565b9050801561066457600854610664906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083612f0e565b81156106645760405163617ba03760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490523060448301526000606483015282169063617ba03790608401600060405180830381600087803b158015613c5657600080fd5b505af1925050508015613c67575060015b61066457613c73614ed0565b806308c379a01415613ce05750613c88614eec565b80613c935750613ce2565b613c9c81614f76565b611a9b60f11b14611c1f5760405162461bcd60e51b815260206004820152600e60248201526d19195c1bdcda5d0819985a5b195960921b60448201526064016104b9565b505b3d6000803e3d6000fd5b600080851580613cfa575084155b613d3a5760405162461bcd60e51b8152602060048201526011602482015270616c6c2d696e7075742d67742d7a65726f60781b60448201526064016104b9565b600754613d4c57506000905082614341565b6000808711613d7257858411613d63576000613d7c565b613d6d8685614b96565b613d7c565b613d7c8785614c97565b905080613d90576000859250925050614341565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b158015613deb57600080fd5b505afa158015613dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e239190614bdb565b60085460405163b3596f0760e01b81529192506000916001600160a01b038085169263b3596f0792613e5b92909116906004016149ba565b60206040518083038186803b158015613e7357600080fd5b505afa158015613e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eab9190614b67565b90506000826001600160a01b031663b3596f077f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401613efb91906149ba565b60206040518083038186803b158015613f1357600080fd5b505afa158015613f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f4b9190614b67565b9050811580613f58575080155b15613f6d576000889550955050505050614341565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e860accb6040518163ffffffff1660e01b815260040160206040518083038186803b158015613fc857600080fd5b505afa158015613fdc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140009190614bdb565b6001600160a01b0316633e1501417f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161404b91906149ba565b6101406040518083038186803b15801561406457600080fd5b505afa158015614078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061409c9190614f9a565b505050505050505091505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561410257600080fd5b505afa158015614116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061413a9190615031565b61414590600a615138565b61415190612710614e8f565b8361415c8489614e8f565b6141669190614e8f565b6141709190614eae565b9050600084600860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156141c357600080fd5b505afa1580156141d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141fb9190615031565b61420690600a615138565b6142109084614e8f565b61421a9190614eae565b9050806142345760008b9850985050505050505050614341565b6000612710600754836142479190614e8f565b6142519190614eae565b90506000612710600654846142669190614e8f565b6142709190614eae565b9050818d111561428b57614284818e614b96565b9950614337565b8c8111156143375761429d8d82614b96565b600854600a546040516370a0823160e01b8152929d506000926001600160a01b03928316926370a08231926142d7929116906004016149ba565b60206040518083038186803b1580156142ef57600080fd5b505afa158015614303573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143279190614b67565b9050808c111561433557809b505b505b5050505050505050505b94509492505050565b61435382614805565b60085460405163573ade8160e01b81526001600160a01b03918216600482015260248101849052600260448201523060648201529082169063573ade8190608401600060405180830381600087803b1580156143ae57600080fd5b505af11580156143c2573d6000803e3d6000fd5b505050505050565b60405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b15801561442c57600080fd5b505af1158015613684573d6000803e3d6000fd5b60608160000180548060200260200160405190810160405280929190818152602001828054801561449057602002820191906000526020600020905b81548152602001906001019080831161447c575b50505050509050919050565b6060612ccf848460008561480e565b606080826001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b1580156144e757600080fd5b505afa925050508015614517575060408051601f3d908101601f1916820190925261451491810190614bdb565b60015b61452057915091565b60408051600180825281830190925260009160208083019080368337019050509050848160008151811061455657614556614d0f565b6001600160a01b03928316602091820292909201015260405163bb492bf560e01b81529083169063bb492bf5906145939084903090600401615147565b600060405180830381600087803b1580156145ad57600080fd5b505af11580156145c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526145e99190810190615171565b935093505050915091565b6105c56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612b1f565b80156105c55760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156146a957600080fd5b505afa1580156146bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146e19190614b67565b90506000816146f884670de0b6b3a7640000614e8f565b6147029190614eae565b9050670de0b6b3a76400006147178383614e8f565b6147219190614eae565b831161472d5780614738565b614738816001614c97565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d6147b9837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161318b91906149ba565b6040518263ffffffff1660e01b81526004016147d791815260200190565b600060405180830381600087803b1580156147f157600080fd5b505af11580156132bf573d6000803e3d6000fd5b6105c581614648565b60608247101561486f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104b9565b843b6148bd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104b9565b600080866001600160a01b031685876040516148d99190615237565b60006040518083038185875af1925050503d8060008114614916576040519150601f19603f3d011682016040523d82523d6000602084013e61491b565b606091505b509150915061492b828286614936565b979650505050505050565b60608315614945575081611add565b8251156149555782518084602001fd5b8160405162461bcd60e51b81526004016104b99190614a51565b6001600160a01b03811681146105c557600080fd5b60006020828403121561499657600080fd5b8135611add8161496f565b6000602082840312156149b357600080fd5b5035919050565b6001600160a01b0391909116815260200190565b600081518084526020808501945080840160005b83811015614a075781516001600160a01b0316875295820195908201906001016149e2565b509495945050505050565b602081526000611add60208301846149ce565b60005b83811015614a40578181015183820152602001614a28565b83811115612f085750506000910152565b6020815260008251806020840152614a70816040850160208701614a25565b601f01601f19169190910160400192915050565b60008060408385031215614a9757600080fd5b8235614aa28161496f565b946020939093013593505050565b60008060408385031215614ac357600080fd5b50508035926020909101359150565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601f908201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604082015260600190565b60208082526014908201527306e6f742d616c6c6f7765642d746f2d73776565760641b604082015260600190565b600060208284031215614b7957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015614ba857614ba8614b80565b500390565b6020808252601490820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b604082015260600190565b600060208284031215614bed57600080fd5b8151611add8161496f565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600181811c90821680614c7657607f821691505b6020821081141561080257634e487b7160e01b600052602260045260246000fd5b60008219821115614caa57614caa614b80565b500190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b80518015158114614cef57600080fd5b919050565b600060208284031215614d0657600080fd5b611add82614cdf565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614d3957614d39614b80565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b0393841681526020810192909252909116604082015260600190565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715614db557614db5614d79565b6040525050565b600067ffffffffffffffff821115614dd657614dd6614d79565b5060051b60200190565b600082601f830112614df157600080fd5b81516020614dfe82614dbc565b604051614e0b8282614d8f565b83815260059390931b8501820192828101915086841115614e2b57600080fd5b8286015b84811015614e4f578051614e428161496f565b8352918301918301614e2f565b509695505050505050565b600060208284031215614e6c57600080fd5b815167ffffffffffffffff811115614e8357600080fd5b612ccf84828501614de0565b6000816000190483118215151615614ea957614ea9614b80565b500290565b600082614ecb57634e487b7160e01b600052601260045260246000fd5b500490565b600060033d1115614ee95760046000803e5060005160e01c5b90565b600060443d1015614efa5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715614f2a57505050505090565b8285019150815181811115614f425750505050505090565b843d8701016020828501011115614f5c5750505050505090565b614f6b60208286010187614d8f565b509095945050505050565b805160208083015191908110156108025760001960209190910360031b1b16919050565b6000806000806000806000806000806101408b8d031215614fba57600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b01519550614fe660a08c01614cdf565b9450614ff460c08c01614cdf565b935061500260e08c01614cdf565b92506150116101008c01614cdf565b91506150206101208c01614cdf565b90509295989b9194979a5092959850565b60006020828403121561504357600080fd5b815160ff81168114611add57600080fd5b600181815b8085111561508f57816000190482111561507557615075614b80565b8085161561508257918102915b93841c9390800290615059565b509250929050565b6000826150a657506001610d23565b816150b357506000610d23565b81600181146150c957600281146150d3576150ef565b6001915050610d23565b60ff8411156150e4576150e4614b80565b50506001821b610d23565b5060208310610133831016604e8410600b8410161715615112575081810a610d23565b61511c8383615054565b806000190482111561513057615130614b80565b029392505050565b6000611add60ff841683615097565b60408152600061515a60408301856149ce565b905060018060a01b03831660208301529392505050565b6000806040838503121561518457600080fd5b825167ffffffffffffffff8082111561519c57600080fd5b6151a886838701614de0565b93506020915081850151818111156151bf57600080fd5b85019050601f810186136151d257600080fd5b80516151dd81614dbc565b6040516151ea8282614d8f565b82815260059290921b830184019184810191508883111561520a57600080fd5b928401925b828410156152285783518252928401929084019061520f565b80955050505050509250929050565b60008251615249818460208701614a25565b919091019291505056fea264697066735822122050e8bbcba9eb58efd74814dd969f9ac6cb597657ac78d2ef1878ecfa59a597e764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken(uint256)": {
        "details": "Approve all required tokens"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweep(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateBorrowLimit(uint256,uint256)": {
        "details": "It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything",
        "params": {
          "_maxBorrowLimit": "It is % of actual collateral factor of protocol",
          "_minBorrowLimit": "It is % of actual collateral factor of protocol"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "claimAndSwapRewards(uint256)": {
        "notice": "Claim rewardToken and convert rewardToken into collateral token."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "swapToCollateral(address,uint256)": {
        "notice": "onlyKeeper:: Swap given token into collateral token."
      },
      "sweep(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns total collateral locked in the strategy"
      },
      "updateBorrowLimit(uint256,uint256)": {
        "notice": "Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol."
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14399,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14405,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14408,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)13247"
      },
      {
        "astId": 14421,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3025_storage"
      },
      {
        "astId": 18004,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 18013,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "minBorrowLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 18016,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "maxBorrowLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 18021,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "borrowToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 18024,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "vdToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(AToken)9985"
      },
      {
        "astId": 18026,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "aBorrowToken",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 17641,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "rewardToken",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AToken)9985": {
        "encoding": "inplace",
        "label": "contract AToken",
        "numberOfBytes": "20"
      },
      "t_contract(IRoutedSwapper)13247": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3025_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3024,
            "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2724_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2724_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2719,
            "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2723,
            "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}