{
  "address": "0xfD5B3e34b53BF6f603155620821De612006C8A45",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aaveAddressesProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiptToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMinBorrowRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinBorrowRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMaxBorrowRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBorrowRatio",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBorrowRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "claimAndSwapRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract Comptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBorrowRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_borrow",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAaveActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBorrowRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swapToCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateAaveStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBorrowRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBorrowRatio",
          "type": "uint256"
        }
      ],
      "name": "updateBorrowRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa596457ea87438331108a8045161bfcd5790bee7eee6a4dab48bac6d222324d7",
  "receipt": {
    "to": null,
    "from": "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "contractAddress": "0xfD5B3e34b53BF6f603155620821De612006C8A45",
    "transactionIndex": 0,
    "gasUsed": "4482582",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb81736224b86df42a43cd4d517c742261c845e2d01d48995fb8e5d61270a9ae6",
    "transactionHash": "0xa596457ea87438331108a8045161bfcd5790bee7eee6a4dab48bac6d222324d7",
    "logs": [],
    "blockNumber": 96123787,
    "cumulativeGasUsed": "4482582",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCcF3d1AcF799bAe67F6e354d685295557cf64761",
    "0x017CBF62b53313d5eE3aD1288daA95CD39AA11fE",
    "0x60CF091cD3f50420d50fD7f707414d0DF4751C58",
    "0x1DB2466d9F5e10D7090E7152B68d62703a2245F0",
    "0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb",
    "0xf7B5965f5C117Eb1B5450187c9DcFccc3C317e8E",
    "Sonne_Leverage_ETH"
  ],
  "numDeployments": 1,
  "solcInputHash": "17b66827d396d8018d789e07b93590f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveAddressesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinBorrowRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinBorrowRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaxBorrowRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBorrowRatio\",\"type\":\"uint256\"}],\"name\":\"UpdatedBorrowRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"claimAndSwapRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBorrowRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAaveActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapToCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAaveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowRatio\",\"type\":\"uint256\"}],\"name\":\"updateBorrowRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken(uint256)\":{\"details\":\"Approve all required tokens\"},\"executeOperation(address[],uint256[],uint256[],address,bytes)\":{\"details\":\"Aave will call this function after doing flash loan\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweep(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateBorrowRatio(uint256,uint256)\":{\"details\":\"It is possible to set 0 as _minBorrowRatio to not borrow anything\",\"params\":{\"_maxBorrowRatio\":\"Maximum % we want to borrow\",\"_minBorrowRatio\":\"Minimum % we want to borrow\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"claimAndSwapRewards(uint256)\":{\"notice\":\"Claim rewardToken and convert rewardToken into collateral token.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"currentBorrowRatio()\":{\"notice\":\"Current borrow ratio, calculated as current borrow divide by max allowed borrow Return value is based on basis points, i.e. 7500 = 75% ratio\"},\"getPosition()\":{\"notice\":\"Return supply and borrow position. Position may return few block old value\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"swapToCollateral(address,uint256)\":{\"notice\":\"onlyKeeper:: Swap given token into collateral token.\"},\"sweep(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns total collateral locked in the strategy\"},\"updateBorrowRatio(uint256,uint256)\":{\"notice\":\"Update upper and lower borrow ratio\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol\":\"SonneLeverage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function sweep(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf7b06736a402e8548dd9cd3752418ab23e44426652f0fee6e0a40e37fbacdcab\",\"license\":\"MIT\"},\"vesper-pools/contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title Errors library\\nlibrary Errors {\\n    string public constant INVALID_COLLATERAL_AMOUNT = \\\"1\\\"; // Collateral must be greater than 0 or > defined limit\\n    string public constant INVALID_SHARE_AMOUNT = \\\"2\\\"; // Share must be greater than 0\\n    string public constant INVALID_INPUT_LENGTH = \\\"3\\\"; // Input array length must be greater than 0\\n    string public constant INPUT_LENGTH_MISMATCH = \\\"4\\\"; // Input array length mismatch with another array length\\n    string public constant NOT_WHITELISTED_ADDRESS = \\\"5\\\"; // Caller is not whitelisted to withdraw without fee\\n    string public constant MULTI_TRANSFER_FAILED = \\\"6\\\"; // Multi transfer of tokens has failed\\n    string public constant FEE_COLLECTOR_NOT_SET = \\\"7\\\"; // Fee Collector is not set\\n    string public constant NOT_ALLOWED_TO_SWEEP = \\\"8\\\"; // Token is not allowed to sweep\\n    string public constant INSUFFICIENT_BALANCE = \\\"9\\\"; // Insufficient balance to performs operations to follow\\n    string public constant INPUT_ADDRESS_IS_ZERO = \\\"10\\\"; // Input address is zero\\n    string public constant FEE_LIMIT_REACHED = \\\"11\\\"; // Fee must be less than MAX_BPS\\n    string public constant ALREADY_INITIALIZED = \\\"12\\\"; // Data structure, contract, or logic already initialized and can not be called again\\n    string public constant ADD_IN_LIST_FAILED = \\\"13\\\"; // Cannot add address in address list\\n    string public constant REMOVE_FROM_LIST_FAILED = \\\"14\\\"; // Cannot remove address from address list\\n    string public constant STRATEGY_IS_ACTIVE = \\\"15\\\"; // Strategy is already active, an inactive strategy is required\\n    string public constant STRATEGY_IS_NOT_ACTIVE = \\\"16\\\"; // Strategy is not active, an active strategy is required\\n    string public constant INVALID_STRATEGY = \\\"17\\\"; // Given strategy is not a strategy of this pool\\n    string public constant DEBT_RATIO_LIMIT_REACHED = \\\"18\\\"; // Debt ratio limit reached. It must be less than MAX_BPS\\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \\\"19\\\"; // Strategy total debt must be 0\\n    string public constant LOSS_TOO_HIGH = \\\"20\\\"; // Strategy reported loss must be less than current debt\\n    string public constant INVALID_MAX_BORROW_LIMIT = \\\"21\\\"; // Max borrow limit is beyond range.\\n    string public constant MAX_LIMIT_LESS_THAN_MIN = \\\"22\\\"; // Max limit should be greater than min limit.\\n    string public constant INVALID_SLIPPAGE = \\\"23\\\"; // Slippage should be less than MAX_BPS\\n    string public constant WRONG_RECEIPT_TOKEN = \\\"24\\\"; // Wrong receipt token address\\n    string public constant AAVE_FLASH_LOAN_NOT_ACTIVE = \\\"25\\\"; // aave flash loan is not active\\n    string public constant DYDX_FLASH_LOAN_NOT_ACTIVE = \\\"26\\\"; // DYDX flash loan is not active\\n    string public constant INVALID_FLASH_LOAN = \\\"27\\\"; // invalid-flash-loan\\n    string public constant INVALID_INITIATOR = \\\"28\\\"; // \\\"invalid-initiator\\\"\\n    string public constant INCORRECT_WITHDRAW_AMOUNT = \\\"29\\\"; // withdrawn amount is not correct\\n    string public constant NO_MARKET_ID_FOUND = \\\"30\\\"; // dydx flash loan no marketId found for token\\n    string public constant SAME_AS_PREVIOUS = \\\"31\\\"; // Input should not be same as previous value.\\n    string public constant INVALID_INPUT = \\\"32\\\"; // Generic invalid input error code\\n}\\n\",\"keccak256\":\"0x96be83cb172a1efef0ff9771392f0b1d192a680fb2b36b061efbd49177afb947\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokenLike is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x003b4063990378d64f20d02f3da97c58338d85c0ca65955ed4a21065e2bb559a\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 profit_) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 collateralAmount_) external;\\n\\n    function excessDebt(address strategy_) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(uint256 profit_, uint256 loss_, uint256 payback_) external;\\n\\n    function reportLoss(uint256 loss_) external;\\n\\n    function sweepERC20(address fromToken_) external;\\n\\n    function withdraw(uint256 share_) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address address_) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address address_) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(\\n        address strategy_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address strategy_) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e04db3bafbcc5985db33ae168ada16fed2bbc42a6cd26bbe936a71a4f537e0c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/aave/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface PoolAddressesProviderV3 {\\n    function getPool() external view returns (AaveLendingPool);\\n\\n    function getPoolDataProvider() external view returns (AaveProtocolDataProvider);\\n}\\n\\n// @dev Interface support both Aave v2 and v3 methods\\ninterface PoolAddressesProvider {\\n    function getPool() external view returns (address);\\n\\n    // Aave v2 method.\\n    function getLendingPool() external view returns (address);\\n\\n    function getPoolDataProvider() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\\ninterface AaveOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\\n\\ninterface AToken is IERC20 {\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (address);\\n\\n    function mint(address user, uint256 amount, uint256 index) external returns (bool);\\n\\n    function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n    //solhint-disable func-name-mixedcase\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\\ninterface AaveIncentivesController {\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\n\\n    function claimAllRewards(\\n        address[] calldata assets,\\n        address to\\n    ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    function getRewardsList() external view returns (address[] memory);\\n}\\n\\ninterface AaveLendingPool {\\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function repay(address asset, uint256 amount, uint256 interestRateMode, address onBehalfOf) external;\\n\\n    function getUserAccountData(\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n}\\n\\ninterface AaveProtocolDataProvider {\\n    function getReserveTokensAddresses(\\n        address asset\\n    ) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\\n\\n    function getReserveData(\\n        address asset\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getReserveConfigurationData(\\n        address asset\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n}\\n\\n//solhint-disable func-name-mixedcase\\ninterface StakedAave is IERC20 {\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function stake(address onBehalfOf, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3fdc4904b0a44e9876e050b3439ff521ecc0fc860a8340134e8ad16f65b8d7b5\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface CToken {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account) external view returns (uint256, uint256, uint256, uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow() external payable; // For ETH\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\\n\\n    function transfer(address user, uint256 amount) external returns (bool);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function transferFrom(address owner, address user, uint256 amount) external returns (bool);\\n\\n    function underlying() external view returns (address);\\n\\n    function comptroller() external view returns (address);\\n\\n    function totalBorrows() external view returns (uint256);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\\n\\n    function markets(\\n        address market\\n    ) external view returns (bool isListed, uint256 collateralFactorMantissa, bool isCompted);\\n\\n    function oracle() external view returns (address);\\n\\n    function borrowCaps(address market) external view returns (uint256);\\n\\n    function compSupplySpeeds(address cToken) external view returns (uint256);\\n}\\n\\ninterface VenusComptroller is Comptroller {\\n    function claimVenus(address holder, address[] memory) external;\\n}\\n\\ninterface Oracle {\\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\\n\\n    function price(string memory symbol) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5297f809daaa42c95ddc6cd59d9aef405f980d1be3473ec1dff524d5d371c21d\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/compound/IComptrollerMultiReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport \\\"./ICompound.sol\\\";\\n\\ninterface ComptrollerMultiReward {\\n    function claimReward(uint8 rewardType, address holder) external;\\n\\n    function claimReward(uint8 rewardType, address holder, address[] memory markets) external;\\n\\n    function rewardDistributor() external view returns (address);\\n}\\n\\ninterface TraderJoeComptroller {\\n    function markets(\\n        address market\\n    ) external view returns (bool isListed, uint256 collateralFactorMantissa, uint8 version);\\n}\\n\\ninterface IRewardDistributor {\\n    function rewardAccrued(uint8 rewardType, address holder) external view returns (uint256);\\n\\n    function admin() external view returns (address);\\n\\n    function _setRewardSpeed(\\n        uint8 rewardType,\\n        address jToken,\\n        uint256 rewardSupplySpeed,\\n        uint256 rewardBorrowSpeed\\n    ) external;\\n}\\n\",\"keccak256\":\"0x22816516e4ced2bfe0094fbe584beaf16a6e67bc17c7ee31a7c9ab6a104fa24a\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(address tokenIn_, address tokenOut_, uint256 amountOut_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(address tokenIn_, address tokenOut_, uint256 amountIn_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x853ff5f9fbdd441f535370e39d43221d72d7a02fd5e48e343bbecb716a633f10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/AaveFlashLoanHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/Errors.sol\\\";\\nimport \\\"../interfaces/aave/IAave.sol\\\";\\n\\n/**\\n * @title FlashLoanHelper:: This contract does all heavy lifting to get flash loan via Aave.\\n * @dev End user has to override _flashLoanLogic() function to perform logic after flash loan is done.\\n *      Also needs to approve token to Aave via _approveToken function.\\n *      1 utility internal function is also provided to activate/deactivate flash loan.\\n *      Utility function is provided as internal so that end user can choose controlled access via public function.\\n */\\nabstract contract AaveFlashLoanHelper {\\n    using SafeERC20 for IERC20;\\n\\n    PoolAddressesProviderV3 internal poolAddressesProvider;\\n\\n    bool public isAaveActive = false;\\n\\n    constructor(address _aaveAddressesProvider) {\\n        require(_aaveAddressesProvider != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        poolAddressesProvider = PoolAddressesProviderV3(_aaveAddressesProvider);\\n    }\\n\\n    function _updateAaveStatus(bool _status) internal {\\n        isAaveActive = _status;\\n    }\\n\\n    /// @notice Approve all required tokens for flash loan\\n    function _approveToken(address _token, uint256 _amount) internal {\\n        IERC20(_token).safeApprove(address(poolAddressesProvider.getPool()), _amount);\\n    }\\n\\n    /// @dev Override this function to execute logic which uses flash loan amount\\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal virtual;\\n\\n    /***************************** Aave flash loan functions ***********************************/\\n\\n    bool private awaitingFlash = false;\\n\\n    /**\\n     * @notice This is entry point for Aave flash loan\\n     * @param _token Token for which we are taking flash loan\\n     * @param _amountDesired Flash loan amount\\n     * @param _data This will be passed downstream for processing. It can be empty.\\n     */\\n    function _doAaveFlashLoan(\\n        address _token,\\n        uint256 _amountDesired,\\n        bytes memory _data\\n    ) internal returns (uint256 _amount) {\\n        require(isAaveActive, Errors.AAVE_FLASH_LOAN_NOT_ACTIVE);\\n        // Check token liquidity in Aave\\n        (address _aToken, , ) = poolAddressesProvider.getPoolDataProvider().getReserveTokensAddresses(_token);\\n        uint256 _availableLiquidity = IERC20(_token).balanceOf(_aToken);\\n        if (_amountDesired > _availableLiquidity) {\\n            _amountDesired = _availableLiquidity;\\n        }\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = _token;\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = _amountDesired;\\n\\n        // 0 = no debt, 1 = stable, 2 = variable\\n        uint256[] memory modes = new uint256[](1);\\n        modes[0] = 0;\\n\\n        // Anyone can call aave flash loan to us, so we need some protection\\n        awaitingFlash = true;\\n\\n        // function params: receiver, assets, amounts, modes, onBehalfOf, data, referralCode\\n        poolAddressesProvider.getPool().flashLoan(address(this), assets, amounts, modes, address(this), _data, 0);\\n        _amount = _amountDesired;\\n        awaitingFlash = false;\\n    }\\n\\n    /// @dev Aave will call this function after doing flash loan\\n    function executeOperation(\\n        address[] calldata /*_assets*/,\\n        uint256[] calldata _amounts,\\n        uint256[] calldata _premiums,\\n        address _initiator,\\n        bytes calldata _data\\n    ) external returns (bool) {\\n        require(msg.sender == address(poolAddressesProvider.getPool()), \\\"!aave-pool\\\");\\n        require(awaitingFlash, Errors.INVALID_FLASH_LOAN);\\n        require(_initiator == address(this), Errors.INVALID_INITIATOR);\\n\\n        // Flash loan amount + flash loan fee\\n        uint256 _repayAmount = _amounts[0] + _premiums[0];\\n        _flashLoanLogic(_data, _repayAmount);\\n        return true;\\n    }\\n\\n    /***************************** Aave flash loan functions ends ***********************************/\\n}\\n\",\"keccak256\":\"0x90121826fa68fc3ff885e9d788d6ce7ce6a93de28ccba5eaf1d15ee45f79a36b\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(address _pool, address _swapper, address _receiptToken) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken(uint256 _approvalAmount) external onlyKeeper {\\n        _approveToken(_approvalAmount);\\n    }\\n\\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\\n    function claimAndSwapRewards(uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        _claimAndSwapRewards();\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance() external onlyKeeper returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /// @notice onlyKeeper:: Swap given token into collateral token.\\n    function swapToCollateral(IERC20 _tokenIn, uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        require(address(_tokenIn) != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(address(_tokenIn)), \\\"not-allowed-to-sweep\\\");\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        uint256 _amountIn = _tokenIn.balanceOf(address(this));\\n        if (_amountIn > 0) {\\n            if (_amountIn > _tokenIn.allowance(address(this), address(swapper))) {\\n                _tokenIn.safeApprove(address(swapper), 0);\\n                _tokenIn.safeApprove(address(swapper), MAX_UINT_VALUE);\\n            }\\n            _swapExactInput(address(_tokenIn), address(collateralToken), _amountIn);\\n        }\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweep(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _claimAndSwapRewards() internal virtual {\\n        (address _rewardToken, uint256 _rewardsAmount) = _claimRewards();\\n        if (_rewardsAmount > 0) {\\n            _safeSwapExactInput(_rewardToken, address(collateralToken), _rewardsAmount);\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _claimRewards() internal virtual returns (address, uint256) {}\\n\\n    function _rebalance() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(address _tokenIn, address _tokenOut, uint256 _amountIn) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x58711ce2d409c8069e25980d2df4d09fd73e66c8ed41ba9ade1829bbb4ad6d80\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/CompoundLeverageBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Heavily inspired from CompoundLeverage strategy of Yearn. https://etherscan.io/address/0x4031afd3B0F71Bace9181E554A9E680Ee4AbE7dF#code\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/compound/ICompound.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Compound and based on position\\n/// it will borrow same collateral token. It will use borrowed asset as supply and borrow again.\\nabstract contract CompoundLeverageBase is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"5.1.0\\\";\\n\\n    uint256 internal constant MAX_BPS = 10_000; //100%\\n    uint256 public minBorrowRatio = 5_000; // 50%\\n    uint256 public maxBorrowRatio = 6_000; // 60%\\n    uint256 internal constant COLLATERAL_FACTOR_LIMIT = 9_500; // 95%\\n    CToken internal cToken;\\n\\n    Comptroller public immutable comptroller;\\n    address public rewardToken;\\n\\n    event UpdatedBorrowRatio(\\n        uint256 previousMinBorrowRatio,\\n        uint256 newMinBorrowRatio,\\n        uint256 previousMaxBorrowRatio,\\n        uint256 newMaxBorrowRatio\\n    );\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _comptroller,\\n        address _rewardToken,\\n        address _receiptToken,\\n        string memory _name\\n    ) Strategy(_pool, _swapper, _receiptToken) {\\n        NAME = _name;\\n        require(_comptroller != address(0), \\\"comptroller-address-is-zero\\\");\\n        comptroller = Comptroller(_comptroller);\\n        rewardToken = _rewardToken;\\n\\n        require(_receiptToken != address(0), \\\"cToken-address-is-zero\\\");\\n        cToken = CToken(_receiptToken);\\n    }\\n\\n    /**\\n     * @notice Current borrow ratio, calculated as current borrow divide by max allowed borrow\\n     * Return value is based on basis points, i.e. 7500 = 75% ratio\\n     */\\n    function currentBorrowRatio() external view returns (uint256) {\\n        (uint256 _supply, uint256 _borrow) = getPosition();\\n        return _borrow == 0 ? 0 : (_borrow * MAX_BPS) / _supply;\\n    }\\n\\n    /// @notice Return supply and borrow position. Position may return few block old value\\n    function getPosition() public view returns (uint256 _supply, uint256 _borrow) {\\n        (, uint256 _cTokenBalance, uint256 _borrowBalance, uint256 _exchangeRate) = cToken.getAccountSnapshot(\\n            address(this)\\n        );\\n        _supply = (_cTokenBalance * _exchangeRate) / 1e18;\\n        _borrow = _borrowBalance;\\n    }\\n\\n    /// @inheritdoc Strategy\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _token == address(cToken) || _token == address(collateralToken);\\n    }\\n\\n    /// @inheritdoc Strategy\\n    function tvl() public view virtual override returns (uint256) {\\n        (uint256 _supply, uint256 _borrow) = getPosition();\\n        return collateralToken.balanceOf(address(this)) + _supply - _borrow;\\n    }\\n\\n    /**\\n     * @dev Adjust position by normal leverage and deleverage.\\n     * @param _adjustBy Amount by which we want to increase or decrease _borrow\\n     * @param _shouldRepay True indicate we want to deleverage\\n     * @return amount Actual adjusted amount\\n     */\\n    function _adjustPosition(uint256 _adjustBy, bool _shouldRepay) internal returns (uint256 amount) {\\n        // We can get position via view function, as this function will be called after _calculateDesiredPosition\\n        (uint256 _supply, uint256 _borrow) = getPosition();\\n\\n        // If no borrow then there is nothing to deleverage\\n        if (_borrow == 0 && _shouldRepay) {\\n            return 0;\\n        }\\n\\n        uint256 collateralFactor = _getCollateralFactor();\\n\\n        if (_shouldRepay) {\\n            amount = _normalDeleverage(_adjustBy, _supply, _borrow, collateralFactor);\\n        } else {\\n            amount = _normalLeverage(_adjustBy, _supply, _borrow, collateralFactor);\\n        }\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        collateralToken.safeApprove(address(cToken), _amount);\\n        IERC20(rewardToken).safeApprove(address(swapper), _amount);\\n    }\\n\\n    /**\\n     * @dev Payback borrow before migration\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual override {\\n        require(IStrategy(_newStrategy).token() == address(cToken), \\\"wrong-receipt-token\\\");\\n        minBorrowRatio = 0;\\n        // It will calculate amount to repay based on borrow limit and payback all\\n        _deposit();\\n    }\\n\\n    function _borrowCollateral(uint256 _amount) internal virtual {\\n        require(cToken.borrow(_amount) == 0, \\\"borrow-from-compound-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Calculate borrow position based on borrow ratio, current supply, borrow, amount\\n     * being deposited or withdrawn.\\n     * @param _amount Collateral amount\\n     * @param _isDeposit Flag indicating whether we are depositing _amount or withdrawing\\n     * @return _position Amount of borrow that need to be adjusted\\n     * @return _shouldRepay Flag indicating whether _position is borrow amount or repay amount\\n     */\\n    function _calculateDesiredPosition(\\n        uint256 _amount,\\n        bool _isDeposit\\n    ) internal returns (uint256 _position, bool _shouldRepay) {\\n        uint256 _totalSupply = cToken.balanceOfUnderlying(address(this));\\n        uint256 _currentBorrow = cToken.borrowBalanceStored(address(this));\\n        // If minimum borrow limit set to 0 then repay borrow\\n        if (minBorrowRatio == 0) {\\n            return (_currentBorrow, true);\\n        }\\n\\n        uint256 _supply = _totalSupply - _currentBorrow;\\n\\n        // In case of withdraw, _amount can be greater than _supply\\n        uint256 _newSupply = _isDeposit ? _supply + _amount : _supply > _amount ? _supply - _amount : 0;\\n\\n        // (supply * borrowRatio)/(BPS - borrowRatio)\\n        uint256 _borrowUpperBound = (_newSupply * maxBorrowRatio) / (MAX_BPS - maxBorrowRatio);\\n        uint256 _borrowLowerBound = (_newSupply * minBorrowRatio) / (MAX_BPS - minBorrowRatio);\\n\\n        // If our current borrow is greater than max borrow allowed, then we will have to repay\\n        // some to achieve safe position else borrow more.\\n        if (_currentBorrow > _borrowUpperBound) {\\n            _shouldRepay = true;\\n            // If borrow > upperBound then it is greater than lowerBound too.\\n            _position = _currentBorrow - _borrowLowerBound;\\n        } else if (_currentBorrow < _borrowLowerBound) {\\n            _shouldRepay = false;\\n            // We can borrow more.\\n            _position = _borrowLowerBound - _currentBorrow;\\n        }\\n    }\\n\\n    /// @notice Deposit collateral in Compound and adjust borrow position\\n    function _deposit() internal {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        (uint256 _position, bool _shouldRepay) = _calculateDesiredPosition(_collateralBalance, true);\\n        // Supply collateral to compound.\\n        _mint(_collateralBalance);\\n\\n        // During reinvest, _shouldRepay will be false which indicate that we will borrow more.\\n        _position -= _doFlashLoan(_position, _shouldRepay);\\n\\n        uint256 i;\\n        while (_position > 0 && i <= 6) {\\n            unchecked {\\n                _position -= _adjustPosition(_position, _shouldRepay);\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Aave flash is used only for withdrawal due to high fee compare to DyDx\\n     * @param _flashAmount Amount for flash loan\\n     * @param _shouldRepay Flag indicating we want to leverage or deleverage\\n     * @return Total amount we leverage or deleverage using flash loan\\n     */\\n    function _doFlashLoan(uint256 _flashAmount, bool _shouldRepay) internal virtual returns (uint256);\\n\\n    /**\\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\\n     * @dev Call claimAndSwapRewards to convert rewards to collateral before calling this function.\\n     */\\n    function _generateReport() internal returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        (, , , , uint256 _totalDebt, , , uint256 _debtRatio, ) = IVesperPool(pool).strategy(address(this));\\n\\n        // Invested collateral = supply - borrow\\n        uint256 _investedCollateral = cToken.balanceOfUnderlying(address(this)) -\\n            cToken.borrowBalanceStored(address(this));\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = _investedCollateral + _collateralHere;\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_collateralHere < _profitAndExcessDebt) {\\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _investedCollateral);\\n            if (_totalAmountToWithdraw > 0) {\\n                _withdrawHere(_totalAmountToWithdraw);\\n                _collateralHere = collateralToken.balanceOf(address(this));\\n            }\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n\\n        // Handle scenario if debtRatio is zero and some supply left.\\n        // Remaining tokens are profit.\\n        if (_debtRatio == 0) {\\n            (uint256 _supply, uint256 _borrow) = getPosition();\\n            if (_supply > 0 && _borrow == 0) {\\n                // This will redeem all cTokens this strategy has\\n                _redeemUnderlying(MAX_UINT_VALUE);\\n                _profit += _supply;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get Collateral Factor\\n     */\\n    function _getCollateralFactor() internal view virtual returns (uint256 _collateralFactor) {\\n        (, _collateralFactor, ) = comptroller.markets(address(cToken));\\n        // Take 95% of collateralFactor to avoid any rounding issue.\\n        _collateralFactor = (_collateralFactor * COLLATERAL_FACTOR_LIMIT) / MAX_BPS;\\n    }\\n\\n    /**\\n     * @dev Compound support ETH as collateral not WETH. So ETH strategy can override\\n     * below functions and handle wrap/unwrap of WETH.\\n     */\\n    function _mint(uint256 _amount) internal virtual {\\n        require(cToken.mint(_amount) == 0, \\\"supply-to-compound-failed\\\");\\n    }\\n\\n    /**\\n     * Deleverage: Reduce borrow to achieve safe position\\n     * @param _maxDeleverage Reduce borrow by this amount\\n     * @return _deleveragedAmount Amount we actually reduced\\n     */\\n    function _normalDeleverage(\\n        uint256 _maxDeleverage,\\n        uint256 _supply,\\n        uint256 _borrow,\\n        uint256 _collateralFactor\\n    ) internal returns (uint256 _deleveragedAmount) {\\n        uint256 _theoreticalSupply;\\n\\n        if (_collateralFactor > 0) {\\n            // Calculate minimum supply required to support _borrow\\n            _theoreticalSupply = (_borrow * 1e18) / _collateralFactor;\\n        }\\n\\n        _deleveragedAmount = _supply - _theoreticalSupply;\\n\\n        if (_deleveragedAmount >= _borrow) {\\n            _deleveragedAmount = _borrow;\\n        }\\n        if (_deleveragedAmount >= _maxDeleverage) {\\n            _deleveragedAmount = _maxDeleverage;\\n        }\\n\\n        _redeemUnderlying(_deleveragedAmount);\\n        _repayBorrow(_deleveragedAmount);\\n    }\\n\\n    /**\\n     * Leverage: Borrow more\\n     * @param _maxLeverage Max amount to borrow\\n     * @return _leveragedAmount Amount we actually borrowed\\n     */\\n    function _normalLeverage(\\n        uint256 _maxLeverage,\\n        uint256 _supply,\\n        uint256 _borrow,\\n        uint256 _collateralFactor\\n    ) internal returns (uint256 _leveragedAmount) {\\n        // Calculate maximum we can borrow at current _supply\\n        uint256 theoreticalBorrow = (_supply * _collateralFactor) / 1e18;\\n\\n        _leveragedAmount = theoreticalBorrow - _borrow;\\n\\n        if (_leveragedAmount >= _maxLeverage) {\\n            _leveragedAmount = _maxLeverage;\\n        }\\n        _borrowCollateral(_leveragedAmount);\\n        _mint(collateralToken.balanceOf(address(this)));\\n    }\\n\\n    function _rebalance() internal virtual override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        (_profit, _loss, _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _deposit();\\n    }\\n\\n    function _redeemUnderlying(uint256 _amount) internal virtual {\\n        if (_amount == MAX_UINT_VALUE) {\\n            // Withdraw all cTokens\\n            require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \\\"withdraw-from-compound-failed\\\");\\n        } else {\\n            // Withdraw underlying\\n            require(cToken.redeemUnderlying(_amount) == 0, \\\"withdraw-from-compound-failed\\\");\\n        }\\n    }\\n\\n    function _repayBorrow(uint256 _amount) internal virtual {\\n        require(cToken.repayBorrow(_amount) == 0, \\\"repay-to-compound-failed\\\");\\n    }\\n\\n    /// @dev Withdraw collateral here.\\n    function _withdrawHere(uint256 _amount) internal override {\\n        (uint256 _position, bool _shouldRepay) = _calculateDesiredPosition(_amount, false);\\n        if (_shouldRepay) {\\n            // Do deleverage by flash loan\\n            _position -= _doFlashLoan(_position, _shouldRepay);\\n\\n            // If we still have _position to deleverage do it via normal deleverage\\n            uint256 i;\\n            while (_position > 0 && i <= 10) {\\n                unchecked {\\n                    _position -= _adjustPosition(_position, true);\\n                    i++;\\n                }\\n            }\\n\\n            (uint256 _supply, uint256 _borrow) = getPosition();\\n            // If we are not able to deleverage enough\\n            if (_position > 0) {\\n                // Calculate redeemable at current borrow and supply.\\n                uint256 _supplyToSupportBorrow;\\n                if (maxBorrowRatio > 0) {\\n                    _supplyToSupportBorrow = (_borrow * MAX_BPS) / maxBorrowRatio;\\n                }\\n                // Current supply minus supply required to support _borrow at _maxBorrowRatio\\n                uint256 _redeemable = _supply - _supplyToSupportBorrow;\\n                if (_amount > _redeemable) {\\n                    _amount = _redeemable;\\n                }\\n            }\\n            // Position is 0 and amount > supply due to deleverage\\n            else if (_amount > _supply) {\\n                _amount = _supply;\\n            }\\n        }\\n        _redeemUnderlying(_amount);\\n    }\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n\\n    /**\\n     * @notice Update upper and lower borrow ratio\\n     * @dev It is possible to set 0 as _minBorrowRatio to not borrow anything\\n     * @param _minBorrowRatio Minimum % we want to borrow\\n     * @param _maxBorrowRatio Maximum % we want to borrow\\n     */\\n    function updateBorrowRatio(uint256 _minBorrowRatio, uint256 _maxBorrowRatio) external onlyGovernor {\\n        // CollateralFactor is 1e18 based and borrow ratio is 1e4 based. Hence using 1e14 for conversion.\\n        require(_maxBorrowRatio < (_getCollateralFactor() / 1e14), \\\"invalid-max-borrow-limit\\\");\\n        require(_maxBorrowRatio > _minBorrowRatio, \\\"max-should-be-higher-than-min\\\");\\n        emit UpdatedBorrowRatio(minBorrowRatio, _minBorrowRatio, maxBorrowRatio, _maxBorrowRatio);\\n        minBorrowRatio = _minBorrowRatio;\\n        maxBorrowRatio = _maxBorrowRatio;\\n    }\\n}\\n\",\"keccak256\":\"0xa6d6d97e9ece88b92330c5240f1da4d3999cb43d3fd8d474323615f86bcae631\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/token/IToken.sol\\\";\\nimport \\\"../CompoundLeverageBase.sol\\\";\\nimport \\\"../../../interfaces/compound/IComptrollerMultiReward.sol\\\";\\nimport \\\"../../AaveFlashLoanHelper.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\ncontract SonneLeverage is CompoundLeverageBase, AaveFlashLoanHelper {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _comptroller,\\n        address _rewardToken,\\n        address _aaveAddressesProvider,\\n        address _receiptToken,\\n        string memory _name\\n    )\\n        CompoundLeverageBase(_pool, _swapManager, _comptroller, _rewardToken, _receiptToken, _name)\\n        AaveFlashLoanHelper(_aaveAddressesProvider)\\n    {}\\n\\n    //solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        AaveFlashLoanHelper._approveToken(address(collateralToken), _amount);\\n    }\\n\\n    /// @notice Claim comp\\n    function _claimRewards() internal override returns (address, uint256) {\\n        address[] memory _markets = new address[](1);\\n        _markets[0] = address(cToken);\\n        comptroller.claimComp(address(this), _markets);\\n        return (rewardToken, IERC20(rewardToken).balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Aave flash is used only for withdrawal due to fee\\n     * @param _flashAmount Amount for flash loan\\n     * @param _shouldRepay Flag indicating we want to leverage or deleverage\\n     * @return Total amount we leverage or deleverage using flash loan\\n     */\\n    function _doFlashLoan(uint256 _flashAmount, bool _shouldRepay) internal override returns (uint256) {\\n        uint256 _totalFlashAmount;\\n\\n        if (isAaveActive && _shouldRepay && _flashAmount > 0) {\\n            bytes memory _data = abi.encode(_flashAmount, _shouldRepay);\\n            _totalFlashAmount += _doAaveFlashLoan(address(collateralToken), _flashAmount, _data);\\n        }\\n        return _totalFlashAmount;\\n    }\\n\\n    /**\\n     * @notice This function will be called by flash loan\\n     * @dev In case of borrow, DyDx is preferred as fee is so low that it does not effect\\n     * our collateralRatio and liquidation risk.\\n     */\\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal override {\\n        (uint256 _amount, bool _deficit) = abi.decode(_data, (uint256, bool));\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        require(_collateralHere >= _amount, \\\"FLASH_FAILED\\\"); // to stop malicious calls\\n\\n        //if in deficit we repay amount and then withdraw\\n        if (_deficit) {\\n            _repayBorrow(_amount);\\n            //if we are withdrawing we take more to cover fee\\n            _redeemUnderlying(_repayAmount);\\n        } else {\\n            _mint(_collateralHere);\\n            //borrow more to cover fee\\n            _borrowCollateral(_repayAmount);\\n        }\\n    }\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n\\n    function updateAaveStatus(bool _status) external onlyGovernor {\\n        _updateAaveStatus(_status);\\n    }\\n}\\n\",\"keccak256\":\"0x0a144f285c6abda6283c4a5180c8b72a77791b7300ac70355c223772f890fa09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101f25760003560e01c80639b7166a91161010d578063d3332539116100a0578063ee330ee31161006f578063ee330ee3146105ff578063f7c618c11461061f578063fc0c546a1461063f578063fef395d31461065d578063ffa1ad741461067d57600080fd5b8063d333253914610577578063d8dfeb4514610597578063e5328e06146105ca578063ec78e832146105df57600080fd5b8063c415b95c116100dc578063c415b95c146104f7578063ce5494bb14610517578063d2c35ce814610537578063d3033c391461055757600080fd5b80639b7166a91461046a578063a3f4df7e1461048b578063b2016bd4146104ad578063b9098e3c146104e157600080fd5b80634032b72b116101855780637398ab18116101545780637398ab18146103ce5780637d7c2a1c146103f8578063920f5c8414610428578063951dc22c1461044857600080fd5b80634032b72b14610335578063440d7248146103555780635abda028146103855780635fe3b5671461039a57600080fd5b80632a049a21116101c15780632a049a21146102bf5780632b3297f9146102d55780632e1a7d4d146102f55780633ac9fc111461031557600080fd5b806301681a62146101fe5780631026013a1461022057806314ae9f2e1461025357806316f0115b1461027357600080fd5b366101f957005b600080fd5b34801561020a57600080fd5b5061021e61021936600461449d565b6106ae565b005b34801561022c57600080fd5b5061024061023b3660046144ba565b610905565b6040519081526020015b60405180910390f35b34801561025f57600080fd5b5061021e61026e36600461449d565b610aeb565b34801561027f57600080fd5b506102a77f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161024a565b3480156102cb57600080fd5b5061024060075481565b3480156102e157600080fd5b506002546102a7906001600160a01b031681565b34801561030157600080fd5b5061021e6103103660046144ba565b610c30565b34801561032157600080fd5b5061021e6103303660046144ba565b610ea9565b34801561034157600080fd5b5061021e61035036600461449d565b610f00565b34801561036157600080fd5b5061037561037036600461449d565b611045565b604051901515815260200161024a565b34801561039157600080fd5b5061024061109b565b3480156103a657600080fd5b506102a77f000000000000000000000000000000000000000000000000000000000000000081565b3480156103da57600080fd5b506103e36110da565b6040805192835260208301919091520161024a565b34801561040457600080fd5b5061040d61118f565b6040805193845260208401929092529082015260600161024a565b34801561043457600080fd5b5061037561044336600461452c565b6111f5565b34801561045457600080fd5b5061045d6113db565b60405161024a9190614675565b34801561047657600080fd5b50600a5461037590600160a01b900460ff1681565b34801561049757600080fd5b506104a06113ec565b60405161024a91906146e0565b3480156104b957600080fd5b506102a77f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ed57600080fd5b5061024060065481565b34801561050357600080fd5b506001546102a7906001600160a01b031681565b34801561052357600080fd5b5061021e61053236600461449d565b61147a565b34801561054357600080fd5b5061021e61055236600461449d565b611773565b34801561056357600080fd5b5061021e61057236600461449d565b61197e565b34801561058357600080fd5b5061021e610592366004614701565b611b89565b3480156105a357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102a7565b3480156105d657600080fd5b50610240611c91565b3480156105eb57600080fd5b506000546102a7906001600160a01b031681565b34801561060b57600080fd5b5061024061061a36600461471e565b611d52565b34801561062b57600080fd5b506009546102a7906001600160a01b031681565b34801561064b57600080fd5b506000546001600160a01b03166102a7565b34801561066957600080fd5b5061021e61067836600461474a565b612172565b34801561068957600080fd5b506104a0604051806040016040528060058152602001640352e312e360dc1b81525081565b6106bb335b600390612388565b6107055760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064015b60405180910390fd5b6001546001600160a01b031661075d5760405162461bcd60e51b815260206004820152601560248201527f6665652d636f6c6c6563746f722d6e6f742d736574000000000000000000000060448201526064016106fc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156107df5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016106fc565b6107e881611045565b1561082c5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016106fc565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561086a57600154610867906001600160a01b0316476123aa565b50565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156108ac57600080fd5b505afa1580156108c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e4919061476c565b600154909150610901906001600160a01b038481169116836124c8565b5050565b6000610910336106b3565b6109555760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106fc565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156109b757600080fd5b505afa1580156109cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ef919061476c565b90506109f9612558565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610a5a57600080fd5b505afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a92919061476c565b610a9c919061479b565b915082821015610ae55760405162461bcd60e51b81526020600482015260146024820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b60448201526064016106fc565b50919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4457600080fd5b505afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c91906147b2565b6001600160a01b0316336001600160a01b031614610bd95760405162461bcd60e51b815260206004820152601a60248201527931b0b63632b916b4b996b737ba16ba343296b3b7bb32b93737b960311b60448201526064016106fc565b610be4600382612599565b6108675760405162461bcd60e51b815260206004820152601460248201527f72656d6f76652d6b65657065722d6661696c656400000000000000000000000060448201526064016106fc565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ca85760405162461bcd60e51b815260206004820152601960248201527f63616c6c65722d69732d6e6f742d7665737065722d706f6f6c0000000000000060448201526064016106fc565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610d0a57600080fd5b505afa158015610d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d42919061476c565b9050818110610d9f576109016001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846124c8565b610db1610dac828461479b565b6125ae565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610e1057600080fd5b505afa158015610e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e48919061476c565b90506109017f0000000000000000000000000000000000000000000000000000000000000000610e788484612683565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906124c8565b610eb2336106b3565b610ef75760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106fc565b61086781612699565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5957600080fd5b505afa158015610f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9191906147b2565b6001600160a01b0316336001600160a01b031614610fee5760405162461bcd60e51b815260206004820152601a60248201527931b0b63632b916b4b996b737ba16ba343296b3b7bb32b93737b960311b60448201526064016106fc565b610ff960038261236c565b6108675760405162461bcd60e51b815260206004820152601160248201527f6164642d6b65657065722d6661696c656400000000000000000000000000000060448201526064016106fc565b6008546000906001600160a01b038381169116148061109557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b60008060006110a86110da565b91509150806000146110d057816110c1612710836147cf565b6110cb91906147ee565b6110d3565b60005b9250505090565b6008546040516361bfb47160e11b815230600482015260009182918291829182916001600160a01b03169063c37f68e29060240160806040518083038186803b15801561112657600080fd5b505afa15801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e9190614810565b93509350935050670de0b6b3a7640000818461117a91906147cf565b61118491906147ee565b959194509092505050565b6000808061119c336106b3565b6111e15760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106fc565b6111e96126cc565b9250925092505b909192565b600a546040805163026b1d5f60e01b815290516000926001600160a01b03169163026b1d5f916004808301926020929190829003018186803b15801561123a57600080fd5b505afa15801561124e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127291906147b2565b6001600160a01b0316336001600160a01b0316146112bf5760405162461bcd60e51b815260206004820152600a6024820152690858585d994b5c1bdbdb60b21b60448201526064016106fc565b600a54604080518082019091526002815261323760f01b602082015290600160a81b900460ff166113035760405162461bcd60e51b81526004016106fc91906146e0565b50604080518082019091526002815261064760f31b60208201526001600160a01b03851630146113465760405162461bcd60e51b81526004016106fc91906146e0565b5060008686600081811061135c5761135c614846565b905060200201358989600081811061137657611376614846565b90506020020135611387919061485c565b90506113ca84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250612771915050565b5060019a9950505050505050505050565b60606113e7600361289e565b905090565b600580546113f990614874565b80601f016020809104026020016040519081016040528092919081815260200182805461142590614874565b80156114725780601f1061144757610100808354040283529160200191611472565b820191906000526020600020905b81548152906001019060200180831161145557829003601f168201915b505050505081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146114f25760405162461bcd60e51b815260206004820152601960248201527f63616c6c65722d69732d6e6f742d7665737065722d706f6f6c0000000000000060448201526064016106fc565b6001600160a01b0381166115485760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016106fc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ab57600080fd5b505afa1580156115bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e391906147b2565b6001600160a01b0316146116395760405162461bcd60e51b815260206004820152601660248201527f6e6f742d76616c69642d6e65772d73747261746567790000000000000000000060448201526064016106fc565b611642816128ab565b6000546040516370a0823160e01b81523060048201526116d69183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561168b57600080fd5b505afa15801561169f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c3919061476c565b6000546001600160a01b031691906124c8565b6040516370a0823160e01b81523060048201526108679082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561173b57600080fd5b505afa15801561174f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e78919061476c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156117cc57600080fd5b505afa1580156117e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180491906147b2565b6001600160a01b0316336001600160a01b0316146118615760405162461bcd60e51b815260206004820152601a60248201527931b0b63632b916b4b996b737ba16ba343296b3b7bb32b93737b960311b60448201526064016106fc565b6001600160a01b0381166118b75760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016106fc565b6001546001600160a01b03828116911614156119155760405162461bcd60e51b815260206004820152601560248201527f6665652d636f6c6c6563746f722d69732d73616d65000000000000000000000060448201526064016106fc565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a36001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156119d757600080fd5b505afa1580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0f91906147b2565b6001600160a01b0316336001600160a01b031614611a6c5760405162461bcd60e51b815260206004820152601a60248201527931b0b63632b916b4b996b737ba16ba343296b3b7bb32b93737b960311b60448201526064016106fc565b6001600160a01b038116611ac25760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f00000000000000000060448201526064016106fc565b6002546001600160a01b0382811691161415611b205760405162461bcd60e51b815260206004820152600f60248201527f737761707065722d69732d73616d65000000000000000000000000000000000060448201526064016106fc565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611be257600080fd5b505afa158015611bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1a91906147b2565b6001600160a01b0316336001600160a01b031614611c775760405162461bcd60e51b815260206004820152601a60248201527931b0b63632b916b4b996b737ba16ba343296b3b7bb32b93737b960311b60448201526064016106fc565b600a805460ff60a01b1916600160a01b8315150217905550565b6000806000611c9e6110da565b6040516370a0823160e01b81523060048201529193509150819083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015611d0657600080fd5b505afa158015611d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3e919061476c565b611d48919061485c565b6110d3919061479b565b6000611d5d336106b3565b611da25760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106fc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415611e245760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016106fc565b611e2d83611045565b15611e715760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016106fc565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611ed357600080fd5b505afa158015611ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0b919061476c565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a082319060240160206040518083038186803b158015611f5057600080fd5b505afa158015611f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f88919061476c565b9050801561207e57600254604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529086169063dd62ed3e9060440160206040518083038186803b158015611fdb57600080fd5b505afa158015611fef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612013919061476c565b81111561205157600254612035906001600160a01b038781169116600061298d565b600254612051906001600160a01b03878116911660001961298d565b61207c857f000000000000000000000000000000000000000000000000000000000000000083612ab8565b505b6040516370a0823160e01b815230600482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156120df57600080fd5b505afa1580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612117919061476c565b612121919061479b565b92508383101561216a5760405162461bcd60e51b81526020600482015260146024820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b60448201526064016106fc565b505092915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156121cb57600080fd5b505afa1580156121df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220391906147b2565b6001600160a01b0316336001600160a01b0316146122605760405162461bcd60e51b815260206004820152601a60248201527931b0b63632b916b4b996b737ba16ba343296b3b7bb32b93737b960311b60448201526064016106fc565b655af3107a400061226f612b5c565b61227991906147ee565b81106122c75760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642d6d61782d626f72726f772d6c696d6974000000000000000060448201526064016106fc565b8181116123165760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e00000060448201526064016106fc565b6006546007546040805192835260208301859052820152606081018290527f0e68fa4c4a80a75427bcce81b711855825bd765ea0e6e15e330653b2437db78e9060800160405180910390a1600691909155600755565b6000612381836001600160a01b038416612c19565b9392505050565b6001600160a01b03811660009081526001830160205260408120541515612381565b804710156123fa5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106fc565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612447576040519150601f19603f3d011682016040523d82523d6000602084013e61244c565b606091505b50509050806124c35760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106fc565b505050565b6040516001600160a01b0383166024820152604481018290526124c390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612c68565b600080612563612d3a565b9092509050801561090157610901827f000000000000000000000000000000000000000000000000000000000000000083612e95565b6000612381836001600160a01b038416612f37565b6000806125bc83600061302a565b91509150801561267a576125d0828261321f565b6125da908361479b565b915060005b6000831180156125f05750600a8111155b1561260c576126008360016132ba565b909203916001016125df565b6000806126176110da565b9092509050841561266a57600754600090156126495760075461263c612710846147cf565b61264691906147ee565b90505b6000612655828561479b565b905080881115612663578097505b5050612676565b81861115612676578195505b5050505b6124c383613325565b60008183106126925781612381565b5090919050565b6126a2816134a0565b6108677f000000000000000000000000000000000000000000000000000000000000000082613500565b60008060006126d961358f565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b15801561275157600080fd5b505af1158015612765573d6000803e3d6000fd5b505050506111f0613a0e565b6000808380602001905181019061278891906148a9565b6040516370a0823160e01b815230600482015291935091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156127ef57600080fd5b505afa158015612803573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612827919061476c565b9050828110156128685760405162461bcd60e51b815260206004820152600c60248201526b11931054d217d1905253115160a21b60448201526064016106fc565b81156128855761287783613b0a565b61288084613325565b612897565b61288e81613bd5565b61289784613ca0565b5050505050565b6060600061238183613d6b565b60085460408051637e062a3560e11b815290516001600160a01b039283169284169163fc0c546a916004808301926020929190829003018186803b1580156128f257600080fd5b505afa158015612906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292a91906147b2565b6001600160a01b0316146129805760405162461bcd60e51b815260206004820152601360248201527f77726f6e672d726563656970742d746f6b656e0000000000000000000000000060448201526064016106fc565b6000600655610867613a0e565b801580612a165750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156129dc57600080fd5b505afa1580156129f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a14919061476c565b155b612a885760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016106fc565b6040516001600160a01b0383166024820152604481018290526124c390849063095ea7b360e01b906064016124f4565b600254604051636ccb2b0160e01b81526001600160a01b038581166004830152848116602483015260448201849052600160648301523060848301526000921690636ccb2b019060a401602060405180830381600087803b158015612b1c57600080fd5b505af1158015612b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b54919061476c565b949350505050565b600854604051638e8f294b60e01b81526001600160a01b0391821660048201526000917f00000000000000000000000000000000000000000000000000000000000000001690638e8f294b9060240160606040518083038186803b158015612bc357600080fd5b505afa158015612bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfb91906148d9565b5091506127109050612c0f61251c836147cf565b6113e791906147ee565b6000818152600183016020526040812054612c6057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611095565b506000611095565b6000612cbd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613dc79092919063ffffffff16565b8051909150156124c35780806020019051810190612cdb919061491c565b6124c35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106fc565b6040805160018082528183019092526000918291829160208083019080368337505060085482519293506001600160a01b031691839150600090612d8057612d80614846565b6001600160a01b03928316602091820292909201015260405162e1ed9760e51b81527f000000000000000000000000000000000000000000000000000000000000000090911690631c3db2e090612ddd9030908590600401614939565b600060405180830381600087803b158015612df757600080fd5b505af1158015612e0b573d6000803e3d6000fd5b50506009546040516370a0823160e01b81523060048201526001600160a01b0390911692508291506370a082319060240160206040518083038186803b158015612e5457600080fd5b505afa158015612e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8c919061476c565b92509250509091565b600254604051636ccb2b0160e01b81526001600160a01b0385811660048301528481166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b158015612ef857600080fd5b505af1925050508015612f28575060408051601f3d908101601f19168201909252612f259181019061476c565b60015b612f3157505050565b50505050565b60008181526001830160205260408120548015613020576000612f5b60018361479b565b8554909150600090612f6f9060019061479b565b9050818114612fd4576000866000018281548110612f8f57612f8f614846565b9060005260206000200154905080876000018481548110612fb257612fb2614846565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612fe557612fe561495b565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611095565b6000915050611095565b600854604051633af9e66960e01b8152306004820152600091829182916001600160a01b031690633af9e66990602401602060405180830381600087803b15801561307457600080fd5b505af1158015613088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ac919061476c565b6008546040516395dd919360e01b81523060048201529192506000916001600160a01b03909116906395dd91939060240160206040518083038186803b1580156130f557600080fd5b505afa158015613109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312d919061476c565b905060065460001415613147579250600191506132189050565b6000613153828461479b565b90506000866131795787821161316a576000613183565b613174888361479b565b613183565b613183888361485c565b90506000600754612710613197919061479b565b6007546131a490846147cf565b6131ae91906147ee565b905060006006546127106131c2919061479b565b6006546131cf90856147cf565b6131d991906147ee565b9050818511156131f857600196506131f1818661479b565b9750613211565b80851015613211576000965061320e858261479b565b97505b5050505050505b9250929050565b600a546000908190600160a01b900460ff16801561323a5750825b80156132465750600084115b15612381576000848460405160200161326b9291909182521515602082015260400190565b60405160208183030381529060405290506132a77f00000000000000000000000000000000000000000000000000000000000000008683613dd6565b6132b1908361485c565b95945050505050565b60008060006132c76110da565b915091508060001480156132d85750835b156132e857600092505050611095565b60006132f2612b5c565b9050841561330d576133068684848461418b565b935061331c565b613319868484846141f1565b93505b50505092915050565b60001981141561346f576008546040516370a0823160e01b81523060048201526001600160a01b039091169063db006a759082906370a082319060240160206040518083038186803b15801561337a57600080fd5b505afa15801561338e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133b2919061476c565b6040518263ffffffff1660e01b81526004016133d091815260200190565b602060405180830381600087803b1580156133ea57600080fd5b505af11580156133fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613422919061476c565b156108675760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c656400000060448201526064016106fc565b60085460405163852a12e360e01b8152600481018390526001600160a01b039091169063852a12e3906024016133d0565b6134a9816142d3565b6008546134e3906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168361298d565b600254600954610867916001600160a01b0391821691168361298d565b600a546040805163026b1d5f60e01b81529051610901926001600160a01b03169163026b1d5f916004808301926020929190829003018186803b15801561354657600080fd5b505afa15801561355a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061357e91906147b2565b6001600160a01b038416908361298d565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b1580156135f757600080fd5b505afa15801561360b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362f919061476c565b60405163228bfd9f60e01b815230600482015290915060009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063228bfd9f906024016101206040518083038186803b15801561369757600080fd5b505afa1580156136ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136cf9190614971565b506008546040516395dd919360e01b8152949a50909850600097506001600160a01b031695506395dd9193945061370f9350309260040191506144d39050565b60206040518083038186803b15801561372757600080fd5b505afa15801561373b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061375f919061476c565b600854604051633af9e66960e01b81523060048201526001600160a01b0390911690633af9e66990602401602060405180830381600087803b1580156137a457600080fd5b505af11580156137b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137dc919061476c565b6137e6919061479b565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561384b57600080fd5b505afa15801561385f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613883919061476c565b90506000613891828461485c565b9050848111156138ac576138a5858261479b565b98506138b9565b6138b6818661479b565b97505b60006138c5878b61485c565b9050808310156139915760006138e46138de858461479b565b86612683565b9050801561398f576138f5816125ae565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561395457600080fd5b505afa158015613968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061398c919061476c565b93505b505b61399b8388612683565b97508783116139ab5760006139be565b6139be6139b8898561479b565b8b612683565b995084613a02576000806139d06110da565b915091506000821180156139e2575080155b156139ff576139f2600019613325565b6139fc828d61485c565b9b505b50505b50505050505050909192565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015613a7057600080fd5b505afa158015613a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa8919061476c565b9050600080613ab883600161302a565b91509150613ac583613bd5565b613acf828261321f565b613ad9908361479b565b915060005b600083118015613aef575060068111155b15612f3157613afe83836132ba565b90920391600101613ade565b60085460405163073a938160e11b8152600481018390526001600160a01b0390911690630e75270290602401602060405180830381600087803b158015613b5057600080fd5b505af1158015613b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b88919061476c565b156108675760405162461bcd60e51b815260206004820152601860248201527f72657061792d746f2d636f6d706f756e642d6661696c6564000000000000000060448201526064016106fc565b60085460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b158015613c1b57600080fd5b505af1158015613c2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c53919061476c565b156108675760405162461bcd60e51b815260206004820152601960248201527f737570706c792d746f2d636f6d706f756e642d6661696c65640000000000000060448201526064016106fc565b60085460405163317afabb60e21b8152600481018390526001600160a01b039091169063c5ebeaec90602401602060405180830381600087803b158015613ce657600080fd5b505af1158015613cfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d1e919061476c565b156108675760405162461bcd60e51b815260206004820152601b60248201527f626f72726f772d66726f6d2d636f6d706f756e642d6661696c6564000000000060448201526064016106fc565b606081600001805480602002602001604051908101604052809291908181526020018280548015613dbb57602002820191906000526020600020905b815481526020019060010190808311613da7575b50505050509050919050565b6060612b548484600085614327565b600a54604080518082019091526002815261323560f01b6020820152600091600160a01b900460ff16613e1c5760405162461bcd60e51b81526004016106fc91906146e0565b50600a546040805163e860accb60e01b815290516000926001600160a01b03169163e860accb916004808301926020929190829003018186803b158015613e6257600080fd5b505afa158015613e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9a91906147b2565b6040516334924edb60e21b81526001600160a01b038781166004830152919091169063d2493b6c9060240160606040518083038186803b158015613edd57600080fd5b505afa158015613ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f1591906149e5565b50506040516370a0823160e01b81526001600160a01b0380831660048301529192506000918716906370a082319060240160206040518083038186803b158015613f5e57600080fd5b505afa158015613f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f96919061476c565b905080851115613fa4578094505b604080516001808252818301909252600091602080830190803683370190505090508681600081518110613fda57613fda614846565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050868160008151811061402b5761402b614846565b602090810291909101015260408051600180825281830190925260009181602001602082028036833701905050905060008160008151811061406f5761406f614846565b602090810291909101810191909152600a805460ff60a81b198116600160a81b179091556040805163026b1d5f60e01b815290516001600160a01b039092169263026b1d5f92600480840193829003018186803b1580156140cf57600080fd5b505afa1580156140e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061410791906147b2565b6001600160a01b031663ab9c4b5d30858585308d60006040518863ffffffff1660e01b815260040161413f9796959493929190614a57565b600060405180830381600087803b15801561415957600080fd5b505af115801561416d573d6000803e3d6000fd5b5050600a805460ff60a81b1916905550979998505050505050505050565b60008082156141b457826141a785670de0b6b3a76400006147cf565b6141b191906147ee565b90505b6141be818661479b565b91508382106141cb578391505b8582106141d6578591505b6141df82613325565b6141e882613b0a565b50949350505050565b600080670de0b6b3a764000061420784876147cf565b61421191906147ee565b905061421d848261479b565b915085821061422a578591505b61423382613ca0565b6040516370a0823160e01b81523060048201526141e8907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561429657600080fd5b505afa1580156142aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142ce919061476c565b613bd5565b6108676001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361298d565b6060824710156143885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106fc565b843b6143d65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106fc565b600080866001600160a01b031685876040516143f29190614ad6565b60006040518083038185875af1925050503d806000811461442f576040519150601f19603f3d011682016040523d82523d6000602084013e614434565b606091505b509150915061444482828661444f565b979650505050505050565b6060831561445e575081612381565b82511561446e5782518084602001fd5b8160405162461bcd60e51b81526004016106fc91906146e0565b6001600160a01b038116811461086757600080fd5b6000602082840312156144af57600080fd5b813561238181614488565b6000602082840312156144cc57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60008083601f8401126144f957600080fd5b50813567ffffffffffffffff81111561451157600080fd5b6020830191508360208260051b850101111561321857600080fd5b600080600080600080600080600060a08a8c03121561454a57600080fd5b893567ffffffffffffffff8082111561456257600080fd5b61456e8d838e016144e7565b909b50995060208c013591508082111561458757600080fd5b6145938d838e016144e7565b909950975060408c01359150808211156145ac57600080fd5b6145b88d838e016144e7565b909750955060608c013591506145cd82614488565b90935060808b013590808211156145e357600080fd5b818c0191508c601f8301126145f757600080fd5b81358181111561460657600080fd5b8d602082850101111561461857600080fd5b6020830194508093505050509295985092959850929598565b600081518084526020808501945080840160005b8381101561466a5781516001600160a01b031687529582019590820190600101614645565b509495945050505050565b6020815260006123816020830184614631565b60005b838110156146a357818101518382015260200161468b565b83811115612f315750506000910152565b600081518084526146cc816020860160208601614688565b601f01601f19169290920160200192915050565b60208152600061238160208301846146b4565b801515811461086757600080fd5b60006020828403121561471357600080fd5b8135612381816146f3565b6000806040838503121561473157600080fd5b823561473c81614488565b946020939093013593505050565b6000806040838503121561475d57600080fd5b50508035926020909101359150565b60006020828403121561477e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156147ad576147ad614785565b500390565b6000602082840312156147c457600080fd5b815161238181614488565b60008160001904831182151516156147e9576147e9614785565b500290565b60008261480b57634e487b7160e01b600052601260045260246000fd5b500490565b6000806000806080858703121561482657600080fd5b505082516020840151604085015160609095015191969095509092509050565b634e487b7160e01b600052603260045260246000fd5b6000821982111561486f5761486f614785565b500190565b600181811c9082168061488857607f821691505b60208210811415610ae557634e487b7160e01b600052602260045260246000fd5b600080604083850312156148bc57600080fd5b8251915060208301516148ce816146f3565b809150509250929050565b6000806000606084860312156148ee57600080fd5b83516148f9816146f3565b602085015160408601519194509250614911816146f3565b809150509250925092565b60006020828403121561492e57600080fd5b8151612381816146f3565b6001600160a01b0383168152604060208201526000612b546040830184614631565b634e487b7160e01b600052603160045260246000fd5b60008060008060008060008060006101208a8c03121561499057600080fd5b895161499b816146f3565b8099505060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b6000806000606084860312156149fa57600080fd5b8351614a0581614488565b6020850151909350614a1681614488565b604085015190925061491181614488565b600081518084526020808501945080840160005b8381101561466a57815187529582019590820190600101614a3b565b60006001600160a01b03808a16835260e06020840152614a7a60e084018a614631565b8381036040850152614a8c818a614a27565b90508381036060850152614aa08189614a27565b9050818716608085015283810360a0850152614abc81876146b4565b9250505061ffff831660c083015298975050505050505050565b60008251614ae8818460208701614688565b919091019291505056fea264697066735822122056f52bea9086d3296e3a9e741e4b37cc4762a35347ce2481f689c2ad2fbad58b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken(uint256)": {
        "details": "Approve all required tokens"
      },
      "executeOperation(address[],uint256[],uint256[],address,bytes)": {
        "details": "Aave will call this function after doing flash loan"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweep(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateBorrowRatio(uint256,uint256)": {
        "details": "It is possible to set 0 as _minBorrowRatio to not borrow anything",
        "params": {
          "_maxBorrowRatio": "Maximum % we want to borrow",
          "_minBorrowRatio": "Minimum % we want to borrow"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "claimAndSwapRewards(uint256)": {
        "notice": "Claim rewardToken and convert rewardToken into collateral token."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "currentBorrowRatio()": {
        "notice": "Current borrow ratio, calculated as current borrow divide by max allowed borrow Return value is based on basis points, i.e. 7500 = 75% ratio"
      },
      "getPosition()": {
        "notice": "Return supply and borrow position. Position may return few block old value"
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "swapToCollateral(address,uint256)": {
        "notice": "onlyKeeper:: Swap given token into collateral token."
      },
      "sweep(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns total collateral locked in the strategy"
      },
      "updateBorrowRatio(uint256,uint256)": {
        "notice": "Update upper and lower borrow ratio"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14716,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14722,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14725,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)13284"
      },
      {
        "astId": 14738,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3027_storage"
      },
      {
        "astId": 20869,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 20878,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
        "label": "minBorrowRatio",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 20881,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
        "label": "maxBorrowRatio",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 20887,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
        "label": "cToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(CToken)10453"
      },
      {
        "astId": 20892,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
        "label": "rewardToken",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 13409,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
        "label": "poolAddressesProvider",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(PoolAddressesProviderV3)9928"
      },
      {
        "astId": 13412,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
        "label": "isAaveActive",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 13478,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
        "label": "awaitingFlash",
        "offset": 21,
        "slot": "10",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CToken)10453": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(IRoutedSwapper)13284": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_contract(PoolAddressesProviderV3)9928": {
        "encoding": "inplace",
        "label": "contract PoolAddressesProviderV3",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3027_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3026,
            "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2726_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2726_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2721,
            "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2725,
            "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol:SonneLeverage",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}