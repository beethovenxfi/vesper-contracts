{
  "address": "0x6A12FA3eD48B1404EB973bCdF2d4DF390E497544",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "crvPool_",
          "type": "address"
        },
        {
          "internalType": "enum CurveBase.PoolType",
          "name": "curvePoolType_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "depositZap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "crvToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "crvSlippage_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "masterOracle_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapper_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralIdx_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCrvSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCrvSlippage",
          "type": "uint256"
        }
      ],
      "name": "CrvSlippageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IMasterOracle",
          "name": "oldMasterOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle",
          "type": "address"
        }
      ],
      "name": "MasterOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_MINTER",
      "outputs": [
        {
          "internalType": "contract ITokenMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "claimAndSwapRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvGauge",
      "outputs": [
        {
          "internalType": "contract ILiquidityGaugeV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvLp",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curvePoolType",
      "outputs": [
        {
          "internalType": "enum CurveBase.PoolType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceHere",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpHere",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceHereAndStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpHereAndStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterOracle",
      "outputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refetchRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swapToCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCrvSlippage_",
          "type": "uint256"
        }
      ],
      "name": "updateCrvSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle_",
          "type": "address"
        }
      ],
      "name": "updateMasterOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x48c7c9c21e090309ed199a30027a0641ae7d84333e2d0b59f72dd064ad111d89",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x6A12FA3eD48B1404EB973bCdF2d4DF390E497544",
    "transactionIndex": 0,
    "gasUsed": "4953629",
    "logsBloom": "0x
    "blockHash": "0x6634e5ce67713bbf59989a2e8995770f9de2fe3ea84eb0704ee4e5398e0fc7f9",
    "transactionHash": "0x48c7c9c21e090309ed199a30027a0641ae7d84333e2d0b59f72dd064ad111d89",
    "logs": [],
    "blockNumber": 75786609,
    "cumulativeGasUsed": "4953629",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x539505Dde2B9771dEBE0898a84441c5E7fDF6BC0",
    "0x061b87122Ed14b9526A813209C8a59a633257bAb",
    7,
    "0x167e42a1c7ab4be03764a2222aac57f5f6754411",
    "0x0994206dfE8De6Ec6920FF4D779B0d950605Fb53",
    250,
    "0x0aac835162D368F246dc71628AfcD6d2930c47d3",
    "0xDAf982c67712780D54C298A91D86788165B701A4",
    2,
    "Curve_sUSD_USDC"
  ],
  "numDeployments": 1,
  "solcInputHash": "619e8ac9e04a70ca6e3bb39f66449651",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvPool_\",\"type\":\"address\"},{\"internalType\":\"enum CurveBase.PoolType\",\"name\":\"curvePoolType_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositZap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"crvSlippage_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"masterOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdx_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCrvSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCrvSlippage\",\"type\":\"uint256\"}],\"name\":\"CrvSlippageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IMasterOracle\",\"name\":\"oldMasterOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle\",\"type\":\"address\"}],\"name\":\"MasterOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_MINTER\",\"outputs\":[{\"internalType\":\"contract ITokenMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"claimAndSwapRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvGauge\",\"outputs\":[{\"internalType\":\"contract ILiquidityGaugeV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvLp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePoolType\",\"outputs\":[{\"internalType\":\"enum CurveBase.PoolType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceHere\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpHere\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceHereAndStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpHereAndStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOracle\",\"outputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refetchRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapToCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCrvSlippage_\",\"type\":\"uint256\"}],\"name\":\"updateCrvSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle_\",\"type\":\"address\"}],\"name\":\"updateMasterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken(uint256)\":{\"details\":\"Approve all required tokens\"},\"isReservedToken(address)\":{\"details\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweep(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"This strategy will deposit collateral token in a Curve Pool and earn interest.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"claimAndSwapRewards(uint256)\":{\"notice\":\"Claim rewardToken and convert rewardToken into collateral token.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"refetchRewardTokens()\":{\"notice\":\"Rewards token in gauge can be updated any time. This method refresh list. It is recommended to claimAndSwapRewards before calling this function.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"swapToCollateral(address,uint256)\":{\"notice\":\"onlyKeeper:: Swap given token into collateral token.\"},\"sweep(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns collateral balance + collateral deposited to curve\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/curve/Curve.sol\":\"Curve\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function sweep(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf7b06736a402e8548dd9cd3752418ab23e44426652f0fee6e0a40e37fbacdcab\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc37d85b96c2a8d7bc09f25958e0a81394bf5780286444147ddf875fa628d53ce\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 profit_) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 collateralAmount_) external;\\n\\n    function excessDebt(address strategy_) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(uint256 profit_, uint256 loss_, uint256 payback_) external;\\n\\n    function reportLoss(uint256 loss_) external;\\n\\n    function sweepERC20(address fromToken_) external;\\n\\n    function withdraw(uint256 share_) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address address_) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address address_) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(\\n        address strategy_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address strategy_) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e04db3bafbcc5985db33ae168ada16fed2bbc42a6cd26bbe936a71a4f537e0c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0x475e55655e2868cd6d31dea7a571bb9c73337937529df19563054d08f8c1f73c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IDeposit2x {\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\\n}\\n\\ninterface IDeposit3x {\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\\n}\\n\\ninterface IDeposit4x {\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external payable;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8130414bc2c2a1540e9d5218285322eb72399b1880051849fda2f06a187b76e3\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IDepositZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IDepositZap {\\n    function remove_liquidity_one_coin(address _pool, uint256 _burn_amount, int128 i, uint256 _min_amount) external;\\n\\n    function calc_withdraw_one_coin(address _pool, uint256 _token_amount, int128 i) external view returns (uint256);\\n}\\n\\ninterface IDepositZap3x is IDepositZap {\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[3] memory _amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        address _pool,\\n        uint256[3] memory _deposit_amounts,\\n        uint256 _min_mint_amount\\n    ) external payable;\\n\\n    function remove_liquidity(address _pool, uint256 _burn_amount, uint256[3] memory _min_amounts) external;\\n}\\n\\ninterface IDepositZap4x is IDepositZap {\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(address _pool, uint256[4] memory _amounts, uint256 _min_mint_amount) external payable;\\n\\n    function remove_liquidity(address _pool, uint256 _amount, uint256[4] memory _min_amounts) external;\\n}\\n\",\"keccak256\":\"0x9cf378020a3def5427fa690a881a911e62fb2d12ba498f2084baed8c385d97e3\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILiquidityGauge {\\n    function lp_token() external view returns (address);\\n\\n    function integrate_fraction(address addr) external view returns (uint256);\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function user_checkpoint(address addr) external returns (bool);\\n\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address addr) external;\\n\\n    function withdraw(uint256 _value) external;\\n}\\n\\ninterface ILiquidityGaugeReward is ILiquidityGauge {\\n    function reward_contract() external view returns (address);\\n\\n    function rewarded_token() external view returns (address);\\n}\\n\\ninterface ILiquidityGaugeV2 is IERC20, ILiquidityGauge {\\n    function claim_rewards(address addr) external;\\n\\n    function claim_rewards() external;\\n\\n    function claimable_reward(address, address) external returns (uint256);\\n\\n    function reward_integral(address) external view returns (uint256);\\n\\n    function reward_integral_for(address, address) external view returns (uint256);\\n\\n    function reward_count() external view returns (uint256);\\n\\n    function reward_tokens(uint256 _i) external view returns (address);\\n}\\n\\ninterface ILiquidityGaugeV3 is ILiquidityGaugeV2 {\\n    function claimable_reward(address addr, address token) external view override returns (uint256);\\n\\n    function claimable_reward_write(address addr, address token) external returns (uint256);\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0x1f8015b262eefac49a84e0d8e0fe8eccd5aa2f98e3de13607bfb11d44985104d\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IMetapoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/* solhint-disable func-name-mixedcase*/\\npragma solidity 0.8.9;\\n\\ninterface IMetapoolFactory {\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_decimals(address pool) external view returns (uint256[8] memory);\\n\\n    function get_coins(address pool) external view returns (address[4] memory);\\n\\n    function get_n_coins(address pool) external view returns (uint256);\\n\\n    function get_meta_n_coins(address pool) external view returns (uint256[2] memory);\\n\\n    function get_decimals(address pool) external view returns (uint256[4] memory);\\n\\n    function get_gauge(address pool) external view returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0b34a43d929c27a7f0fe8cfcda363e5bf02cd08e66a283d402181ef0a072c3f7\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IRegistry {\\n    function get_pool_from_lp_token() external view returns (address);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function get_n_coins(address pool) external view returns (uint256[2] memory);\\n\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_decimals(address pool) external view returns (uint256[8] memory);\\n\\n    function get_gauges(address pool) external view returns (address[10] memory);\\n}\\n\",\"keccak256\":\"0x2ebd1ea8b845d34dd2a389b994a396a57cc8c423f03272ed51dcea203d3b6288\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\n// Not a complete interface, but should have what we need\\ninterface IStableSwap {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function fee() external view returns (uint256); // fee * 1e10\\n\\n    function lp_token() external view returns (address);\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n\\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\\n\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\\n}\\n\\ninterface IStableSwapV2 {\\n    function coins(int128 i) external view returns (address);\\n}\\n\\ninterface IStableSwapUnderlying is IStableSwap {\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount,\\n        bool _use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap2x is IStableSwap {\\n    function calc_token_amount(uint256[2] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external payable;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n}\\n\\ninterface IStableSwap3x is IStableSwap {\\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external payable;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n}\\n\\ninterface IStableSwap4x is IStableSwap {\\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external payable;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] memory _amounts,\\n        uint256 _max_burn_amount\\n    ) external returns (uint256);\\n}\\n\\ninterface IStableSwap2xUnderlying is IStableSwap2x, IStableSwapUnderlying {\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount, bool use_underlying) external payable;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(uint256 amount, uint256[2] calldata min_amounts, bool use_underlying) external;\\n}\\n\\ninterface IStableSwap3xUnderlying is IStableSwap3x, IStableSwapUnderlying {\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount, bool use_underlying) external payable;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(uint256 amount, uint256[3] calldata min_amounts, bool use_underlying) external;\\n}\\n\\ninterface IStableSwap4xUnderlying is IStableSwap4x, IStableSwapUnderlying {\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount, bool use_underlying) external payable;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(uint256 amount, uint256[4] calldata min_amounts, bool use_underlying) external;\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0x74a4ef282b8e76aac6d0d95db650b4ced204368a0f861807921a649ce5c6ad05\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/ITokenMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\n// Not a complete interface, but should have what we need\\ninterface ITokenMinter {\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n\\n    function mint(address gauge_addr) external;\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x4c11e543dddafeaa1f90af55d8aa750d943a050cf7cb1100456832fce39617cf\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/one-oracle/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    function quote(address tokenIn_, address tokenOut_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0xc134b62d3ff80516002caf4d1644a47ef466e656d3ca791cbc088165536b335a\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(address tokenIn_, address tokenOut_, uint256 amountOut_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(address tokenIn_, address tokenOut_, uint256 amountIn_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x853ff5f9fbdd441f535370e39d43221d72d7a02fd5e48e343bbecb716a633f10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(address _pool, address _swapper, address _receiptToken) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken(uint256 _approvalAmount) external onlyKeeper {\\n        _approveToken(_approvalAmount);\\n    }\\n\\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\\n    function claimAndSwapRewards(uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        _claimAndSwapRewards();\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance() external onlyKeeper returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /// @notice onlyKeeper:: Swap given token into collateral token.\\n    function swapToCollateral(IERC20 _tokenIn, uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        require(address(_tokenIn) != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(address(_tokenIn)), \\\"not-allowed-to-sweep\\\");\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        uint256 _amountIn = _tokenIn.balanceOf(address(this));\\n        if (_amountIn > 0) {\\n            if (_amountIn > _tokenIn.allowance(address(this), address(swapper))) {\\n                _tokenIn.safeApprove(address(swapper), 0);\\n                _tokenIn.safeApprove(address(swapper), MAX_UINT_VALUE);\\n            }\\n            _swapExactInput(address(_tokenIn), address(collateralToken), _amountIn);\\n        }\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweep(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _claimAndSwapRewards() internal virtual {\\n        (address _rewardToken, uint256 _rewardsAmount) = _claimRewards();\\n        if (_rewardsAmount > 0) {\\n            _safeSwapExactInput(_rewardToken, address(collateralToken), _rewardsAmount);\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _claimRewards() internal virtual returns (address, uint256) {}\\n\\n    function _rebalance() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(address _tokenIn, address _tokenOut, uint256 _amountIn) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x58711ce2d409c8069e25980d2df4d09fd73e66c8ed41ba9ade1829bbb4ad6d80\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/curve/Curve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./CurveBase.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Curve Pool and earn interest.\\n// solhint-disable no-empty-blocks\\ncontract Curve is CurveBase {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address pool_,\\n        address crvPool_,\\n        CurveBase.PoolType curvePoolType_,\\n        address depositZap_,\\n        address crvToken_,\\n        uint256 crvSlippage_,\\n        address masterOracle_,\\n        address swapper_,\\n        uint256 collateralIdx_,\\n        string memory name_\\n    )\\n        CurveBase(\\n            pool_,\\n            crvPool_,\\n            curvePoolType_,\\n            depositZap_,\\n            crvToken_,\\n            crvSlippage_,\\n            masterOracle_,\\n            swapper_,\\n            collateralIdx_,\\n            name_\\n        )\\n    {\\n        rewardTokens = _getRewardTokens();\\n    }\\n\\n    /**\\n     * @dev Prepare rewardToken array\\n     * @return _rewardTokens The array of reward tokens (both base and extra rewards)\\n     */\\n    function _getRewardTokens() internal view virtual override returns (address[] memory _rewardTokens) {\\n        _rewardTokens = new address[](1);\\n        _rewardTokens[0] = CRV;\\n\\n        // If there is no gauge, CRV only\\n        if (address(crvGauge) == address(0)) {\\n            return _rewardTokens;\\n        }\\n\\n        // If LiquidityGaugeReward, `rewarded_token` only\\n        try ILiquidityGaugeReward(address(crvGauge)).rewarded_token() returns (address _rewardToken) {\\n            _rewardTokens = new address[](2);\\n            _rewardTokens[0] = CRV;\\n            _rewardTokens[1] = _rewardToken;\\n            return _rewardTokens;\\n        } catch {}\\n\\n        // If LiquidityGaugeV2 or LiquidityGaugeV3, CRV + extra reward tokens\\n        try ILiquidityGaugeV2(address(crvGauge)).reward_tokens(0) returns (address _rewardToken) {\\n            // If no extra reward token, CRV only\\n            if (_rewardToken == address(0)) {\\n                return _rewardTokens;\\n            }\\n\\n            try ILiquidityGaugeV2(address(crvGauge)).reward_count() returns (uint256 _len) {\\n                _rewardTokens = new address[](1 + _len);\\n                _rewardTokens[0] = _rewardToken;\\n                for (uint256 i = 1; i < _len; ++i) {\\n                    _rewardTokens[i] = ILiquidityGaugeV2(address(crvGauge)).reward_tokens(i);\\n                }\\n                _rewardTokens[_len] = CRV;\\n                return _rewardTokens;\\n            } catch {\\n                // If doesn't implement `reward_count` assuming only one extra reward token\\n                // E.g. stETH pool\\n                _rewardTokens = new address[](2);\\n                _rewardTokens[0] = CRV;\\n                _rewardTokens[1] = _rewardToken;\\n                return _rewardTokens;\\n            }\\n        } catch {}\\n\\n        // If LiquidityGauge, CRV only\\n        return _rewardTokens;\\n    }\\n}\\n\",\"keccak256\":\"0xcfa9e739aaf220c40da8f52b2c5a3c2dddb840fa701e065b11b649104cc4c8f8\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/curve/CurveBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../interfaces/curve/IDeposit.sol\\\";\\nimport \\\"../../interfaces/curve/IDepositZap.sol\\\";\\nimport \\\"../../interfaces/curve/IStableSwap.sol\\\";\\nimport \\\"../../interfaces/curve/ILiquidityGauge.sol\\\";\\nimport \\\"../../interfaces/curve/ITokenMinter.sol\\\";\\nimport \\\"../../interfaces/curve/IMetapoolFactory.sol\\\";\\nimport \\\"../../interfaces/curve/IRegistry.sol\\\";\\nimport \\\"../../interfaces/curve/IAddressProvider.sol\\\";\\nimport \\\"../../interfaces/one-oracle/IMasterOracle.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\n\\n/// @title Base contract for Curve-related strategies\\nabstract contract CurveBase is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    enum PoolType {\\n        PLAIN_2_POOL,\\n        PLAIN_3_POOL,\\n        PLAIN_4_POOL,\\n        LENDING_2_POOL,\\n        LENDING_3_POOL,\\n        LENDING_4_POOL,\\n        META_3_POOL,\\n        META_4_POOL\\n    }\\n\\n    string public constant VERSION = \\\"5.1.0\\\";\\n    uint256 internal constant MAX_BPS = 10_000;\\n    ITokenMinter public constant CRV_MINTER = ITokenMinter(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0); // This contract only exists on mainnet\\n    IAddressProvider public constant ADDRESS_PROVIDER = IAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383); // Same address to all chains\\n    uint256 private constant FACTORY_ADDRESS_ID = 3;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable CRV;\\n    IERC20 public immutable crvLp; // Note: Same as `receiptToken` but using this in order to save gas since it's `immutable` and `receiptToken` isn't\\n    address public immutable crvPool;\\n    ILiquidityGaugeV2 public immutable crvGauge;\\n    uint256 public immutable collateralIdx;\\n    address internal immutable depositZap;\\n    PoolType public immutable curvePoolType;\\n    bool private immutable isFactoryPool;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    uint256 public crvSlippage;\\n    IMasterOracle public masterOracle;\\n    address[] public rewardTokens;\\n\\n    event CrvSlippageUpdated(uint256 oldCrvSlippage, uint256 newCrvSlippage);\\n    event MasterOracleUpdated(IMasterOracle oldMasterOracle, IMasterOracle newMasterOracle);\\n\\n    constructor(\\n        address pool_,\\n        address crvPool_,\\n        PoolType curvePoolType_,\\n        address depositZap_,\\n        address crvToken_,\\n        uint256 crvSlippage_,\\n        address masterOracle_,\\n        address swapper_,\\n        uint256 collateralIdx_,\\n        string memory name_\\n    ) Strategy(pool_, swapper_, address(0)) {\\n        require(crvToken_ != address(0), \\\"crv-token-is-null\\\");\\n\\n        address _crvGauge;\\n        IRegistry _registry = IRegistry(ADDRESS_PROVIDER.get_registry());\\n        address _crvLp = _registry.get_lp_token(crvPool_);\\n\\n        if (_crvLp != address(0)) {\\n            // Get data from Registry contract\\n            require(collateralIdx_ < _registry.get_n_coins(crvPool_)[1], \\\"invalid-collateral\\\");\\n            require(\\n                _registry.get_underlying_coins(crvPool_)[collateralIdx_] == address(collateralToken),\\n                \\\"collateral-mismatch\\\"\\n            );\\n            _crvGauge = _registry.get_gauges(crvPool_)[0];\\n        } else {\\n            // Get data from Factory contract\\n            IMetapoolFactory _factory = IMetapoolFactory(ADDRESS_PROVIDER.get_address(FACTORY_ADDRESS_ID));\\n\\n            if (_factory.is_meta(crvPool_)) {\\n                require(collateralIdx_ < _factory.get_meta_n_coins(crvPool_)[1], \\\"invalid-collateral\\\");\\n                require(\\n                    _factory.get_underlying_coins(crvPool_)[collateralIdx_] == address(collateralToken),\\n                    \\\"collateral-mismatch\\\"\\n                );\\n            } else {\\n                require(collateralIdx_ < _factory.get_n_coins(crvPool_), \\\"invalid-collateral\\\");\\n                address _coinFromCrvPool = _factory.get_coins(crvPool_)[collateralIdx_];\\n                // For wrapped collateral, factory may return wrapped/native token.\\n                if (_coinFromCrvPool == ETH) _coinFromCrvPool = address(collateralToken);\\n                require(_coinFromCrvPool == address(collateralToken), \\\"collateral-mismatch\\\");\\n            }\\n            _crvLp = crvPool_;\\n\\n            // Note: OP sETH/ETH has gauge but `factory` contract is returning null\\n            // See more: https://github.com/bloqpriv/vesper-contracts/issues/475\\n            if (crvPool_ == 0x7Bc5728BC2b59B45a58d9A576E2Ffc5f0505B35E) {\\n                _crvGauge = 0xCB8883D1D8c560003489Df43B30612AAbB8013bb;\\n            } else if (crvPool_ == 0x061b87122Ed14b9526A813209C8a59a633257bAb) {\\n                // sUSD Synthetix Optimism pool\\n                _crvGauge = 0xc5aE4B5F86332e70f3205a8151Ee9eD9F71e0797;\\n            } else {\\n                _crvGauge = _factory.get_gauge(crvPool_);\\n            }\\n        }\\n\\n        require(crvPool_ != address(0), \\\"pool-is-null\\\");\\n        require(_crvLp != address(0), \\\"lp-is-null\\\");\\n        require(_crvGauge != address(0), \\\"gauge-is-null\\\");\\n\\n        CRV = crvToken_;\\n        crvPool = crvPool_;\\n        crvLp = IERC20(_crvLp);\\n        crvGauge = ILiquidityGaugeV2(_crvGauge);\\n        crvSlippage = crvSlippage_;\\n        receiptToken = _crvLp;\\n        collateralIdx = collateralIdx_;\\n        curvePoolType = curvePoolType_;\\n        isFactoryPool = _crvLp == crvPool_;\\n        depositZap = depositZap_;\\n        masterOracle = IMasterOracle(masterOracle_);\\n        NAME = name_;\\n    }\\n\\n    function getRewardTokens() external view returns (address[] memory) {\\n        return rewardTokens;\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address token_) public view override returns (bool) {\\n        return token_ == address(crvLp) || token_ == address(collateralToken);\\n    }\\n\\n    // Gets LP value not staked in gauge\\n    function lpBalanceHere() public view virtual returns (uint256 _lpHere) {\\n        _lpHere = crvLp.balanceOf(address(this));\\n    }\\n\\n    function lpBalanceHereAndStaked() public view virtual returns (uint256 _lpHereAndStaked) {\\n        _lpHereAndStaked = crvLp.balanceOf(address(this)) + lpBalanceStaked();\\n    }\\n\\n    function lpBalanceStaked() public view virtual returns (uint256 _lpStaked) {\\n        _lpStaked = crvGauge.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns collateral balance + collateral deposited to curve\\n    function tvl() external view override returns (uint256) {\\n        return\\n            collateralToken.balanceOf(address(this)) +\\n            _quoteLpToCoin(lpBalanceHereAndStaked(), SafeCast.toInt128(int256(collateralIdx)));\\n    }\\n\\n    function _approveToken(uint256 amount_) internal virtual override {\\n        super._approveToken(amount_);\\n\\n        address _swapper = address(swapper);\\n\\n        collateralToken.safeApprove(crvPool, amount_);\\n        collateralToken.safeApprove(_swapper, amount_);\\n\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; ++i) {\\n            IERC20(rewardTokens[i]).safeApprove(_swapper, amount_);\\n        }\\n        crvLp.safeApprove(address(crvGauge), amount_);\\n\\n        if (depositZap != address(0)) {\\n            collateralToken.safeApprove(depositZap, amount_);\\n            crvLp.safeApprove(depositZap, amount_);\\n        }\\n    }\\n\\n    /// @notice Unstake LP tokens in order to transfer to the new strategy\\n    function _beforeMigration(address newStrategy_) internal override {\\n        require(IStrategy(newStrategy_).collateral() == address(collateralToken), \\\"wrong-collateral-token\\\");\\n        require(IStrategy(newStrategy_).token() == address(crvLp), \\\"wrong-receipt-token\\\");\\n        _unstakeAllLp();\\n    }\\n\\n    function _calculateAmountOutMin(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOutMin) {\\n        _amountOutMin = (masterOracle.quote(tokenIn_, tokenOut_, amountIn_) * (MAX_BPS - crvSlippage)) / MAX_BPS;\\n    }\\n\\n    /**\\n     * @dev Curve pool may have more than one reward token.\\n     */\\n    function _claimAndSwapRewards() internal virtual override {\\n        _claimRewards();\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; ++i) {\\n            address _rewardToken = rewardTokens[i];\\n            uint256 _amountIn = IERC20(_rewardToken).balanceOf(address(this));\\n            if (_amountIn > 0) {\\n                _safeSwapExactInput(_rewardToken, address(collateralToken), _amountIn);\\n            }\\n        }\\n    }\\n\\n    /// @dev Return values are not being used hence returning 0\\n    function _claimRewards() internal virtual override returns (address, uint256) {\\n        if (block.chainid == 1) {\\n            // Side-chains don't have minter contract\\n            CRV_MINTER.mint(address(crvGauge));\\n        }\\n        try crvGauge.claim_rewards() {} catch {\\n            // This call may fail in some scenarios\\n            // e.g. 3Crv gauge doesn't have such function\\n        }\\n        return (address(0), 0);\\n    }\\n\\n    function _deposit() internal {\\n        _depositToCurve(collateralToken.balanceOf(address(this)));\\n        _stakeAllLp();\\n    }\\n\\n    function _depositTo2PlainPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[2] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        IStableSwap2x(crvPool).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(_depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo2LendingPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[2] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: Using use_underlying = true to deposit underlying instead of IB token\\n        IStableSwap2xUnderlying(crvPool).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(\\n            _depositAmounts,\\n            lpAmountOutMin_,\\n            true\\n        );\\n    }\\n\\n    function _depositTo3PlainPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[3] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        IStableSwap3x(crvPool).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(_depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo3LendingPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[3] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: Using use_underlying = true to deposit underlying instead of IB token\\n        IStableSwap3xUnderlying(crvPool).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(\\n            _depositAmounts,\\n            lpAmountOutMin_,\\n            true\\n        );\\n    }\\n\\n    function _depositTo4PlainOrMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[4] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        IDeposit4x(depositZap).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(_depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo3FactoryMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[3] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: The function below won't return a reason when reverting due to slippage\\n        IDepositZap3x(depositZap).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(\\n            address(crvPool),\\n            _depositAmounts,\\n            lpAmountOutMin_\\n        );\\n    }\\n\\n    function _depositTo4FactoryMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\\n        uint256[4] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: The function below won't return a reason when reverting due to slippage\\n        IDepositZap4x(depositZap).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(\\n            address(crvPool),\\n            _depositAmounts,\\n            lpAmountOutMin_\\n        );\\n    }\\n\\n    function _depositToCurve(uint256 coinAmountIn_) internal virtual {\\n        _depositToCurve(coinAmountIn_, false);\\n    }\\n\\n    function _depositToCurve(uint256 coinAmountIn_, bool useEth_) internal virtual {\\n        if (coinAmountIn_ == 0) {\\n            return;\\n        }\\n\\n        uint256 _lpAmountOutMin = _calculateAmountOutMin(address(collateralToken), address(crvLp), coinAmountIn_);\\n\\n        if (curvePoolType == PoolType.PLAIN_2_POOL) {\\n            return _depositTo2PlainPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n        if (curvePoolType == PoolType.LENDING_2_POOL) {\\n            return _depositTo2LendingPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n        if (curvePoolType == PoolType.PLAIN_3_POOL) {\\n            return _depositTo3PlainPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n        if (curvePoolType == PoolType.LENDING_3_POOL) {\\n            return _depositTo3LendingPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n        if (curvePoolType == PoolType.PLAIN_4_POOL) {\\n            return _depositTo4PlainOrMetaPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n        if (curvePoolType == PoolType.META_3_POOL) {\\n            return _depositTo3FactoryMetaPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n        if (curvePoolType == PoolType.META_4_POOL) {\\n            if (isFactoryPool) {\\n                return _depositTo4FactoryMetaPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n            }\\n            return _depositTo4PlainOrMetaPool(coinAmountIn_, _lpAmountOutMin, useEth_);\\n        }\\n\\n        revert(\\\"deposit-to-curve-failed\\\");\\n    }\\n\\n    function _generateReport() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _strategyDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        int128 _i = SafeCast.toInt128(int256(collateralIdx));\\n        uint256 _lpHere = lpBalanceHere();\\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\\n        uint256 _collateralInCurve = _quoteLpToCoin(_totalLp, _i);\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = _collateralHere + _collateralInCurve;\\n\\n        if (_totalCollateral > _strategyDebt) {\\n            _profit = _totalCollateral - _strategyDebt;\\n        } else {\\n            _loss = _strategyDebt - _totalCollateral;\\n        }\\n\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_profitAndExcessDebt > _collateralHere) {\\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _collateralInCurve);\\n            if (_totalAmountToWithdraw > 0) {\\n                uint256 _lpToBurn = Math.min((_totalAmountToWithdraw * _totalLp) / _collateralInCurve, _totalLp);\\n\\n                if (_lpToBurn > 0) {\\n                    if (_lpToBurn > _lpHere) {\\n                        _unstakeLp(_lpToBurn - _lpHere);\\n                    }\\n\\n                    _withdrawFromCurve(_lpToBurn, _i);\\n\\n                    _collateralHere = collateralToken.balanceOf(address(this));\\n                }\\n            }\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n    }\\n\\n    function _getRewardTokens() internal view virtual returns (address[] memory _rewardTokens);\\n\\n    function _quoteLpToCoin(uint256 amountIn_, int128 toIdx_) private view returns (uint256 _amountOut) {\\n        if (amountIn_ == 0) {\\n            return 0;\\n        }\\n\\n        if (curvePoolType == PoolType.PLAIN_4_POOL || (curvePoolType == PoolType.META_4_POOL && !isFactoryPool)) {\\n            return IDeposit4x(depositZap).calc_withdraw_one_coin(amountIn_, toIdx_);\\n        }\\n        if (curvePoolType == PoolType.META_3_POOL || curvePoolType == PoolType.META_4_POOL) {\\n            return IDepositZap(depositZap).calc_withdraw_one_coin(address(crvLp), amountIn_, toIdx_);\\n        }\\n\\n        return IStableSwap(crvPool).calc_withdraw_one_coin(amountIn_, toIdx_);\\n    }\\n\\n    function _rebalance() internal virtual override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        (_profit, _loss, _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _deposit();\\n    }\\n\\n    // Requires that gauge has approval for lp token\\n    function _stakeAllLp() internal virtual {\\n        uint256 _balance = crvLp.balanceOf(address(this));\\n        if (_balance > 0) {\\n            crvGauge.deposit(_balance);\\n        }\\n    }\\n\\n    function _unstakeAllLp() internal virtual {\\n        _unstakeLp(crvGauge.balanceOf(address(this)));\\n    }\\n\\n    function _unstakeLp(uint256 amount_) internal virtual {\\n        if (amount_ > 0) {\\n            crvGauge.withdraw(amount_);\\n        }\\n    }\\n\\n    function _withdrawFromPlainPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\\n        IStableSwap(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_);\\n    }\\n\\n    function _withdrawFrom2LendingPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\\n        // Note: Using use_underlying = true to withdraw underlying instead of IB token\\n        IStableSwap2xUnderlying(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_, true);\\n    }\\n\\n    function _withdrawFrom3LendingPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\\n        // Note: Using use_underlying = true to withdraw underlying instead of IB token\\n        IStableSwap3xUnderlying(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_, true);\\n    }\\n\\n    function _withdrawFrom4PlainOrMetaPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\\n        IDeposit4x(depositZap).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_);\\n    }\\n\\n    function _withdrawFrom3FactoryMetaOr4FactoryMetaPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\\n        // Note: The function below won't return a reason when reverting due to slippage\\n        IDepositZap(depositZap).remove_liquidity_one_coin(address(crvLp), lpAmount_, i_, minAmountOut_);\\n    }\\n\\n    function _withdrawFromCurve(uint256 lpToBurn_, int128 coinIdx_) internal {\\n        if (lpToBurn_ == 0) {\\n            return;\\n        }\\n\\n        uint256 _minCoinAmountOut = _calculateAmountOutMin(address(crvLp), address(collateralToken), lpToBurn_);\\n\\n        if (curvePoolType == PoolType.PLAIN_2_POOL || curvePoolType == PoolType.PLAIN_3_POOL) {\\n            _withdrawFromPlainPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        } else if (curvePoolType == PoolType.LENDING_2_POOL) {\\n            _withdrawFrom2LendingPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        } else if (curvePoolType == PoolType.LENDING_3_POOL) {\\n            _withdrawFrom3LendingPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        } else if (curvePoolType == PoolType.PLAIN_4_POOL) {\\n            _withdrawFrom4PlainOrMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        } else if (curvePoolType == PoolType.META_3_POOL) {\\n            _withdrawFrom3FactoryMetaOr4FactoryMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        } else if (curvePoolType == PoolType.META_4_POOL) {\\n            if (isFactoryPool) {\\n                _withdrawFrom3FactoryMetaOr4FactoryMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n            } else {\\n                _withdrawFrom4PlainOrMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n            }\\n        } else {\\n            revert(\\\"withdraw-from-curve-failed\\\");\\n        }\\n    }\\n\\n    function _withdrawHere(uint256 coinAmountOut_) internal override {\\n        int128 _i = SafeCast.toInt128(int256(collateralIdx));\\n\\n        uint256 _lpHere = lpBalanceHere();\\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\\n        uint256 _lpToBurn = Math.min((coinAmountOut_ * _totalLp) / _quoteLpToCoin(_totalLp, _i), _totalLp);\\n\\n        if (_lpToBurn == 0) return;\\n\\n        if (_lpToBurn > _lpHere) {\\n            _unstakeLp(_lpToBurn - _lpHere);\\n        }\\n\\n        _withdrawFromCurve(_lpToBurn, _i);\\n    }\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n\\n    /**\\n     * @notice Rewards token in gauge can be updated any time. This method refresh list.\\n     * It is recommended to claimAndSwapRewards before calling this function.\\n     */\\n    function refetchRewardTokens() external virtual onlyGovernor {\\n        // Before updating the reward list, claim rewards and swap into collateral.\\n        _claimAndSwapRewards();\\n        rewardTokens = _getRewardTokens();\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function updateCrvSlippage(uint256 newCrvSlippage_) external onlyGovernor {\\n        require(newCrvSlippage_ < MAX_BPS, \\\"invalid-slippage-value\\\");\\n        emit CrvSlippageUpdated(crvSlippage, newCrvSlippage_);\\n        crvSlippage = newCrvSlippage_;\\n    }\\n\\n    function updateMasterOracle(IMasterOracle newMasterOracle_) external onlyGovernor {\\n        emit MasterOracleUpdated(masterOracle, newMasterOracle_);\\n        masterOracle = newMasterOracle_;\\n    }\\n}\\n\",\"keccak256\":\"0x9b5c187bd0a9a3d2dcd940ef00176e2bce488c839421d01bed0488d26524b66f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101c06040523480156200001257600080fd5b5060405162006d6538038062006d658339810160408190526200003591620013d8565b89898989898989898989898360006001600160a01b0383166200009f5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000f75760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f000000000000000000604482015260640162000096565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200015557600080fd5b505afa1580156200016a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001909190620014bc565b6001600160a01b03908116608052600080546001600160a01b031916918316919091179055620001d7620001c13390565b600362000d4360201b62001f9e1790919060201c565b620002195760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640162000096565b5050506001600160a01b038616620002685760405162461bcd60e51b815260206004820152601160248201527018dc9d8b5d1bdad95b8b5a5ccb5b9d5b1b607a1b604482015260640162000096565b6000806f22d53366457f9d5e68ec105046fc43836001600160a01b031663a262904b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620002b557600080fd5b505afa158015620002ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002f09190620014bc565b604051633795104960e01b81526001600160a01b038d8116600483015291925060009183169063379510499060240160206040518083038186803b1580156200033857600080fd5b505afa1580156200034d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003739190620014bc565b90506001600160a01b03811615620005bd5760405163940494f160e01b81526001600160a01b038d8116600483015283169063940494f190602401604080518083038186803b158015620003c657600080fd5b505afa158015620003db573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004019190620014e3565b6020015185106200044a5760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b604482015260640162000096565b60805160405163a77576ef60e01b81526001600160a01b038e811660048301529182169184169063a77576ef906024016101006040518083038186803b1580156200049457600080fd5b505afa158015620004a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004cf919062001580565b8660088110620004e357620004e36200156a565b60200201516001600160a01b031614620005365760405162461bcd60e51b81526020600482015260136024820152720c6ded8d8c2e8cae4c2d85adad2e6dac2e8c6d606b1b604482015260640162000096565b6040516356059ffb60e01b81526001600160a01b038d811660048301528316906356059ffb906024016101406040518083038186803b1580156200057957600080fd5b505afa1580156200058e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005b4919062001611565b51925062000b72565b60405163124fd3dd60e21b8152600360048201526000906f22d53366457f9d5e68ec105046fc43839063493f4f749060240160206040518083038186803b1580156200060857600080fd5b505afa1580156200061d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006439190620014bc565b60405163e4d332a960e01b81526001600160a01b038f811660048301529192509082169063e4d332a99060240160206040518083038186803b1580156200068957600080fd5b505afa1580156200069e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c4919062001697565b15620008815760405163eb73f37d60e01b81526001600160a01b038e8116600483015282169063eb73f37d90602401604080518083038186803b1580156200070b57600080fd5b505afa15801562000720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007469190620014e3565b6020015186106200078f5760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b604482015260640162000096565b60805160405163a77576ef60e01b81526001600160a01b038f811660048301529182169183169063a77576ef906024016101006040518083038186803b158015620007d957600080fd5b505afa158015620007ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000814919062001580565b87600881106200082857620008286200156a565b60200201516001600160a01b0316146200087b5760405162461bcd60e51b81526020600482015260136024820152720c6ded8d8c2e8cae4c2d85adad2e6dac2e8c6d606b1b604482015260640162000096565b62000a67565b60405163940494f160e01b81526001600160a01b038e8116600483015282169063940494f19060240160206040518083038186803b158015620008c357600080fd5b505afa158015620008d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008fe9190620016bb565b8610620009435760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b604482015260640162000096565b604051639ac90d3d60e01b81526001600160a01b038e8116600483015260009190831690639ac90d3d9060240160806040518083038186803b1580156200098957600080fd5b505afa1580156200099e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009c49190620016d5565b8760048110620009d857620009d86200156a565b602002015190506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141562000a0a57506080515b6080516001600160a01b0316816001600160a01b03161462000a655760405162461bcd60e51b81526020600482015260136024820152720c6ded8d8c2e8cae4c2d85adad2e6dac2e8c6d606b1b604482015260640162000096565b505b8c9150737bc5728bc2b59b45a58d9a576e2ffc5f0505b35e6001600160a01b038316141562000aad5773cb8883d1d8c560003489df43b30612aabb8013bb935062000b70565b73061b87122ed14b9526a813209c8a59a633257bab6001600160a01b038e16141562000af05773c5ae4b5f86332e70f3205a8151ee9ed9f71e0797935062000b70565b60405163daf297b960e01b81526001600160a01b038e8116600483015282169063daf297b99060240160206040518083038186803b15801562000b3257600080fd5b505afa15801562000b47573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b6d9190620014bc565b93505b505b6001600160a01b038c1662000bb95760405162461bcd60e51b815260206004820152600c60248201526b1c1bdbdb0b5a5ccb5b9d5b1b60a21b604482015260640162000096565b6001600160a01b03811662000bfe5760405162461bcd60e51b815260206004820152600a6024820152691b1c0b5a5ccb5b9d5b1b60b21b604482015260640162000096565b6001600160a01b03831662000c465760405162461bcd60e51b815260206004820152600d60248201526c19d85d59d94b5a5ccb5b9d5b1b609a1b604482015260640162000096565b6001600160a01b03808a1660c0528c81166101005281811660e0819052908416610120526006899055600080546001600160a01b03191690911790556101408590528a600781111562000c9d5762000c9d6200175a565b61018081600781111562000cb55762000cb56200175a565b9052506001600160a01b038c8116828216146101a0528a811661016052600780546001600160a01b031916918916919091179055835162000cfe906005906020870190620011d5565b505050505050505050505050505062000d1c62000d6360201b60201c565b805162000d329160089160209091019062001260565b5050505050505050505050620017fc565b600062000d5a836001600160a01b03841662001183565b90505b92915050565b6040805160018082528183019092526060916020808301908036833701905050905060c0518160008151811062000d9e5762000d9e6200156a565b6001600160a01b039283166020918202929092010152610120511662000dc15790565b610120516001600160a01b03166316fa50b16040518163ffffffff1660e01b815260040160206040518083038186803b15801562000dfe57600080fd5b505afa92505050801562000e31575060408051601f3d908101601f1916820190925262000e2e91810190620014bc565b60015b62000e3c5762000ee0565b60025b60405190808252806020026020018201604052801562000e69578160200160208202803683370190505b50915060c0518260008151811062000e855762000e856200156a565b60200260200101906001600160a01b031690816001600160a01b031681525050808260018151811062000ebc5762000ebc6200156a565b60200260200101906001600160a01b031690816001600160a01b0316815250505090565b610120516040516354c49fe960e01b8152600060048201526001600160a01b03909116906354c49fe99060240160206040518083038186803b15801562000f2657600080fd5b505afa92505050801562000f59575060408051601f3d908101601f1916820190925262000f5691810190620014bc565b60015b62000f615790565b6001600160a01b03811662000f74575090565b610120516001600160a01b031663963c94b96040518163ffffffff1660e01b815260040160206040518083038186803b15801562000fb157600080fd5b505afa92505050801562000fe4575060408051601f3d908101601f1916820190925262000fe191810190620016bb565b60015b62000ff157600262000e3f565b62000ffe81600162001786565b6001600160401b03811115620010185762001018620012fa565b60405190808252806020026020018201604052801562001042578160200160208202803683370190505b50925081836000815181106200105c576200105c6200156a565b6001600160a01b039092166020928302919091019091015260015b818110156200114157610120516040516354c49fe960e01b8152600481018390526001600160a01b03909116906354c49fe99060240160206040518083038186803b158015620010c657600080fd5b505afa158015620010db573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011019190620014bc565b8482815181106200111657620011166200156a565b6001600160a01b03909216602092830291909101909101526200113981620017a1565b905062001077565b5060c0518382815181106200115a576200115a6200156a565b60200260200101906001600160a01b031690816001600160a01b031681525050505090565b5090565b6000818152600183016020526040812054620011cc5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000d5d565b50600062000d5d565b828054620011e390620017bf565b90600052602060002090601f01602090048101928262001207576000855562001252565b82601f106200122257805160ff191683800117855562001252565b8280016001018555821562001252579182015b828111156200125257825182559160200191906001019062001235565b506200117f929150620012b8565b82805482825590600052602060002090810192821562001252579160200282015b828111156200125257825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062001281565b5b808211156200117f5760008155600101620012b9565b6001600160a01b0381168114620012e557600080fd5b50565b8051620012f581620012cf565b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200133b576200133b620012fa565b604052919050565b600082601f8301126200135557600080fd5b81516001600160401b03811115620013715762001371620012fa565b602062001387601f8301601f1916820162001310565b82815285828487010111156200139c57600080fd5b60005b83811015620013bc5785810183015182820184015282016200139f565b83811115620013ce5760008385840101525b5095945050505050565b6000806000806000806000806000806101408b8d031215620013f957600080fd5b8a516200140681620012cf565b60208c0151909a506200141981620012cf565b60408c0151909950600881106200142f57600080fd5b97506200143f60608c01620012e8565b96506200144f60808c01620012e8565b955060a08b015194506200146660c08c01620012e8565b93506200147660e08c01620012e8565b6101008c01516101208d015191945092506001600160401b038111156200149c57600080fd5b620014aa8d828e0162001343565b9150509295989b9194979a5092959850565b600060208284031215620014cf57600080fd5b8151620014dc81620012cf565b9392505050565b600060408284031215620014f657600080fd5b82601f8301126200150657600080fd5b604080519081016001600160401b03811182821017156200152b576200152b620012fa565b80604052508060408401858111156200154357600080fd5b845b818110156200155f57805183526020928301920162001545565b509195945050505050565b634e487b7160e01b600052603260045260246000fd5b60006101008083850312156200159557600080fd5b83601f840112620015a557600080fd5b6040518181016001600160401b0381118282101715620015c957620015c9620012fa565b604052908301908085831115620015df57600080fd5b845b8381101562001606578051620015f781620012cf565b825260209182019101620015e1565b509095945050505050565b60006101408083850312156200162657600080fd5b83601f8401126200163657600080fd5b6040518181016001600160401b03811182821017156200165a576200165a620012fa565b6040529083019080858311156200167057600080fd5b845b83811015620016065780516200168881620012cf565b82526020918201910162001672565b600060208284031215620016aa57600080fd5b81518015158114620014dc57600080fd5b600060208284031215620016ce57600080fd5b5051919050565b600060808284031215620016e857600080fd5b82601f830112620016f857600080fd5b604051608081016001600160401b03811182821017156200171d576200171d620012fa565b6040528060808401858111156200173357600080fd5b845b818110156200155f5780516200174b81620012cf565b83526020928301920162001735565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156200179c576200179c62001770565b500190565b6000600019821415620017b857620017b862001770565b5060010190565b600181811c90821680620017d457607f821691505b60208210811415620017f657634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516151ba62001bab60003960008181612dae01528181613824015261456901526000818161028501528181612d3901528181612d7401528181612e8201528181612ebd0152818161365701528181613692015281816136d80152818161371d01528181613762015281816137a7015281816137ec01528181614393015281816143d80152818161441d01528181614462015281816144a7015281816144ec0152614531015260008181612479015281816124d50152818161252901528181612df401528181612f4401528181614053015281816140e101528181614916015281816149b20152614a700152600081816103b001528181611ba40152818161227701528181613a450152818161462a015281816146fe0152818161479d01528181614839015281816148d8015281816149740152614a320152600081816105f60152818161145d01528181612452015281816125bc015281816125e501528181612746015281816127db0152818161290901528181613328015281816133850152818161359a01528181613ded01526141d80152600081816104ea0152818161237701528181612f9301528181613f5d01528181613ff5015281816146680152818161473c015281816147db01528181614877015281816149e70152614aa501526000818161043801528181610fa00152818161112c01528181611b03015281816124300152818161250701528181612bc001528181612f0b0152818161360b015281816140a101528181614135015261436801526000818161045f01528181612572015281816126a601526129c80152600081816102f60152818161081601528181610b0201528181610c1201528181610d2e01528181610e0801528181610e9201528181611017015281816112b901528181611495015281816115320152818161175e0152818161192701528181612a5b015281816138d50152818161390201526139a20152600081816104c301528181610573015281816106c0015281816109a101528181610a4901528181610c7101528181610d0c01528181610d7c01528181610e3b01528181610fdb015281816116c201528181611be401528181611c4201528181611cd201528181611ea501528181611ee50152818161222301528181612355015281816123a9015281816124b301528181612ad60152818161362c015281816138b301528181613a9f01528181613c0001528181613ce4015261434701526151ba6000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c8063951dc22c11610146578063d3033c39116100c3578063eaada38211610087578063eaada382146105a7578063ec78e832146105ba578063ee330ee3146105cd578063fc0c546a146105e0578063fd57a4df146105f1578063ffa1ad741461061857600080fd5b8063d3033c3914610555578063d572fd7f14610568578063d8dfeb4514610571578063de603fdc14610597578063e5328e061461059f57600080fd5b8063c415b95c1161010a578063c415b95c1461050c578063c4f59f9b1461051f578063c965fa8a14610527578063ce5494bb1461052f578063d2c35ce81461054257600080fd5b8063951dc22c14610481578063a3f4df7e14610496578063abc9b45e146104ab578063b2016bd4146104be578063b20fdc0d146104e557600080fd5b80634032b72b116101d4578063795dae6611610198578063795dae66146103f55780637bb7bed1146103fd5780637d7c2a1c146104105780637f44579b14610433578063945c91421461045a57600080fd5b80634032b72b14610375578063440d72481461038857806348cd2ddd146103ab57806374db9ad4146103d25780637752e194146103ed57600080fd5b806316f0115b1161021b57806316f0115b146102f15780631848effa146103255780632b3297f91461033c5780632e1a7d4d1461034f5780633ac9fc111461036257600080fd5b806301681a621461025857806304f4efc51461026d57806306beb80a146102805780631026013a146102bd57806314ae9f2e146102de575b600080fd5b61026b610266366004614bc9565b61063c565b005b61026b61027b366004614be6565b610814565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b6040516102b49190614c15565b60405180910390f35b6102d06102cb366004614be6565b610960565b6040519081526020016102b4565b61026b6102ec366004614bc9565b610b00565b6103187f000000000000000000000000000000000000000000000000000000000000000081565b6040516102b49190614c3d565b6103186f22d53366457f9d5e68ec105046fc438381565b600254610318906001600160a01b031681565b61026b61035d366004614be6565b610c0f565b61026b610370366004614be6565b610e62565b61026b610383366004614bc9565b610e90565b61039b610396366004614bc9565b610f9c565b60405190151581526020016102b4565b6102d07f000000000000000000000000000000000000000000000000000000000000000081565b61031873d061d61a4d941c39e5453435b6345dc261c2fce081565b61026b611015565b6102d0611112565b61031861040b366004614be6565b6111b6565b6104186111e0565b604080519384526020840192909252908201526060016102b4565b6103187f000000000000000000000000000000000000000000000000000000000000000081565b6103187f000000000000000000000000000000000000000000000000000000000000000081565b61048961121d565b6040516102b49190614c51565b61049e611229565b6040516102b49190614cca565b61026b6104b9366004614bc9565b6112b7565b6103187f000000000000000000000000000000000000000000000000000000000000000081565b6103187f000000000000000000000000000000000000000000000000000000000000000081565b600154610318906001600160a01b031681565b6104896113e1565b6102d0611443565b61026b61053d366004614bc9565b611492565b61026b610550366004614bc9565b61175c565b61026b610563366004614bc9565b611925565b6102d060065481565b7f0000000000000000000000000000000000000000000000000000000000000000610318565b6102d0611ae2565b6102d0611b92565b600754610318906001600160a01b031681565b600054610318906001600160a01b031681565b6102d06105db366004614cfd565b611c19565b6000546001600160a01b0316610318565b6103187f000000000000000000000000000000000000000000000000000000000000000081565b61049e604051806040016040528060058152602001640352e312e360dc1b81525081565b610649335b600390611fba565b61066e5760405162461bcd60e51b815260040161066590614d29565b60405180910390fd5b6001546001600160a01b03166106be5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610665565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156107105760405162461bcd60e51b815260040161066590614d59565b61071981610f9c565b156107365760405162461bcd60e51b815260040161066590614d90565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561077457600154610771906001600160a01b031647611fdc565b50565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906107a3903090600401614c3d565b60206040518083038186803b1580156107bb57600080fd5b505afa1580156107cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f39190614dbe565b600154909150610810906001600160a01b038481169116836120fa565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561086d57600080fd5b505afa158015610881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a59190614dd7565b6001600160a01b0316336001600160a01b0316146108d55760405162461bcd60e51b815260040161066590614df4565b612710811061091f5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610665565b60065460408051918252602082018390527f43a94473b3422f31e660358900c02b907f22142a3224beace1f2b9f1fa079a9e910160405180910390a1600655565b600061096b33610641565b6109875760405162461bcd60e51b815260040161066590614d29565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906109d6903090600401614c3d565b60206040518083038186803b1580156109ee57600080fd5b505afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a269190614dbe565b9050610a3061215d565b6040516370a0823160e01b815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610a7e903090600401614c3d565b60206040518083038186803b158015610a9657600080fd5b505afa158015610aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ace9190614dbe565b610ad89190614e41565b915082821015610afa5760405162461bcd60e51b815260040161066590614e58565b50919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5957600080fd5b505afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b919190614dd7565b6001600160a01b0316336001600160a01b031614610bc15760405162461bcd60e51b815260040161066590614df4565b610bcc60038261225b565b6107715760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610665565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610c575760405162461bcd60e51b815260040161066590614e86565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610ca6903090600401614c3d565b60206040518083038186803b158015610cbe57600080fd5b505afa158015610cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf69190614dbe565b9050818110610d53576108106001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846120fa565b610d65610d608284614e41565b612270565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610db1903090600401614c3d565b60206040518083038186803b158015610dc957600080fd5b505afa158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e019190614dbe565b90506108107f0000000000000000000000000000000000000000000000000000000000000000610e318484612321565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906120fa565b610e6b33610641565b610e875760405162461bcd60e51b815260040161066590614d29565b61077181612337565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610ee957600080fd5b505afa158015610efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f219190614dd7565b6001600160a01b0316336001600160a01b031614610f515760405162461bcd60e51b815260040161066590614df4565b610f5c600382611f9e565b6107715760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610665565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148061100f57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561106e57600080fd5b505afa158015611082573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a69190614dd7565b6001600160a01b0316336001600160a01b0316146110d65760405162461bcd60e51b815260040161066590614df4565b6110de61215d565b6110e661254e565b80516110fa91600891602090910190614ae4565b506111056000612337565b611110600019612337565b565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611161903090600401614c3d565b60206040518083038186803b15801561117957600080fd5b505afa15801561118d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b19190614dbe565b905090565b600881815481106111c657600080fd5b6000918252602090912001546001600160a01b0316905081565b600080806111ed33610641565b6112095760405162461bcd60e51b815260040161066590614d29565b611211612a22565b9250925092505b909192565b60606111b16003612ac7565b6005805461123690614eb9565b80601f016020809104026020016040519081016040528092919081815260200182805461126290614eb9565b80156112af5780601f10611284576101008083540402835291602001916112af565b820191906000526020600020905b81548152906001019060200180831161129257829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190614dd7565b6001600160a01b0316336001600160a01b0316146113785760405162461bcd60e51b815260040161066590614df4565b6007546040517fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c916113b7916001600160a01b03909116908490614eee565b60405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b6060600880548060200260200160405190810160405280929190818152602001828054801561143957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161141b575b5050505050905090565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611161903090600401614c3d565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146114da5760405162461bcd60e51b815260040161066590614e86565b6001600160a01b0381166115305760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610665565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561159357600080fd5b505afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb9190614dd7565b6001600160a01b03161461161a5760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610665565b61162381612ad4565b6000546040516370a0823160e01b81526116bc9183916001600160a01b03909116906370a0823190611659903090600401614c3d565b60206040518083038186803b15801561167157600080fd5b505afa158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a99190614dbe565b6000546001600160a01b031691906120fa565b610771817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161170c9190614c3d565b60206040518083038186803b15801561172457600080fd5b505afa158015611738573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e319190614dbe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156117b557600080fd5b505afa1580156117c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ed9190614dd7565b6001600160a01b0316336001600160a01b03161461181d5760405162461bcd60e51b815260040161066590614df4565b6001600160a01b0381166118735760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610665565b6001546001600160a01b03828116911614156118c95760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610665565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561197e57600080fd5b505afa158015611992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b69190614dd7565b6001600160a01b0316336001600160a01b0316146119e65760405162461bcd60e51b815260040161066590614df4565b6001600160a01b038116611a365760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b6044820152606401610665565b6002546001600160a01b0382811691161415611a865760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b6044820152606401610665565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000611aec611443565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611b38903090600401614c3d565b60206040518083038186803b158015611b5057600080fd5b505afa158015611b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b889190614dbe565b6111b19190614f08565b6000611bcd611b9f611ae2565b611bc87f0000000000000000000000000000000000000000000000000000000000000000612cad565b612d26565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611b38903090600401614c3d565b6000611c2433610641565b611c405760405162461bcd60e51b815260040161066590614d29565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415611c925760405162461bcd60e51b815260040161066590614d59565b611c9b83610f9c565b15611cb85760405162461bcd60e51b815260040161066590614d90565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611d07903090600401614c3d565b60206040518083038186803b158015611d1f57600080fd5b505afa158015611d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d579190614dbe565b90506000846001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611d879190614c3d565b60206040518083038186803b158015611d9f57600080fd5b505afa158015611db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd79190614dbe565b90508015611ecc57600254604051636eb1769f60e11b81526001600160a01b038088169263dd62ed3e92611e119230921690600401614eee565b60206040518083038186803b158015611e2957600080fd5b505afa158015611e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e619190614dbe565b811115611e9f57600254611e83906001600160a01b0387811691166000613015565b600254611e9f906001600160a01b038781169116600019613015565b611eca857f000000000000000000000000000000000000000000000000000000000000000083613138565b505b6040516370a0823160e01b815282906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611f1a903090600401614c3d565b60206040518083038186803b158015611f3257600080fd5b505afa158015611f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6a9190614dbe565b611f749190614e41565b925083831015611f965760405162461bcd60e51b815260040161066590614e58565b505092915050565b6000611fb3836001600160a01b0384166131cc565b9392505050565b6001600160a01b03811660009081526001830160205260408120541515611fb3565b8047101561202c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610665565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612079576040519150601f19603f3d011682016040523d82523d6000602084013e61207e565b606091505b50509050806120f55760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610665565b505050565b6040516001600160a01b0383166024820152604481018290526120f590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261321b565b6121656132ed565b505060085460005b818110156108105760006008828154811061218a5761218a614f20565b60009182526020822001546040516370a0823160e01b81526001600160a01b03909116925082906370a08231906121c5903090600401614c3d565b60206040518083038186803b1580156121dd57600080fd5b505afa1580156121f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122159190614dbe565b9050801561224857612248827f0000000000000000000000000000000000000000000000000000000000000000836133f9565b50508061225490614f36565b905061216d565b6000611fb3836001600160a01b03841661348b565b600061229b7f0000000000000000000000000000000000000000000000000000000000000000612cad565b905060006122a7611112565b905060006122b3611443565b6122bd9083614f08565b905060006122e86122ce8386612d26565b6122d88488614f51565b6122e29190614f70565b83612321565b9050806122f6575050505050565b828111156123105761231061230b8483614e41565b61357e565b61231a81856135fb565b5050505050565b60008183106123305781611fb3565b5090919050565b612340816138a6565b6002546001600160a01b039081169061239c907f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084613015565b6123d06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284613015565b60085460005b81811015612422576124128385600884815481106123f6576123f6614f20565b6000918252602090912001546001600160a01b03169190613015565b61241b81614f36565b90506123d6565b506124776001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000085613015565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316156120f5576124fa6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000085613015565b6120f56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000085613015565b604080516001808252818301909252606091602080830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106125a4576125a4614f20565b6001600160a01b0392831660209182029290920101527f0000000000000000000000000000000000000000000000000000000000000000166125e35790565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166316fa50b16040518163ffffffff1660e01b815260040160206040518083038186803b15801561263c57600080fd5b505afa92505050801561266c575060408051601f3d908101601f1916820190925261266991810190614dd7565b60015b61267557612730565b60025b6040519080825280602002602001820160405280156126a1578160200160208202803683370190505b5091507f0000000000000000000000000000000000000000000000000000000000000000826000815181106126d8576126d8614f20565b60200260200101906001600160a01b031690816001600160a01b031681525050808260018151811061270c5761270c614f20565b60200260200101906001600160a01b031690816001600160a01b0316815250505090565b6040516354c49fe960e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906354c49fe99060240160206040518083038186803b15801561279057600080fd5b505afa9250505080156127c0575060408051601f3d908101601f191682019092526127bd91810190614dd7565b60015b6127c75790565b6001600160a01b0381166127d9575090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663963c94b96040518163ffffffff1660e01b815260040160206040518083038186803b15801561283257600080fd5b505afa925050508015612862575060408051601f3d908101601f1916820190925261285f91810190614dbe565b60015b61286d576002612678565b612878816001614f08565b67ffffffffffffffff81111561289057612890614f92565b6040519080825280602002602001820160405280156128b9578160200160208202803683370190505b50925081836000815181106128d0576128d0614f20565b6001600160a01b039092166020928302919091019091015260015b818110156129c5576040516354c49fe960e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906354c49fe99060240160206040518083038186803b15801561295357600080fd5b505afa158015612967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298b9190614dd7565b84828151811061299d5761299d614f20565b6001600160a01b03909216602092830291909101909101526129be81614f36565b90506128eb565b507f00000000000000000000000000000000000000000000000000000000000000008382815181106129f9576129f9614f20565b60200260200101906001600160a01b031690816001600160a01b031681525050505090565b5090565b6000806000612a2f6138fa565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b158015612aa757600080fd5b505af1158015612abb573d6000803e3d6000fd5b50505050611218613cc9565b60606000611fb383613d76565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015612b3757600080fd5b505afa158015612b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6f9190614dd7565b6001600160a01b031614612bbe5760405162461bcd60e51b81526020600482015260166024820152753bb937b73396b1b7b63630ba32b930b616ba37b5b2b760511b6044820152606401610665565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c2157600080fd5b505afa158015612c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c599190614dd7565b6001600160a01b031614612ca55760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b6044820152606401610665565b610771613dd2565b600060016001607f1b03198212158015612cca57506001607f1b82125b612a1e5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610665565b600082612d355750600061100f565b60027f00000000000000000000000000000000000000000000000000000000000000006007811115612d6957612d69614bff565b1480612dcf575060077f00000000000000000000000000000000000000000000000000000000000000006007811115612da457612da4614bff565b148015612dcf57507f0000000000000000000000000000000000000000000000000000000000000000155b15612e7e5760405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d7906044015b60206040518083038186803b158015612e3f57600080fd5b505afa158015612e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e779190614dbe565b905061100f565b60067f00000000000000000000000000000000000000000000000000000000000000006007811115612eb257612eb2614bff565b1480612eef575060077f00000000000000000000000000000000000000000000000000000000000000006007811115612eed57612eed614bff565b145b15612f73576040516341b028f360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600f84900b60448301527f000000000000000000000000000000000000000000000000000000000000000016906341b028f390606401612e27565b60405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d79060440160206040518083038186803b158015612fdd57600080fd5b505afa158015612ff1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb39190614dbe565b80158061309d5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061304b9030908690600401614eee565b60206040518083038186803b15801561306357600080fd5b505afa158015613077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309b9190614dbe565b155b6131085760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610665565b6040516001600160a01b0383166024820152604481018290526120f590849063095ea7b360e01b90606401612126565b600254604051636ccb2b0160e01b81526000916001600160a01b031690636ccb2b0190613172908790879087906001903090600401614fa8565b602060405180830381600087803b15801561318c57600080fd5b505af11580156131a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c49190614dbe565b949350505050565b60008181526001830160205260408120546132135750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561100f565b50600061100f565b6000613270826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613e729092919063ffffffff16565b8051909150156120f5578080602001905181019061328e9190614fd8565b6120f55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610665565b6000804660011415613383576040516335313c2160e11b815273d061d61a4d941c39e5453435b6345dc261c2fce090636a62784290613350907f000000000000000000000000000000000000000000000000000000000000000090600401614c3d565b600060405180830381600087803b15801561336a57600080fd5b505af115801561337e573d6000803e3d6000fd5b505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156133de57600080fd5b505af19250505080156133ef575060015b5050600091829150565b600254604051636ccb2b0160e01b81526001600160a01b0390911690636ccb2b0190613432908690869086906001903090600401614fa8565b602060405180830381600087803b15801561344c57600080fd5b505af192505050801561347c575060408051601f3d908101601f1916820190925261347991810190614dbe565b60015b61348557505050565b50505050565b600081815260018301602052604081205480156135745760006134af600183614e41565b85549091506000906134c390600190614e41565b90508181146135285760008660000182815481106134e3576134e3614f20565b906000526020600020015490508087600001848154811061350657613506614f20565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061353957613539614ffa565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061100f565b600091505061100f565b801561077157604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015b600060405180830381600087803b1580156135e757600080fd5b505af115801561231a573d6000803e3d6000fd5b81613604575050565b60006136517f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085613e81565b905060007f0000000000000000000000000000000000000000000000000000000000000000600781111561368757613687614bff565b14806136c4575060017f000000000000000000000000000000000000000000000000000000000000000060078111156136c2576136c2614bff565b145b156136d4576120f5838284613f36565b60037f0000000000000000000000000000000000000000000000000000000000000000600781111561370857613708614bff565b1415613719576120f5838284613fc7565b60047f0000000000000000000000000000000000000000000000000000000000000000600781111561374d5761374d614bff565b141561375e576120f5838284613fc7565b60027f0000000000000000000000000000000000000000000000000000000000000000600781111561379257613792614bff565b14156137a3576120f583828461402c565b60067f000000000000000000000000000000000000000000000000000000000000000060078111156137d7576137d7614bff565b14156137e8576120f583828461408a565b60077f0000000000000000000000000000000000000000000000000000000000000000600781111561381c5761381c614bff565b141561385e577f000000000000000000000000000000000000000000000000000000000000000015613853576120f583828461408a565b6120f583828461402c565b60405162461bcd60e51b815260206004820152601a60248201527f77697468647261772d66726f6d2d63757276652d6661696c65640000000000006044820152606401610665565b6107716001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613015565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b815260040161394c9190614c3d565b60206040518083038186803b15801561396457600080fd5b505afa158015613978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061399c9190614dbe565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016139ec9190614c3d565b60206040518083038186803b158015613a0457600080fd5b505afa158015613a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3c9190614dbe565b90506000613a697f0000000000000000000000000000000000000000000000000000000000000000612cad565b90506000613a75611112565b90506000613a81611443565b613a8b9083614f08565b90506000613a998285612d26565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613ae99190614c3d565b60206040518083038186803b158015613b0157600080fd5b505afa158015613b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b399190614dbe565b90506000613b478383614f08565b905086811115613b6257613b5b8782614e41565b9a50613b6f565b613b6c8188614e41565b99505b6000613b7b898d614f08565b905082811115613c8c576000613b9a613b948584614e41565b86612321565b90508015613c8a576000613bc286613bb28985614f51565b613bbc9190614f70565b88612321565b90508015613c885787811115613bdf57613bdf61230b8983614e41565b613be9818a6135fb565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613c35903090600401614c3d565b60206040518083038186803b158015613c4d57600080fd5b505afa158015613c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c859190614dbe565b94505b505b505b613c96838a612321565b9950898311613ca6576000613cb9565b613cb9613cb38b85614e41565b8d612321565b9b50505050505050505050909192565b6040516370a0823160e01b8152613d6e906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613d19903090600401614c3d565b60206040518083038186803b158015613d3157600080fd5b505afa158015613d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d699190614dbe565b614110565b61111061411b565b606081600001805480602002602001604051908101604052809291908181526020018280548015613dc657602002820191906000526020600020905b815481526020019060010190808311613db2575b50505050509050919050565b6040516370a0823160e01b8152611110906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613e22903090600401614c3d565b60206040518083038186803b158015613e3a57600080fd5b505afa158015613e4e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230b9190614dbe565b60606131c4848460008561420f565b6000612710600654612710613e969190614e41565b600754604051632d9198e160e21b81526001600160a01b0388811660048301528781166024830152604482018790529091169063b64663849060640160206040518083038186803b158015613eea57600080fd5b505afa158015613efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f229190614dbe565b613f2c9190614f51565b6131c49190614f70565b604051630d2680e960e11b815260048101849052600f82900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d2906064015b600060405180830381600087803b158015613faa57600080fd5b505af1158015613fbe573d6000803e3d6000fd5b50505050505050565b60405163517a55a360e01b815260048101849052600f82900b602482015260448101839052600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063517a55a390608401613f90565b604051630d2680e960e11b815260048101849052600f82900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d290606401613f90565b6040516314f6943160e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600f83900b6044830152606482018490527f000000000000000000000000000000000000000000000000000000000000000016906329ed286290608401613f90565b610771816000614337565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061416a903090600401614c3d565b60206040518083038186803b15801561418257600080fd5b505afa158015614196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141ba9190614dbe565b905080156107715760405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f25906024016135cd565b6060824710156142705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610665565b843b6142be5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610665565b600080866001600160a01b031685876040516142da9190615010565b60006040518083038185875af1925050503d8060008114614317576040519150601f19603f3d011682016040523d82523d6000602084013e61431c565b606091505b509150915061432c8282866145e5565b979650505050505050565b81614340575050565b600061438d7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085613e81565b905060007f000000000000000000000000000000000000000000000000000000000000000060078111156143c3576143c3614bff565b14156143d4576120f583828461461e565b60037f0000000000000000000000000000000000000000000000000000000000000000600781111561440857614408614bff565b1415614419576120f58382846146f2565b60017f0000000000000000000000000000000000000000000000000000000000000000600781111561444d5761444d614bff565b141561445e576120f5838284614791565b60047f0000000000000000000000000000000000000000000000000000000000000000600781111561449257614492614bff565b14156144a3576120f583828461482d565b60027f000000000000000000000000000000000000000000000000000000000000000060078111156144d7576144d7614bff565b14156144e8576120f58382846148cc565b60067f0000000000000000000000000000000000000000000000000000000000000000600781111561451c5761451c614bff565b141561452d576120f5838284614968565b60077f0000000000000000000000000000000000000000000000000000000000000000600781111561456157614561614bff565b14156145a3577f000000000000000000000000000000000000000000000000000000000000000015614598576120f5838284614a26565b6120f58382846148cc565b60405162461bcd60e51b815260206004820152601760248201527619195c1bdcda5d0b5d1bcb58dd5c9d994b59985a5b1959604a1b6044820152606401610665565b606083156145f4575081611fb3565b8251156146045782518084602001fd5b8160405162461bcd60e51b81526004016106659190614cca565b614626614b45565b83817f00000000000000000000000000000000000000000000000000000000000000006002811061465957614659614f20565b60200201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016630b4c7e4d8361469957600061469b565b855b83866040518463ffffffff1660e01b81526004016146ba92919061504f565b6000604051808303818588803b1580156146d357600080fd5b505af11580156146e7573d6000803e3d6000fd5b505050505050505050565b6146fa614b45565b83817f00000000000000000000000000000000000000000000000000000000000000006002811061472d5761472d614f20565b60200201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663ee22be238361476d57600061476f565b855b838660016040518563ffffffff1660e01b81526004016146ba9392919061506a565b614799614b63565b83817f0000000000000000000000000000000000000000000000000000000000000000600381106147cc576147cc614f20565b60200201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016634515cef38361480c57600061480e565b855b83866040518463ffffffff1660e01b81526004016146ba9291906150b1565b614835614b63565b83817f00000000000000000000000000000000000000000000000000000000000000006003811061486857614868614f20565b60200201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016632b6e993a836148a85760006148aa565b855b838660016040518563ffffffff1660e01b81526004016146ba939291906150cc565b6148d4614b81565b83817f00000000000000000000000000000000000000000000000000000000000000006004811061490757614907614f20565b60200201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663029b2f3483614947576000614949565b855b83866040518463ffffffff1660e01b81526004016146ba929190615113565b614970614b63565b83817f0000000000000000000000000000000000000000000000000000000000000000600381106149a3576149a3614f20565b60200201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a3185179836149e35760006149e5565b855b7f000000000000000000000000000000000000000000000000000000000000000084876040518563ffffffff1660e01b81526004016146ba9392919061512e565b614a2e614b81565b83817f000000000000000000000000000000000000000000000000000000000000000060048110614a6157614a61614f20565b60200201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663384e03db83614aa1576000614aa3565b855b7f000000000000000000000000000000000000000000000000000000000000000084876040518563ffffffff1660e01b81526004016146ba93929190615159565b828054828255906000526020600020908101928215614b39579160200282015b82811115614b3957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614b04565b50612a1e929150614b9f565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b5b80821115612a1e5760008155600101614ba0565b6001600160a01b038116811461077157600080fd5b600060208284031215614bdb57600080fd5b8135611fb381614bb4565b600060208284031215614bf857600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6020810160088310614c3757634e487b7160e01b600052602160045260246000fd5b91905290565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015614c925783516001600160a01b031683529284019291840191600101614c6d565b50909695505050505050565b60005b83811015614cb9578181015183820152602001614ca1565b838111156134855750506000910152565b6020815260008251806020840152614ce9816040850160208701614c9e565b601f01601f19169190910160400192915050565b60008060408385031215614d1057600080fd5b8235614d1b81614bb4565b946020939093013593505050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6020808252601f908201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604082015260600190565b60208082526014908201527306e6f742d616c6c6f7765642d746f2d73776565760641b604082015260600190565b600060208284031215614dd057600080fd5b5051919050565b600060208284031215614de957600080fd5b8151611fb381614bb4565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015614e5357614e53614e2b565b500390565b6020808252601490820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600181811c90821680614ecd57607f821691505b60208210811415610afa57634e487b7160e01b600052602260045260246000fd5b6001600160a01b0392831681529116602082015260400190565b60008219821115614f1b57614f1b614e2b565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614f4a57614f4a614e2b565b5060010190565b6000816000190483118215151615614f6b57614f6b614e2b565b500290565b600082614f8d57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b600060208284031215614fea57600080fd5b81518015158114611fb357600080fd5b634e487b7160e01b600052603160045260246000fd5b60008251615022818460208701614c9e565b9190910192915050565b8060005b6002811015613485578151845260209384019390910190600101615030565b6060810161505d828561502c565b8260408301529392505050565b60808101615078828661502c565b8360408301528215156060830152949350505050565b8060005b6003811015613485578151845260209384019390910190600101615092565b608081016150bf828561508e565b8260608301529392505050565b60a081016150da828661508e565b8360608301528215156080830152949350505050565b8060005b60048110156134855781518452602093840193909101906001016150f4565b60a0810161512182856150f0565b8260808301529392505050565b6001600160a01b038416815260a0810161514b602083018561508e565b826080830152949350505050565b6001600160a01b038416815260c0810161517660208301856150f0565b8260a083015294935050505056fea2646970667358221220e6a6c71bf22dbcaa674ff351c35164401d8f22425a10c62cb04d15e0607e931b64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken(uint256)": {
        "details": "Approve all required tokens"
      },
      "isReservedToken(address)": {
        "details": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweep(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "This strategy will deposit collateral token in a Curve Pool and earn interest.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "claimAndSwapRewards(uint256)": {
        "notice": "Claim rewardToken and convert rewardToken into collateral token."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "refetchRewardTokens()": {
        "notice": "Rewards token in gauge can be updated any time. This method refresh list. It is recommended to claimAndSwapRewards before calling this function."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "swapToCollateral(address,uint256)": {
        "notice": "onlyKeeper:: Swap given token into collateral token."
      },
      "sweep(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns collateral balance + collateral deposited to curve"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14393,
        "contract": "vesper-strategies/contracts/strategies/curve/Curve.sol:Curve",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14399,
        "contract": "vesper-strategies/contracts/strategies/curve/Curve.sol:Curve",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14402,
        "contract": "vesper-strategies/contracts/strategies/curve/Curve.sol:Curve",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)13241"
      },
      {
        "astId": 14415,
        "contract": "vesper-strategies/contracts/strategies/curve/Curve.sol:Curve",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3025_storage"
      },
      {
        "astId": 26926,
        "contract": "vesper-strategies/contracts/strategies/curve/Curve.sol:Curve",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 26928,
        "contract": "vesper-strategies/contracts/strategies/curve/Curve.sol:Curve",
        "label": "crvSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 26931,
        "contract": "vesper-strategies/contracts/strategies/curve/Curve.sol:Curve",
        "label": "masterOracle",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IMasterOracle)12925"
      },
      {
        "astId": 26934,
        "contract": "vesper-strategies/contracts/strategies/curve/Curve.sol:Curve",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMasterOracle)12925": {
        "encoding": "inplace",
        "label": "contract IMasterOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IRoutedSwapper)13241": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3025_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3024,
            "contract": "vesper-strategies/contracts/strategies/curve/Curve.sol:Curve",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2724_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2724_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2719,
            "contract": "vesper-strategies/contracts/strategies/curve/Curve.sol:Curve",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2723,
            "contract": "vesper-strategies/contracts/strategies/curve/Curve.sol:Curve",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}