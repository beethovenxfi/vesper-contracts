{
  "address": "0x9fBa263f1F95C73CDd2f7a0958E0a116Edf6be25",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiptToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowCToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vPool",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMaxBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBorrowLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowCToken",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "claimAndSwapRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract Comptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToRecover",
          "type": "uint256"
        }
      ],
      "name": "recoverBorrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyCToken",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swapToCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBorrowLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "updateBorrowLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vPool",
      "outputs": [
        {
          "internalType": "contract IVesperPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd178213a83c343c358101f2c6a53651c24dfea5e341d808863eafe94e2e95d4a",
  "receipt": {
    "to": null,
    "from": "0xdf826ff6518e609E4cEE86299d40611C148099d5",
    "contractAddress": "0x9fBa263f1F95C73CDd2f7a0958E0a116Edf6be25",
    "transactionIndex": 1,
    "gasUsed": "5546756",
    "logsBloom": "0x
    "blockHash": "0x2ad861140d389e1875c42d2a95c13e17d127ca0ab681da3d067209e049764481",
    "transactionHash": "0xd178213a83c343c358101f2c6a53651c24dfea5e341d808863eafe94e2e95d4a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 105620934,
        "transactionHash": "0xd178213a83c343c358101f2c6a53651c24dfea5e341d808863eafe94e2e95d4a",
        "address": "0x60CF091cD3f50420d50fD7f707414d0DF4751C58",
        "topics": [
          "0x3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5"
        ],
        "data": "0x0000000000000000000000008cd6b19a07d754bf36adeee79edf4f2134a8f5710000000000000000000000009fba263f1f95c73cdd2f7a0958e0a116edf6be25",
        "logIndex": 0,
        "blockHash": "0x2ad861140d389e1875c42d2a95c13e17d127ca0ab681da3d067209e049764481"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 105620934,
        "transactionHash": "0xd178213a83c343c358101f2c6a53651c24dfea5e341d808863eafe94e2e95d4a",
        "address": "0x60CF091cD3f50420d50fD7f707414d0DF4751C58",
        "topics": [
          "0x3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5"
        ],
        "data": "0x000000000000000000000000ec8fea79026ffed168ccf5c627c7f486d77b765f0000000000000000000000009fba263f1f95c73cdd2f7a0958e0a116edf6be25",
        "logIndex": 1,
        "blockHash": "0x2ad861140d389e1875c42d2a95c13e17d127ca0ab681da3d067209e049764481"
      }
    ],
    "blockNumber": 105620934,
    "cumulativeGasUsed": "5610769",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x19382707d5a47E74f60053b652Ab34b6e30Febad",
    "0x017CBF62b53313d5eE3aD1288daA95CD39AA11fE",
    "0x60CF091cD3f50420d50fD7f707414d0DF4751C58",
    "0x1DB2466d9F5e10D7090E7152B68d62703a2245F0",
    "0x8cD6b19A07d754bF36AdEEE79EDF4F2134a8F571",
    "0xEC8FEa79026FfEd168cCf5C627c7f486D77b765F",
    "0x539505Dde2B9771dEBE0898a84441c5E7fDF6BC0",
    "Sonne_Vesper_Xy_OP_USDC"
  ],
  "numDeployments": 1,
  "solcInputHash": "37f78c198e6ff5e3a25391f14e789893",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowCToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vPool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaxBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"UpdatedBorrowLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCToken\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"claimAndSwapRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToRecover\",\"type\":\"uint256\"}],\"name\":\"recoverBorrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyCToken\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapToCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"updateBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vPool\",\"outputs\":[{\"internalType\":\"contract IVesperPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken(uint256)\":{\"details\":\"Approve all required tokens\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"recoverBorrowToken(uint256)\":{\"details\":\"If we get liquidation in Compound, we will have borrowToken sitting in strategy. This function allows to recover idle borrow token amount.\",\"params\":{\"_amountToRecover\":\"Amount of borrow token we want to recover in 1 call.      Set it 0 to recover all available borrow tokens\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"repayAll()\":{\"details\":\"This action usually done when loss is detected in strategy.0 borrow limit make sure that any future rebalance do not borrow again.\"},\"sweep(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateBorrowLimit(uint256,uint256)\":{\"details\":\"It is possible to set 0 as _minBorrowLimit to not borrow anything\",\"params\":{\"_maxBorrowLimit\":\"It is % of actual collateral factor of protocol\",\"_minBorrowLimit\":\"It is % of actual collateral factor of protocol\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"Deposit Collateral in Sonne and earn interest by depositing borrowed token in a Vesper Pool.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"borrowBalance()\":{\"notice\":\"Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool\"},\"claimAndSwapRewards(uint256)\":{\"notice\":\"Claim rewardToken and convert rewardToken into collateral token.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"recoverBorrowToken(uint256)\":{\"notice\":\"Recover extra borrow tokens from strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"repayAll()\":{\"notice\":\"Repay all borrow amount and set min borrow limit to 0.\"},\"swapToCollateral(address,uint256)\":{\"notice\":\"onlyKeeper:: Swap given token into collateral token.\"},\"sweep(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns total collateral locked in the strategy\"},\"updateBorrowLimit(uint256,uint256)\":{\"notice\":\"Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol\":\"SonneVesperXy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function sweep(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf7b06736a402e8548dd9cd3752418ab23e44426652f0fee6e0a40e37fbacdcab\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokenLike is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x003b4063990378d64f20d02f3da97c58338d85c0ca65955ed4a21065e2bb559a\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(address rewardToken_, uint256 _rewardAmount, uint256 _rewardDuration) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory rewardTokens_,\\n        uint256[] memory rewardAmounts_,\\n        uint256[] memory rewardDurations_\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(\\n        address account_\\n    ) external view returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address rewardToken_) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    function isRewardToken(address) external view returns (bool);\\n\\n    function addRewardToken(address newRewardToken_) external;\\n\\n    function periodFinish(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x16bcd3efe70be89cdfb2474135266ee332f17e98084e61601ff138682cfdb67b\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 profit_) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 collateralAmount_) external;\\n\\n    function excessDebt(address strategy_) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(uint256 profit_, uint256 loss_, uint256 payback_) external;\\n\\n    function reportLoss(uint256 loss_) external;\\n\\n    function sweepERC20(address fromToken_) external;\\n\\n    function withdraw(uint256 share_) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address address_) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address address_) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(\\n        address strategy_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address strategy_) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e04db3bafbcc5985db33ae168ada16fed2bbc42a6cd26bbe936a71a4f537e0c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface CToken {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account) external view returns (uint256, uint256, uint256, uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow() external payable; // For ETH\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\\n\\n    function transfer(address user, uint256 amount) external returns (bool);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function transferFrom(address owner, address user, uint256 amount) external returns (bool);\\n\\n    function underlying() external view returns (address);\\n\\n    function comptroller() external view returns (address);\\n\\n    function totalBorrows() external view returns (uint256);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\\n\\n    function markets(\\n        address market\\n    ) external view returns (bool isListed, uint256 collateralFactorMantissa, bool isCompted);\\n\\n    function oracle() external view returns (address);\\n\\n    function borrowCaps(address market) external view returns (uint256);\\n\\n    function compSupplySpeeds(address cToken) external view returns (uint256);\\n}\\n\\ninterface VenusComptroller is Comptroller {\\n    function claimVenus(address holder, address[] memory) external;\\n}\\n\\ninterface Oracle {\\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\\n\\n    function price(string memory symbol) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5297f809daaa42c95ddc6cd59d9aef405f980d1be3473ec1dff524d5d371c21d\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(address tokenIn_, address tokenOut_, uint256 amountOut_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(address tokenIn_, address tokenOut_, uint256 amountIn_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x853ff5f9fbdd441f535370e39d43221d72d7a02fd5e48e343bbecb716a633f10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(address _pool, address _swapper, address _receiptToken) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken(uint256 _approvalAmount) external onlyKeeper {\\n        _approveToken(_approvalAmount);\\n    }\\n\\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\\n    function claimAndSwapRewards(uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        _claimAndSwapRewards();\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance() external onlyKeeper returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /// @notice onlyKeeper:: Swap given token into collateral token.\\n    function swapToCollateral(IERC20 _tokenIn, uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        require(address(_tokenIn) != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(address(_tokenIn)), \\\"not-allowed-to-sweep\\\");\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        uint256 _amountIn = _tokenIn.balanceOf(address(this));\\n        if (_amountIn > 0) {\\n            if (_amountIn > _tokenIn.allowance(address(this), address(swapper))) {\\n                _tokenIn.safeApprove(address(swapper), 0);\\n                _tokenIn.safeApprove(address(swapper), MAX_UINT_VALUE);\\n            }\\n            _swapExactInput(address(_tokenIn), address(collateralToken), _amountIn);\\n        }\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweep(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _claimAndSwapRewards() internal virtual {\\n        (address _rewardToken, uint256 _rewardsAmount) = _claimRewards();\\n        if (_rewardsAmount > 0) {\\n            _safeSwapExactInput(_rewardToken, address(collateralToken), _rewardsAmount);\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _claimRewards() internal virtual returns (address, uint256) {}\\n\\n    function _rebalance() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(address _tokenIn, address _tokenOut, uint256 _amountIn) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x58711ce2d409c8069e25980d2df4d09fd73e66c8ed41ba9ade1829bbb4ad6d80\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/VesperRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nlibrary VesperRewards {\\n    using SafeERC20 for IERC20;\\n\\n    function _approveToken(IVesperPool vPool_, IRoutedSwapper swapper_, uint256 amount_) internal {\\n        address _poolRewards = vPool_.poolRewards();\\n        if (_poolRewards != address(0)) {\\n            address[] memory _rewardTokens = IPoolRewards(_poolRewards).getRewardTokens();\\n            uint256 _length = _rewardTokens.length;\\n            for (uint256 i; i < _length; ++i) {\\n                if (!IStrategy(address(this)).isReservedToken(_rewardTokens[i])) {\\n                    IERC20(_rewardTokens[i]).safeApprove(address(swapper_), amount_);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _claimAndSwapRewards(IVesperPool vPool_, IRoutedSwapper swapper_, address collateralToken_) internal {\\n        address _poolRewards = vPool_.poolRewards();\\n        if (_poolRewards != address(0)) {\\n            IPoolRewards(_poolRewards).claimReward(address(this));\\n            address[] memory _rewardTokens = IPoolRewards(_poolRewards).getRewardTokens();\\n            uint256 _length = _rewardTokens.length;\\n            for (uint256 i; i < _length; ++i) {\\n                uint256 _rewardAmount = IERC20(_rewardTokens[i]).balanceOf(address(this));\\n                if (_rewardAmount > 0 && _rewardTokens[i] != collateralToken_) {\\n                    try\\n                        swapper_.swapExactInput(_rewardTokens[i], collateralToken_, _rewardAmount, 1, address(this))\\n                    {} catch {} //solhint-disable no-empty-blocks\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x942761f6784b9b9f93c5b2ac1978b8e17a0019733c6f2d33d3bdd627c974fcda\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/CompoundVesperXy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"./CompoundXy.sol\\\";\\nimport \\\"../VesperRewards.sol\\\";\\n\\n/// @title Deposit Collateral in Compound and earn interest by depositing borrowed token in a Vesper Pool.\\ncontract CompoundVesperXy is CompoundXy {\\n    using SafeERC20 for IERC20;\\n\\n    // Destination Grow Pool for borrowed Token\\n    IVesperPool public immutable vPool;\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _comptroller,\\n        address _rewardToken,\\n        address _receiptToken,\\n        address _borrowCToken,\\n        address _vPool,\\n        string memory _name\\n    ) CompoundXy(_pool, _swapper, _comptroller, _rewardToken, _receiptToken, _borrowCToken, _name) {\\n        require(address(IVesperPool(_vPool).token()) == borrowToken, \\\"invalid-grow-pool\\\");\\n        vPool = IVesperPool(_vPool);\\n    }\\n\\n    /// @notice Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool\\n    function borrowBalance() external view returns (uint256) {\\n        return IERC20(borrowToken).balanceOf(address(this)) + _getYTokensInProtocol();\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return super.isReservedToken(_token) || _token == address(vPool);\\n    }\\n\\n    /// @notice After borrowing Y, deposit to Vesper Pool\\n    function _afterBorrowY(uint256 _amount) internal override {\\n        vPool.deposit(_amount);\\n    }\\n\\n    function _approveToken(uint256 _amount) internal override {\\n        super._approveToken(_amount);\\n        IERC20(borrowToken).safeApprove(address(vPool), _amount);\\n        VesperRewards._approveToken(vPool, swapper, _amount);\\n    }\\n\\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\\n    function _beforeRepayY(uint256 _amount) internal override {\\n        _withdrawY(_amount);\\n    }\\n\\n    /// @dev Claim Compound and VSP rewards and convert to collateral token.\\n    function _claimAndSwapRewards() internal override {\\n        // Claim and swap Compound rewards\\n        CompoundXy._claimAndSwapRewards();\\n        // Claim and swap rewards from Vesper\\n        VesperRewards._claimAndSwapRewards(vPool, swapper, address(collateralToken));\\n    }\\n\\n    function _getYTokensInProtocol() internal view override returns (uint256) {\\n        return (vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18;\\n    }\\n\\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\\n    function _withdrawY(uint256 _amount) internal override {\\n        uint256 _pricePerShare = vPool.pricePerShare();\\n        uint256 _shares = (_amount * 1e18) / _pricePerShare;\\n        _shares = _amount > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\\n        uint256 _maxShares = vPool.balanceOf(address(this));\\n        _shares = _shares > _maxShares ? _maxShares : _shares;\\n        if (_shares > 0) {\\n            vPool.withdraw(_shares);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xab1d0a0e5a07fb2ab558e252503ba8f9cb9b0a8d3b65cc18867f0b9468e43bfb\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/CompoundXy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/token/IToken.sol\\\";\\nimport \\\"./CompoundXyCore.sol\\\";\\nimport \\\"../../interfaces/compound/ICompound.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Compound and based on position it will borrow\\n/// another token. Supply X borrow Y and keep borrowed amount here. It does handle rewards and handle\\n/// wrap/unwrap of WETH as ETH is required to interact with Compound.\\ncontract CompoundXy is CompoundXyCore {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable rewardToken;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address private constant CETH = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _comptroller,\\n        address _rewardToken,\\n        address _receiptToken,\\n        address _borrowCToken,\\n        string memory _name\\n    ) CompoundXyCore(_pool, _swapper, _comptroller, _receiptToken, _borrowCToken, _name) {\\n        require(_rewardToken != address(0), \\\"rewardToken-address-is-zero\\\");\\n        rewardToken = _rewardToken;\\n    }\\n\\n    //solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        if (rewardToken != address(collateralToken)) {\\n            IERC20(rewardToken).safeApprove(address(swapper), _amount);\\n        }\\n    }\\n\\n    /// @dev If borrowToken WETH then wrap borrowed ETH to get WETH\\n    function _borrowY(uint256 _amount) internal override {\\n        if (_amount > 0) {\\n            require(borrowCToken.borrow(_amount) == 0, \\\"borrow-from-compound-failed\\\");\\n            if (borrowToken == WETH) {\\n                TokenLike(WETH).deposit{value: address(this).balance}();\\n            }\\n            _afterBorrowY(_amount);\\n        }\\n    }\\n\\n    /// @dev Claim rewardToken and convert rewardToken into collateral token.\\n    /// Overriding _claimAndSwapRewards will help child contract otherwise override _claimReward.\\n    function _claimAndSwapRewards() internal virtual override {\\n        address[] memory _markets = new address[](2);\\n        _markets[0] = address(supplyCToken);\\n        _markets[1] = address(borrowCToken);\\n        comptroller.claimComp(address(this), _markets);\\n        uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n        if (_rewardAmount > 0 && rewardToken != address(collateralToken)) {\\n            _safeSwapExactInput(rewardToken, address(collateralToken), _rewardAmount);\\n        }\\n    }\\n\\n    /// @dev Native Compound cETH doesn't has underlying method\\n    function _getUnderlyingToken(address _cToken) internal view virtual override returns (address) {\\n        if (_cToken == CETH) {\\n            return WETH;\\n        }\\n        return CToken(_cToken).underlying();\\n    }\\n\\n    /// @dev If borrowToken is WETH then unwrap WETH to get ETH and repay borrow using ETH.\\n    function _repayY(uint256 _amount) internal override {\\n        _beforeRepayY(_amount);\\n        if (borrowToken == WETH) {\\n            TokenLike(WETH).withdraw(_amount);\\n            borrowCToken.repayBorrow{value: _amount}();\\n        } else {\\n            require(borrowCToken.repayBorrow(_amount) == 0, \\\"repay-to-compound-failed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6a7695a4e8604762ee4a125dbbbeb49dee7b86c01321e07eca4bad6ad335dcda\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/CompoundXyCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/compound/ICompound.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\n/// @title This strategy will deposit collateral token in Compound and based on position it will\\n/// borrow another token. Supply X borrow Y and keep borrowed amount here.\\n/// It does not handle rewards and ETH as collateral\\nabstract contract CompoundXyCore is Strategy {\\n    using SafeERC20 for IERC20;\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"5.1.0\\\";\\n\\n    uint256 internal constant MAX_BPS = 10_000; //100%\\n    uint32 internal constant TWAP_PERIOD = 3_600;\\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\\n    address public borrowToken;\\n\\n    Comptroller public comptroller;\\n\\n    CToken public immutable supplyCToken;\\n    CToken public immutable borrowCToken;\\n\\n    event UpdatedBorrowLimit(\\n        uint256 previousMinBorrowLimit,\\n        uint256 newMinBorrowLimit,\\n        uint256 previousMaxBorrowLimit,\\n        uint256 newMaxBorrowLimit\\n    );\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _comptroller,\\n        address _receiptToken,\\n        address _borrowCToken,\\n        string memory _name\\n    ) Strategy(_pool, _swapper, _receiptToken) {\\n        require(_receiptToken != address(0), \\\"cToken-address-is-zero\\\");\\n        require(_comptroller != address(0), \\\"comptroller-address-is-zero\\\");\\n\\n        NAME = _name;\\n\\n        comptroller = Comptroller(_comptroller);\\n        supplyCToken = CToken(_receiptToken);\\n        borrowCToken = CToken(_borrowCToken);\\n        borrowToken = _getUnderlyingToken(_borrowCToken);\\n\\n        address[] memory _cTokens = new address[](2);\\n        _cTokens[0] = _receiptToken;\\n        _cTokens[1] = _borrowCToken;\\n        comptroller.enterMarkets(_cTokens);\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _token == address(supplyCToken) || _token == address(collateralToken) || _token == borrowToken;\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view override returns (uint256) {\\n        uint256 _collateralInCompound = (supplyCToken.balanceOf(address(this)) * supplyCToken.exchangeRateStored()) /\\n            1e18;\\n        return _collateralInCompound + collateralToken.balanceOf(address(this));\\n    }\\n\\n    /// @dev Hook that executes after collateral borrow.\\n    function _afterBorrowY(uint256 _amount) internal virtual {}\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        collateralToken.safeApprove(address(supplyCToken), _amount);\\n        collateralToken.safeApprove(address(swapper), _amount);\\n        IERC20(borrowToken).safeApprove(address(borrowCToken), _amount);\\n        IERC20(borrowToken).safeApprove(address(swapper), _amount);\\n    }\\n\\n    /**\\n     * @notice Claim rewardToken and transfer to new strategy\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    function _beforeMigration(address _newStrategy) internal override {\\n        require(IStrategy(_newStrategy).token() == address(supplyCToken), \\\"wrong-receipt-token\\\");\\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), false);\\n    }\\n\\n    /// @dev Hook that executes before repaying borrowed collateral\\n    function _beforeRepayY(uint256 _amount) internal virtual {}\\n\\n    /// @dev Borrow Y from Compound. _afterBorrowY hook can be used to do anything with borrowed amount.\\n    /// @dev Override to handle ETH\\n    function _borrowY(uint256 _amount) internal virtual {\\n        if (_amount > 0) {\\n            require(borrowCToken.borrow(_amount) == 0, \\\"borrow-failed\\\");\\n            _afterBorrowY(_amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\\n     * @param _depositAmount deposit amount\\n     * @param _withdrawAmount withdraw amount\\n     * @return _borrowAmount borrow more amount\\n     * @return _repayAmount repay amount to keep ltv within limit\\n     */\\n    function _calculateBorrowPosition(\\n        uint256 _depositAmount,\\n        uint256 _withdrawAmount\\n    ) internal returns (uint256 _borrowAmount, uint256 _repayAmount) {\\n        require(_depositAmount == 0 || _withdrawAmount == 0, \\\"all-input-gt-zero\\\");\\n        uint256 _borrowed = borrowCToken.borrowBalanceCurrent(address(this));\\n        // If maximum borrow limit set to 0 then repay borrow\\n        if (maxBorrowLimit == 0) {\\n            return (0, _borrowed);\\n        }\\n\\n        uint256 _collateral = supplyCToken.balanceOfUnderlying(address(this));\\n        uint256 _collateralFactor = _getCollateralFactor(address(supplyCToken));\\n        // In case of withdraw, _amount can be greater than _supply\\n        uint256 _hypotheticalCollateral;\\n        if (_depositAmount > 0) {\\n            _hypotheticalCollateral = _collateral + _depositAmount;\\n        } else if (_collateral > _withdrawAmount) {\\n            _hypotheticalCollateral = _collateral - _withdrawAmount;\\n        }\\n\\n        // Calculate max borrow based on collateral factor\\n        uint256 _maxCollateralForBorrow = (_hypotheticalCollateral * _collateralFactor) / 1e18;\\n        Oracle _oracle = Oracle(comptroller.oracle());\\n\\n        // Compound \\\"UnderlyingPrice\\\" decimal = (30 + 6 - tokenDecimal)\\n        // Rari \\\"UnderlyingPrice\\\" decimal = (30 + 6 - tokenDecimal)\\n        // Iron \\\"UnderlyingPrice\\\" decimal = (18 + 8 - tokenDecimal)\\n        uint256 _collateralTokenPrice = _oracle.getUnderlyingPrice(address(supplyCToken));\\n        uint256 _borrowTokenPrice = _oracle.getUnderlyingPrice(address(borrowCToken));\\n        // Max borrow limit in borrow token\\n        uint256 _maxBorrowPossible = (_maxCollateralForBorrow * _collateralTokenPrice) / _borrowTokenPrice;\\n        // If maxBorrow is zero, we should repay total amount of borrow\\n        if (_maxBorrowPossible == 0) {\\n            return (0, _borrowed);\\n        }\\n\\n        // Safe buffer to avoid liquidation due to price variations.\\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\\n\\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\\n\\n        // If current borrow is greater than max borrow, then repay to achieve safe position else borrow more.\\n        if (_borrowed > _borrowUpperBound) {\\n            // If borrow > upperBound then it is greater than lowerBound too.\\n            _repayAmount = _borrowed - _borrowLowerBound;\\n        } else if (_borrowLowerBound > _borrowed) {\\n            _borrowAmount = _borrowLowerBound - _borrowed;\\n            uint256 _availableLiquidity = _getAvailableLiquidity();\\n            if (_borrowAmount > _availableLiquidity) {\\n                _borrowAmount = _availableLiquidity;\\n            }\\n        }\\n    }\\n\\n    /// @dev Deposit collateral in Compound and adjust borrow position\\n    function _deposit() internal {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\\n        if (_repayAmount > 0) {\\n            // Repay to maintain safe position\\n            _repay(_repayAmount, false);\\n            _mintX(collateralToken.balanceOf(address(this)));\\n        } else {\\n            // Happy path, mint more borrow more\\n            _mintX(_collateralBalance);\\n            _borrowY(_borrowAmount);\\n        }\\n    }\\n\\n    function _getAvailableLiquidity() internal view virtual returns (uint256) {\\n        return borrowCToken.getCash();\\n    }\\n\\n    /// @dev TraderJoe Compound fork has different markets API so allow this method to override.\\n    function _getCollateralFactor(address _cToken) internal view virtual returns (uint256 _collateralFactor) {\\n        (, _collateralFactor, ) = comptroller.markets(_cToken);\\n    }\\n\\n    /// @dev Get underlying token. Compound handle ETH differently hence allow this method to override\\n    function _getUnderlyingToken(address _cToken) internal view virtual returns (address) {\\n        return CToken(_cToken).underlying();\\n    }\\n\\n    function _getYTokensInProtocol() internal view virtual returns (uint256) {}\\n\\n    /// @dev Deposit collateral aka X in Compound. Override to handle ETH\\n    function _mintX(uint256 _amount) internal virtual {\\n        if (_amount > 0) {\\n            require(supplyCToken.mint(_amount) == 0, \\\"supply-failed\\\");\\n        }\\n    }\\n\\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        uint256 _yTokensBorrowed = borrowCToken.borrowBalanceCurrent(address(this));\\n        uint256 _yTokensHere = IERC20(borrowToken).balanceOf(address(this));\\n        uint256 _yTokensInProtocol = _getYTokensInProtocol();\\n        uint256 _totalYTokens = _yTokensHere + _yTokensInProtocol;\\n\\n        // _borrow increases every block. Convert collateral to borrowToken.\\n        if (_yTokensBorrowed > _totalYTokens) {\\n            _swapToBorrowToken(_yTokensBorrowed - _totalYTokens);\\n        } else {\\n            // When _yTokensInProtocol exceeds _yTokensBorrowed from Compound\\n            // then we have profit from investing borrow tokens. _yTokensHere is profit.\\n            if (_yTokensInProtocol > _yTokensBorrowed) {\\n                _withdrawY(_yTokensInProtocol - _yTokensBorrowed);\\n                _yTokensHere = IERC20(borrowToken).balanceOf(address(this));\\n            }\\n            if (_yTokensHere > 0) {\\n                _safeSwapExactInput(borrowToken, address(collateralToken), _yTokensHere);\\n            }\\n        }\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _collateralInCompound = supplyCToken.balanceOfUnderlying(address(this));\\n        uint256 _totalCollateral = _collateralInCompound + _collateralHere;\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_collateralHere < _profitAndExcessDebt) {\\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _collateralInCompound);\\n            if (_totalAmountToWithdraw > 0) {\\n                _withdrawHere(_totalAmountToWithdraw);\\n                _collateralHere = collateralToken.balanceOf(address(this));\\n            }\\n        }\\n\\n        // Set actual payback first and then profit. Make sure _collateralHere >= _payback + profit.\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _deposit();\\n    }\\n\\n    /// @dev Withdraw collateral aka X from Compound. Override to handle ETH\\n    function _redeemX(uint256 _amount) internal virtual {\\n        require(supplyCToken.redeemUnderlying(_amount) == 0, \\\"withdraw-failed\\\");\\n    }\\n\\n    /**\\n     * @dev Repay borrow amount\\n     * @dev Claim rewardToken and convert to collateral. Swap collateral to borrowToken as needed.\\n     * @param _repayAmount BorrowToken amount that we should repay to maintain safe position.\\n     * @param _shouldClaimComp Flag indicating should we claim rewardToken and convert to collateral or not.\\n     */\\n    function _repay(uint256 _repayAmount, bool _shouldClaimComp) internal {\\n        if (_repayAmount > 0) {\\n            uint256 _totalYTokens = IERC20(borrowToken).balanceOf(address(this)) + _getYTokensInProtocol();\\n            // Liability is more than what we have.\\n            // To repay loan - convert all rewards to collateral, if asked, and redeem collateral(if needed).\\n            // This scenario is rare and if system works okay it will/might happen during final repay only.\\n            if (_repayAmount > _totalYTokens) {\\n                if (_shouldClaimComp) {\\n                    // Claim rewardToken and convert those to collateral.\\n                    _claimAndSwapRewards();\\n                }\\n\\n                uint256 _yTokensBorrowed = borrowCToken.borrowBalanceCurrent(address(this));\\n                // For example this is final repay and 100 blocks has passed since last withdraw/rebalance,\\n                // _yTokensBorrowed is increasing due to interest. Now if _repayAmount > _borrowBalanceHere is true\\n                // _yTokensBorrowed > _borrowBalanceHere is also true.\\n                // To maintain safe position we always try to keep _yTokensBorrowed = _borrowBalanceHere\\n\\n                // Swap collateral to borrowToken to repay borrow and also maintain safe position\\n                // Here borrowToken amount needed is (_yTokensBorrowed - _borrowBalanceHere)\\n                _swapToBorrowToken(_yTokensBorrowed - _totalYTokens);\\n            }\\n            _repayY(_repayAmount);\\n        }\\n    }\\n\\n    /// @dev Repay Y to Compound. _beforeRepayY hook can be used for pre-repay actions.\\n    /// @dev Override this to handle ETH\\n    function _repayY(uint256 _amount) internal virtual {\\n        _beforeRepayY(_amount);\\n        require(borrowCToken.repayBorrow(_amount) == 0, \\\"repay-failed\\\");\\n    }\\n\\n    /**\\n     * @dev Swap given token to borrowToken\\n     * @param _shortOnBorrow Expected output of this swap\\n     */\\n    function _swapToBorrowToken(uint256 _shortOnBorrow) internal {\\n        // Looking for _amountIn using fixed output amount\\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, _shortOnBorrow);\\n        if (_amountIn > 0) {\\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n            // If we do not have enough _from token to get expected output, either get\\n            // some _from token or adjust expected output.\\n            if (_amountIn > _collateralHere) {\\n                // Redeem some collateral, so that we have enough collateral to get expected output\\n                _redeemX(_amountIn - _collateralHere);\\n            }\\n            swapper.swapExactOutput(address(collateralToken), borrowToken, _shortOnBorrow, _amountIn, address(this));\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 _amount) internal override {\\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, _amount);\\n        _repay(_repayAmount, true);\\n        // If _amount is very small and equivalent to 0 cToken then skip withdraw.\\n        uint256 _expectedCToken = (_amount * 1e18) / supplyCToken.exchangeRateStored();\\n        if (_expectedCToken > 0) {\\n            // Get minimum of _amount and _available collateral and _availableLiquidity\\n            uint256 _withdrawAmount = Math.min(\\n                _amount,\\n                Math.min(supplyCToken.balanceOfUnderlying(address(this)), supplyCToken.getCash())\\n            );\\n            _redeemX(_withdrawAmount);\\n        }\\n    }\\n\\n    function _withdrawY(uint256 _amount) internal virtual {}\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n    /**\\n     * @notice Recover extra borrow tokens from strategy\\n     * @dev If we get liquidation in Compound, we will have borrowToken sitting in strategy.\\n     * This function allows to recover idle borrow token amount.\\n     * @param _amountToRecover Amount of borrow token we want to recover in 1 call.\\n     *      Set it 0 to recover all available borrow tokens\\n     */\\n    function recoverBorrowToken(uint256 _amountToRecover) external onlyKeeper {\\n        uint256 _borrowBalanceHere = IERC20(borrowToken).balanceOf(address(this));\\n        uint256 _borrowInCompound = borrowCToken.borrowBalanceStored(address(this));\\n\\n        if (_borrowBalanceHere > _borrowInCompound) {\\n            uint256 _extraBorrowBalance = _borrowBalanceHere - _borrowInCompound;\\n            uint256 _recoveryAmount = (_amountToRecover > 0 && _extraBorrowBalance > _amountToRecover)\\n                ? _amountToRecover\\n                : _extraBorrowBalance;\\n            // Do swap and transfer\\n            uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n            _safeSwapExactInput(borrowToken, address(collateralToken), _recoveryAmount);\\n            collateralToken.transfer(pool, collateralToken.balanceOf(address(this)) - _collateralBefore);\\n        }\\n    }\\n\\n    /**\\n     * @notice Repay all borrow amount and set min borrow limit to 0.\\n     * @dev This action usually done when loss is detected in strategy.\\n     * @dev 0 borrow limit make sure that any future rebalance do not borrow again.\\n     */\\n    function repayAll() external onlyKeeper {\\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), true);\\n        minBorrowLimit = 0;\\n        maxBorrowLimit = 0;\\n    }\\n\\n    /**\\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\\n     * @dev It is possible to set 0 as _minBorrowLimit to not borrow anything\\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\\n     */\\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\\n        require(_maxBorrowLimit < MAX_BPS, \\\"invalid-max-borrow-limit\\\");\\n        // set _maxBorrowLimit and _minBorrowLimit to zero to disable borrow;\\n        require(\\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\\n            \\\"max-should-be-higher-than-min\\\"\\n        );\\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\\n        // To avoid liquidation due to price variations maxBorrowLimit is a collateral factor that is less than actual collateral factor of protocol\\n        minBorrowLimit = _minBorrowLimit;\\n        maxBorrowLimit = _maxBorrowLimit;\\n    }\\n}\\n\",\"keccak256\":\"0xd53a705c7628470dfb3cc48741fe07787404d3a72563e3abc03b8a9cfce7edb0\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"./../CompoundVesperXy.sol\\\";\\nimport \\\"../../VesperRewards.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n/// @title Deposit Collateral in Sonne and earn interest by depositing borrowed token in a Vesper Pool.\\ncontract SonneVesperXy is CompoundVesperXy {\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _comptroller,\\n        address _rewardToken,\\n        address _receiptToken,\\n        address _borrowCToken,\\n        address _vPool,\\n        string memory _name\\n    ) CompoundVesperXy(_pool, _swapper, _comptroller, _rewardToken, _receiptToken, _borrowCToken, _vPool, _name) {}\\n}\\n\",\"keccak256\":\"0xd27fd3564b61f5dc39bd64e07ef0d4fb76c9feb8fe9da380c1863ed2d5980bb7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610140604052611b586006556121346007553480156200001e57600080fd5b50604051620069a9380380620069a98339810160408190526200004191620007ec565b8787878787878787878787878787868686868585858585846001600160a01b038316620000b55760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0382166200010d5760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f0000000000000000006044820152606401620000ac565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200016b57600080fd5b505afa15801562000180573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a6919062000945565b6001600160a01b03908116608052600080546001600160a01b031916918316919091179055620001ed620001d73390565b6003620005ba60201b6200268d1790919060201c565b6200022f5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401620000ac565b5050506001600160a01b0383166200028a5760405162461bcd60e51b815260206004820152601660248201527f63546f6b656e2d616464726573732d69732d7a65726f000000000000000000006044820152606401620000ac565b6001600160a01b038416620002e25760405162461bcd60e51b815260206004820152601b60248201527f636f6d7074726f6c6c65722d616464726573732d69732d7a65726f00000000006044820152606401620000ac565b8051620002f7906005906020840190620006e4565b50600980546001600160a01b0319166001600160a01b038681169190911790915583811660c052821660e0526200032e82620005da565b600880546001600160a01b0319166001600160a01b039290921691909117905560408051600280825260608201835260009260208301908036833701905050905083816000815181106200038657620003866200096c565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110620003bd57620003bd6200096c565b6001600160a01b039283166020918202929092010152600954604051631853304760e31b815291169063c299823890620003fc90849060040162000982565b600060405180830381600087803b1580156200041757600080fd5b505af11580156200042c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004569190810190620009d1565b50505050506001600160a01b03871615159250620004ba9150505760405162461bcd60e51b815260206004820152601b60248201527f726577617264546f6b656e2d616464726573732d69732d7a65726f00000000006044820152606401620000ac565b5050506001600160a01b039081166101005260085460408051637e062a3560e11b815290519183169550918716935063fc0c546a92506004808301926020929190829003018186803b1580156200051057600080fd5b505afa15801562000525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200054b919062000945565b6001600160a01b031614620005975760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a590b59dc9bddcb5c1bdbdb607a1b6044820152606401620000ac565b506001600160a01b0316610120525062000abe9c50505050505050505050505050565b6000620005d1836001600160a01b03841662000692565b90505b92915050565b60006001600160a01b038216734ddc2d193948926d02f9b1fe9e1daa0718270ed514156200061d575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2919050565b816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156200065757600080fd5b505afa1580156200066c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005d4919062000945565b6000818152600183016020526040812054620006db57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620005d4565b506000620005d4565b828054620006f29062000a81565b90600052602060002090601f01602090048101928262000716576000855562000761565b82601f106200073157805160ff191683800117855562000761565b8280016001018555821562000761579182015b828111156200076157825182559160200191906001019062000744565b506200076f92915062000773565b5090565b5b808211156200076f576000815560010162000774565b6001600160a01b0381168114620007a057600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620007e457620007e4620007a3565b604052919050565b600080600080600080600080610100898b0312156200080a57600080fd5b885162000817816200078a565b809850506020808a01516200082c816200078a565b60408b01519098506200083f816200078a565b60608b015190975062000852816200078a565b60808b015190965062000865816200078a565b60a08b015190955062000878816200078a565b60c08b01519094506200088b816200078a565b60e08b01519093506001600160401b0380821115620008a957600080fd5b818c0191508c601f830112620008be57600080fd5b815181811115620008d357620008d3620007a3565b620008e7601f8201601f19168501620007b9565b91508082528d84828501011115620008fe57600080fd5b60005b818110156200091e57838101850151838201860152840162000901565b81811115620009305760008583850101525b50508093505050509295985092959890939650565b6000602082840312156200095857600080fd5b815162000965816200078a565b9392505050565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b81811015620009c55783516001600160a01b0316835292840192918401916001016200099e565b50909695505050505050565b60006020808385031215620009e557600080fd5b82516001600160401b0380821115620009fd57600080fd5b818501915085601f83011262000a1257600080fd5b81518181111562000a275762000a27620007a3565b8060051b915062000a3a848301620007b9565b818152918301840191848101908884111562000a5557600080fd5b938501935b8385101562000a755784518252938501939085019062000a5a565b98975050505050505050565b600181811c9082168062000a9657607f821691505b6020821081141562000ab857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051615c1e62000d8b600039600081816104360152818161116e0152818161286d015281816128fd0152818161297901528181612c6c01528181612c9a01528181614b4301528181614c4c01528181614cf5015261573101526000818161068401528181613b9b01528181613c5701528181613c8c015281816146ae01526146ec01526000818161040201528181611394015281816123fc01528181612eb70152818161358d015281816138ac01528181613ae2015281816141490152818161443d01528181614fc40152818161504f015281816151b9015281816152f1015261542c01526000818161065001528181611d9101528181611e3501528181612a3b01528181612b1801528181612b9601528181612ccd015281816131810152818161348501528181613a8e015281816141fd0152818161428a0152818161439e015281816145a801528181615280015261534f0152600081816102b101528181610b6901528181610d4601528181610e8d01528181610f62015281816110150152818161155f015281816116710152818161173e0152818161196901528181611b770152818161249501528181612d7d01528181612e1a0152818161336701526156f60152600081816104de015281816105af015281816107db015281816109e901528181610a8c01528181610dd301528181610e6b01528181610ed901528181610f9501528181611465015281816114f401528181611536015281816118ed01528181611ee301528181611fc7015281816120ac0152818161227a015281816122b80152818161289801528181612d080152818161309f015281816130dc0152818161328401528181613c2d01528181613cad015281816146840152818161492c015281816149e401528181614a9f01528181614d7701528181614e380152818161525e015281816152b601526156d40152615c1e6000f3fe6080604052600436106102085760003560e01c8063a3f4df7e11610118578063e5328e06116100a0578063f7c618c11161006f578063f7c618c114610672578063fa3ae6dc146106a6578063fb7ee102146106bb578063fc0c546a146106db578063ffa1ad74146106f957600080fd5b8063e5328e06146105e9578063ec78e832146105fe578063ee330ee31461061e578063efead58c1461063e57600080fd5b8063ce5494bb116100e7578063ce5494bb14610540578063d2c35ce814610560578063d3033c3914610580578063d8dfeb45146105a0578063e260d747146105d357600080fd5b8063a3f4df7e146104aa578063b2016bd4146104cc578063c415b95c14610500578063c7ad27481461052057600080fd5b80633ac9fc111161019b5780635fe3b5671161016a5780635fe3b567146103d0578063620a96d5146103f05780636719578c146104245780637d7c2a1c14610458578063951dc22c1461048857600080fd5b80633ac9fc11146103405780634032b72b14610360578063440d724814610380578063456dc17a146103b057600080fd5b806316f0115b116101d757806316f0115b1461029f578063243cd14e146102eb5780632b3297f9146103005780632e1a7d4d1461032057600080fd5b806301681a62146102145780630181686c146102365780631026013a1461025f57806314ae9f2e1461027f57600080fd5b3661020f57005b600080fd5b34801561022057600080fd5b5061023461022f3660046157e6565b61072a565b005b34801561024257600080fd5b5061024c60075481565b6040519081526020015b60405180910390f35b34801561026b57600080fd5b5061024c61027a366004615803565b610981565b34801561028b57600080fd5b5061023461029a3660046157e6565b610b67565b3480156102ab57600080fd5b506102d37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610256565b3480156102f757600080fd5b5061024c610caf565b34801561030c57600080fd5b506002546102d3906001600160a01b031681565b34801561032c57600080fd5b5061023461033b366004615803565b610d43565b34801561034c57600080fd5b5061023461035b366004615803565b610fbc565b34801561036c57600080fd5b5061023461037b3660046157e6565b611013565b34801561038c57600080fd5b506103a061039b3660046157e6565b61115b565b6040519015158152602001610256565b3480156103bc57600080fd5b506008546102d3906001600160a01b031681565b3480156103dc57600080fd5b506009546102d3906001600160a01b031681565b3480156103fc57600080fd5b506102d37f000000000000000000000000000000000000000000000000000000000000000081565b34801561043057600080fd5b506102d37f000000000000000000000000000000000000000000000000000000000000000081565b34801561046457600080fd5b5061046d6111a8565b60408051938452602084019290925290820152606001610256565b34801561049457600080fd5b5061049d61120d565b6040516102569190615860565b3480156104b657600080fd5b506104bf611219565b604051610256919061589f565b3480156104d857600080fd5b506102d37f000000000000000000000000000000000000000000000000000000000000000081565b34801561050c57600080fd5b506001546102d3906001600160a01b031681565b34801561052c57600080fd5b5061023461053b366004615803565b6112a7565b34801561054c57600080fd5b5061023461055b3660046157e6565b61166e565b34801561056c57600080fd5b5061023461057b3660046157e6565b611967565b34801561058c57600080fd5b5061023461059b3660046157e6565b611b75565b3480156105ac57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102d3565b3480156105df57600080fd5b5061024c60065481565b3480156105f557600080fd5b5061024c611d83565b34801561060a57600080fd5b506000546102d3906001600160a01b031681565b34801561062a57600080fd5b5061024c6106393660046158d2565b611f75565b34801561064a57600080fd5b506102d37f000000000000000000000000000000000000000000000000000000000000000081565b34801561067e57600080fd5b506102d37f000000000000000000000000000000000000000000000000000000000000000081565b3480156106b257600080fd5b50610234612395565b3480156106c757600080fd5b506102346106d63660046158fe565b612493565b3480156106e757600080fd5b506000546001600160a01b03166102d3565b34801561070557600080fd5b506104bf604051806040016040528060058152602001640352e312e360dc1b81525081565b610737335b6003906126a9565b6107815760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064015b60405180910390fd5b6001546001600160a01b03166107d95760405162461bcd60e51b815260206004820152601560248201527f6665652d636f6c6c6563746f722d6e6f742d73657400000000000000000000006044820152606401610778565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561085b5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610778565b6108648161115b565b156108a85760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610778565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156108e6576001546108e3906001600160a01b0316476126cb565b50565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561092857600080fd5b505afa15801561093c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109609190615920565b60015490915061097d906001600160a01b038481169116836127e4565b5050565b600061098c3361072f565b6109d15760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b6044820152606401610778565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610a3357600080fd5b505afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b9190615920565b9050610a7561285c565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610ad657600080fd5b505afa158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e9190615920565b610b18919061594f565b915082821015610b615760405162461bcd60e51b81526020600482015260146024820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b6044820152606401610778565b50919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc057600080fd5b505afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf89190615976565b6001600160a01b0316336001600160a01b031614610c585760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f720000000000006044820152606401610778565b610c636003826128be565b6108e35760405162461bcd60e51b815260206004820152601460248201527f72656d6f76652d6b65657065722d6661696c65640000000000000000000000006044820152606401610778565b6000610cb96128d3565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610cfc57600080fd5b505afa158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190615920565b610d3e9190615993565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610dbb5760405162461bcd60e51b815260206004820152601960248201527f63616c6c65722d69732d6e6f742d7665737065722d706f6f6c000000000000006044820152606401610778565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610e1d57600080fd5b505afa158015610e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e559190615920565b9050818110610eb25761097d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846127e4565b610ec4610ebf828461594f565b612a1c565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610f2357600080fd5b505afa158015610f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5b9190615920565b905061097d7f0000000000000000000000000000000000000000000000000000000000000000610f8b8484612c3b565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906127e4565b610fc53361072f565b61100a5760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b6044820152606401610778565b6108e381612c51565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561106c57600080fd5b505afa158015611080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a49190615976565b6001600160a01b0316336001600160a01b0316146111045760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f720000000000006044820152606401610778565b61110f60038261268d565b6108e35760405162461bcd60e51b815260206004820152601160248201527f6164642d6b65657065722d6661696c65640000000000000000000000000000006044820152606401610778565b600061116682612cc9565b806111a257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b600080806111b53361072f565b6111fa5760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b6044820152606401610778565b611202612d57565b925092509250909192565b6060610d3e60036133da565b60058054611226906159ab565b80601f0160208091040260200160405190810160405280929190818152602001828054611252906159ab565b801561129f5780601f106112745761010080835404028352916020019161129f565b820191906000526020600020905b81548152906001019060200180831161128257829003601f168201915b505050505081565b6112b03361072f565b6112f55760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b6044820152606401610778565b6008546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561133957600080fd5b505afa15801561134d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113719190615920565b6040516395dd919360e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906395dd91939060240160206040518083038186803b1580156113d657600080fd5b505afa1580156113ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140e9190615920565b905080821115611669576000611424828461594f565b90506000808511801561143657508482115b6114405781611442565b845b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156114a757600080fd5b505afa1580156114bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114df9190615920565b600854909150611519906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000846133e7565b6040516370a0823160e01b81523060048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb907f000000000000000000000000000000000000000000000000000000000000000090849084906370a082319060240160206040518083038186803b1580156115a457600080fd5b505afa1580156115b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115dc9190615920565b6115e6919061594f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561162c57600080fd5b505af1158015611640573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166491906159f0565b505050505b505050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146116e65760405162461bcd60e51b815260206004820152601960248201527f63616c6c65722d69732d6e6f742d7665737065722d706f6f6c000000000000006044820152606401610778565b6001600160a01b03811661173c5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610778565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561179f57600080fd5b505afa1580156117b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d79190615976565b6001600160a01b03161461182d5760405162461bcd60e51b815260206004820152601660248201527f6e6f742d76616c69642d6e65772d7374726174656779000000000000000000006044820152606401610778565b61183681613483565b6000546040516370a0823160e01b81523060048201526118ca9183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561187f57600080fd5b505afa158015611893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b79190615920565b6000546001600160a01b031691906127e4565b6040516370a0823160e01b81523060048201526108e39082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561192f57600080fd5b505afa158015611943573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b9190615920565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156119c057600080fd5b505afa1580156119d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f89190615976565b6001600160a01b0316336001600160a01b031614611a585760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f720000000000006044820152606401610778565b6001600160a01b038116611aae5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610778565b6001546001600160a01b0382811691161415611b0c5760405162461bcd60e51b815260206004820152601560248201527f6665652d636f6c6c6563746f722d69732d73616d6500000000000000000000006044820152606401610778565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a36001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611bce57600080fd5b505afa158015611be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c069190615976565b6001600160a01b0316336001600160a01b031614611c665760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f720000000000006044820152606401610778565b6001600160a01b038116611cbc5760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f0000000000000000006044820152606401610778565b6002546001600160a01b0382811691161415611d1a5760405162461bcd60e51b815260206004820152600f60248201527f737761707065722d69732d73616d6500000000000000000000000000000000006044820152606401610778565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600080670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015611de857600080fd5b505afa158015611dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e209190615920565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611e7f57600080fd5b505afa158015611e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb79190615920565b611ec19190615a0b565b611ecb9190615a2a565b6040516370a0823160e01b81523060048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611f2d57600080fd5b505afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f659190615920565b611f6f9082615993565b91505090565b6000611f803361072f565b611fc55760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b6044820152606401610778565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156120475760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610778565b6120508361115b565b156120945760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610778565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156120f657600080fd5b505afa15801561210a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212e9190615920565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a082319060240160206040518083038186803b15801561217357600080fd5b505afa158015612187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ab9190615920565b905080156122a157600254604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529086169063dd62ed3e9060440160206040518083038186803b1580156121fe57600080fd5b505afa158015612212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122369190615920565b81111561227457600254612258906001600160a01b0387811691166000613618565b600254612274906001600160a01b038781169116600019613618565b61229f857f000000000000000000000000000000000000000000000000000000000000000083613743565b505b6040516370a0823160e01b815230600482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561230257600080fd5b505afa158015612316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233a9190615920565b612344919061594f565b92508383101561238d5760405162461bcd60e51b81526020600482015260146024820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b6044820152606401610778565b505092915050565b61239e3361072f565b6123e35760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b6044820152606401610778565b6040516305eff7ef60e21b8152306004820152612487907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906317bfdfbc90602401602060405180830381600087803b15801561244857600080fd5b505af115801561245c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124809190615920565b60016137e7565b60006006819055600755565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156124ec57600080fd5b505afa158015612500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125249190615976565b6001600160a01b0316336001600160a01b0316146125845760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f720000000000006044820152606401610778565b61271081106125d55760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642d6d61782d626f72726f772d6c696d697400000000000000006044820152606401610778565b801580156125e1575081155b806125eb57508181115b6126375760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e0000006044820152606401610778565b6006546007546040805192835260208301859052820152606081018290527fedd77444afdf63401315e81ffe86d08f7865796e8ad2e11acf1d56a1393f07d59060800160405180910390a1600691909155600755565b60006126a2836001600160a01b03841661394a565b9392505050565b6001600160a01b038116600090815260018301602052604081205415156126a2565b8047101561271b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610778565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612768576040519150601f19603f3d011682016040523d82523d6000602084013e61276d565b606091505b50509050806116695760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610778565b6040516001600160a01b03831660248201526044810182905261166990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152613999565b612864613a6b565b6002546128bc907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000613cd2565b565b60006126a2836001600160a01b038416613fe4565b6040516370a0823160e01b8152306004820152600090670de0b6b3a7640000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561293f57600080fd5b505afa158015612953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129779190615920565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156129d057600080fd5b505afa1580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a089190615920565b612a129190615a0b565b610d3e9190615a2a565b6000612a296000836140d7565b915050612a378160016137e7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015612a9257600080fd5b505afa158015612aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aca9190615920565b612adc84670de0b6b3a7640000615a0b565b612ae69190615a2a565b9050801561166957604051633af9e66960e01b8152306004820152600090612c2a908590612c25906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633af9e66990602401602060405180830381600087803b158015612b5c57600080fd5b505af1158015612b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b949190615920565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b158015612bed57600080fd5b505afa158015612c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c259190615920565b612c3b565b9050612c3581614592565b50505050565b6000818310612c4a57816126a2565b5090919050565b612c5a81614679565b600854612c91906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083613618565b6002546108e3907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b031683614715565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480612d3c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b806111a25750506008546001600160a01b0390811691161490565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b158015612dbf57600080fd5b505afa158015612dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df79190615920565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b158015612e5c57600080fd5b505afa158015612e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e949190615920565b6040516305eff7ef60e21b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc90602401602060405180830381600087803b158015612efb57600080fd5b505af1158015612f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f339190615920565b6008546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015612f7c57600080fd5b505afa158015612f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb49190615920565b90506000612fc06128d3565b90506000612fce8284615993565b905080841115612fef57612fea612fe5828661594f565b61490f565b6130c4565b8382111561308757613009613004858461594f565b614b3f565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561304c57600080fd5b505afa158015613060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130849190615920565b92505b82156130c4576008546130c4906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000856133e7565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561312657600080fd5b505afa15801561313a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315e9190615920565b604051633af9e66960e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633af9e66990602401602060405180830381600087803b1580156131c557600080fd5b505af11580156131d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131fd9190615920565b9050600061320b8383615993565b9050878111156132265761321f888261594f565b9b50613233565b613230818961594f565b9a505b600061323f8a8e615993565b90508084101561330b57600061325e613258868461594f565b85612c3b565b905080156133095761326f81612a1c565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156132ce57600080fd5b505afa1580156132e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133069190615920565b94505b505b613315848b612c3b565b9a508a8411613325576000613338565b6133386133328c8661594f565b8e612c3b565b6040516302df682360e11b815260048101829052602481018e9052604481018d9052909d506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b1580156133ab57600080fd5b505af11580156133bf573d6000803e3d6000fd5b505050506133cb614d5f565b50505050505050505050909192565b606060006126a283614ed1565b600254604051636ccb2b0160e01b81526001600160a01b0385811660048301528481166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b15801561344a57600080fd5b505af192505050801561347a575060408051601f3d908101601f1916820190925261347791810190615920565b60015b612c3557505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156134e657600080fd5b505afa1580156134fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351e9190615976565b6001600160a01b0316146135745760405162461bcd60e51b815260206004820152601360248201527f77726f6e672d726563656970742d746f6b656e000000000000000000000000006044820152606401610778565b6040516305eff7ef60e21b81523060048201526108e3907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906317bfdfbc90602401602060405180830381600087803b1580156135d957600080fd5b505af11580156135ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136119190615920565b60006137e7565b8015806136a15750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561366757600080fd5b505afa15801561367b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369f9190615920565b155b6137135760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610778565b6040516001600160a01b03831660248201526044810182905261166990849063095ea7b360e01b90606401612810565b600254604051636ccb2b0160e01b81526001600160a01b038581166004830152848116602483015260448201849052600160648301523060848301526000921690636ccb2b019060a401602060405180830381600087803b1580156137a757600080fd5b505af11580156137bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137df9190615920565b949350505050565b811561097d5760006137f76128d3565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561383a57600080fd5b505afa15801561384e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138729190615920565b61387c9190615993565b9050808311156139415781156138945761389461285c565b6040516305eff7ef60e21b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906317bfdfbc90602401602060405180830381600087803b1580156138f857600080fd5b505af115801561390c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139309190615920565b905061393f612fe5838361594f565b505b61166983614f2d565b6000818152600183016020526040812054613991575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556111a2565b5060006111a2565b60006139ee826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166151209092919063ffffffff16565b8051909150156116695780806020019051810190613a0c91906159f0565b6116695760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610778565b6040805160028082526060820183526000926020830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110613ac057613ac0615a62565b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000081600181518110613b1457613b14615a62565b6001600160a01b03928316602091820292909201015260095460405162e1ed9760e51b8152911690631c3db2e090613b529030908590600401615a78565b600060405180830381600087803b158015613b6c57600080fd5b505af1158015613b80573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015613be657600080fd5b505afa158015613bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c1e9190615920565b9050600081118015613c8257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614155b1561097d5761097d7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000836133e7565b6000836001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b158015613d0d57600080fd5b505afa158015613d21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d459190615976565b90506001600160a01b03811615612c355760405163d279c19160e01b81523060048201526001600160a01b0382169063d279c19190602401600060405180830381600087803b158015613d9757600080fd5b505af1158015613dab573d6000803e3d6000fd5b505050506000816001600160a01b031663c4f59f9b6040518163ffffffff1660e01b815260040160006040518083038186803b158015613dea57600080fd5b505afa158015613dfe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613e269190810190615a9a565b805190915060005b81811015611664576000838281518110613e4a57613e4a615a62565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015613e9557600080fd5b505afa158015613ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ecd9190615920565b9050600081118015613f0a5750856001600160a01b0316848381518110613ef657613ef6615a62565b60200260200101516001600160a01b031614155b15613fd357866001600160a01b0316636ccb2b01858481518110613f3057613f30615a62565b60209081029190910101516040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529089166024820152604481018490526001606482015230608482015260a401602060405180830381600087803b158015613f9857600080fd5b505af1925050508015613fc8575060408051601f3d908101601f19168201909252613fc591810190615920565b60015b613fd157613fd3565b505b50613fdd81615b5f565b9050613e2e565b600081815260018301602052604081205480156140cd57600061400860018361594f565b855490915060009061401c9060019061594f565b905081811461408157600086600001828154811061403c5761403c615a62565b906000526020600020015490508087600001848154811061405f5761405f615a62565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061409257614092615b7a565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506111a2565b60009150506111a2565b6000808315806140e5575082155b6141315760405162461bcd60e51b815260206004820152601160248201527f616c6c2d696e7075742d67742d7a65726f0000000000000000000000000000006044820152606401610778565b6040516305eff7ef60e21b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906317bfdfbc90602401602060405180830381600087803b15801561419557600080fd5b505af11580156141a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141cd9190615920565b9050600754600014156141e55760009250905061458b565b604051633af9e66960e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633af9e66990602401602060405180830381600087803b15801561424957600080fd5b505af115801561425d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142819190615920565b905060006142ae7f000000000000000000000000000000000000000000000000000000000000000061512f565b9050600087156142c9576142c28884615993565b90506142de565b868311156142de576142db878461594f565b90505b6000670de0b6b3a76400006142f38484615a0b565b6142fd9190615a2a565b90506000600960009054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561434f57600080fd5b505afa158015614363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143879190615976565b60405163fc57d4df60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291925060009183169063fc57d4df9060240160206040518083038186803b1580156143ee57600080fd5b505afa158015614402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144269190615920565b60405163fc57d4df60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291925060009184169063fc57d4df9060240160206040518083038186803b15801561448d57600080fd5b505afa1580156144a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144c59190615920565b90506000816144d48487615a0b565b6144de9190615a2a565b9050806144fa576000899a509a5050505050505050505061458b565b60006127106007548361450d9190615a0b565b6145179190615a2a565b905060006127106006548461452c9190615a0b565b6145369190615a2a565b9050818b11156145515761454a818c61594f565b9b5061457f565b8a81111561457f576145638b8261594f565b9c50600061456f6151b5565b9050808e111561457d57809d505b505b50505050505050505050505b9250929050565b60405163852a12e360e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063852a12e390602401602060405180830381600087803b1580156145f457600080fd5b505af1158015614608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061462c9190615920565b156108e35760405162461bcd60e51b815260206004820152600f60248201527f77697468647261772d6661696c656400000000000000000000000000000000006044820152606401610778565b61468281615248565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146108e3576002546108e3906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613618565b6000836001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b15801561475057600080fd5b505afa158015614764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147889190615976565b90506001600160a01b03811615612c35576000816001600160a01b031663c4f59f9b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156147d457600080fd5b505afa1580156147e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526148109190810190615a9a565b805190915060005b8181101561166457306001600160a01b031663440d724884838151811061484157614841615a62565b60200260200101516040518263ffffffff1660e01b815260040161487491906001600160a01b0391909116815260200190565b60206040518083038186803b15801561488c57600080fd5b505afa1580156148a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148c491906159f0565b6148ff576148ff86868584815181106148df576148df615a62565b60200260200101516001600160a01b03166136189092919063ffffffff16565b61490881615b5f565b9050614818565b6002546008546040516353b609b560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291821660248201526044810184905260009291909116906353b609b590606401602060405180830381600087803b15801561498c57600080fd5b505af11580156149a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149c49190615920565b9050801561097d576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015614a2e57600080fd5b505afa158015614a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a669190615920565b905080821115614a8257614a82614a7d828461594f565b614592565b6002546008546040516381cc619b60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152918216602482015260448101869052606481018590523060848201529116906381cc619b9060a401602060405180830381600087803b158015614b0757600080fd5b505af1158015614b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c359190615920565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015614b9a57600080fd5b505afa158015614bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bd29190615920565b9050600081614be984670de0b6b3a7640000615a0b565b614bf39190615a2a565b9050670de0b6b3a7640000614c088383615a0b565b614c129190615a2a565b8311614c1e5780614c29565b614c29816001615993565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015614c8e57600080fd5b505afa158015614ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cc69190615920565b9050808211614cd55781614cd7565b805b91508115612c3557604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015614d4157600080fd5b505af1158015614d55573d6000803e3d6000fd5b5050505050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015614dc157600080fd5b505afa158015614dd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614df99190615920565b9050600080614e098360006140d7565b90925090508015614ebf57614e1f8160006137e7565b6040516370a0823160e01b8152306004820152611669907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015614e8257600080fd5b505afa158015614e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614eba9190615920565b615333565b614ec883615333565b61166982615410565b606081600001805480602002602001604051908101604052809291908181526020018280548015614f2157602002820191906000526020600020905b815481526020019060010190808311614f0d575b50505050509050919050565b614f3681615596565b6008546001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2141561503957604051632e1a7d4d60e01b81526004810182905273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90602401600060405180830381600087803b158015614faa57600080fd5b505af1158015614fbe573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634e4d9fea826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561501d57600080fd5b505af1158015615031573d6000803e3d6000fd5b505050505050565b60405163073a938160e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630e75270290602401602060405180830381600087803b15801561509b57600080fd5b505af11580156150af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150d39190615920565b156108e35760405162461bcd60e51b815260206004820152601860248201527f72657061792d746f2d636f6d706f756e642d6661696c656400000000000000006044820152606401610778565b60606137df848460008561559f565b600954604051638e8f294b60e01b81526001600160a01b0383811660048301526000921690638e8f294b9060240160606040518083038186803b15801561517557600080fd5b505afa158015615189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151ad9190615b90565b509392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561521057600080fd5b505afa158015615224573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3e9190615920565b615251816156c7565b6152a56001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613618565b6002546152df906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613618565b600854615316906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083613618565b6002546008546108e3916001600160a01b03918216911683613618565b80156108e35760405163140e25ad60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a0712d6890602401602060405180830381600087803b15801561539b57600080fd5b505af11580156153af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153d39190615920565b156108e35760405162461bcd60e51b815260206004820152600d60248201526c1cdd5c1c1b1e4b59985a5b1959609a1b6044820152606401610778565b80156108e35760405163317afabb60e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c5ebeaec90602401602060405180830381600087803b15801561547857600080fd5b505af115801561548c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906154b09190615920565b156154fd5760405162461bcd60e51b815260206004820152601b60248201527f626f72726f772d66726f6d2d636f6d706f756e642d6661696c656400000000006044820152606401610778565b6008546001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2141561558d5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561557357600080fd5b505af1158015615587573d6000803e3d6000fd5b50505050505b6108e38161571b565b6108e381614b3f565b6060824710156156005760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610778565b843b61564e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610778565b600080866001600160a01b0316858760405161566a9190615bcc565b60006040518083038185875af1925050503d80600081146156a7576040519150601f19603f3d011682016040523d82523d6000602084013e6156ac565b606091505b50915091506156bc828286615798565b979650505050505050565b6108e36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613618565b60405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b15801561577d57600080fd5b505af1158015615791573d6000803e3d6000fd5b5050505050565b606083156157a75750816126a2565b8251156157b75782518084602001fd5b8160405162461bcd60e51b8152600401610778919061589f565b6001600160a01b03811681146108e357600080fd5b6000602082840312156157f857600080fd5b81356126a2816157d1565b60006020828403121561581557600080fd5b5035919050565b600081518084526020808501945080840160005b838110156158555781516001600160a01b031687529582019590820190600101615830565b509495945050505050565b6020815260006126a2602083018461581c565b60005b8381101561588e578181015183820152602001615876565b83811115612c355750506000910152565b60208152600082518060208401526158be816040850160208701615873565b601f01601f19169190910160400192915050565b600080604083850312156158e557600080fd5b82356158f0816157d1565b946020939093013593505050565b6000806040838503121561591157600080fd5b50508035926020909101359150565b60006020828403121561593257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561596157615961615939565b500390565b8051615971816157d1565b919050565b60006020828403121561598857600080fd5b81516126a2816157d1565b600082198211156159a6576159a6615939565b500190565b600181811c908216806159bf57607f821691505b60208210811415610b6157634e487b7160e01b600052602260045260246000fd5b8051801515811461597157600080fd5b600060208284031215615a0257600080fd5b6126a2826159e0565b6000816000190483118215151615615a2557615a25615939565b500290565b600082615a4757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03831681526040602082015260006137df604083018461581c565b60006020808385031215615aad57600080fd5b825167ffffffffffffffff80821115615ac557600080fd5b818501915085601f830112615ad957600080fd5b815181811115615aeb57615aeb615a4c565b8060051b604051601f19603f83011681018181108582111715615b1057615b10615a4c565b604052918252848201925083810185019188831115615b2e57600080fd5b938501935b82851015615b5357615b4485615966565b84529385019392850192615b33565b98975050505050505050565b6000600019821415615b7357615b73615939565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600080600060608486031215615ba557600080fd5b615bae846159e0565b925060208401519150615bc3604085016159e0565b90509250925092565b60008251615bde818460208701615873565b919091019291505056fea26469706673582212202b19dc7cba0e4a960703ad8d6e6e08dba7902fcd4894e844749211a0734a3e9264736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken(uint256)": {
        "details": "Approve all required tokens"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "recoverBorrowToken(uint256)": {
        "details": "If we get liquidation in Compound, we will have borrowToken sitting in strategy. This function allows to recover idle borrow token amount.",
        "params": {
          "_amountToRecover": "Amount of borrow token we want to recover in 1 call.      Set it 0 to recover all available borrow tokens"
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "repayAll()": {
        "details": "This action usually done when loss is detected in strategy.0 borrow limit make sure that any future rebalance do not borrow again."
      },
      "sweep(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateBorrowLimit(uint256,uint256)": {
        "details": "It is possible to set 0 as _minBorrowLimit to not borrow anything",
        "params": {
          "_maxBorrowLimit": "It is % of actual collateral factor of protocol",
          "_minBorrowLimit": "It is % of actual collateral factor of protocol"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "Deposit Collateral in Sonne and earn interest by depositing borrowed token in a Vesper Pool.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "borrowBalance()": {
        "notice": "Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool"
      },
      "claimAndSwapRewards(uint256)": {
        "notice": "Claim rewardToken and convert rewardToken into collateral token."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "recoverBorrowToken(uint256)": {
        "notice": "Recover extra borrow tokens from strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "repayAll()": {
        "notice": "Repay all borrow amount and set min borrow limit to 0."
      },
      "swapToCollateral(address,uint256)": {
        "notice": "onlyKeeper:: Swap given token into collateral token."
      },
      "sweep(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns total collateral locked in the strategy"
      },
      "updateBorrowLimit(uint256,uint256)": {
        "notice": "Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol."
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14876,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol:SonneVesperXy",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14882,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol:SonneVesperXy",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14885,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol:SonneVesperXy",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)13444"
      },
      {
        "astId": 14898,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol:SonneVesperXy",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3028_storage"
      },
      {
        "astId": 22341,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol:SonneVesperXy",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 22353,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol:SonneVesperXy",
        "label": "minBorrowLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 22356,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol:SonneVesperXy",
        "label": "maxBorrowLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 22358,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol:SonneVesperXy",
        "label": "borrowToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 22361,
        "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol:SonneVesperXy",
        "label": "comptroller",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(Comptroller)10484"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Comptroller)10484": {
        "encoding": "inplace",
        "label": "contract Comptroller",
        "numberOfBytes": "20"
      },
      "t_contract(IRoutedSwapper)13444": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3028_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3027,
            "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol:SonneVesperXy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2727_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2727_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2722,
            "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol:SonneVesperXy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2726,
            "contract": "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol:SonneVesperXy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}