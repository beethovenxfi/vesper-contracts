{
  "address": "0x2C56fc3E0a4075dD43691143Ad5b70b00c46e7ed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiptToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aaveAddressProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vspAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMaxBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBorrowLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveAddressProvider",
      "outputs": [
        {
          "internalType": "contract PoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestVSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBorrowLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "updateBorrowLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vPool",
      "outputs": [
        {
          "internalType": "contract IVesperPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vdToken",
      "outputs": [
        {
          "internalType": "contract AToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vsp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd1cd76e8e8e984b5ca72735271e420447fac4d41e666be7b163b1968745a4f3e",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x2C56fc3E0a4075dD43691143Ad5b70b00c46e7ed",
    "transactionIndex": 0,
    "gasUsed": "4650152",
    "logsBloom": "0x
    "blockHash": "0xcef398839d91acc9eb1f542a122aa163fc396c2e84d7c1130eca5b284007b053",
    "transactionHash": "0xd1cd76e8e8e984b5ca72735271e420447fac4d41e666be7b163b1968745a4f3e",
    "logs": [],
    "blockNumber": 22659563,
    "cumulativeGasUsed": "4650152",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEa94eBB08E9604AFD225f2c61fa61401F1ed1047",
    "0xC85831dED6fCB15A288dfF49D256CBBC2B58388f",
    "0x6d80113e533a2C0fe82EaBD35f1875DcEA89Ea97",
    "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
    "0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb",
    "0x5323F445A8665239222b117aE095423a238F5706",
    "0xE70EFb1ff1C0b63FDF84B5EA319693cf804914A8",
    "AaveV3_Vesper_Xy_AVAX_DAIe"
  ],
  "numDeployments": 1,
  "solcInputHash": "434ef3c4077e9e378e0827dcb90f0ccd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveAddressProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vspAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaxBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"UpdatedBorrowLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveAddressProvider\",\"outputs\":[{\"internalType\":\"contract PoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestVSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"updateBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vPool\",\"outputs\":[{\"internalType\":\"contract IVesperPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vdToken\",\"outputs\":[{\"internalType\":\"contract AToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vsp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateBorrowLimit(uint256,uint256)\":{\"details\":\"It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything\",\"params\":{\"_maxBorrowLimit\":\"It is % of actual collateral factor of protocol\",\"_minBorrowLimit\":\"It is % of actual collateral factor of protocol\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"harvestVSP()\":{\"notice\":\"Claim VSP and convert to collateral token\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"sweepERC20(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns total collateral locked in the strategy\"},\"updateBorrowLimit(uint256,uint256)\":{\"notice\":\"Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol\":\"AaveV3VesperXy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance()\\n        external\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xddea3754059443771113c169ee1647ef9e83ee6ee509a911ceb7729fea62adc0\",\"license\":\"MIT\"},\"vesper-pools/contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title Errors library\\nlibrary Errors {\\n    string public constant INVALID_COLLATERAL_AMOUNT = \\\"1\\\"; // Collateral must be greater than 0 or > defined limit\\n    string public constant INVALID_SHARE_AMOUNT = \\\"2\\\"; // Share must be greater than 0\\n    string public constant INVALID_INPUT_LENGTH = \\\"3\\\"; // Input array length must be greater than 0\\n    string public constant INPUT_LENGTH_MISMATCH = \\\"4\\\"; // Input array length mismatch with another array length\\n    string public constant NOT_WHITELISTED_ADDRESS = \\\"5\\\"; // Caller is not whitelisted to withdraw without fee\\n    string public constant MULTI_TRANSFER_FAILED = \\\"6\\\"; // Multi transfer of tokens has failed\\n    string public constant FEE_COLLECTOR_NOT_SET = \\\"7\\\"; // Fee Collector is not set\\n    string public constant NOT_ALLOWED_TO_SWEEP = \\\"8\\\"; // Token is not allowed to sweep\\n    string public constant INSUFFICIENT_BALANCE = \\\"9\\\"; // Insufficient balance to performs operations to follow\\n    string public constant INPUT_ADDRESS_IS_ZERO = \\\"10\\\"; // Input address is zero\\n    string public constant FEE_LIMIT_REACHED = \\\"11\\\"; // Fee must be less than MAX_BPS\\n    string public constant ALREADY_INITIALIZED = \\\"12\\\"; // Data structure, contract, or logic already initialized and can not be called again\\n    string public constant ADD_IN_LIST_FAILED = \\\"13\\\"; // Cannot add address in address list\\n    string public constant REMOVE_FROM_LIST_FAILED = \\\"14\\\"; // Cannot remove address from address list\\n    string public constant STRATEGY_IS_ACTIVE = \\\"15\\\"; // Strategy is already active, an inactive strategy is required\\n    string public constant STRATEGY_IS_NOT_ACTIVE = \\\"16\\\"; // Strategy is not active, an active strategy is required\\n    string public constant INVALID_STRATEGY = \\\"17\\\"; // Given strategy is not a strategy of this pool\\n    string public constant DEBT_RATIO_LIMIT_REACHED = \\\"18\\\"; // Debt ratio limit reached. It must be less than MAX_BPS\\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \\\"19\\\"; // Strategy total debt must be 0\\n    string public constant LOSS_TOO_HIGH = \\\"20\\\"; // Strategy reported loss must be less than current debt\\n    string public constant INVALID_MAX_BORROW_LIMIT = \\\"21\\\"; // Max borrow limit is beyond range.\\n    string public constant MAX_LIMIT_LESS_THAN_MIN = \\\"22\\\"; // Max limit should be greater than min limit.\\n    string public constant INVALID_SLIPPAGE = \\\"23\\\"; // Slippage should be less than MAX_BPS\\n    string public constant WRONG_RECEIPT_TOKEN = \\\"24\\\"; // Wrong receipt token address\\n    string public constant AAVE_FLASH_LOAN_NOT_ACTIVE = \\\"25\\\"; // aave flash loan is not active\\n    string public constant DYDX_FLASH_LOAN_NOT_ACTIVE = \\\"26\\\"; // DYDX flash loan is not active\\n    string public constant INVALID_FLASH_LOAN = \\\"27\\\"; // invalid-flash-loan\\n    string public constant INVALID_INITIATOR = \\\"28\\\"; // \\\"invalid-initiator\\\"\\n    string public constant INCORRECT_WITHDRAW_AMOUNT = \\\"29\\\"; // withdrawn amount is not correct\\n    string public constant NO_MARKET_ID_FOUND = \\\"30\\\"; // dydx flash loan no marketId found for token\\n    string public constant SAME_AS_PREVIOUS = \\\"31\\\"; // Input should not be same as previous value.\\n    string public constant INVALID_INPUT = \\\"32\\\"; // Generic invalid input error code\\n}\\n\",\"keccak256\":\"0x96be83cb172a1efef0ff9771392f0b1d192a680fb2b36b061efbd49177afb947\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration\\n    ) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(address _account)\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n}\\n\",\"keccak256\":\"0x44ded14cb0ced3f4f72286454c8f950480731f2b46d275b49172fc17ad9ad3c4\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x193c2dd96da7b717f15736d5f13ccab8a7b4e90853b6cb922a864f1e8fdd9dc7\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/aave/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// @dev Interface support both Aave v2 and v3 methods\\ninterface PoolAddressesProvider {\\n    function getPool() external view returns (address);\\n\\n    // Aave v2 method.\\n    function getLendingPool() external view returns (address);\\n\\n    function getPoolDataProvider() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\\ninterface AaveOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\\n\\ninterface AToken is IERC20 {\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (address);\\n\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    //solhint-disable func-name-mixedcase\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\\ninterface AaveIncentivesController {\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function claimAllRewards(address[] calldata assets, address to)\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    function getRewardsList() external view returns (address[] memory);\\n}\\n\\ninterface AaveLendingPool {\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function getUserAccountData(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n}\\n\\ninterface AaveProtocolDataProvider {\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n}\\n\\n//solhint-disable func-name-mixedcase\\ninterface StakedAave is IERC20 {\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function stake(address onBehalfOf, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x142a75fa1d552c9a3046bbd11f69fc23fc365e97856f75f103e8bab0718366f8\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x81fccad24b581704ec06b681d0f75d2af86c461142bf0224e118779783271d10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance()\\n        external\\n        onlyKeeper\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _rebalance()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x947a4185d2e76769bda95e405241a2d8d1b17093955a486265cdf1d92893786b\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/aave/v3/AaveV3Incentive.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport \\\"../../../interfaces/aave/IAave.sol\\\";\\n\\n/// @title This contract provide core operations for Aave v3\\nlibrary AaveV3Incentive {\\n    /**\\n     * @notice Claim rewards from Aave incentive controller\\n     */\\n    function _claimRewards(address _aToken)\\n        internal\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts)\\n    {\\n        // Some aTokens may have no incentive controller method/variable. Better use try catch\\n        try AToken(_aToken).getIncentivesController() returns (address _aaveIncentivesController) {\\n            address[] memory assets = new address[](1);\\n            assets[0] = address(_aToken);\\n            return AaveIncentivesController(_aaveIncentivesController).claimAllRewards(assets, address(this));\\n            //solhint-disable no-empty-blocks\\n        } catch {}\\n    }\\n}\\n\",\"keccak256\":\"0x106e66925f65a7b930f546bdbb8680f84462ea6ad78d2ff409ca3f292d05bd18\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"./AaveV3Xy.sol\\\";\\n\\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\\ncontract AaveV3VesperXy is AaveV3Xy {\\n    using SafeERC20 for IERC20;\\n\\n    // Destination Grow Pool for borrowed Token\\n    IVesperPool public immutable vPool;\\n    // VSP token address\\n    address public immutable vsp;\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _receiptToken,\\n        address _borrowToken,\\n        address _aaveAddressProvider,\\n        address _vPool,\\n        address _vspAddress,\\n        string memory _name\\n    ) AaveV3Xy(_pool, _swapper, _receiptToken, _borrowToken, _aaveAddressProvider, _name) {\\n        require(_vspAddress != address(0), \\\"invalid-vsp-address\\\");\\n        require(address(IVesperPool(_vPool).token()) == borrowToken, \\\"invalid-grow-pool\\\");\\n        vPool = IVesperPool(_vPool);\\n        vsp = _vspAddress;\\n    }\\n\\n    /// @notice Claim VSP and convert to collateral token\\n    function harvestVSP() external {\\n        address _poolRewards = vPool.poolRewards();\\n        if (_poolRewards != address(0)) {\\n            IPoolRewards(_poolRewards).claimReward(address(this));\\n        }\\n        uint256 _vspAmount = IERC20(vsp).balanceOf(address(this));\\n        if (_vspAmount > 0) {\\n            _swapExactInput(vsp, address(collateralToken), _vspAmount);\\n        }\\n    }\\n\\n    /// @notice After borrowing Y, deposit to Vesper Pool\\n    function _afterBorrowY(uint256 _amount) internal virtual override {\\n        vPool.deposit(_amount);\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        IERC20(borrowToken).safeApprove(address(vPool), _amount);\\n        IERC20(vsp).safeApprove(address(swapper), _amount);\\n    }\\n\\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\\n    function _beforeRepayY(uint256 _amount) internal virtual override {\\n        _withdrawFromVesperPool(_amount);\\n    }\\n\\n    /// @notice Borrowed Y balance deposited in Vesper Pool\\n    function _getInvestedBorrowBalance() internal view virtual override returns (uint256) {\\n        return\\n            IERC20(borrowToken).balanceOf(address(this)) +\\n            ((vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18);\\n    }\\n\\n    /// @notice Swap excess borrow for more collateral when underlying  vPool is making profits\\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual override {\\n        if (_excessBorrow > 0) {\\n            _withdrawFromVesperPool(_excessBorrow);\\n            uint256 _borrowedHere = IERC20(borrowToken).balanceOf(address(this));\\n            if (_borrowedHere > 0) {\\n                _safeSwapExactInput(borrowToken, address(collateralToken), _borrowedHere);\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\\n    function _withdrawFromVesperPool(uint256 _amount) internal {\\n        if (_amount > 0) {\\n            uint256 _pricePerShare = vPool.pricePerShare();\\n            uint256 _shares = (_amount * 1e18) / _pricePerShare;\\n            _shares = _amount > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\\n            vPool.withdraw(Math.min(_shares, vPool.balanceOf(address(this))));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe2c315a8ccdeaba3838c14170ef088a0cebb77d704f6410c93424c58c4c3beef\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/aave/v3/AaveV3Xy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"vesper-pools/contracts/Errors.sol\\\";\\nimport \\\"../../../interfaces/aave/IAave.sol\\\";\\nimport \\\"./AaveV3Incentive.sol\\\";\\nimport \\\"../../Strategy.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\\ncontract AaveV3Xy is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"5.0.0\\\";\\n\\n    uint256 internal constant MAX_BPS = 10_000; //100%\\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\\n\\n    PoolAddressesProvider public immutable aaveAddressProvider;\\n    address public borrowToken;\\n    AToken public vdToken; // Variable Debt Token\\n    address internal aBorrowToken;\\n    event UpdatedBorrowLimit(\\n        uint256 previousMinBorrowLimit,\\n        uint256 newMinBorrowLimit,\\n        uint256 previousMaxBorrowLimit,\\n        uint256 newMaxBorrowLimit\\n    );\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _receiptToken,\\n        address _borrowToken,\\n        address _aaveAddressProvider,\\n        string memory _name\\n    ) Strategy(_pool, _swapper, _receiptToken) {\\n        NAME = _name;\\n        require(_aaveAddressProvider != address(0), \\\"addressProvider-is-zero\\\");\\n        require(\\n            AToken(_receiptToken).UNDERLYING_ASSET_ADDRESS() == address(IVesperPool(_pool).token()),\\n            \\\"invalid-receipt-token\\\"\\n        );\\n        (address _aBorrowToken, , address _vdToken) = AaveProtocolDataProvider(\\n            PoolAddressesProvider(_aaveAddressProvider).getPoolDataProvider()\\n        ).getReserveTokensAddresses(_borrowToken);\\n        vdToken = AToken(_vdToken);\\n        borrowToken = _borrowToken;\\n        aBorrowToken = _aBorrowToken;\\n        aaveAddressProvider = PoolAddressesProvider(_aaveAddressProvider);\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return\\n            _token == address(collateralToken) ||\\n            _token == receiptToken ||\\n            address(vdToken) == _token ||\\n            borrowToken == _token;\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view override returns (uint256) {\\n        // receiptToken is aToken. aToken is 1:1 of collateral token\\n        return IERC20(receiptToken).balanceOf(address(this)) + collateralToken.balanceOf(address(this));\\n    }\\n\\n    /// @notice After borrowing Y Hook\\n    function _afterBorrowY(uint256 _amount) internal virtual {}\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        address _swapper = address(swapper);\\n        collateralToken.safeApprove(aaveAddressProvider.getPool(), _amount);\\n        collateralToken.safeApprove(_swapper, _amount);\\n        IERC20(borrowToken).safeApprove(aaveAddressProvider.getPool(), _amount);\\n        IERC20(borrowToken).safeApprove(_swapper, _amount);\\n        try AToken(receiptToken).getIncentivesController() returns (address _aaveIncentivesController) {\\n            address[] memory _rewardTokens = AaveIncentivesController(_aaveIncentivesController).getRewardsList();\\n            for (uint256 i; i < _rewardTokens.length; ++i) {\\n                if (_rewardTokens[i] != address(collateralToken) && _rewardTokens[i] != borrowToken) {\\n                    IERC20(_rewardTokens[i]).safeApprove(_swapper, _amount);\\n                }\\n            }\\n            //solhint-disable no-empty-blocks\\n        } catch {}\\n    }\\n\\n    /**\\n     * @notice Claim rewardToken and transfer to new strategy\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual override {\\n        require(IStrategy(_newStrategy).token() == receiptToken, \\\"wrong-receipt-token\\\");\\n        _repayY(vdToken.balanceOf(address(this)), AaveLendingPool(aaveAddressProvider.getPool()));\\n    }\\n\\n    /// @notice Before repaying Y Hook\\n    function _beforeRepayY(uint256 _amount) internal virtual {}\\n\\n    /**\\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\\n     * @param _depositAmount deposit amount\\n     * @param _withdrawAmount withdraw amount\\n     * @return _borrowAmount borrow more amount\\n     * @return _repayAmount repay amount to keep ltv within limit\\n     */\\n    function _calculateBorrowPosition(\\n        uint256 _depositAmount,\\n        uint256 _withdrawAmount,\\n        uint256 _borrowed,\\n        uint256 _supplied\\n    ) internal view returns (uint256 _borrowAmount, uint256 _repayAmount) {\\n        require(_depositAmount == 0 || _withdrawAmount == 0, \\\"all-input-gt-zero\\\");\\n        // If maximum borrow limit set to 0 then repay borrow\\n        if (maxBorrowLimit == 0) {\\n            return (0, _borrowed);\\n        }\\n        // In case of withdraw, _amount can be greater than _supply\\n        uint256 _hypotheticalCollateral = _depositAmount > 0 ? _supplied + _depositAmount : _supplied > _withdrawAmount\\n            ? _supplied - _withdrawAmount\\n            : 0;\\n        if (_hypotheticalCollateral == 0) {\\n            return (0, _borrowed);\\n        }\\n        AaveOracle _aaveOracle = AaveOracle(aaveAddressProvider.getPriceOracle());\\n\\n        uint256 _borrowTokenPrice = _aaveOracle.getAssetPrice(borrowToken);\\n        uint256 _collateralTokenPrice = _aaveOracle.getAssetPrice(address(collateralToken));\\n        if (_borrowTokenPrice == 0 || _collateralTokenPrice == 0) {\\n            // Oracle problem. Lets payback all\\n            return (0, _borrowed);\\n        }\\n        // _collateralFactor in 4 decimal. 10_000 = 100%\\n        (, uint256 _collateralFactor, , , , , , , , ) = AaveProtocolDataProvider(\\n            aaveAddressProvider.getPoolDataProvider()\\n        ).getReserveConfigurationData(address(collateralToken));\\n\\n        // Collateral in base currency based on oracle price and cf;\\n        uint256 _actualCollateralForBorrow = (_hypotheticalCollateral * _collateralFactor * _collateralTokenPrice) /\\n            (MAX_BPS * (10**IERC20Metadata(address(collateralToken)).decimals()));\\n        // Calculate max borrow possible in borrow token number\\n        uint256 _maxBorrowPossible = (_actualCollateralForBorrow *\\n            (10**IERC20Metadata(address(borrowToken)).decimals())) / _borrowTokenPrice;\\n        if (_maxBorrowPossible == 0) {\\n            return (0, _borrowed);\\n        }\\n        // Safe buffer to avoid liquidation due to price variations.\\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\\n\\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\\n\\n        // If current borrow is greater than max borrow, then repay to achieve safe position.\\n        if (_borrowed > _borrowUpperBound) {\\n            // If borrow > upperBound then it is greater than lowerBound too.\\n            _repayAmount = _borrowed - _borrowLowerBound;\\n        } else if (_borrowLowerBound > _borrowed) {\\n            _borrowAmount = _borrowLowerBound - _borrowed;\\n            uint256 _availableLiquidity = IERC20(borrowToken).balanceOf(aBorrowToken);\\n            if (_borrowAmount > _availableLiquidity) {\\n                _borrowAmount = _availableLiquidity;\\n            }\\n        }\\n    }\\n\\n    /// @notice Claim all rewards and convert to _toToken.\\n    function _claimRewardsAndConvertTo(address _toToken) internal {\\n        (address[] memory _tokens, uint256[] memory _amounts) = AaveV3Incentive._claimRewards(receiptToken);\\n        uint256 _length = _tokens.length;\\n        for (uint256 i; i < _length; ++i) {\\n            if (_amounts[i] > 0) {\\n                _safeSwapExactInput(_tokens[i], _toToken, _amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Aave support WETH as collateral.\\n     */\\n    function _depositToAave(uint256 _amount, AaveLendingPool _aaveLendingPool) internal virtual {\\n        if (_amount > 0) {\\n            try _aaveLendingPool.supply(address(collateralToken), _amount, address(this), 0) {} catch Error(\\n                string memory _reason\\n            ) {\\n                // Aave uses liquidityIndex and some other indexes as needed to normalize input.\\n                // If normalized input equals to 0 then error will be thrown with '56' error code.\\n                // CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n                // Hence discard error where error code is '56'\\n                require(bytes32(bytes(_reason)) == \\\"56\\\", \\\"deposit failed\\\");\\n            }\\n        }\\n    }\\n\\n    /// @notice Borrowed Y balance deposited here or elsewhere hook\\n    function _getInvestedBorrowBalance() internal view virtual returns (uint256) {\\n        return IERC20(borrowToken).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\\n     * @dev Claim rewardToken and convert to collateral.\\n     */\\n    function _rebalance()\\n        internal\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _borrowed = vdToken.balanceOf(address(this));\\n        uint256 _investedBorrowBalance = _getInvestedBorrowBalance();\\n        AaveLendingPool _aaveLendingPool = AaveLendingPool(aaveAddressProvider.getPool());\\n        // Claim rewards and convert to collateral token\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n\\n        // _borrow increases every block. Convert collateral to borrowToken.\\n        if (_borrowed > _investedBorrowBalance) {\\n            _swapToBorrowToken(_borrowed - _investedBorrowBalance, _aaveLendingPool);\\n        } else {\\n            // When _investedBorrowBalance exceeds _borrow balance from Aave\\n            // Customize this hook to handle the excess borrowToken for profit\\n            _rebalanceBorrow(_investedBorrowBalance - _borrowed);\\n        }\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _supplied = IERC20(receiptToken).balanceOf(address(this));\\n        uint256 _totalCollateral = _supplied + _collateralHere;\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_collateralHere < _profitAndExcessDebt) {\\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _supplied);\\n            if (_totalAmountToWithdraw > 0) {\\n                _withdrawHere(_totalAmountToWithdraw, _aaveLendingPool, _borrowed, _supplied);\\n                _collateralHere = collateralToken.balanceOf(address(this));\\n            }\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        uint256 _newSupply = collateralToken.balanceOf(address(this));\\n        _depositToAave(_newSupply, _aaveLendingPool);\\n\\n        // There are scenarios when we want to call _calculateBorrowPosition and act on it.\\n        // 1. Strategy got some collateral from pool which will allow strategy to borrow more.\\n        // 2. Collateral and/or borrow token price is changed which leads to repay or borrow.\\n        // 3. BorrowLimits are updated.\\n        // In some edge scenarios, below call is redundant but keeping it as is for simplicity.\\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(\\n            0,\\n            0,\\n            vdToken.balanceOf(address(this)),\\n            IERC20(receiptToken).balanceOf(address(this))\\n        );\\n        if (_repayAmount > 0) {\\n            // Repay _borrowAmount to maintain safe position\\n            _repayY(_repayAmount, _aaveLendingPool);\\n        } else if (_borrowAmount > 0) {\\n            // 2 for variable rate borrow, 0 for referralCode\\n            _aaveLendingPool.borrow(borrowToken, _borrowAmount, 2, 0, address(this));\\n        }\\n        uint256 _borrowTokenBalance = IERC20(borrowToken).balanceOf(address(this));\\n        if (_borrowTokenBalance > 0) {\\n            _afterBorrowY(_borrowTokenBalance);\\n        }\\n    }\\n\\n    /// @notice Swap excess borrow for more collateral hook\\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual {}\\n\\n    function _repayY(uint256 _amount, AaveLendingPool _aaveLendingPool) internal virtual {\\n        _beforeRepayY(_amount);\\n        _aaveLendingPool.repay(borrowToken, _amount, 2, address(this));\\n    }\\n\\n    /**\\n     * @notice Swap given token to borrowToken\\n     * @param _shortOnBorrow Expected output of this swap\\n     */\\n    function _swapToBorrowToken(uint256 _shortOnBorrow, AaveLendingPool _aaveLendingPool) internal {\\n        // Looking for _amountIn using fixed output amount\\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, _shortOnBorrow);\\n        if (_amountIn > 0) {\\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n            if (_amountIn > _collateralHere) {\\n                // Withdraw some collateral from Aave so that we have enough collateral to get expected output\\n                uint256 _amount = _amountIn - _collateralHere;\\n                require(\\n                    _aaveLendingPool.withdraw(address(collateralToken), _amount, address(this)) == _amount,\\n                    Errors.INCORRECT_WITHDRAW_AMOUNT\\n                );\\n            }\\n            swapper.swapExactOutput(address(collateralToken), borrowToken, _shortOnBorrow, _amountIn, address(this));\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 _requireAmount) internal override {\\n        _withdrawHere(\\n            _requireAmount,\\n            AaveLendingPool(aaveAddressProvider.getPool()),\\n            vdToken.balanceOf(address(this)),\\n            IERC20(receiptToken).balanceOf(address(this))\\n        );\\n    }\\n\\n    function _withdrawHere(\\n        uint256 _requireAmount,\\n        AaveLendingPool _aaveLendingPool,\\n        uint256 _borrowed,\\n        uint256 _supplied\\n    ) internal {\\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, _requireAmount, _borrowed, _supplied);\\n        if (_repayAmount > 0) {\\n            _repayY(_repayAmount, _aaveLendingPool);\\n        }\\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\\n        // _requireAmount against available liquidity.\\n        uint256 _possibleWithdraw = Math.min(\\n            _requireAmount,\\n            Math.min(IERC20(receiptToken).balanceOf(address(this)), collateralToken.balanceOf(receiptToken))\\n        );\\n        require(\\n            _aaveLendingPool.withdraw(address(collateralToken), _possibleWithdraw, address(this)) == _possibleWithdraw,\\n            Errors.INCORRECT_WITHDRAW_AMOUNT\\n        );\\n    }\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n    /**\\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\\n     * @dev It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything\\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\\n     */\\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\\n        require(_maxBorrowLimit < MAX_BPS, \\\"invalid-max-borrow-limit\\\");\\n        // set _maxBorrowLimit and _minBorrowLimit to disable borrow;\\n        require(\\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\\n            \\\"max-should-be-higher-than-min\\\"\\n        );\\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\\n        minBorrowLimit = _minBorrowLimit;\\n        maxBorrowLimit = _maxBorrowLimit;\\n    }\\n}\\n\",\"keccak256\":\"0xbb847375de5a900a9dbd2c444fa965692ef3486c97caf5a70f39c2b873dcf14a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610120604052611b586006556121346007553480156200001e57600080fd5b506040516200588f3803806200588f8339810160408190526200004191620007aa565b8787878787858585856001600160a01b038316620000a65760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000fe5760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f00000000000000000060448201526064016200009d565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200015c57600080fd5b505afa15801562000171573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000197919062000921565b6001600160a01b03908116608052600080546001600160a01b031916918316919091179055620001de620001c83390565b60036200066360201b620017e11790919060201c565b620002205760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016200009d565b505081516200023891506005906020840190620006d5565b506001600160a01b038216620002915760405162461bcd60e51b815260206004820152601760248201527f6164647265737350726f76696465722d69732d7a65726f00000000000000000060448201526064016200009d565b856001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620002cb57600080fd5b505afa158015620002e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000306919062000921565b6001600160a01b0316846001600160a01b031663b16a19de6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200034957600080fd5b505afa1580156200035e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000384919062000921565b6001600160a01b031614620003dc5760405162461bcd60e51b815260206004820152601560248201527f696e76616c69642d726563656970742d746f6b656e000000000000000000000060448201526064016200009d565b600080836001600160a01b031663e860accb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200041957600080fd5b505afa1580156200042e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000454919062000921565b6040516334924edb60e21b81526001600160a01b038781166004830152919091169063d2493b6c9060240160606040518083038186803b1580156200049857600080fd5b505afa158015620004ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004d3919062000948565b600980546001600160a01b03199081166001600160a01b039384161790915560088054821699831699909917909855600a80549098169281169290921790965593841660c05250505086161515935062000574925050505760405162461bcd60e51b815260206004820152601360248201527f696e76616c69642d7673702d616464726573730000000000000000000000000060448201526064016200009d565b60085460408051637e062a3560e11b815290516001600160a01b039283169286169163fc0c546a916004808301926020929190829003018186803b158015620005bc57600080fd5b505afa158015620005d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005f7919062000921565b6001600160a01b031614620006435760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a590b59dc9bddcb5c1bdbdb607a1b60448201526064016200009d565b506001600160a01b0391821660e052166101005250620009d99350505050565b60006200067a836001600160a01b03841662000683565b90505b92915050565b6000818152600183016020526040812054620006cc575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200067d565b5060006200067d565b828054620006e3906200099c565b90600052602060002090601f01602090048101928262000707576000855562000752565b82601f106200072257805160ff191683800117855562000752565b8280016001018555821562000752579182015b828111156200075257825182559160200191906001019062000735565b506200076092915062000764565b5090565b5b8082111562000760576000815560010162000765565b6001600160a01b03811681146200079157600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600080610100898b031215620007c857600080fd5b8851620007d5816200077b565b809850506020808a0151620007ea816200077b565b60408b0151909850620007fd816200077b565b60608b015190975062000810816200077b565b60808b015190965062000823816200077b565b60a08b015190955062000836816200077b565b60c08b015190945062000849816200077b565b60e08b01519093506001600160401b03808211156200086757600080fd5b818c0191508c601f8301126200087c57600080fd5b81518181111562000891576200089162000794565b604051601f8201601f19908116603f01168101908382118183101715620008bc57620008bc62000794565b816040528281528f86848701011115620008d557600080fd5b600093505b82841015620008f95784840186015181850187015292850192620008da565b828411156200090b5760008684830101525b8096505050505050509295985092959890939650565b6000602082840312156200093457600080fd5b815162000941816200077b565b9392505050565b6000806000606084860312156200095e57600080fd5b83516200096b816200077b565b60208501519093506200097e816200077b565b604085015190925062000991816200077b565b809150509250925092565b600181811c90821680620009b157607f821691505b60208210811415620009d357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051614cc662000bc96000396000818161020901528181610a9001528181610b2201526123ec0152600081816102a701528181610977015281816123b601528181612b7c01528181612c1801528181613964015281816140f4015281816141de01526142110152600081816103700152818161187b01528181611c150152818161257301528181613318015281816134f501528181613a480152613b410152600081816101d5015281816104720152818161058e015281816106aa01528181610788015281816107e401528181610c8b01528181610d2801528181610f540152818161111d0152818161161e01528181611ae301528181611e3a0152818161203001526142df015260008181610336015281816103cd015281816105ed01528181610688015281816106fc015281816107bb015281816108f201528181610b4301528181610eb80152818161134f0152818161150d01528181611cab01528181611d1b01528181611f52015281816120ad015281816129f901528181612a9b01528181612da801528181612e6201528181612f110152818161300a015281816131380152818161317a01528181613444015281816135940152818161362f01528181613ae101528181613b1501528181613d0501526142bd0152614cc66000f3fe608060405234801561001057600080fd5b506004361061019a5760003560e01c8063a3f4df7e116100e4578063d8dfeb4511610092578063d8dfeb45146103cb578063e00af4a7146103f1578063e260d74714610404578063e5328e061461040d578063ec78e83214610415578063fb7ee10214610428578063fc0c546a1461043b578063ffa1ad741461044c57600080fd5b8063a3f4df7e1461031c578063b2016bd414610331578063c415b95c14610358578063cdaabe411461036b578063ce5494bb14610392578063d2c35ce8146103a5578063d3033c39146103b857600080fd5b8063440d72481161014c578063440d724814610264578063456dc17a146102875780634fc90c2c1461029a5780636719578c146102a25780637d7c2a1c146102c957806390d67514146102ec578063951dc22c146102ff57806399b71d5c1461031457600080fd5b80630181686c1461019f57806314ae9f2e146101bb57806316f0115b146101d057806329ba73ed146102045780632b3297f91461022b5780632e1a7d4d1461023e5780634032b72b14610251575b600080fd5b6101a860075481565b6040519081526020015b60405180910390f35b6101ce6101c936600461447a565b610470565b005b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6040516101b29190614497565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6002546101f7906001600160a01b031681565b6101ce61024c3660046144ab565b61058b565b6101ce61025f36600461447a565b6107e2565b61027761027236600461447a565b6108ee565b60405190151581526020016101b2565b6008546101f7906001600160a01b031681565b6101ce610973565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6102d1610b6d565b604080519384526020840192909252908201526060016101b2565b6009546101f7906001600160a01b031681565b610307610bad565b6040516101b29190614508565b6101ce610bbe565b610324610bfa565b6040516101b29190614547565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6001546101f7906001600160a01b031681565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6101ce6103a036600461447a565b610c88565b6101ce6103b336600461447a565b610f52565b6101ce6103c636600461447a565b61111b565b7f00000000000000000000000000000000000000000000000000000000000000006101f7565b6101ce6103ff36600461447a565b6112d8565b6101a860065481565b6101a86114f3565b6000546101f7906001600160a01b031681565b6101ce61043636600461457a565b61161c565b6000546001600160a01b03166101f7565b610324604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c957600080fd5b505afa1580156104dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610501919061459c565b6001600160a01b0316336001600160a01b03161461053a5760405162461bcd60e51b8152600401610531906145b9565b60405180910390fd5b6105456003826117fd565b6105885760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610531565b50565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146105d35760405162461bcd60e51b8152600401610531906145f0565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610622903090600401614497565b60206040518083038186803b15801561063a57600080fd5b505afa15801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190614623565b90508181106106d3576106cf6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611812565b5050565b6106e56106e08284614652565b611875565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610731903090600401614497565b60206040518083038186803b15801561074957600080fd5b505afa15801561075d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107819190614623565b90506106cf7f00000000000000000000000000000000000000000000000000000000000000006107b18484611a0f565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611812565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561083b57600080fd5b505afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610873919061459c565b6001600160a01b0316336001600160a01b0316146108a35760405162461bcd60e51b8152600401610531906145b9565b6108ae6003826117e1565b6105885760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610531565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148061093d57506000546001600160a01b038381169116145b8061095557506009546001600160a01b038381169116145b8061096d57506008546001600160a01b038381169116145b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a06919061459c565b90506001600160a01b03811615610a765760405163d279c19160e01b81526001600160a01b0382169063d279c19190610a43903090600401614497565b600060405180830381600087803b158015610a5d57600080fd5b505af1158015610a71573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610ac5903090600401614497565b60206040518083038186803b158015610add57600080fd5b505afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190614623565b905080156106cf57610b687f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083611a25565b505050565b60008080610b7e335b600390611ab9565b610b9a5760405162461bcd60e51b815260040161053190614669565b610ba2611adb565b925092509250909192565b6060610bb9600361238e565b905090565b610bc733610b76565b610be35760405162461bcd60e51b815260040161053190614669565b610bed600061239b565b610bf860001961239b565b565b60058054610c0790614699565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3390614699565b8015610c805780601f10610c5557610100808354040283529160200191610c80565b820191906000526020600020905b815481529060010190602001808311610c6357829003601f168201915b505050505081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610cd05760405162461bcd60e51b8152600401610531906145f0565b6001600160a01b038116610d265760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610531565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8957600080fd5b505afa158015610d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc1919061459c565b6001600160a01b031614610e105760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610531565b610e1981612415565b6000546040516370a0823160e01b8152610eb29183916001600160a01b03909116906370a0823190610e4f903090600401614497565b60206040518083038186803b158015610e6757600080fd5b505afa158015610e7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9f9190614623565b6000546001600160a01b03169190611812565b610588817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610f029190614497565b60206040518083038186803b158015610f1a57600080fd5b505afa158015610f2e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b19190614623565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fab57600080fd5b505afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe3919061459c565b6001600160a01b0316336001600160a01b0316146110135760405162461bcd60e51b8152600401610531906145b9565b6001600160a01b0381166110695760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610531565b6001546001600160a01b03828116911614156110bf5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610531565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561117457600080fd5b505afa158015611188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ac919061459c565b6001600160a01b0316336001600160a01b0316146111dc5760405162461bcd60e51b8152600401610531906145b9565b6001600160a01b03811661122c5760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b6044820152606401610531565b6002546001600160a01b038281169116141561127c5760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b6044820152606401610531565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6112e133610b76565b6112fd5760405162461bcd60e51b815260040161053190614669565b6001546001600160a01b031661134d5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610531565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156113cf5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610531565b6113d8816108ee565b1561141c5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610531565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561145757600154610588906001600160a01b031647612607565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611486903090600401614497565b60206040518083038186803b15801561149e57600080fd5b505afa1580156114b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d69190614623565b6001549091506106cf906001600160a01b03848116911683611812565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611542903090600401614497565b60206040518083038186803b15801561155a57600080fd5b505afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190614623565b6000546040516370a0823160e01b81526001600160a01b03909116906370a08231906115c2903090600401614497565b60206040518083038186803b1580156115da57600080fd5b505afa1580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116129190614623565b610bb991906146d4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561167557600080fd5b505afa158015611689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ad919061459c565b6001600160a01b0316336001600160a01b0316146116dd5760405162461bcd60e51b8152600401610531906145b9565b61271081106117295760405162461bcd60e51b81526020600482015260186024820152771a5b9d985b1a590b5b585e0b589bdc9c9bddcb5b1a5b5a5d60421b6044820152606401610531565b80158015611735575081155b8061173f57508181115b61178b5760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e0000006044820152606401610531565b6006546007546040805192835260208301859052820152606081018290527fedd77444afdf63401315e81ffe86d08f7865796e8ad2e11acf1d56a1393f07d59060800160405180910390a1600691909155600755565b60006117f6836001600160a01b038416612720565b9392505050565b60006117f6836001600160a01b03841661276f565b6040516001600160a01b038316602482015260448101829052610b6890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612862565b610588817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d257600080fd5b505afa1580156118e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190a919061459c565b6009546040516370a0823160e01b81526001600160a01b03909116906370a082319061193a903090600401614497565b60206040518083038186803b15801561195257600080fd5b505afa158015611966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198a9190614623565b6000546040516370a0823160e01b81526001600160a01b03909116906370a08231906119ba903090600401614497565b60206040518083038186803b1580156119d257600080fd5b505afa1580156119e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0a9190614623565b612934565b6000818310611a1e57816117f6565b5090919050565b600254604051636ccb2b0160e01b81526000916001600160a01b031690636ccb2b0190611a5f9087908790879060019030906004016146ec565b602060405180830381600087803b158015611a7957600080fd5b505af1158015611a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab19190614623565b949350505050565b6001600160a01b038116600090815260018301602052604081205415156117f6565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401611b2d9190614497565b60206040518083038186803b158015611b4557600080fd5b505afa158015611b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7d9190614623565b6009546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611bb3903090600401614497565b60206040518083038186803b158015611bcb57600080fd5b505afa158015611bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c039190614623565b90506000611c0f612b6f565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6c57600080fd5b505afa158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca4919061459c565b9050611ccf7f0000000000000000000000000000000000000000000000000000000000000000612ceb565b81831115611cef57611cea611ce48385614652565b82612d8b565b611d01565b611d01611cfc8484614652565b61308e565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611d50903090600401614497565b60206040518083038186803b158015611d6857600080fd5b505afa158015611d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da09190614623565b600080546040516370a0823160e01b815292935090916001600160a01b03909116906370a0823190611dd6903090600401614497565b60206040518083038186803b158015611dee57600080fd5b505afa158015611e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e269190614623565b90506000611e3483836146d4565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401611e849190614497565b60206040518083038186803b158015611e9c57600080fd5b505afa158015611eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed49190614623565b905080821115611eef57611ee88183614652565b9a50611efc565b611ef98282614652565b99505b6000611f08898d6146d4565b905080851015611fdc576000611f27611f218784614652565b86611a0f565b90508015611fda57611f3b81888b88612934565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611f87903090600401614497565b60206040518083038186803b158015611f9f57600080fd5b505afa158015611fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd79190614623565b95505b505b611fe6858a611a0f565b9950898511611ff6576000612009565b6120096120038b87614652565b8d611a0f565b6040516302df682360e11b815260048101829052602481018d9052604481018c9052909c507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b15801561207c57600080fd5b505af1158015612090573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a08231906120e3903090600401614497565b60206040518083038186803b1580156120fb57600080fd5b505afa15801561210f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121339190614623565b905061213f818861315d565b6009546040516370a0823160e01b8152600091829161224f91839182916001600160a01b0316906370a082319061217a903090600401614497565b60206040518083038186803b15801561219257600080fd5b505afa1580156121a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ca9190614623565b6000546040516370a0823160e01b81526001600160a01b03909116906370a08231906121fa903090600401614497565b60206040518083038186803b15801561221257600080fd5b505afa158015612226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224a9190614623565b613270565b9092509050801561226957612264818a6138ce565b6122ea565b81156122ea5760085460405163a415bcad60e01b81526001600160a01b039182166004820152602481018490526002604482015260006064820152306084820152908a169063a415bcad9060a401600060405180830381600087803b1580156122d157600080fd5b505af11580156122e5573d6000803e3d6000fd5b505050505b6008546040516370a0823160e01b81526000916001600160a01b0316906370a082319061231b903090600401614497565b60206040518083038186803b15801561233357600080fd5b505afa158015612347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236b9190614623565b9050801561237c5761237c8161394e565b50505050505050505050505050909192565b606060006117f6836139c4565b6123a481613a20565b6008546123db906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083613ddc565b600254610588906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613ddc565b60008054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561246b57600080fd5b505afa15801561247f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a3919061459c565b6001600160a01b0316146124ef5760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b6044820152606401610531565b6009546040516370a0823160e01b8152610588916001600160a01b0316906370a0823190612521903090600401614497565b60206040518083038186803b15801561253957600080fd5b505afa15801561254d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125719190614623565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125ca57600080fd5b505afa1580156125de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612602919061459c565b6138ce565b804710156126575760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610531565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146126a4576040519150601f19603f3d011682016040523d82523d6000602084013e6126a9565b606091505b5050905080610b685760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610531565b60008181526001830160205260408120546127675750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561096d565b50600061096d565b60008181526001830160205260408120548015612858576000612793600183614652565b85549091506000906127a790600190614652565b905081811461280c5760008660000182815481106127c7576127c761471c565b90600052602060002001549050808760000184815481106127ea576127ea61471c565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061281d5761281d614732565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061096d565b600091505061096d565b60006128b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f009092919063ffffffff16565b805190915015610b6857808060200190518101906128d5919061475d565b610b685760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610531565b60006129436000868585613270565b91505080156129565761295681856138ce565b600080546040516370a0823160e01b8152612a87918891612a82916001600160a01b0316906370a082319061298f903090600401614497565b60206040518083038186803b1580156129a757600080fd5b505afa1580156129bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129df9190614623565b6000546040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926370a0823192612a32929190911690600401614497565b60206040518083038186803b158015612a4a57600080fd5b505afa158015612a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a829190614623565b611a0f565b905080856001600160a01b03166369328dec7f000000000000000000000000000000000000000000000000000000000000000084306040518463ffffffff1660e01b8152600401612ada93929190614778565b602060405180830381600087803b158015612af457600080fd5b505af1158015612b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2c9190614623565b1460405180604001604052806002815260200161323960f01b81525090612b665760405162461bcd60e51b81526004016105319190614547565b50505050505050565b6000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612bc69190614497565b60206040518083038186803b158015612bde57600080fd5b505afa158015612bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c169190614623565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015612c6f57600080fd5b505afa158015612c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca79190614623565b612cb1919061479b565b612cbb91906147ba565b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906115c2903090600401614497565b600080548190612d03906001600160a01b0316613f0f565b8151919350915060005b81811015612d84576000838281518110612d2957612d2961471c565b60200260200101511115612d7457612d74848281518110612d4c57612d4c61471c565b602002602001015186858481518110612d6757612d6761471c565b6020026020010151614058565b612d7d816147dc565b9050612d0d565b5050505050565b6002546008546040516353b609b560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291821660248201526044810185905260009291909116906353b609b590606401602060405180830381600087803b158015612e0857600080fd5b505af1158015612e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e409190614623565b90508015610b68576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612e97903090600401614497565b60206040518083038186803b158015612eaf57600080fd5b505afa158015612ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee79190614623565b905080821115612fdf576000612efd8284614652565b905080846001600160a01b03166369328dec7f000000000000000000000000000000000000000000000000000000000000000084306040518463ffffffff1660e01b8152600401612f5093929190614778565b602060405180830381600087803b158015612f6a57600080fd5b505af1158015612f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa29190614623565b1460405180604001604052806002815260200161323960f01b81525090612fdc5760405162461bcd60e51b81526004016105319190614547565b50505b6002546008546040516381cc619b60e01b81526001600160a01b03928316926381cc619b9261303c927f000000000000000000000000000000000000000000000000000000000000000092909116908990889030906004016146ec565b602060405180830381600087803b15801561305657600080fd5b505af115801561306a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d849190614623565b80156105885761309d816140ea565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a08231906130ce903090600401614497565b60206040518083038186803b1580156130e657600080fd5b505afa1580156130fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311e9190614623565b905080156106cf576008546106cf906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083614058565b81156106cf5760405163617ba03760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490523060448301526000606483015282169063617ba03790608401600060405180830381600087803b1580156131da57600080fd5b505af19250505080156131eb575060015b6106cf576131f76147f7565b806308c379a01415613264575061320c614856565b806132175750613266565b613220816148e0565b611a9b60f11b14610b685760405162461bcd60e51b815260206004820152600e60248201526d19195c1bdcda5d0819985a5b195960921b6044820152606401610531565b505b3d6000803e3d6000fd5b60008085158061327e575084155b6132be5760405162461bcd60e51b8152602060048201526011602482015270616c6c2d696e7075742d67742d7a65726f60781b6044820152606401610531565b6007546132d0575060009050826138c5565b60008087116132f6578584116132e7576000613300565b6132f18685614652565b613300565b61330087856146d4565b9050806133145760008592509250506138c5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561336f57600080fd5b505afa158015613383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a7919061459c565b60085460405163b3596f0760e01b81529192506000916001600160a01b038085169263b3596f07926133df9290911690600401614497565b60206040518083038186803b1580156133f757600080fd5b505afa15801561340b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342f9190614623565b90506000826001600160a01b031663b3596f077f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161347f9190614497565b60206040518083038186803b15801561349757600080fd5b505afa1580156134ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cf9190614623565b90508115806134dc575080155b156134f15760008895509550505050506138c5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e860accb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561354c57600080fd5b505afa158015613560573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613584919061459c565b6001600160a01b0316633e1501417f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016135cf9190614497565b6101406040518083038186803b1580156135e857600080fd5b505afa1580156135fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136209190614904565b505050505050505091505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561368657600080fd5b505afa15801561369a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136be919061499b565b6136c990600a614aa2565b6136d59061271061479b565b836136e0848961479b565b6136ea919061479b565b6136f491906147ba565b9050600084600860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561374757600080fd5b505afa15801561375b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377f919061499b565b61378a90600a614aa2565b613794908461479b565b61379e91906147ba565b9050806137b85760008b98509850505050505050506138c5565b6000612710600754836137cb919061479b565b6137d591906147ba565b90506000612710600654846137ea919061479b565b6137f491906147ba565b9050818d111561380f57613808818e614652565b99506138bb565b8c8111156138bb576138218d82614652565b600854600a546040516370a0823160e01b8152929d506000926001600160a01b03928316926370a082319261385b92911690600401614497565b60206040518083038186803b15801561387357600080fd5b505afa158015613887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ab9190614623565b9050808c11156138b957809b505b505b5050505050505050505b94509492505050565b6138d7826142a7565b60085460405163573ade8160e01b81526001600160a01b03918216600482015260248101849052600260448201523060648201529082169063573ade8190608401600060405180830381600087803b15801561393257600080fd5b505af1158015613946573d6000803e3d6000fd5b505050505050565b60405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b1580156139b057600080fd5b505af1158015612d84573d6000803e3d6000fd5b606081600001805480602002602001604051908101604052809291908181526020018280548015613a1457602002820191906000526020600020905b815481526020019060010190808311613a00575b50505050509050919050565b613a29816142b0565b6000600260009054906101000a90046001600160a01b03169050613b087f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015613a9f57600080fd5b505afa158015613ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ad7919061459c565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084613ddc565b613b3c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284613ddc565b613be37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015613b9857600080fd5b505afa158015613bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd0919061459c565b6008546001600160a01b03169084613ddc565b600854613bfa906001600160a01b03168284613ddc565b60008054906101000a90046001600160a01b03166001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b158015613c4657600080fd5b505afa925050508015613c76575060408051601f3d908101601f19168201909252613c739181019061459c565b60015b613c7e575050565b6000816001600160a01b031663b45ac1a96040518163ffffffff1660e01b815260040160006040518083038186803b158015613cb957600080fd5b505afa158015613ccd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613cf59190810190614b4f565b905060005b8151811015612d84577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316828281518110613d3f57613d3f61471c565b60200260200101516001600160a01b031614158015613d90575060085482516001600160a01b0390911690839083908110613d7c57613d7c61471c565b60200260200101516001600160a01b031614155b15613dcc57613dcc8486848481518110613dac57613dac61471c565b60200260200101516001600160a01b0316613ddc9092919063ffffffff16565b613dd5816147dc565b9050613cfa565b801580613e655750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015613e2b57600080fd5b505afa158015613e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e639190614623565b155b613ed05760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610531565b6040516001600160a01b038316602482015260448101829052610b6890849063095ea7b360e01b9060640161183e565b6060611ab18484600085614304565b606080826001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b158015613f4b57600080fd5b505afa925050508015613f7b575060408051601f3d908101601f19168201909252613f789181019061459c565b60015b613f8457915091565b604080516001808252818301909252600091602080830190803683370190505090508481600081518110613fba57613fba61471c565b6001600160a01b03928316602091820292909201015260405163bb492bf560e01b81529083169063bb492bf590613ff79084903090600401614b84565b600060405180830381600087803b15801561401157600080fd5b505af1158015614025573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261404d9190810190614bae565b935093505050915091565b600254604051636ccb2b0160e01b81526001600160a01b0390911690636ccb2b01906140919086908690869060019030906004016146ec565b602060405180830381600087803b1580156140ab57600080fd5b505af19250505080156140db575060408051601f3d908101601f191682019092526140d891810190614623565b60015b6140e457505050565b50505050565b80156105885760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561414b57600080fd5b505afa15801561415f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141839190614623565b905060008161419a84670de0b6b3a764000061479b565b6141a491906147ba565b9050670de0b6b3a76400006141b9838361479b565b6141c391906147ba565b83116141cf57806141da565b6141da8160016146d4565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d61425b837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612a329190614497565b6040518263ffffffff1660e01b815260040161427991815260200190565b600060405180830381600087803b15801561429357600080fd5b505af1158015612b66573d6000803e3d6000fd5b610588816140ea565b6105886001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613ddc565b6060824710156143655760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610531565b843b6143b35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610531565b600080866001600160a01b031685876040516143cf9190614c74565b60006040518083038185875af1925050503d806000811461440c576040519150601f19603f3d011682016040523d82523d6000602084013e614411565b606091505b509150915061442182828661442c565b979650505050505050565b6060831561443b5750816117f6565b82511561444b5782518084602001fd5b8160405162461bcd60e51b81526004016105319190614547565b6001600160a01b038116811461058857600080fd5b60006020828403121561448c57600080fd5b81356117f681614465565b6001600160a01b0391909116815260200190565b6000602082840312156144bd57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156144fd5781516001600160a01b0316875295820195908201906001016144d8565b509495945050505050565b6020815260006117f660208301846144c4565b60005b8381101561453657818101518382015260200161451e565b838111156140e45750506000910152565b602081526000825180602084015261456681604085016020870161451b565b601f01601f19169190910160400192915050565b6000806040838503121561458d57600080fd5b50508035926020909101359150565b6000602082840312156145ae57600080fd5b81516117f681614465565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60006020828403121561463557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156146645761466461463c565b500390565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600181811c908216806146ad57607f821691505b602082108114156146ce57634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156146e7576146e761463c565b500190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b8051801515811461475857600080fd5b919050565b60006020828403121561476f57600080fd5b6117f682614748565b6001600160a01b0393841681526020810192909252909116604082015260600190565b60008160001904831182151516156147b5576147b561463c565b500290565b6000826147d757634e487b7160e01b600052601260045260246000fd5b500490565b60006000198214156147f0576147f061463c565b5060010190565b600060033d11156148105760046000803e5060005160e01c5b90565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561484f5761484f614813565b6040525050565b600060443d10156148645790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561489457505050505090565b82850191508151818111156148ac5750505050505090565b843d87010160208285010111156148c65750505050505090565b6148d560208286010187614829565b509095945050505050565b805160208083015191908110156146ce5760001960209190910360031b1b16919050565b6000806000806000806000806000806101408b8d03121561492457600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955061495060a08c01614748565b945061495e60c08c01614748565b935061496c60e08c01614748565b925061497b6101008c01614748565b915061498a6101208c01614748565b90509295989b9194979a5092959850565b6000602082840312156149ad57600080fd5b815160ff811681146117f657600080fd5b600181815b808511156149f95781600019048211156149df576149df61463c565b808516156149ec57918102915b93841c93908002906149c3565b509250929050565b600082614a105750600161096d565b81614a1d5750600061096d565b8160018114614a335760028114614a3d57614a59565b600191505061096d565b60ff841115614a4e57614a4e61463c565b50506001821b61096d565b5060208310610133831016604e8410600b8410161715614a7c575081810a61096d565b614a8683836149be565b8060001904821115614a9a57614a9a61463c565b029392505050565b60006117f660ff841683614a01565b600067ffffffffffffffff821115614acb57614acb614813565b5060051b60200190565b600082601f830112614ae657600080fd5b81516020614af382614ab1565b604051614b008282614829565b83815260059390931b8501820192828101915086841115614b2057600080fd5b8286015b84811015614b44578051614b3781614465565b8352918301918301614b24565b509695505050505050565b600060208284031215614b6157600080fd5b815167ffffffffffffffff811115614b7857600080fd5b611ab184828501614ad5565b604081526000614b9760408301856144c4565b905060018060a01b03831660208301529392505050565b60008060408385031215614bc157600080fd5b825167ffffffffffffffff80821115614bd957600080fd5b614be586838701614ad5565b9350602091508185015181811115614bfc57600080fd5b85019050601f81018613614c0f57600080fd5b8051614c1a81614ab1565b604051614c278282614829565b82815260059290921b8301840191848101915088831115614c4757600080fd5b928401925b82841015614c6557835182529284019290840190614c4c565b80955050505050509250929050565b60008251614c8681846020870161451b565b919091019291505056fea2646970667358221220dd433f29a4c75adb0dd2e7564931168ec4e91d36bb0ead962a409c80b0ecbb4364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061019a5760003560e01c8063a3f4df7e116100e4578063d8dfeb4511610092578063d8dfeb45146103cb578063e00af4a7146103f1578063e260d74714610404578063e5328e061461040d578063ec78e83214610415578063fb7ee10214610428578063fc0c546a1461043b578063ffa1ad741461044c57600080fd5b8063a3f4df7e1461031c578063b2016bd414610331578063c415b95c14610358578063cdaabe411461036b578063ce5494bb14610392578063d2c35ce8146103a5578063d3033c39146103b857600080fd5b8063440d72481161014c578063440d724814610264578063456dc17a146102875780634fc90c2c1461029a5780636719578c146102a25780637d7c2a1c146102c957806390d67514146102ec578063951dc22c146102ff57806399b71d5c1461031457600080fd5b80630181686c1461019f57806314ae9f2e146101bb57806316f0115b146101d057806329ba73ed146102045780632b3297f91461022b5780632e1a7d4d1461023e5780634032b72b14610251575b600080fd5b6101a860075481565b6040519081526020015b60405180910390f35b6101ce6101c936600461447a565b610470565b005b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6040516101b29190614497565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6002546101f7906001600160a01b031681565b6101ce61024c3660046144ab565b61058b565b6101ce61025f36600461447a565b6107e2565b61027761027236600461447a565b6108ee565b60405190151581526020016101b2565b6008546101f7906001600160a01b031681565b6101ce610973565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6102d1610b6d565b604080519384526020840192909252908201526060016101b2565b6009546101f7906001600160a01b031681565b610307610bad565b6040516101b29190614508565b6101ce610bbe565b610324610bfa565b6040516101b29190614547565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6001546101f7906001600160a01b031681565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6101ce6103a036600461447a565b610c88565b6101ce6103b336600461447a565b610f52565b6101ce6103c636600461447a565b61111b565b7f00000000000000000000000000000000000000000000000000000000000000006101f7565b6101ce6103ff36600461447a565b6112d8565b6101a860065481565b6101a86114f3565b6000546101f7906001600160a01b031681565b6101ce61043636600461457a565b61161c565b6000546001600160a01b03166101f7565b610324604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c957600080fd5b505afa1580156104dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610501919061459c565b6001600160a01b0316336001600160a01b03161461053a5760405162461bcd60e51b8152600401610531906145b9565b60405180910390fd5b6105456003826117fd565b6105885760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610531565b50565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146105d35760405162461bcd60e51b8152600401610531906145f0565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610622903090600401614497565b60206040518083038186803b15801561063a57600080fd5b505afa15801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190614623565b90508181106106d3576106cf6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611812565b5050565b6106e56106e08284614652565b611875565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610731903090600401614497565b60206040518083038186803b15801561074957600080fd5b505afa15801561075d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107819190614623565b90506106cf7f00000000000000000000000000000000000000000000000000000000000000006107b18484611a0f565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611812565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561083b57600080fd5b505afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610873919061459c565b6001600160a01b0316336001600160a01b0316146108a35760405162461bcd60e51b8152600401610531906145b9565b6108ae6003826117e1565b6105885760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610531565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148061093d57506000546001600160a01b038381169116145b8061095557506009546001600160a01b038381169116145b8061096d57506008546001600160a01b038381169116145b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ce57600080fd5b505afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a06919061459c565b90506001600160a01b03811615610a765760405163d279c19160e01b81526001600160a01b0382169063d279c19190610a43903090600401614497565b600060405180830381600087803b158015610a5d57600080fd5b505af1158015610a71573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610ac5903090600401614497565b60206040518083038186803b158015610add57600080fd5b505afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190614623565b905080156106cf57610b687f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083611a25565b505050565b60008080610b7e335b600390611ab9565b610b9a5760405162461bcd60e51b815260040161053190614669565b610ba2611adb565b925092509250909192565b6060610bb9600361238e565b905090565b610bc733610b76565b610be35760405162461bcd60e51b815260040161053190614669565b610bed600061239b565b610bf860001961239b565b565b60058054610c0790614699565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3390614699565b8015610c805780601f10610c5557610100808354040283529160200191610c80565b820191906000526020600020905b815481529060010190602001808311610c6357829003601f168201915b505050505081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610cd05760405162461bcd60e51b8152600401610531906145f0565b6001600160a01b038116610d265760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610531565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8957600080fd5b505afa158015610d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc1919061459c565b6001600160a01b031614610e105760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610531565b610e1981612415565b6000546040516370a0823160e01b8152610eb29183916001600160a01b03909116906370a0823190610e4f903090600401614497565b60206040518083038186803b158015610e6757600080fd5b505afa158015610e7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9f9190614623565b6000546001600160a01b03169190611812565b610588817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610f029190614497565b60206040518083038186803b158015610f1a57600080fd5b505afa158015610f2e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b19190614623565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fab57600080fd5b505afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe3919061459c565b6001600160a01b0316336001600160a01b0316146110135760405162461bcd60e51b8152600401610531906145b9565b6001600160a01b0381166110695760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610531565b6001546001600160a01b03828116911614156110bf5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610531565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561117457600080fd5b505afa158015611188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ac919061459c565b6001600160a01b0316336001600160a01b0316146111dc5760405162461bcd60e51b8152600401610531906145b9565b6001600160a01b03811661122c5760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b6044820152606401610531565b6002546001600160a01b038281169116141561127c5760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b6044820152606401610531565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6112e133610b76565b6112fd5760405162461bcd60e51b815260040161053190614669565b6001546001600160a01b031661134d5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610531565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156113cf5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610531565b6113d8816108ee565b1561141c5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610531565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561145757600154610588906001600160a01b031647612607565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611486903090600401614497565b60206040518083038186803b15801561149e57600080fd5b505afa1580156114b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d69190614623565b6001549091506106cf906001600160a01b03848116911683611812565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611542903090600401614497565b60206040518083038186803b15801561155a57600080fd5b505afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190614623565b6000546040516370a0823160e01b81526001600160a01b03909116906370a08231906115c2903090600401614497565b60206040518083038186803b1580156115da57600080fd5b505afa1580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116129190614623565b610bb991906146d4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561167557600080fd5b505afa158015611689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ad919061459c565b6001600160a01b0316336001600160a01b0316146116dd5760405162461bcd60e51b8152600401610531906145b9565b61271081106117295760405162461bcd60e51b81526020600482015260186024820152771a5b9d985b1a590b5b585e0b589bdc9c9bddcb5b1a5b5a5d60421b6044820152606401610531565b80158015611735575081155b8061173f57508181115b61178b5760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e0000006044820152606401610531565b6006546007546040805192835260208301859052820152606081018290527fedd77444afdf63401315e81ffe86d08f7865796e8ad2e11acf1d56a1393f07d59060800160405180910390a1600691909155600755565b60006117f6836001600160a01b038416612720565b9392505050565b60006117f6836001600160a01b03841661276f565b6040516001600160a01b038316602482015260448101829052610b6890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612862565b610588817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d257600080fd5b505afa1580156118e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190a919061459c565b6009546040516370a0823160e01b81526001600160a01b03909116906370a082319061193a903090600401614497565b60206040518083038186803b15801561195257600080fd5b505afa158015611966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198a9190614623565b6000546040516370a0823160e01b81526001600160a01b03909116906370a08231906119ba903090600401614497565b60206040518083038186803b1580156119d257600080fd5b505afa1580156119e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0a9190614623565b612934565b6000818310611a1e57816117f6565b5090919050565b600254604051636ccb2b0160e01b81526000916001600160a01b031690636ccb2b0190611a5f9087908790879060019030906004016146ec565b602060405180830381600087803b158015611a7957600080fd5b505af1158015611a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab19190614623565b949350505050565b6001600160a01b038116600090815260018301602052604081205415156117f6565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401611b2d9190614497565b60206040518083038186803b158015611b4557600080fd5b505afa158015611b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7d9190614623565b6009546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190611bb3903090600401614497565b60206040518083038186803b158015611bcb57600080fd5b505afa158015611bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c039190614623565b90506000611c0f612b6f565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c6c57600080fd5b505afa158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca4919061459c565b9050611ccf7f0000000000000000000000000000000000000000000000000000000000000000612ceb565b81831115611cef57611cea611ce48385614652565b82612d8b565b611d01565b611d01611cfc8484614652565b61308e565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611d50903090600401614497565b60206040518083038186803b158015611d6857600080fd5b505afa158015611d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da09190614623565b600080546040516370a0823160e01b815292935090916001600160a01b03909116906370a0823190611dd6903090600401614497565b60206040518083038186803b158015611dee57600080fd5b505afa158015611e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e269190614623565b90506000611e3483836146d4565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401611e849190614497565b60206040518083038186803b158015611e9c57600080fd5b505afa158015611eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed49190614623565b905080821115611eef57611ee88183614652565b9a50611efc565b611ef98282614652565b99505b6000611f08898d6146d4565b905080851015611fdc576000611f27611f218784614652565b86611a0f565b90508015611fda57611f3b81888b88612934565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611f87903090600401614497565b60206040518083038186803b158015611f9f57600080fd5b505afa158015611fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd79190614623565b95505b505b611fe6858a611a0f565b9950898511611ff6576000612009565b6120096120038b87614652565b8d611a0f565b6040516302df682360e11b815260048101829052602481018d9052604481018c9052909c507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b15801561207c57600080fd5b505af1158015612090573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a08231906120e3903090600401614497565b60206040518083038186803b1580156120fb57600080fd5b505afa15801561210f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121339190614623565b905061213f818861315d565b6009546040516370a0823160e01b8152600091829161224f91839182916001600160a01b0316906370a082319061217a903090600401614497565b60206040518083038186803b15801561219257600080fd5b505afa1580156121a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ca9190614623565b6000546040516370a0823160e01b81526001600160a01b03909116906370a08231906121fa903090600401614497565b60206040518083038186803b15801561221257600080fd5b505afa158015612226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224a9190614623565b613270565b9092509050801561226957612264818a6138ce565b6122ea565b81156122ea5760085460405163a415bcad60e01b81526001600160a01b039182166004820152602481018490526002604482015260006064820152306084820152908a169063a415bcad9060a401600060405180830381600087803b1580156122d157600080fd5b505af11580156122e5573d6000803e3d6000fd5b505050505b6008546040516370a0823160e01b81526000916001600160a01b0316906370a082319061231b903090600401614497565b60206040518083038186803b15801561233357600080fd5b505afa158015612347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236b9190614623565b9050801561237c5761237c8161394e565b50505050505050505050505050909192565b606060006117f6836139c4565b6123a481613a20565b6008546123db906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083613ddc565b600254610588906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613ddc565b60008054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561246b57600080fd5b505afa15801561247f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a3919061459c565b6001600160a01b0316146124ef5760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b6044820152606401610531565b6009546040516370a0823160e01b8152610588916001600160a01b0316906370a0823190612521903090600401614497565b60206040518083038186803b15801561253957600080fd5b505afa15801561254d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125719190614623565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125ca57600080fd5b505afa1580156125de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612602919061459c565b6138ce565b804710156126575760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610531565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146126a4576040519150601f19603f3d011682016040523d82523d6000602084013e6126a9565b606091505b5050905080610b685760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610531565b60008181526001830160205260408120546127675750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561096d565b50600061096d565b60008181526001830160205260408120548015612858576000612793600183614652565b85549091506000906127a790600190614652565b905081811461280c5760008660000182815481106127c7576127c761471c565b90600052602060002001549050808760000184815481106127ea576127ea61471c565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061281d5761281d614732565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061096d565b600091505061096d565b60006128b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613f009092919063ffffffff16565b805190915015610b6857808060200190518101906128d5919061475d565b610b685760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610531565b60006129436000868585613270565b91505080156129565761295681856138ce565b600080546040516370a0823160e01b8152612a87918891612a82916001600160a01b0316906370a082319061298f903090600401614497565b60206040518083038186803b1580156129a757600080fd5b505afa1580156129bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129df9190614623565b6000546040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926370a0823192612a32929190911690600401614497565b60206040518083038186803b158015612a4a57600080fd5b505afa158015612a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a829190614623565b611a0f565b905080856001600160a01b03166369328dec7f000000000000000000000000000000000000000000000000000000000000000084306040518463ffffffff1660e01b8152600401612ada93929190614778565b602060405180830381600087803b158015612af457600080fd5b505af1158015612b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2c9190614623565b1460405180604001604052806002815260200161323960f01b81525090612b665760405162461bcd60e51b81526004016105319190614547565b50505050505050565b6000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612bc69190614497565b60206040518083038186803b158015612bde57600080fd5b505afa158015612bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c169190614623565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015612c6f57600080fd5b505afa158015612c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca79190614623565b612cb1919061479b565b612cbb91906147ba565b6008546040516370a0823160e01b81526001600160a01b03909116906370a08231906115c2903090600401614497565b600080548190612d03906001600160a01b0316613f0f565b8151919350915060005b81811015612d84576000838281518110612d2957612d2961471c565b60200260200101511115612d7457612d74848281518110612d4c57612d4c61471c565b602002602001015186858481518110612d6757612d6761471c565b6020026020010151614058565b612d7d816147dc565b9050612d0d565b5050505050565b6002546008546040516353b609b560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291821660248201526044810185905260009291909116906353b609b590606401602060405180830381600087803b158015612e0857600080fd5b505af1158015612e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e409190614623565b90508015610b68576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612e97903090600401614497565b60206040518083038186803b158015612eaf57600080fd5b505afa158015612ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee79190614623565b905080821115612fdf576000612efd8284614652565b905080846001600160a01b03166369328dec7f000000000000000000000000000000000000000000000000000000000000000084306040518463ffffffff1660e01b8152600401612f5093929190614778565b602060405180830381600087803b158015612f6a57600080fd5b505af1158015612f7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa29190614623565b1460405180604001604052806002815260200161323960f01b81525090612fdc5760405162461bcd60e51b81526004016105319190614547565b50505b6002546008546040516381cc619b60e01b81526001600160a01b03928316926381cc619b9261303c927f000000000000000000000000000000000000000000000000000000000000000092909116908990889030906004016146ec565b602060405180830381600087803b15801561305657600080fd5b505af115801561306a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d849190614623565b80156105885761309d816140ea565b6008546040516370a0823160e01b81526000916001600160a01b0316906370a08231906130ce903090600401614497565b60206040518083038186803b1580156130e657600080fd5b505afa1580156130fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311e9190614623565b905080156106cf576008546106cf906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083614058565b81156106cf5760405163617ba03760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490523060448301526000606483015282169063617ba03790608401600060405180830381600087803b1580156131da57600080fd5b505af19250505080156131eb575060015b6106cf576131f76147f7565b806308c379a01415613264575061320c614856565b806132175750613266565b613220816148e0565b611a9b60f11b14610b685760405162461bcd60e51b815260206004820152600e60248201526d19195c1bdcda5d0819985a5b195960921b6044820152606401610531565b505b3d6000803e3d6000fd5b60008085158061327e575084155b6132be5760405162461bcd60e51b8152602060048201526011602482015270616c6c2d696e7075742d67742d7a65726f60781b6044820152606401610531565b6007546132d0575060009050826138c5565b60008087116132f6578584116132e7576000613300565b6132f18685614652565b613300565b61330087856146d4565b9050806133145760008592509250506138c5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fca513a86040518163ffffffff1660e01b815260040160206040518083038186803b15801561336f57600080fd5b505afa158015613383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a7919061459c565b60085460405163b3596f0760e01b81529192506000916001600160a01b038085169263b3596f07926133df9290911690600401614497565b60206040518083038186803b1580156133f757600080fd5b505afa15801561340b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061342f9190614623565b90506000826001600160a01b031663b3596f077f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161347f9190614497565b60206040518083038186803b15801561349757600080fd5b505afa1580156134ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cf9190614623565b90508115806134dc575080155b156134f15760008895509550505050506138c5565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e860accb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561354c57600080fd5b505afa158015613560573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613584919061459c565b6001600160a01b0316633e1501417f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016135cf9190614497565b6101406040518083038186803b1580156135e857600080fd5b505afa1580156135fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136209190614904565b505050505050505091505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561368657600080fd5b505afa15801561369a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136be919061499b565b6136c990600a614aa2565b6136d59061271061479b565b836136e0848961479b565b6136ea919061479b565b6136f491906147ba565b9050600084600860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561374757600080fd5b505afa15801561375b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377f919061499b565b61378a90600a614aa2565b613794908461479b565b61379e91906147ba565b9050806137b85760008b98509850505050505050506138c5565b6000612710600754836137cb919061479b565b6137d591906147ba565b90506000612710600654846137ea919061479b565b6137f491906147ba565b9050818d111561380f57613808818e614652565b99506138bb565b8c8111156138bb576138218d82614652565b600854600a546040516370a0823160e01b8152929d506000926001600160a01b03928316926370a082319261385b92911690600401614497565b60206040518083038186803b15801561387357600080fd5b505afa158015613887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ab9190614623565b9050808c11156138b957809b505b505b5050505050505050505b94509492505050565b6138d7826142a7565b60085460405163573ade8160e01b81526001600160a01b03918216600482015260248101849052600260448201523060648201529082169063573ade8190608401600060405180830381600087803b15801561393257600080fd5b505af1158015613946573d6000803e3d6000fd5b505050505050565b60405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b1580156139b057600080fd5b505af1158015612d84573d6000803e3d6000fd5b606081600001805480602002602001604051908101604052809291908181526020018280548015613a1457602002820191906000526020600020905b815481526020019060010190808311613a00575b50505050509050919050565b613a29816142b0565b6000600260009054906101000a90046001600160a01b03169050613b087f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015613a9f57600080fd5b505afa158015613ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ad7919061459c565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084613ddc565b613b3c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284613ddc565b613be37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015613b9857600080fd5b505afa158015613bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd0919061459c565b6008546001600160a01b03169084613ddc565b600854613bfa906001600160a01b03168284613ddc565b60008054906101000a90046001600160a01b03166001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b158015613c4657600080fd5b505afa925050508015613c76575060408051601f3d908101601f19168201909252613c739181019061459c565b60015b613c7e575050565b6000816001600160a01b031663b45ac1a96040518163ffffffff1660e01b815260040160006040518083038186803b158015613cb957600080fd5b505afa158015613ccd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613cf59190810190614b4f565b905060005b8151811015612d84577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316828281518110613d3f57613d3f61471c565b60200260200101516001600160a01b031614158015613d90575060085482516001600160a01b0390911690839083908110613d7c57613d7c61471c565b60200260200101516001600160a01b031614155b15613dcc57613dcc8486848481518110613dac57613dac61471c565b60200260200101516001600160a01b0316613ddc9092919063ffffffff16565b613dd5816147dc565b9050613cfa565b801580613e655750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015613e2b57600080fd5b505afa158015613e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e639190614623565b155b613ed05760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610531565b6040516001600160a01b038316602482015260448101829052610b6890849063095ea7b360e01b9060640161183e565b6060611ab18484600085614304565b606080826001600160a01b03166375d264136040518163ffffffff1660e01b815260040160206040518083038186803b158015613f4b57600080fd5b505afa925050508015613f7b575060408051601f3d908101601f19168201909252613f789181019061459c565b60015b613f8457915091565b604080516001808252818301909252600091602080830190803683370190505090508481600081518110613fba57613fba61471c565b6001600160a01b03928316602091820292909201015260405163bb492bf560e01b81529083169063bb492bf590613ff79084903090600401614b84565b600060405180830381600087803b15801561401157600080fd5b505af1158015614025573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261404d9190810190614bae565b935093505050915091565b600254604051636ccb2b0160e01b81526001600160a01b0390911690636ccb2b01906140919086908690869060019030906004016146ec565b602060405180830381600087803b1580156140ab57600080fd5b505af19250505080156140db575060408051601f3d908101601f191682019092526140d891810190614623565b60015b6140e457505050565b50505050565b80156105885760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561414b57600080fd5b505afa15801561415f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141839190614623565b905060008161419a84670de0b6b3a764000061479b565b6141a491906147ba565b9050670de0b6b3a76400006141b9838361479b565b6141c391906147ba565b83116141cf57806141da565b6141da8160016146d4565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d61425b837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612a329190614497565b6040518263ffffffff1660e01b815260040161427991815260200190565b600060405180830381600087803b15801561429357600080fd5b505af1158015612b66573d6000803e3d6000fd5b610588816140ea565b6105886001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613ddc565b6060824710156143655760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610531565b843b6143b35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610531565b600080866001600160a01b031685876040516143cf9190614c74565b60006040518083038185875af1925050503d806000811461440c576040519150601f19603f3d011682016040523d82523d6000602084013e614411565b606091505b509150915061442182828661442c565b979650505050505050565b6060831561443b5750816117f6565b82511561444b5782518084602001fd5b8160405162461bcd60e51b81526004016105319190614547565b6001600160a01b038116811461058857600080fd5b60006020828403121561448c57600080fd5b81356117f681614465565b6001600160a01b0391909116815260200190565b6000602082840312156144bd57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156144fd5781516001600160a01b0316875295820195908201906001016144d8565b509495945050505050565b6020815260006117f660208301846144c4565b60005b8381101561453657818101518382015260200161451e565b838111156140e45750506000910152565b602081526000825180602084015261456681604085016020870161451b565b601f01601f19169190910160400192915050565b6000806040838503121561458d57600080fd5b50508035926020909101359150565b6000602082840312156145ae57600080fd5b81516117f681614465565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60006020828403121561463557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156146645761466461463c565b500390565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600181811c908216806146ad57607f821691505b602082108114156146ce57634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156146e7576146e761463c565b500190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b8051801515811461475857600080fd5b919050565b60006020828403121561476f57600080fd5b6117f682614748565b6001600160a01b0393841681526020810192909252909116604082015260600190565b60008160001904831182151516156147b5576147b561463c565b500290565b6000826147d757634e487b7160e01b600052601260045260246000fd5b500490565b60006000198214156147f0576147f061463c565b5060010190565b600060033d11156148105760046000803e5060005160e01c5b90565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561484f5761484f614813565b6040525050565b600060443d10156148645790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561489457505050505090565b82850191508151818111156148ac5750505050505090565b843d87010160208285010111156148c65750505050505090565b6148d560208286010187614829565b509095945050505050565b805160208083015191908110156146ce5760001960209190910360031b1b16919050565b6000806000806000806000806000806101408b8d03121561492457600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955061495060a08c01614748565b945061495e60c08c01614748565b935061496c60e08c01614748565b925061497b6101008c01614748565b915061498a6101208c01614748565b90509295989b9194979a5092959850565b6000602082840312156149ad57600080fd5b815160ff811681146117f657600080fd5b600181815b808511156149f95781600019048211156149df576149df61463c565b808516156149ec57918102915b93841c93908002906149c3565b509250929050565b600082614a105750600161096d565b81614a1d5750600061096d565b8160018114614a335760028114614a3d57614a59565b600191505061096d565b60ff841115614a4e57614a4e61463c565b50506001821b61096d565b5060208310610133831016604e8410600b8410161715614a7c575081810a61096d565b614a8683836149be565b8060001904821115614a9a57614a9a61463c565b029392505050565b60006117f660ff841683614a01565b600067ffffffffffffffff821115614acb57614acb614813565b5060051b60200190565b600082601f830112614ae657600080fd5b81516020614af382614ab1565b604051614b008282614829565b83815260059390931b8501820192828101915086841115614b2057600080fd5b8286015b84811015614b44578051614b3781614465565b8352918301918301614b24565b509695505050505050565b600060208284031215614b6157600080fd5b815167ffffffffffffffff811115614b7857600080fd5b611ab184828501614ad5565b604081526000614b9760408301856144c4565b905060018060a01b03831660208301529392505050565b60008060408385031215614bc157600080fd5b825167ffffffffffffffff80821115614bd957600080fd5b614be586838701614ad5565b9350602091508185015181811115614bfc57600080fd5b85019050601f81018613614c0f57600080fd5b8051614c1a81614ab1565b604051614c278282614829565b82815260059290921b8301840191848101915088831115614c4757600080fd5b928401925b82841015614c6557835182529284019290840190614c4c565b80955050505050509250929050565b60008251614c8681846020870161451b565b919091019291505056fea2646970667358221220dd433f29a4c75adb0dd2e7564931168ec4e91d36bb0ead962a409c80b0ecbb4364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateBorrowLimit(uint256,uint256)": {
        "details": "It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything",
        "params": {
          "_maxBorrowLimit": "It is % of actual collateral factor of protocol",
          "_minBorrowLimit": "It is % of actual collateral factor of protocol"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "harvestVSP()": {
        "notice": "Claim VSP and convert to collateral token"
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "sweepERC20(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns total collateral locked in the strategy"
      },
      "updateBorrowLimit(uint256,uint256)": {
        "notice": "Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol."
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14273,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14279,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14282,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)13134"
      },
      {
        "astId": 14295,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3021_storage"
      },
      {
        "astId": 17635,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 17644,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "minBorrowLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 17647,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "maxBorrowLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 17652,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "borrowToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 17655,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "vdToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(AToken)10135"
      },
      {
        "astId": 17657,
        "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
        "label": "aBorrowToken",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AToken)10135": {
        "encoding": "inplace",
        "label": "contract AToken",
        "numberOfBytes": "20"
      },
      "t_contract(IRoutedSwapper)13134": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3021_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3020,
            "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2720_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2720_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2715,
            "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2719,
            "contract": "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol:AaveV3VesperXy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}