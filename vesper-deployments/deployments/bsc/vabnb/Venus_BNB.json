{
  "address": "0x2dBE5137541A704666b68D9751F728685893Aff4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapper_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiptToken_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COMPTROLLER",
      "outputs": [
        {
          "internalType": "contract Comptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xae2de070d6629285f50cdb5fea0f72d6032a82b6e70862d185a18d68691080e4",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x2dBE5137541A704666b68D9751F728685893Aff4",
    "transactionIndex": 0,
    "gasUsed": "2624046",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd3b32ec8ab4f78a4fe6970097f1e4d126e17537016e92daa4626ce10837f5b14",
    "transactionHash": "0xae2de070d6629285f50cdb5fea0f72d6032a82b6e70862d185a18d68691080e4",
    "logs": [],
    "blockNumber": 22517068,
    "cumulativeGasUsed": "2624046",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdAa2a8AF96f8Df51ED989E9D1fd3F86DF1EE882e",
    "0x2E99f1b571d1A3D7987f8CaDd9F4C5f2240354e2",
    "0xfD36E2c2a6789Db23113685031d7F16329158384",
    "0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63",
    "0xA07c5b74C9B40447a954e1466938b865b6BBea36",
    "Venus_BNB"
  ],
  "numDeployments": 1,
  "solcInputHash": "af61f2ef9792d0c44529c70788b48fbf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiptToken_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"contract Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"Deposit BNB/WBNB in Venus and earn interest.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"sweepERC20(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns total collateral locked in the strategy\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol\":\"VenusBNB\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance()\\n        external\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xddea3754059443771113c169ee1647ef9e83ee6ee509a911ceb7729fea62adc0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface TokenLike is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x003b4063990378d64f20d02f3da97c58338d85c0ca65955ed4a21065e2bb559a\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x193c2dd96da7b717f15736d5f13ccab8a7b4e90853b6cb922a864f1e8fdd9dc7\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface CToken {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow() external payable; // For ETH\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\\n\\n    function transfer(address user, uint256 amount) external returns (bool);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function transferFrom(\\n        address owner,\\n        address user,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function underlying() external view returns (address);\\n\\n    function comptroller() external view returns (address);\\n\\n    function totalBorrows() external view returns (uint256);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function markets(address market)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isCompted\\n        );\\n\\n    function oracle() external view returns (address);\\n\\n    function borrowCaps(address market) external view returns (uint256);\\n}\\n\\ninterface VenusComptroller is Comptroller {\\n    function claimVenus(address holder, address[] memory) external;\\n}\\n\\ninterface Oracle {\\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\\n\\n    function price(string memory symbol) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa38709cacf55903af151d78b8555f7d1a969ae4ee81736175cc2d321db2c26ac\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x81fccad24b581704ec06b681d0f75d2af86c461142bf0224e118779783271d10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance()\\n        external\\n        onlyKeeper\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _rebalance()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x947a4185d2e76769bda95e405241a2d8d1b17093955a486265cdf1d92893786b\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/Compound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/compound/ICompound.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Compound and earn interest.\\ncontract Compound is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"5.0.0\\\";\\n\\n    CToken internal cToken;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    Comptroller public immutable COMPTROLLER;\\n    address public rewardToken;\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _comptroller,\\n        address _rewardToken,\\n        address _receiptToken,\\n        string memory _name\\n    ) Strategy(_pool, _swapper, _receiptToken) {\\n        require(_receiptToken != address(0), \\\"cToken-address-is-zero\\\");\\n        cToken = CToken(_receiptToken);\\n        NAME = _name;\\n\\n        // Either can be address(0), for example in Rari Strategy\\n        COMPTROLLER = Comptroller(_comptroller);\\n        rewardToken = _rewardToken;\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _token == address(cToken);\\n    }\\n\\n    function tvl() external view override returns (uint256) {\\n        return\\n            ((cToken.balanceOf(address(this)) * cToken.exchangeRateStored()) / 1e18) +\\n            collateralToken.balanceOf(address(this));\\n    }\\n\\n    //solhint-disable-next-line no-empty-blocks\\n    function _afterRedeem() internal virtual {}\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(cToken), _amount);\\n        IERC20(rewardToken).safeApprove(address(swapper), _amount);\\n    }\\n\\n    //solhint-disable-next-line no-empty-blocks\\n    function _beforeMigration(address _newStrategy) internal virtual override {}\\n\\n    /// @notice Claim comp\\n    function _claimRewards() internal virtual {\\n        address[] memory _markets = new address[](1);\\n        _markets[0] = address(cToken);\\n        COMPTROLLER.claimComp(address(this), _markets);\\n    }\\n\\n    /// @notice Claim COMP and convert COMP into collateral token.\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {\\n        if (rewardToken != address(0)) {\\n            _claimRewards();\\n            uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n            if (_rewardAmount > 0) {\\n                _safeSwapExactInput(rewardToken, _toToken, _rewardAmount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit collateral in Compound.\\n     * @dev cETH works differently so ETH strategy will override this function.\\n     */\\n    function _deposit(uint256 _amount) internal virtual {\\n        if (_amount > 0) {\\n            require(cToken.mint(_amount) == 0, \\\"deposit-to-compound-failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Generate profit, loss and payback statement. Also claim rewards.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = _collateralHere + cToken.balanceOfUnderlying(address(this));\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_profitAndExcessDebt > _collateralHere) {\\n            _withdrawHere(_profitAndExcessDebt - _collateralHere);\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n    }\\n\\n    /**\\n     * @dev Generate report for pools accounting and also send profit and any payback to pool.\\n     */\\n    function _rebalance()\\n        internal\\n        virtual\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        (_profit, _loss, _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        // After reportEarning strategy may get more collateral from pool. Deposit those in Compound.\\n        _deposit(collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 _amount) internal override {\\n        // If _amount is very small and equivalent to 0 cToken then skip withdraw.\\n        uint256 _expectedCToken = (_amount * 1e18) / cToken.exchangeRateStored();\\n        if (_expectedCToken > 0) {\\n            // Get minimum of _amount and _available collateral and _availableLiquidity\\n            uint256 _withdrawAmount = Math.min(\\n                _amount,\\n                Math.min(cToken.balanceOfUnderlying(address(this)), cToken.getCash())\\n            );\\n            require(cToken.redeemUnderlying(_withdrawAmount) == 0, \\\"withdraw-from-compound-failed\\\");\\n            _afterRedeem();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04eb5cfa928a9211ab92afe8a5f01394f205efafb7f842a7e6d62893f723ddd3\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/bsc/Venus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../Compound.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n/// @title This strategy will deposit collateral token in Venus and earn interest.\\ncontract Venus is Compound {\\n    constructor(\\n        address pool_,\\n        address swapper_,\\n        address comptroller_,\\n        address rewardToken_,\\n        address receiptToken_,\\n        string memory name_\\n    ) Compound(pool_, swapper_, comptroller_, rewardToken_, receiptToken_, name_) {}\\n\\n    /// @notice Claim Venus (XVS)\\n    function _claimRewards() internal override {\\n        address[] memory _markets = new address[](1);\\n        _markets[0] = address(cToken);\\n        VenusComptroller(address(COMPTROLLER)).claimVenus(address(this), _markets);\\n    }\\n}\\n\",\"keccak256\":\"0xbd05e513f672004b64ed70471ba99de569448920040f766ab422b676186ff528\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./Venus.sol\\\";\\nimport \\\"vesper-pools/contracts/interfaces/token/IToken.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n/// @title Deposit BNB/WBNB in Venus and earn interest.\\ncontract VenusBNB is Venus {\\n    address internal constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    constructor(\\n        address pool_,\\n        address swapper_,\\n        address comptroller_,\\n        address rewardToken_,\\n        address receiptToken_,\\n        string memory name_\\n    ) Venus(pool_, swapper_, comptroller_, rewardToken_, receiptToken_, name_) {}\\n\\n    /// @dev Only receive BNB from either Venus Token or WBNB\\n    receive() external payable {\\n        require(msg.sender == address(cToken) || msg.sender == WBNB, \\\"not-allowed-to-send-ether\\\");\\n    }\\n\\n    /**\\n     * @dev This hook get called after collateral is redeemed from Venus\\n     * Vesper deals in WBNB as collateral so convert BNB to WBNB\\n     */\\n    function _afterRedeem() internal override {\\n        TokenLike(WBNB).deposit{value: address(this).balance}();\\n    }\\n\\n    /**\\n     * @dev During reinvest we have WBNB as collateral but Venus accepts BNB.\\n     * Withdraw BNB from WBNB before calling mint in Venus.\\n     */\\n    function _deposit(uint256 _amount) internal override {\\n        if (_amount > 0) {\\n            TokenLike(WBNB).withdraw(_amount);\\n            cToken.mint{value: _amount}();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6a7ccd66220f070c20c2e3a6fc4fe1d3411775750d1485f70c8cde594a7e4819\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620031d5380380620031d5833981016040819052620000349162000426565b8585858585858585858585858585836001600160a01b0383166200009f5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000f75760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f000000000000000000604482015260640162000096565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200015557600080fd5b505afa1580156200016a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000190919062000570565b6001600160a01b03908116608052600080546001600160a01b031916918316919091179055620001d7620001c13390565b6003620002df60201b620015041790919060201c565b620002195760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640162000096565b5050506001600160a01b038216620002745760405162461bcd60e51b815260206004820152601660248201527f63546f6b656e2d616464726573732d69732d7a65726f00000000000000000000604482015260640162000096565b600680546001600160a01b0319166001600160a01b0384161790558051620002a490600590602084019062000351565b5050506001600160a01b0391821660c052600780546001600160a01b0319169190921617905550620005d49c50505050505050505050505050565b6000620002f6836001600160a01b038416620002ff565b90505b92915050565b60008181526001830160205260408120546200034857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620002f9565b506000620002f9565b8280546200035f9062000597565b90600052602060002090601f016020900481019282620003835760008555620003ce565b82601f106200039e57805160ff1916838001178555620003ce565b82800160010185558215620003ce579182015b82811115620003ce578251825591602001919060010190620003b1565b50620003dc929150620003e0565b5090565b5b80821115620003dc5760008155600101620003e1565b6001600160a01b03811681146200040d57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c087890312156200044057600080fd5b86516200044d81620003f7565b809650506020808801516200046281620003f7565b60408901519096506200047581620003f7565b60608901519095506200048881620003f7565b60808901519094506200049b81620003f7565b60a08901519093506001600160401b0380821115620004b957600080fd5b818a0191508a601f830112620004ce57600080fd5b815181811115620004e357620004e362000410565b604051601f8201601f19908116603f011681019083821181831017156200050e576200050e62000410565b816040528281528d868487010111156200052757600080fd5b600093505b828410156200054b57848401860151818501870152928501926200052c565b828411156200055d5760008684830101525b8096505050505050509295509295509295565b6000602082840312156200058357600080fd5b81516200059081620003f7565b9392505050565b600181811c90821680620005ac57607f821691505b60208210811415620005ce57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051612b0d620006c8600039600081816102e401526126750152600081816101fb0152818161054a0152818161065d0152818161077901528181610857015281816108b301528181610adc01528181610b7901528181610d9c01528181610f650152818161189f015281816119eb01528181611e060152611ea60152600081816103a101528181610452015281816106bc01528181610757015281816107cb0152818161088a01528181610d00015281816111970152818161135d0152818161191d015281816119c901528181611a2101528181611f4701528181611f8501526120fe0152612b0d6000f3fe6080604052600436106101445760003560e01c8063b2016bd4116100b6578063e00af4a71161006f578063e00af4a714610476578063e5328e0614610496578063ec78e832146104b9578063f7c618c1146104d9578063fc0c546a146104f9578063ffa1ad741461051757600080fd5b8063b2016bd41461038f578063c415b95c146103c3578063ce5494bb146103e3578063d2c35ce814610403578063d3033c3914610423578063d8dfeb451461044357600080fd5b8063440d724811610108578063440d7248146102935780635f82c67e146102d25780637d7c2a1c14610306578063951dc22c1461033657806399b71d5c14610358578063a3f4df7e1461036d57600080fd5b806314ae9f2e146101c957806316f0115b146101e95780632b3297f9146102335780632e1a7d4d146102535780634032b72b1461027357600080fd5b366101c4576006546001600160a01b031633148061017557503373bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c145b6101c25760405162461bcd60e51b81526020600482015260196024820152783737ba16b0b63637bbb2b216ba3796b9b2b73216b2ba3432b960391b60448201526064015b60405180910390fd5b005b600080fd5b3480156101d557600080fd5b506101c26101e43660046127b8565b610548565b3480156101f557600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b60405161022a91906127d5565b60405180910390f35b34801561023f57600080fd5b5060025461021d906001600160a01b031681565b34801561025f57600080fd5b506101c261026e3660046127e9565b61065a565b34801561027f57600080fd5b506101c261028e3660046127b8565b6108b1565b34801561029f57600080fd5b506102c26102ae3660046127b8565b6006546001600160a01b0391821691161490565b604051901515815260200161022a565b3480156102de57600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561031257600080fd5b5061031b6109bd565b6040805193845260208401929092529082015260600161022a565b34801561034257600080fd5b5061034b6109fe565b60405161022a9190612846565b34801561036457600080fd5b506101c2610a0f565b34801561037957600080fd5b50610382610a4b565b60405161022a9190612885565b34801561039b57600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103cf57600080fd5b5060015461021d906001600160a01b031681565b3480156103ef57600080fd5b506101c26103fe3660046127b8565b610ad9565b34801561040f57600080fd5b506101c261041e3660046127b8565b610d9a565b34801561042f57600080fd5b506101c261043e3660046127b8565b610f63565b34801561044f57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061021d565b34801561048257600080fd5b506101c26104913660046127b8565b611120565b3480156104a257600080fd5b506104ab611343565b60405190815260200161022a565b3480156104c557600080fd5b5060005461021d906001600160a01b031681565b3480156104e557600080fd5b5060075461021d906001600160a01b031681565b34801561050557600080fd5b506000546001600160a01b031661021d565b34801561052357600080fd5b50610382604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d991906128b8565b6001600160a01b0316336001600160a01b0316146106095760405162461bcd60e51b81526004016101b9906128d5565b610614600382611522565b6106575760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016101b9565b50565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106a25760405162461bcd60e51b81526004016101b99061290c565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906106f19030906004016127d5565b60206040518083038186803b15801561070957600080fd5b505afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610741919061293f565b90508181106107a25761079e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611537565b5050565b6107b46107af828461296e565b61159f565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906108009030906004016127d5565b60206040518083038186803b15801561081857600080fd5b505afa15801561082c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610850919061293f565b905061079e7f0000000000000000000000000000000000000000000000000000000000000000610880848461182e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611537565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561090a57600080fd5b505afa15801561091e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094291906128b8565b6001600160a01b0316336001600160a01b0316146109725760405162461bcd60e51b81526004016101b9906128d5565b61097d600382611504565b6106575760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016101b9565b600080806109ce335b600390611844565b6109ea5760405162461bcd60e51b81526004016101b990612985565b6109f2611866565b9250925092505b909192565b6060610a0a60036119a8565b905090565b610a18336109c6565b610a345760405162461bcd60e51b81526004016101b990612985565b610a3e60006119bc565b610a496000196119bc565b565b60058054610a58906129b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a84906129b5565b8015610ad15780601f10610aa657610100808354040283529160200191610ad1565b820191906000526020600020905b815481529060010190602001808311610ab457829003601f168201915b505050505081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610b215760405162461bcd60e51b81526004016101b99061290c565b6001600160a01b038116610b775760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016101b9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bda57600080fd5b505afa158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1291906128b8565b6001600160a01b031614610c615760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016101b9565b6000546040516370a0823160e01b8152610cfa9183916001600160a01b03909116906370a0823190610c979030906004016127d5565b60206040518083038186803b158015610caf57600080fd5b505afa158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce7919061293f565b6000546001600160a01b03169190611537565b610657817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d4a91906127d5565b60206040518083038186803b158015610d6257600080fd5b505afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610880919061293f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610df357600080fd5b505afa158015610e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2b91906128b8565b6001600160a01b0316336001600160a01b031614610e5b5760405162461bcd60e51b81526004016101b9906128d5565b6001600160a01b038116610eb15760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016101b9565b6001546001600160a01b0382811691161415610f075760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016101b9565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fbc57600080fd5b505afa158015610fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff491906128b8565b6001600160a01b0316336001600160a01b0316146110245760405162461bcd60e51b81526004016101b9906128d5565b6001600160a01b0381166110745760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b60448201526064016101b9565b6002546001600160a01b03828116911614156110c45760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b60448201526064016101b9565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b611129336109c6565b6111455760405162461bcd60e51b81526004016101b990612985565b6001546001600160a01b03166111955760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016101b9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156112175760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016101b9565b6006546001600160a01b038281169116141561126c5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016101b9565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156112a757600154610657906001600160a01b031647611a67565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906112d69030906004016127d5565b60206040518083038186803b1580156112ee57600080fd5b505afa158015611302573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611326919061293f565b60015490915061079e906001600160a01b03848116911683611537565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906113929030906004016127d5565b60206040518083038186803b1580156113aa57600080fd5b505afa1580156113be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e2919061293f565b6006546040805163182df0f560e01b81529051670de0b6b3a7640000926001600160a01b03169163182df0f5916004808301926020929190829003018186803b15801561142e57600080fd5b505afa158015611442573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611466919061293f565b6006546040516370a0823160e01b81526001600160a01b03909116906370a08231906114969030906004016127d5565b60206040518083038186803b1580156114ae57600080fd5b505afa1580156114c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e6919061293f565b6114f091906129f0565b6114fa9190612a0f565b610a0a9190612a31565b6000611519836001600160a01b038416611b80565b90505b92915050565b6000611519836001600160a01b038416611bcf565b6040516001600160a01b03831660248201526044810182905261159a90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611cc2565b505050565b6006546040805163182df0f560e01b815290516000926001600160a01b03169163182df0f5916004808301926020929190829003018186803b1580156115e457600080fd5b505afa1580156115f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161c919061293f565b61162e83670de0b6b3a76400006129f0565b6116389190612a0f565b9050801561079e57600654604051633af9e66960e01b815260009161175a918591611755916001600160a01b0390911690633af9e6699061167d9030906004016127d5565b602060405180830381600087803b15801561169757600080fd5b505af11580156116ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cf919061293f565b600660009054906101000a90046001600160a01b03166001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561171d57600080fd5b505afa158015611731573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611755919061293f565b61182e565b60065460405163852a12e360e01b8152600481018390529192506001600160a01b03169063852a12e390602401602060405180830381600087803b1580156117a157600080fd5b505af11580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d9919061293f565b156118265760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c656400000060448201526064016101b9565b61159a611d94565b600081831061183d5781611519565b5090919050565b6001600160a01b03811660009081526001830160205260408120541515611519565b6000806000611873611dfe565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b1580156118eb57600080fd5b505af11580156118ff573d6000803e3d6000fd5b50506040516370a0823160e01b81526109f992506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a08231906119539030906004016127d5565b60206040518083038186803b15801561196b57600080fd5b505afa15801561197f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a3919061293f565b6121bf565b606060006119b583612296565b9392505050565b611a106001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836122f2565b600654611a4a906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836122f2565b600254600754610657916001600160a01b039182169116836122f2565b80471015611ab75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016101b9565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611b04576040519150601f19603f3d011682016040523d82523d6000602084013e611b09565b606091505b505090508061159a5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016101b9565b6000818152600183016020526040812054611bc75750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561151c565b50600061151c565b60008181526001830160205260408120548015611cb8576000611bf360018361296e565b8554909150600090611c079060019061296e565b9050818114611c6c576000866000018281548110611c2757611c27612a49565b9060005260206000200154905080876000018481548110611c4a57611c4a612a49565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611c7d57611c7d612a5f565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061151c565b600091505061151c565b6000611d17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124169092919063ffffffff16565b80519091501561159a5780806020019051810190611d359190612a75565b61159a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101b9565b73bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c6001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015611de357600080fd5b505af1158015611df7573d6000803e3d6000fd5b5050505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401611e5091906127d5565b60206040518083038186803b158015611e6857600080fd5b505afa158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea0919061293f565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401611ef091906127d5565b60206040518083038186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f40919061293f565b9050611f6b7f000000000000000000000000000000000000000000000000000000000000000061242d565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611fba9030906004016127d5565b60206040518083038186803b158015611fd257600080fd5b505afa158015611fe6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200a919061293f565b600654604051633af9e66960e01b81529192506000916001600160a01b0390911690633af9e669906120409030906004016127d5565b602060405180830381600087803b15801561205a57600080fd5b505af115801561206e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612092919061293f565b61209c9083612a31565b9050828111156120b7576120b0838261296e565b96506120c4565b6120c1818461296e565b95505b60006120d08589612a31565b905082811115612186576120e76107af848361296e565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906121339030906004016127d5565b60206040518083038186803b15801561214b57600080fd5b505afa15801561215f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612183919061293f565b92505b612190838661182e565b95508583116121a05760006121b3565b6121b36121ad878561296e565b8961182e565b97505050505050909192565b801561065757604051632e1a7d4d60e01b81526004810182905273bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c90632e1a7d4d90602401600060405180830381600087803b15801561221257600080fd5b505af1158015612226573d6000803e3d6000fd5b50505050600660009054906101000a90046001600160a01b03166001600160a01b0316631249c58b826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561227a57600080fd5b505af115801561228e573d6000803e3d6000fd5b505050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156122e657602002820191906000526020600020905b8154815260200190600101908083116122d2575b50505050509050919050565b80158061237b5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561234157600080fd5b505afa158015612355573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612379919061293f565b155b6123e65760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101b9565b6040516001600160a01b03831660248201526044810182905261159a90849063095ea7b360e01b90606401611563565b606061242584846000856124e6565b949350505050565b6007546001600160a01b0316156106575761244661260e565b6007546040516370a0823160e01b81526000916001600160a01b0316906370a08231906124779030906004016127d5565b60206040518083038186803b15801561248f57600080fd5b505afa1580156124a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c7919061293f565b9050801561079e5760075461079e906001600160a01b031683836126c8565b6060824710156125475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101b9565b843b6125955760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101b9565b600080866001600160a01b031685876040516125b19190612a97565b60006040518083038185875af1925050503d80600081146125ee576040519150601f19603f3d011682016040523d82523d6000602084013e6125f3565b606091505b509150915061260382828661276a565b979650505050505050565b60408051600180825281830190925260009160208083019080368337505060065482519293506001600160a01b03169183915060009061265057612650612a49565b6001600160a01b03928316602091820292909201015260405163436f98f760e11b81527f0000000000000000000000000000000000000000000000000000000000000000909116906386df31ee906126ae9030908590600401612ab3565b600060405180830381600087803b158015611de357600080fd5b600254604051636ccb2b0160e01b81526001600160a01b0385811660048301528481166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b15801561272b57600080fd5b505af192505050801561275b575060408051601f3d908101601f191682019092526127589181019061293f565b60015b61276457505050565b50505050565b606083156127795750816119b5565b8251156127895782518084602001fd5b8160405162461bcd60e51b81526004016101b99190612885565b6001600160a01b038116811461065757600080fd5b6000602082840312156127ca57600080fd5b81356119b5816127a3565b6001600160a01b0391909116815260200190565b6000602082840312156127fb57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561283b5781516001600160a01b031687529582019590820190600101612816565b509495945050505050565b6020815260006115196020830184612802565b60005b8381101561287457818101518382015260200161285c565b838111156127645750506000910152565b60208152600082518060208401526128a4816040850160208701612859565b601f01601f19169190910160400192915050565b6000602082840312156128ca57600080fd5b81516119b5816127a3565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60006020828403121561295157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561298057612980612958565b500390565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600181811c908216806129c957607f821691505b602082108114156129ea57634e487b7160e01b600052602260045260246000fd5b50919050565b6000816000190483118215151615612a0a57612a0a612958565b500290565b600082612a2c57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612a4457612a44612958565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600060208284031215612a8757600080fd5b815180151581146119b557600080fd5b60008251612aa9818460208701612859565b9190910192915050565b6001600160a01b03831681526040602082018190526000906124259083018461280256fea2646970667358221220630f74023b41d2901c4215938c1dfe2bc6fcb9ab25981a679340c75129e3d14364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c8063b2016bd4116100b6578063e00af4a71161006f578063e00af4a714610476578063e5328e0614610496578063ec78e832146104b9578063f7c618c1146104d9578063fc0c546a146104f9578063ffa1ad741461051757600080fd5b8063b2016bd41461038f578063c415b95c146103c3578063ce5494bb146103e3578063d2c35ce814610403578063d3033c3914610423578063d8dfeb451461044357600080fd5b8063440d724811610108578063440d7248146102935780635f82c67e146102d25780637d7c2a1c14610306578063951dc22c1461033657806399b71d5c14610358578063a3f4df7e1461036d57600080fd5b806314ae9f2e146101c957806316f0115b146101e95780632b3297f9146102335780632e1a7d4d146102535780634032b72b1461027357600080fd5b366101c4576006546001600160a01b031633148061017557503373bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c145b6101c25760405162461bcd60e51b81526020600482015260196024820152783737ba16b0b63637bbb2b216ba3796b9b2b73216b2ba3432b960391b60448201526064015b60405180910390fd5b005b600080fd5b3480156101d557600080fd5b506101c26101e43660046127b8565b610548565b3480156101f557600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b60405161022a91906127d5565b60405180910390f35b34801561023f57600080fd5b5060025461021d906001600160a01b031681565b34801561025f57600080fd5b506101c261026e3660046127e9565b61065a565b34801561027f57600080fd5b506101c261028e3660046127b8565b6108b1565b34801561029f57600080fd5b506102c26102ae3660046127b8565b6006546001600160a01b0391821691161490565b604051901515815260200161022a565b3480156102de57600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561031257600080fd5b5061031b6109bd565b6040805193845260208401929092529082015260600161022a565b34801561034257600080fd5b5061034b6109fe565b60405161022a9190612846565b34801561036457600080fd5b506101c2610a0f565b34801561037957600080fd5b50610382610a4b565b60405161022a9190612885565b34801561039b57600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103cf57600080fd5b5060015461021d906001600160a01b031681565b3480156103ef57600080fd5b506101c26103fe3660046127b8565b610ad9565b34801561040f57600080fd5b506101c261041e3660046127b8565b610d9a565b34801561042f57600080fd5b506101c261043e3660046127b8565b610f63565b34801561044f57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061021d565b34801561048257600080fd5b506101c26104913660046127b8565b611120565b3480156104a257600080fd5b506104ab611343565b60405190815260200161022a565b3480156104c557600080fd5b5060005461021d906001600160a01b031681565b3480156104e557600080fd5b5060075461021d906001600160a01b031681565b34801561050557600080fd5b506000546001600160a01b031661021d565b34801561052357600080fd5b50610382604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d991906128b8565b6001600160a01b0316336001600160a01b0316146106095760405162461bcd60e51b81526004016101b9906128d5565b610614600382611522565b6106575760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016101b9565b50565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106a25760405162461bcd60e51b81526004016101b99061290c565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906106f19030906004016127d5565b60206040518083038186803b15801561070957600080fd5b505afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610741919061293f565b90508181106107a25761079e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611537565b5050565b6107b46107af828461296e565b61159f565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906108009030906004016127d5565b60206040518083038186803b15801561081857600080fd5b505afa15801561082c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610850919061293f565b905061079e7f0000000000000000000000000000000000000000000000000000000000000000610880848461182e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611537565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561090a57600080fd5b505afa15801561091e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094291906128b8565b6001600160a01b0316336001600160a01b0316146109725760405162461bcd60e51b81526004016101b9906128d5565b61097d600382611504565b6106575760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016101b9565b600080806109ce335b600390611844565b6109ea5760405162461bcd60e51b81526004016101b990612985565b6109f2611866565b9250925092505b909192565b6060610a0a60036119a8565b905090565b610a18336109c6565b610a345760405162461bcd60e51b81526004016101b990612985565b610a3e60006119bc565b610a496000196119bc565b565b60058054610a58906129b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a84906129b5565b8015610ad15780601f10610aa657610100808354040283529160200191610ad1565b820191906000526020600020905b815481529060010190602001808311610ab457829003601f168201915b505050505081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610b215760405162461bcd60e51b81526004016101b99061290c565b6001600160a01b038116610b775760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016101b9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bda57600080fd5b505afa158015610bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1291906128b8565b6001600160a01b031614610c615760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016101b9565b6000546040516370a0823160e01b8152610cfa9183916001600160a01b03909116906370a0823190610c979030906004016127d5565b60206040518083038186803b158015610caf57600080fd5b505afa158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce7919061293f565b6000546001600160a01b03169190611537565b610657817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610d4a91906127d5565b60206040518083038186803b158015610d6257600080fd5b505afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610880919061293f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610df357600080fd5b505afa158015610e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2b91906128b8565b6001600160a01b0316336001600160a01b031614610e5b5760405162461bcd60e51b81526004016101b9906128d5565b6001600160a01b038116610eb15760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016101b9565b6001546001600160a01b0382811691161415610f075760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016101b9565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fbc57600080fd5b505afa158015610fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff491906128b8565b6001600160a01b0316336001600160a01b0316146110245760405162461bcd60e51b81526004016101b9906128d5565b6001600160a01b0381166110745760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b60448201526064016101b9565b6002546001600160a01b03828116911614156110c45760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b60448201526064016101b9565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b611129336109c6565b6111455760405162461bcd60e51b81526004016101b990612985565b6001546001600160a01b03166111955760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016101b9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156112175760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016101b9565b6006546001600160a01b038281169116141561126c5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016101b9565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156112a757600154610657906001600160a01b031647611a67565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906112d69030906004016127d5565b60206040518083038186803b1580156112ee57600080fd5b505afa158015611302573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611326919061293f565b60015490915061079e906001600160a01b03848116911683611537565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906113929030906004016127d5565b60206040518083038186803b1580156113aa57600080fd5b505afa1580156113be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e2919061293f565b6006546040805163182df0f560e01b81529051670de0b6b3a7640000926001600160a01b03169163182df0f5916004808301926020929190829003018186803b15801561142e57600080fd5b505afa158015611442573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611466919061293f565b6006546040516370a0823160e01b81526001600160a01b03909116906370a08231906114969030906004016127d5565b60206040518083038186803b1580156114ae57600080fd5b505afa1580156114c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e6919061293f565b6114f091906129f0565b6114fa9190612a0f565b610a0a9190612a31565b6000611519836001600160a01b038416611b80565b90505b92915050565b6000611519836001600160a01b038416611bcf565b6040516001600160a01b03831660248201526044810182905261159a90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611cc2565b505050565b6006546040805163182df0f560e01b815290516000926001600160a01b03169163182df0f5916004808301926020929190829003018186803b1580156115e457600080fd5b505afa1580156115f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161c919061293f565b61162e83670de0b6b3a76400006129f0565b6116389190612a0f565b9050801561079e57600654604051633af9e66960e01b815260009161175a918591611755916001600160a01b0390911690633af9e6699061167d9030906004016127d5565b602060405180830381600087803b15801561169757600080fd5b505af11580156116ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cf919061293f565b600660009054906101000a90046001600160a01b03166001600160a01b0316633b1d21a26040518163ffffffff1660e01b815260040160206040518083038186803b15801561171d57600080fd5b505afa158015611731573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611755919061293f565b61182e565b60065460405163852a12e360e01b8152600481018390529192506001600160a01b03169063852a12e390602401602060405180830381600087803b1580156117a157600080fd5b505af11580156117b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d9919061293f565b156118265760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c656400000060448201526064016101b9565b61159a611d94565b600081831061183d5781611519565b5090919050565b6001600160a01b03811660009081526001830160205260408120541515611519565b6000806000611873611dfe565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b1580156118eb57600080fd5b505af11580156118ff573d6000803e3d6000fd5b50506040516370a0823160e01b81526109f992506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a08231906119539030906004016127d5565b60206040518083038186803b15801561196b57600080fd5b505afa15801561197f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a3919061293f565b6121bf565b606060006119b583612296565b9392505050565b611a106001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836122f2565b600654611a4a906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836122f2565b600254600754610657916001600160a01b039182169116836122f2565b80471015611ab75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016101b9565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611b04576040519150601f19603f3d011682016040523d82523d6000602084013e611b09565b606091505b505090508061159a5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016101b9565b6000818152600183016020526040812054611bc75750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561151c565b50600061151c565b60008181526001830160205260408120548015611cb8576000611bf360018361296e565b8554909150600090611c079060019061296e565b9050818114611c6c576000866000018281548110611c2757611c27612a49565b9060005260206000200154905080876000018481548110611c4a57611c4a612a49565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611c7d57611c7d612a5f565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061151c565b600091505061151c565b6000611d17826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124169092919063ffffffff16565b80519091501561159a5780806020019051810190611d359190612a75565b61159a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101b9565b73bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c6001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015611de357600080fd5b505af1158015611df7573d6000803e3d6000fd5b5050505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401611e5091906127d5565b60206040518083038186803b158015611e6857600080fd5b505afa158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea0919061293f565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401611ef091906127d5565b60206040518083038186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f40919061293f565b9050611f6b7f000000000000000000000000000000000000000000000000000000000000000061242d565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611fba9030906004016127d5565b60206040518083038186803b158015611fd257600080fd5b505afa158015611fe6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200a919061293f565b600654604051633af9e66960e01b81529192506000916001600160a01b0390911690633af9e669906120409030906004016127d5565b602060405180830381600087803b15801561205a57600080fd5b505af115801561206e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612092919061293f565b61209c9083612a31565b9050828111156120b7576120b0838261296e565b96506120c4565b6120c1818461296e565b95505b60006120d08589612a31565b905082811115612186576120e76107af848361296e565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906121339030906004016127d5565b60206040518083038186803b15801561214b57600080fd5b505afa15801561215f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612183919061293f565b92505b612190838661182e565b95508583116121a05760006121b3565b6121b36121ad878561296e565b8961182e565b97505050505050909192565b801561065757604051632e1a7d4d60e01b81526004810182905273bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c90632e1a7d4d90602401600060405180830381600087803b15801561221257600080fd5b505af1158015612226573d6000803e3d6000fd5b50505050600660009054906101000a90046001600160a01b03166001600160a01b0316631249c58b826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561227a57600080fd5b505af115801561228e573d6000803e3d6000fd5b505050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156122e657602002820191906000526020600020905b8154815260200190600101908083116122d2575b50505050509050919050565b80158061237b5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561234157600080fd5b505afa158015612355573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612379919061293f565b155b6123e65760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101b9565b6040516001600160a01b03831660248201526044810182905261159a90849063095ea7b360e01b90606401611563565b606061242584846000856124e6565b949350505050565b6007546001600160a01b0316156106575761244661260e565b6007546040516370a0823160e01b81526000916001600160a01b0316906370a08231906124779030906004016127d5565b60206040518083038186803b15801561248f57600080fd5b505afa1580156124a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c7919061293f565b9050801561079e5760075461079e906001600160a01b031683836126c8565b6060824710156125475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101b9565b843b6125955760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101b9565b600080866001600160a01b031685876040516125b19190612a97565b60006040518083038185875af1925050503d80600081146125ee576040519150601f19603f3d011682016040523d82523d6000602084013e6125f3565b606091505b509150915061260382828661276a565b979650505050505050565b60408051600180825281830190925260009160208083019080368337505060065482519293506001600160a01b03169183915060009061265057612650612a49565b6001600160a01b03928316602091820292909201015260405163436f98f760e11b81527f0000000000000000000000000000000000000000000000000000000000000000909116906386df31ee906126ae9030908590600401612ab3565b600060405180830381600087803b158015611de357600080fd5b600254604051636ccb2b0160e01b81526001600160a01b0385811660048301528481166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b15801561272b57600080fd5b505af192505050801561275b575060408051601f3d908101601f191682019092526127589181019061293f565b60015b61276457505050565b50505050565b606083156127795750816119b5565b8251156127895782518084602001fd5b8160405162461bcd60e51b81526004016101b99190612885565b6001600160a01b038116811461065757600080fd5b6000602082840312156127ca57600080fd5b81356119b5816127a3565b6001600160a01b0391909116815260200190565b6000602082840312156127fb57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561283b5781516001600160a01b031687529582019590820190600101612816565b509495945050505050565b6020815260006115196020830184612802565b60005b8381101561287457818101518382015260200161285c565b838111156127645750506000910152565b60208152600082518060208401526128a4816040850160208701612859565b601f01601f19169190910160400192915050565b6000602082840312156128ca57600080fd5b81516119b5816127a3565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60006020828403121561295157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561298057612980612958565b500390565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600181811c908216806129c957607f821691505b602082108114156129ea57634e487b7160e01b600052602260045260246000fd5b50919050565b6000816000190483118215151615612a0a57612a0a612958565b500290565b600082612a2c57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612a4457612a44612958565b500190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600060208284031215612a8757600080fd5b815180151581146119b557600080fd5b60008251612aa9818460208701612859565b9190910192915050565b6001600160a01b03831681526040602082018190526000906124259083018461280256fea2646970667358221220630f74023b41d2901c4215938c1dfe2bc6fcb9ab25981a679340c75129e3d14364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "Deposit BNB/WBNB in Venus and earn interest.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "sweepERC20(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns total collateral locked in the strategy"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13596,
        "contract": "vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol:VenusBNB",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13602,
        "contract": "vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol:VenusBNB",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13605,
        "contract": "vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol:VenusBNB",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)12457"
      },
      {
        "astId": 13618,
        "contract": "vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol:VenusBNB",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3014_storage"
      },
      {
        "astId": 16560,
        "contract": "vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol:VenusBNB",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 16566,
        "contract": "vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol:VenusBNB",
        "label": "cToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(CToken)10519"
      },
      {
        "astId": 16571,
        "contract": "vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol:VenusBNB",
        "label": "rewardToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CToken)10519": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(IRoutedSwapper)12457": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3014_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3013,
            "contract": "vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol:VenusBNB",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2713_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2713_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2708,
            "contract": "vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol:VenusBNB",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2712,
            "contract": "vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol:VenusBNB",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}