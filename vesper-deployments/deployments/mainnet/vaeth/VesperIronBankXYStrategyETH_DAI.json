{
  "address": "0x79D198221D0BB53a1f03491aE902Eb0dac63828A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_unitroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiptToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrowCToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vsp",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMaxBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBorrowLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRouterIdx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOracleConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSwapSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "UpdatedSwapSlippage",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowCToken",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract Comptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLossMaking",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oraclePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRouterIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToRecover",
          "type": "uint256"
        }
      ],
      "name": "recoverBorrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyCToken",
      "outputs": [
        {
          "internalType": "contract CToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBorrowLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "updateBorrowLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newRouterIdx",
          "type": "uint256"
        }
      ],
      "name": "updateOracleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newSwapSlippage",
          "type": "uint256"
        }
      ],
      "name": "updateSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vPool",
      "outputs": [
        {
          "internalType": "contract IVesperPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vsp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0670e8d929225c68ccd57cca8b160d03fc74db94cdd7d2a38804729c57f4e9df",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x79D198221D0BB53a1f03491aE902Eb0dac63828A",
    "transactionIndex": 149,
    "gasUsed": "5288376",
    "logsBloom": "0x
    "blockHash": "0xa30e3fbd3c4ef402737c9750d9e800a528a9be5c82ae4c419cf7bc0af72f2a61",
    "transactionHash": "0x0670e8d929225c68ccd57cca8b160d03fc74db94cdd7d2a38804729c57f4e9df",
    "logs": [
      {
        "transactionIndex": 149,
        "blockNumber": 14907186,
        "transactionHash": "0x0670e8d929225c68ccd57cca8b160d03fc74db94cdd7d2a38804729c57f4e9df",
        "address": "0x41c84c0e2EE0b740Cf0d31F63f3B6F627DC6b393",
        "topics": [
          "0x1d22042d9eb89f2620572acbf8d85b66fba5a2ca19d166d8659574440175c964"
        ],
        "data": "0x00000000000000000000000079d198221d0bb53a1f03491ae902eb0dac63828a0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 110,
        "blockHash": "0xa30e3fbd3c4ef402737c9750d9e800a528a9be5c82ae4c419cf7bc0af72f2a61"
      },
      {
        "transactionIndex": 149,
        "blockNumber": 14907186,
        "transactionHash": "0x0670e8d929225c68ccd57cca8b160d03fc74db94cdd7d2a38804729c57f4e9df",
        "address": "0xAB1c342C7bf5Ec5F02ADEA1c2270670bCa144CbB",
        "topics": [
          "0x3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5"
        ],
        "data": "0x00000000000000000000000041c84c0e2ee0b740cf0d31f63f3b6f627dc6b39300000000000000000000000079d198221d0bb53a1f03491ae902eb0dac63828a",
        "logIndex": 111,
        "blockHash": "0xa30e3fbd3c4ef402737c9750d9e800a528a9be5c82ae4c419cf7bc0af72f2a61"
      },
      {
        "transactionIndex": 149,
        "blockNumber": 14907186,
        "transactionHash": "0x0670e8d929225c68ccd57cca8b160d03fc74db94cdd7d2a38804729c57f4e9df",
        "address": "0x8e595470Ed749b85C6F7669de83EAe304C2ec68F",
        "topics": [
          "0x1d22042d9eb89f2620572acbf8d85b66fba5a2ca19d166d8659574440175c964"
        ],
        "data": "0x00000000000000000000000079d198221d0bb53a1f03491ae902eb0dac63828a0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 112,
        "blockHash": "0xa30e3fbd3c4ef402737c9750d9e800a528a9be5c82ae4c419cf7bc0af72f2a61"
      },
      {
        "transactionIndex": 149,
        "blockNumber": 14907186,
        "transactionHash": "0x0670e8d929225c68ccd57cca8b160d03fc74db94cdd7d2a38804729c57f4e9df",
        "address": "0xAB1c342C7bf5Ec5F02ADEA1c2270670bCa144CbB",
        "topics": [
          "0x3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5"
        ],
        "data": "0x0000000000000000000000008e595470ed749b85c6f7669de83eae304c2ec68f00000000000000000000000079d198221d0bb53a1f03491ae902eb0dac63828a",
        "logIndex": 113,
        "blockHash": "0xa30e3fbd3c4ef402737c9750d9e800a528a9be5c82ae4c419cf7bc0af72f2a61"
      }
    ],
    "blockNumber": 14907186,
    "cumulativeGasUsed": "12080922",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd1C117319B3595fbc39b471AB1fd485629eb05F2",
    "0xe382d9f2394A359B01006faa8A1864b8a60d2710",
    "0xAB1c342C7bf5Ec5F02ADEA1c2270670bCa144CbB",
    "0x41c84c0e2EE0b740Cf0d31F63f3B6F627DC6b393",
    "0x8e595470Ed749b85C6F7669de83EAe304C2ec68F",
    "0x0538C8bAc84E95A9dF8aC10Aad17DbE81b9E36ee",
    "0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421",
    "VesperIronBankXYStrategyETH_DAI"
  ],
  "numDeployments": 1,
  "solcInputHash": "0c127abe11d6bc13fb99083a5f2331b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unitroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowCToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vsp\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaxBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"UpdatedBorrowLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRouterIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"UpdatedSwapSlippage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowCToken\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLossMaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouterIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToRecover\",\"type\":\"uint256\"}],\"name\":\"recoverBorrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyCToken\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"updateBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRouterIdx\",\"type\":\"uint256\"}],\"name\":\"updateOracleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSwapSlippage\",\"type\":\"uint256\"}],\"name\":\"updateSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vPool\",\"outputs\":[{\"internalType\":\"contract IVesperPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vsp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"details\":\"Rebalance profit, loss and investment of this strategy\"},\"recoverBorrowToken(uint256)\":{\"details\":\"If we get liquidation in Compound, we will have borrowToken sitting in strategy. This function allows to recover idle borrow token amount.\",\"params\":{\"_amountToRecover\":\"Amount of borrow token we want to recover in 1 call.      Set it 0 to recover all available borrow tokens\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"repayAll()\":{\"details\":\"This action usually done when loss is detected in strategy.0 borrow limit make sure that any future rebalance do not borrow again.\"},\"sweepERC20(address)\":{\"details\":\"sweep given token to feeCollector of strategy\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"totalValueCurrent()\":{\"details\":\"Report total value in collateral token\"},\"updateBorrowLimit(uint256,uint256)\":{\"details\":\"It is possible to set 0 as _minBorrowLimit to not borrow anything\",\"params\":{\"_maxBorrowLimit\":\"It is % of actual collateral factor of protocol\",\"_minBorrowLimit\":\"It is % of actual collateral factor of protocol\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"Deposit Collateral in IronBank and earn interest by depositing borrowed token in a Vesper Pool.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"borrowBalance()\":{\"notice\":\"Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool\"},\"isLossMaking()\":{\"notice\":\"Calculate current position based on totalValue and debt of strategy\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"recoverBorrowToken(uint256)\":{\"notice\":\"Recover extra borrow tokens from strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"repayAll()\":{\"notice\":\"Repay all borrow amount and set min borrow limit to 0.\"},\"token()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"totalValue()\":{\"notice\":\"Calculate total value based VSP rewards, supply and borrow position\"},\"totalValueCurrent()\":{\"notice\":\"Calculate total value of asset under management (in real-time)\"},\"updateBorrowLimit(uint256,uint256)\":{\"notice\":\"Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/compound/VesperIronBankXYStrategy.sol\":\"VesperIronBankXYStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/* solhint-disable func-name-mixedcase */\\n// Partial interface of IUniswapV2Router02\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs) external returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0x32466e3712b63a6e5112a1c44057d83d5e53f9f8369fd4e4f8d53a50baed8e4d\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface CToken {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow() external payable; // For ETH\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\\n\\n    function transfer(address user, uint256 amount) external returns (bool);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function transferFrom(\\n        address owner,\\n        address user,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function underlying() external view returns (address);\\n\\n    function comptroller() external view returns (address);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function markets(address market)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isCompted\\n        );\\n\\n    function oracle() external view returns (address);\\n}\\n\\ninterface Oracle {\\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\\n\\n    function price(string memory symbol) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e3911a8bab8ccef410313012145b400c0e7f8bb31c799f4849dc015ba81b98b\",\"license\":\"MIT\"},\"contracts/interfaces/oracle/IUniswapV3Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n// Interface to use 3rd party Uniswap V3 oracle utility contract deployed at https://etherscan.io/address/0x0f1f5a87f99f0918e6c81f16e59f3518698221ff#code\\n\\n/// @title UniswapV3 oracle with ability to query across an intermediate liquidity pool\\ninterface IUniswapV3Oracle {\\n    function assetToEth(\\n        address _tokenIn,\\n        uint256 _amountIn,\\n        uint32 _twapPeriod\\n    ) external view returns (uint256 ethAmountOut);\\n\\n    function ethToAsset(\\n        uint256 _ethAmountIn,\\n        address _tokenOut,\\n        uint32 _twapPeriod\\n    ) external view returns (uint256 amountOut);\\n\\n    function assetToAsset(\\n        address _tokenIn,\\n        uint256 _amountIn,\\n        address _tokenOut,\\n        uint32 _twapPeriod\\n    ) external view returns (uint256 amountOut);\\n\\n    function assetToAssetThruRoute(\\n        address _tokenIn,\\n        uint256 _amountIn,\\n        address _tokenOut,\\n        uint32 _twapPeriod,\\n        address _routeThruToken,\\n        uint24[2] memory _poolFees\\n    ) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x98df00f48e9de570c305758b8b6ca860d526b98c7544b23b57ed42650b55d7e4\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(\\n        address _rewardToken,\\n        uint256 _rewardAmount,\\n        uint256 _rewardDuration\\n    ) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(address _account)\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n}\\n\",\"keccak256\":\"0x44ded14cb0ced3f4f72286454c8f950480731f2b46d275b49172fc17ad9ad3c4\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalValueCurrent() external returns (uint256);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x45b007a39e3361fcc148692762735cb11489305b8016c1b9e05d79fbb5c9bc60\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0912bb18aaa205e2ea7e59247f3b4cd863ccd33c25ed9459bdcc1635d15b833\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    // solhint-disable-next-line  var-name-mixedcase\\n    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    ISwapManager public swapManager;\\n\\n    uint256 public oraclePeriod = 3600; // 1h\\n    uint256 public oracleRouterIdx = 0; // Uniswap V2\\n    uint256 public swapSlippage = 10000; // 100% Don't use oracles by default\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n    event UpdatedSwapSlippage(uint256 oldSwapSlippage, uint256 newSwapSlippage);\\n    event UpdatedOracleConfig(uint256 oldPeriod, uint256 newPeriod, uint256 oldRouterIdx, uint256 newRouterIdx);\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        swapManager = ISwapManager(_swapManager);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyGovernor {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function updateSwapSlippage(uint256 _newSwapSlippage) external onlyGovernor {\\n        require(_newSwapSlippage <= 10000, \\\"invalid-slippage-value\\\");\\n        emit UpdatedSwapSlippage(swapSlippage, _newSwapSlippage);\\n        swapSlippage = _newSwapSlippage;\\n    }\\n\\n    function updateOracleConfig(uint256 _newPeriod, uint256 _newRouterIdx) external onlyGovernor {\\n        require(_newRouterIdx < swapManager.N_DEX(), \\\"invalid-router-index\\\");\\n        if (_newPeriod == 0) _newPeriod = oraclePeriod;\\n        require(_newPeriod > 59, \\\"invalid-oracle-period\\\");\\n        emit UpdatedOracleConfig(oraclePeriod, _newPeriod, oracleRouterIdx, _newRouterIdx);\\n        oraclePeriod = _newPeriod;\\n        oracleRouterIdx = _newRouterIdx;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function setupOracles() external onlyKeeper {\\n        _setupOracles();\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Rebalance profit, loss and investment of this strategy\\n     */\\n    function rebalance() external virtual override onlyKeeper {\\n        (uint256 _profit, uint256 _loss, uint256 _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _reinvest();\\n    }\\n\\n    /**\\n     * @dev sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /**\\n     * @notice Calculate total value of asset under management\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValue() public view virtual override returns (uint256 _value);\\n\\n    /**\\n     * @notice Calculate total value of asset under management (in real-time)\\n     * @dev Report total value in collateral token\\n     */\\n    function totalValueCurrent() external virtual override returns (uint256) {\\n        return totalValue();\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /**\\n     * @notice some strategy may want to prepare before doing migration.\\n        Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    /**\\n     *  @notice Generate report for current profit and loss. Also liquidate asset to payback\\n     * excess debt, if any.\\n     * @return _profit Calculate any realized profit and convert it to collateral, if not already.\\n     * @return _loss Calculate any loss that strategy has made on investment. Convert into collateral token.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        _profit = _realizeProfit(_totalDebt);\\n        _loss = _realizeLoss(_totalDebt);\\n        _payback = _liquidate(_excessDebt);\\n    }\\n\\n    function _calcAmtOutAfterSlippage(uint256 _amount, uint256 _slippage) internal pure returns (uint256) {\\n        return (_amount * (10000 - _slippage)) / (10000);\\n    }\\n\\n    function _simpleOraclePath(address _from, address _to) internal view returns (address[] memory path) {\\n        if (_from == WETH || _to == WETH) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WETH;\\n            path[2] = _to;\\n        }\\n    }\\n\\n    function _consultOracle(\\n        address _from,\\n        address _to,\\n        uint256 _amt\\n    ) internal returns (uint256, bool) {\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            (bool _success, bytes memory _returnData) =\\n                // solhint-disable-next-line avoid-low-level-calls\\n                address(swapManager).call(\\n                    abi.encodePacked(swapManager.consult.selector, abi.encode(_from, _to, _amt, oraclePeriod, i))\\n                );\\n            if (_success) {\\n                (uint256 rate, uint256 lastUpdate, ) = abi.decode(_returnData, (uint256, uint256, bool));\\n                if ((lastUpdate > (block.timestamp - oraclePeriod)) && (rate != 0)) return (rate, true);\\n                return (0, false);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function _getOracleRate(address[] memory path, uint256 _amountIn) internal returns (uint256 amountOut) {\\n        require(path.length > 1, \\\"invalid-oracle-path\\\");\\n        amountOut = _amountIn;\\n        bool isValid;\\n        for (uint256 i = 0; i < path.length - 1; i++) {\\n            (amountOut, isValid) = _consultOracle(path[i], path[i + 1], amountOut);\\n            require(isValid, \\\"invalid-oracle-rate\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap / Sushiswap (better rate of the two)\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * however, this method will throw minAmountOut is not met\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amountIn Amount to be swapped\\n     * @param _minAmountOut minimum amount out\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) internal {\\n        if (_from == _to) {\\n            return;\\n        }\\n        (address[] memory path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amountIn);\\n        if (_minAmountOut == 0) _minAmountOut = 1;\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amountIn,\\n                _minAmountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    // These methods can be implemented by the inheriting strategy.\\n    /* solhint-disable no-empty-blocks */\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {}\\n\\n    /**\\n     * @notice Set up any oracles that are needed for this strategy.\\n     */\\n    function _setupOracles() internal virtual {}\\n\\n    /* solhint-enable */\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Withdraw collateral to payback excess debt in pool.\\n     * @param _excessDebt Excess debt of strategy in collateral token\\n     * @return _payback amount in collateral token. Usually it is equal to excess debt.\\n     */\\n    function _liquidate(uint256 _excessDebt) internal virtual returns (uint256 _payback);\\n\\n    /**\\n     * @notice Calculate earning and withdraw/convert it into collateral token.\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _profit Profit in collateral token\\n     */\\n    function _realizeProfit(uint256 _totalDebt) internal virtual returns (uint256 _profit);\\n\\n    /**\\n     * @notice Calculate loss\\n     * @param _totalDebt Total collateral debt of this strategy\\n     * @return _loss Realized loss in collateral token\\n     */\\n    function _realizeLoss(uint256 _totalDebt) internal virtual returns (uint256 _loss);\\n\\n    /**\\n     * @notice Reinvest collateral.\\n     * @dev Once we file report back in pool, we might have some collateral in hand\\n     * which we want to reinvest aka deposit in lender/provider.\\n     */\\n    function _reinvest() internal virtual;\\n}\\n\",\"keccak256\":\"0xd92c6995ae60810833336e5ac17134ca5684d9fbb077e6b424ee1d2c66709c8a\",\"license\":\"MIT\"},\"contracts/strategies/compound/CompoundXYCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/compound/ICompound.sol\\\";\\nimport \\\"../../interfaces/oracle/IUniswapV3Oracle.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\n/// @title This strategy will deposit collateral token in Compound and based on position it will\\n/// borrow another token. Supply X borrow Y and keep borrowed amount here.\\n/// It does not handle rewards and ETH as collateral\\nabstract contract CompoundXYCore is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"4.0.0\\\";\\n\\n    uint256 internal constant MAX_BPS = 10_000; //100%\\n    uint32 internal constant TWAP_PERIOD = 3_600;\\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\\n    address public borrowToken;\\n\\n    Comptroller public comptroller;\\n\\n    CToken public immutable supplyCToken;\\n    CToken public immutable borrowCToken;\\n\\n    IUniswapV3Oracle internal constant ORACLE = IUniswapV3Oracle(0x0F1f5A87f99f0918e6C81F16E59F3518698221Ff);\\n\\n    event UpdatedBorrowLimit(\\n        uint256 previousMinBorrowLimit,\\n        uint256 newMinBorrowLimit,\\n        uint256 previousMaxBorrowLimit,\\n        uint256 newMaxBorrowLimit\\n    );\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _comptroller,\\n        address _receiptToken,\\n        address _borrowCToken,\\n        string memory _name\\n    ) Strategy(_pool, _swapManager, _receiptToken) {\\n        require(_receiptToken != address(0), \\\"cToken-address-is-zero\\\");\\n        require(_comptroller != address(0), \\\"comptroller-address-is-zero\\\");\\n\\n        NAME = _name;\\n\\n        comptroller = Comptroller(_comptroller);\\n        supplyCToken = CToken(_receiptToken);\\n        borrowCToken = CToken(_borrowCToken);\\n        borrowToken = _getUnderlyingToken(_borrowCToken);\\n\\n        address[] memory _cTokens = new address[](2);\\n        _cTokens[0] = _receiptToken;\\n        _cTokens[1] = _borrowCToken;\\n        comptroller.enterMarkets(_cTokens);\\n    }\\n\\n    /// @notice Calculate current position based on totalValue and debt of strategy\\n    function isLossMaking() external view returns (bool) {\\n        return totalValue() < IVesperPool(pool).totalDebtOf(address(this));\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _token == address(supplyCToken) || _token == address(collateralToken) || _token == borrowToken;\\n    }\\n\\n    /// @notice Calculate total value based on supply and borrow position\\n    function totalValue() public view virtual override returns (uint256 _totalValue) {\\n        uint256 _collateralInCompound =\\n            (supplyCToken.balanceOf(address(this)) * supplyCToken.exchangeRateStored()) / 1e18;\\n\\n        uint256 _borrowBalanceHere = _getBorrowBalance();\\n        uint256 _borrowInCompound = borrowCToken.borrowBalanceStored(address(this));\\n\\n        uint256 _collateralNeededForRepay;\\n        if (_borrowInCompound > _borrowBalanceHere) {\\n            (, _collateralNeededForRepay, ) = swapManager.bestInputFixedOutput(\\n                address(collateralToken),\\n                borrowToken,\\n                _borrowInCompound - _borrowBalanceHere\\n            );\\n        }\\n        _totalValue = _collateralInCompound + collateralToken.balanceOf(address(this)) - _collateralNeededForRepay;\\n    }\\n\\n    /// @dev Hook that executes after collateral borrow.\\n    function _afterBorrowY(uint256 _amount) internal virtual {}\\n\\n    /// @dev Approve dex router\\n    function _approveRouter(address _router, uint256 _amount) internal virtual {}\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(supplyCToken), _amount);\\n        IERC20(borrowToken).safeApprove(address(borrowCToken), _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            address _router = address(swapManager.ROUTERS(i));\\n            _approveRouter(_router, _amount);\\n            collateralToken.safeApprove(_router, _amount);\\n            IERC20(borrowToken).safeApprove(_router, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim rewardToken and transfer to new strategy\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    function _beforeMigration(address _newStrategy) internal override {\\n        require(IStrategy(_newStrategy).token() == address(supplyCToken), \\\"wrong-receipt-token\\\");\\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), false);\\n    }\\n\\n    /// @dev Hook that executes before repaying borrowed collateral\\n    function _beforeRepayY(uint256 _amount) internal virtual {}\\n\\n    /// @dev Borrow Y from Compound. _afterBorrowY hook can be used to do anything with borrowed amount.\\n    /// @dev Override to handle ETH\\n    function _borrowY(uint256 _amount) internal virtual {\\n        if (_amount > 0) {\\n            require(borrowCToken.borrow(_amount) == 0, \\\"borrow-failed\\\");\\n            _afterBorrowY(_amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\\n     * @param _depositAmount deposit amount\\n     * @param _withdrawAmount withdraw amount\\n     * @return _borrowAmount borrow more amount\\n     * @return _repayAmount repay amount to keep ltv within limit\\n     */\\n    function _calculateBorrowPosition(uint256 _depositAmount, uint256 _withdrawAmount)\\n        internal\\n        returns (uint256 _borrowAmount, uint256 _repayAmount)\\n    {\\n        require(_depositAmount == 0 || _withdrawAmount == 0, \\\"all-input-gt-zero\\\");\\n        uint256 _borrowed = borrowCToken.borrowBalanceCurrent(address(this));\\n        // If maximum borrow limit set to 0 then repay borrow\\n        if (maxBorrowLimit == 0) {\\n            return (0, _borrowed);\\n        }\\n\\n        uint256 _collateral = supplyCToken.balanceOfUnderlying(address(this));\\n        uint256 _collateralFactor = _getCollateralFactor(address(supplyCToken));\\n        // In case of withdraw, _amount can be greater than _supply\\n        uint256 _hypotheticalCollateral =\\n            _depositAmount > 0 ? _collateral + _depositAmount : _collateral > _withdrawAmount\\n                ? _collateral - _withdrawAmount\\n                : 0;\\n\\n        // Calculate max borrow based on collateral factor\\n        uint256 _maxCollateralForBorrow = (_hypotheticalCollateral * _collateralFactor) / 1e18;\\n        Oracle _oracle = Oracle(comptroller.oracle());\\n\\n        // Compound \\\"UnderlyingPrice\\\" decimal = (30 + 6 - tokenDecimal)\\n        // Rari \\\"UnderlyingPrice\\\" decimal = (30 + 6 - tokenDecimal)\\n        // Iron \\\"UnderlyingPrice\\\" decimal = (18 + 8 - tokenDecimal)\\n        uint256 _collateralTokenPrice = _oracle.getUnderlyingPrice(address(supplyCToken));\\n        uint256 _borrowTokenPrice = _oracle.getUnderlyingPrice(address(borrowCToken));\\n        // Max borrow limit in borrow token\\n        uint256 _maxBorrowPossible = (_maxCollateralForBorrow * _collateralTokenPrice) / _borrowTokenPrice;\\n        // If maxBorrow is zero, we should repay total amount of borrow\\n        if (_maxBorrowPossible == 0) {\\n            return (0, _borrowed);\\n        }\\n\\n        // Safe buffer to avoid liquidation due to price variations.\\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\\n\\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\\n\\n        // If current borrow is greater than max borrow, then repay to achieve safe position else borrow more.\\n        if (_borrowed > _borrowUpperBound) {\\n            // If borrow > upperBound then it is greater than lowerBound too.\\n            _repayAmount = _borrowed - _borrowLowerBound;\\n        } else if (_borrowLowerBound > _borrowed) {\\n            _borrowAmount = _borrowLowerBound - _borrowed;\\n        }\\n    }\\n\\n    /**\\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\\n     * @dev Claim rewardToken and first convert rewardToken to borrowToken to cover interest, if any, on borrowed amount.\\n     * Convert remaining rewardToken to collateral.\\n     */\\n    function _generateReport()\\n        internal\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        // Claim any reward we have.\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n\\n        uint256 _borrow = borrowCToken.borrowBalanceCurrent(address(this));\\n        uint256 _borrowBalanceHere = _getBorrowBalance();\\n        // _borrow increases every block. There can be a scenario when rewardToken are not\\n        // enough to cover interest diff for borrow, reinvest function will handle\\n        // collateral liquidation\\n        if (_borrow > _borrowBalanceHere) {\\n            _swapToBorrowToken(_borrow - _borrowBalanceHere);\\n        } else {\\n            // When _borrowBalanceHere exceeds _borrow balance from Compound\\n            // Customize this hook to handle the excess profit\\n            _rebalanceBorrow(_borrowBalanceHere - _borrow);\\n        }\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _collateralInCompound = supplyCToken.balanceOfUnderlying(address(this));\\n        uint256 _totalCollateral = _collateralInCompound + _collateralHere;\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_collateralHere < _profitAndExcessDebt) {\\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _collateralInCompound);\\n            if (_totalAmountToWithdraw > 0) {\\n                _withdrawHere(_totalAmountToWithdraw);\\n                _collateralHere = collateralToken.balanceOf(address(this));\\n            }\\n        }\\n\\n        if (_excessDebt > 0) {\\n            _payback = Math.min(_collateralHere, _excessDebt);\\n        }\\n    }\\n\\n    /// @dev Get the borrow balance strategy is holding. Override to handle vToken balance.\\n    function _getBorrowBalance() internal view virtual returns (uint256) {\\n        return IERC20(borrowToken).balanceOf(address(this));\\n    }\\n\\n    /// @dev TraderJoe Compound fork has different markets API so allow this method to override.\\n    function _getCollateralFactor(address _cToken) internal view virtual returns (uint256 _collateralFactor) {\\n        (, _collateralFactor, ) = comptroller.markets(_cToken);\\n    }\\n\\n    /// @dev Get underlying token. Compound handle ETH differently hence allow this method to override\\n    function _getUnderlyingToken(address _cToken) internal view virtual returns (address) {\\n        return CToken(_cToken).underlying();\\n    }\\n\\n    /// @dev Deposit collateral aka X in Compound. Override to handle ETH\\n    function _mintX(uint256 _amount) internal virtual {\\n        if (_amount > 0) {\\n            require(supplyCToken.mint(_amount) == 0, \\\"supply-failed\\\");\\n        }\\n    }\\n\\n    /// @dev Hook to handle profit scenario i.e. actual borrowed balance > Compound borrow account.\\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual {}\\n\\n    /// @dev Withdraw collateral aka X from Compound. Override to handle ETH\\n    function _redeemX(uint256 _amount) internal virtual {\\n        require(supplyCToken.redeemUnderlying(_amount) == 0, \\\"withdraw-failed\\\");\\n    }\\n\\n    /// @dev Deposit collateral in Compound and adjust borrow position\\n    function _reinvest() internal override {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n\\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\\n        if (_repayAmount > 0) {\\n            // Repay to maintain safe position\\n            _repay(_repayAmount, false);\\n            _mintX(collateralToken.balanceOf(address(this)));\\n        } else {\\n            // Happy path, mint more borrow more\\n            _mintX(_collateralBalance);\\n            _borrowY(_borrowAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Repay borrow amount\\n     * @dev Claim rewardToken and convert to collateral. Swap collateral to borrowToken as needed.\\n     * @param _repayAmount BorrowToken amount that we should repay to maintain safe position.\\n     * @param _shouldClaimComp Flag indicating should we claim rewardToken and convert to collateral or not.\\n     */\\n    function _repay(uint256 _repayAmount, bool _shouldClaimComp) internal {\\n        if (_repayAmount > 0) {\\n            uint256 _borrowBalanceHere = _getBorrowBalance();\\n            // Liability is more than what we have.\\n            // To repay loan - convert all rewards to collateral, if asked, and redeem collateral(if needed).\\n            // This scenario is rare and if system works okay it will/might happen during final repay only.\\n            if (_repayAmount > _borrowBalanceHere) {\\n                if (_shouldClaimComp) {\\n                    // Claim rewardToken and convert those to collateral.\\n                    _claimRewardsAndConvertTo(address(collateralToken));\\n                }\\n\\n                uint256 _currentBorrow = borrowCToken.borrowBalanceCurrent(address(this));\\n                // For example this is final repay and 100 blocks has passed since last withdraw/rebalance,\\n                // _currentBorrow is increasing due to interest. Now if _repayAmount > _borrowBalanceHere is true\\n                // _currentBorrow > _borrowBalanceHere is also true.\\n                // To maintain safe position we always try to keep _currentBorrow = _borrowBalanceHere\\n\\n                // Swap collateral to borrowToken to repay borrow and also maintain safe position\\n                // Here borrowToken amount needed is (_currentBorrow - _borrowBalanceHere)\\n                _swapToBorrowToken(_currentBorrow - _borrowBalanceHere);\\n            }\\n            _repayY(_repayAmount);\\n        }\\n    }\\n\\n    /// @dev Repay Y to Compound. _beforeRepayY hook can be used for pre-repay actions.\\n    /// @dev Override this to handle ETH\\n    function _repayY(uint256 _amount) internal virtual {\\n        _beforeRepayY(_amount);\\n        require(borrowCToken.repayBorrow(_amount) == 0, \\\"repay-failed\\\");\\n    }\\n\\n    /// @dev Safe swap, it will not revert.\\n    function _safeSwap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) private {\\n        uint256 _minAmountOut =\\n            swapSlippage != 10000\\n                ? _calcAmtOutAfterSlippage(\\n                    ORACLE.assetToAsset(_tokenIn, _amountIn, _tokenOut, TWAP_PERIOD),\\n                    swapSlippage\\n                )\\n                : 1;\\n        _safeSwap(_tokenIn, _tokenOut, _amountIn, _minAmountOut);\\n    }\\n\\n    /**\\n     * @dev Swap given token to borrowToken\\n     * @param _shortOnBorrow Expected output of this swap\\n     */\\n    function _swapToBorrowToken(uint256 _shortOnBorrow) internal {\\n        // Looking for _amountIn using fixed output amount\\n        (address[] memory _path, uint256 _amountIn, uint256 _rIdx) =\\n            swapManager.bestInputFixedOutput(address(collateralToken), borrowToken, _shortOnBorrow);\\n        if (_amountIn > 0) {\\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n            // If we do not have enough _from token to get expected output, either get\\n            // some _from token or adjust expected output.\\n            if (_amountIn > _collateralHere) {\\n                // Redeem some collateral, so that we have enough collateral to get expected output\\n                _redeemX(_amountIn - _collateralHere);\\n            }\\n            swapManager.ROUTERS(_rIdx).swapTokensForExactTokens(\\n                _shortOnBorrow,\\n                _amountIn,\\n                _path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral and transfer it to pool\\n    function _withdraw(uint256 _amount) internal override {\\n        collateralToken.safeTransfer(pool, _withdrawHere(_amount));\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 _amount) internal returns (uint256) {\\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, _amount);\\n        _repay(_repayAmount, true);\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        uint256 _supply = supplyCToken.balanceOfUnderlying(address(this));\\n        _redeemX(_supply > _amount ? _amount : _supply);\\n        return collateralToken.balanceOf(address(this)) - _collateralBefore;\\n    }\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n    /**\\n     * @notice Recover extra borrow tokens from strategy\\n     * @dev If we get liquidation in Compound, we will have borrowToken sitting in strategy.\\n     * This function allows to recover idle borrow token amount.\\n     * @param _amountToRecover Amount of borrow token we want to recover in 1 call.\\n     *      Set it 0 to recover all available borrow tokens\\n     */\\n    function recoverBorrowToken(uint256 _amountToRecover) external onlyKeeper {\\n        uint256 _borrowBalanceHere = IERC20(borrowToken).balanceOf(address(this));\\n        uint256 _borrowInCompound = borrowCToken.borrowBalanceStored(address(this));\\n\\n        if (_borrowBalanceHere > _borrowInCompound) {\\n            uint256 _extraBorrowBalance = _borrowBalanceHere - _borrowInCompound;\\n            uint256 _recoveryAmount =\\n                (_amountToRecover > 0 && _extraBorrowBalance > _amountToRecover)\\n                    ? _amountToRecover\\n                    : _extraBorrowBalance;\\n            // Do swap and transfer\\n            uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n            _safeSwap(borrowToken, address(collateralToken), _recoveryAmount);\\n            collateralToken.transfer(pool, collateralToken.balanceOf(address(this)) - _collateralBefore);\\n        }\\n    }\\n\\n    /**\\n     * @notice Repay all borrow amount and set min borrow limit to 0.\\n     * @dev This action usually done when loss is detected in strategy.\\n     * @dev 0 borrow limit make sure that any future rebalance do not borrow again.\\n     */\\n    function repayAll() external onlyKeeper {\\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), true);\\n        minBorrowLimit = 0;\\n        maxBorrowLimit = 0;\\n    }\\n\\n    /**\\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\\n     * @dev It is possible to set 0 as _minBorrowLimit to not borrow anything\\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\\n     */\\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\\n        require(_maxBorrowLimit < MAX_BPS, \\\"invalid-max-borrow-limit\\\");\\n        // set _maxBorrowLimit and _minBorrowLimit to zero to disable borrow;\\n        require(\\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\\n            \\\"max-should-be-higher-than-min\\\"\\n        );\\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\\n        // To avoid liquidation due to price variations maxBorrowLimit is a collateral factor that is less than actual collateral factor of protocol\\n        minBorrowLimit = _minBorrowLimit;\\n        maxBorrowLimit = _maxBorrowLimit;\\n    }\\n\\n    // We overridden _generateReport which eliminates need of below function.\\n    function _liquidate(uint256 _excessDebt) internal override returns (uint256 _payback) {}\\n\\n    function _realizeProfit(uint256 _totalDebt) internal virtual override returns (uint256) {}\\n\\n    function _realizeLoss(uint256 _totalDebt) internal view override returns (uint256 _loss) {}\\n}\\n\",\"keccak256\":\"0xd12532c5de2d5b75ac74a56aca66bb8e546041db155e232f883b4ccca34de6ec\",\"license\":\"MIT\"},\"contracts/strategies/compound/VesperIronBankXYStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./CompoundXYCore.sol\\\";\\nimport \\\"../../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../../interfaces/vesper/IPoolRewards.sol\\\";\\n\\n/// @title Deposit Collateral in IronBank and earn interest by depositing borrowed token in a Vesper Pool.\\ncontract VesperIronBankXYStrategy is CompoundXYCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Destination Grow Pool for borrowed Token\\n    IVesperPool public immutable vPool;\\n    // VSP token address\\n    address public immutable vsp;\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _unitroller,\\n        address _receiptToken,\\n        address _borrowCToken,\\n        address _vPool,\\n        address _vsp,\\n        string memory _name\\n    ) CompoundXYCore(_pool, _swapManager, _unitroller, _receiptToken, _borrowCToken, _name) {\\n        require(_vsp != address(0), \\\"vsp-address-is-zero\\\");\\n        require(address(IVesperPool(_vPool).token()) == borrowToken, \\\"invalid-grow-pool\\\");\\n        vPool = IVesperPool(_vPool);\\n        vsp = _vsp;\\n    }\\n\\n    /// @notice Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool\\n    function borrowBalance() external view returns (uint256) {\\n        return _getBorrowBalance();\\n    }\\n\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return super.isReservedToken(_token) || _token == address(vPool);\\n    }\\n\\n    /// @notice Calculate total value based VSP rewards, supply and borrow position\\n    function totalValue() public view override returns (uint256 _totalValue) {\\n        _totalValue = super.totalValue();\\n        address _poolRewards = vPool.poolRewards();\\n        if (_poolRewards != address(0)) {\\n            (, uint256[] memory _claimableAmounts) = IPoolRewards(_poolRewards).claimable(address(this));\\n            uint256 _vspAmount = _claimableAmounts[0];\\n            if (_vspAmount > 0) {\\n                (, uint256 _vspAsCollateral, ) =\\n                    swapManager.bestOutputFixedInput(vsp, address(collateralToken), _vspAmount);\\n                // Update totalValue\\n                _totalValue += _vspAsCollateral;\\n            }\\n        }\\n    }\\n\\n    /// @notice After borrowing Y, deposit to Vesper Pool\\n    function _afterBorrowY(uint256 _amount) internal override {\\n        vPool.deposit(_amount);\\n    }\\n\\n    function _approveRouter(address _router, uint256 _amount) internal override {\\n        super._approveRouter(_router, _amount);\\n        IERC20(vsp).safeApprove(_router, _amount);\\n    }\\n\\n    function _approveToken(uint256 _amount) internal override {\\n        super._approveToken(_amount);\\n        IERC20(borrowToken).safeApprove(address(vPool), _amount);\\n    }\\n\\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\\n    function _beforeRepayY(uint256 _amount) internal override {\\n        _withdrawFromPool(_amount);\\n    }\\n\\n    function _claimRewardsAndConvertTo(address _toToken) internal override {\\n        address _poolRewards = vPool.poolRewards();\\n        if (_poolRewards != address(0)) {\\n            IPoolRewards(_poolRewards).claimReward(address(this));\\n            uint256 _vspAmount = IERC20(vsp).balanceOf(address(this));\\n            if (_vspAmount > 0) {\\n                _safeSwap(vsp, _toToken, _vspAmount, 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Borrowed Y balance deposited in Vesper Pool\\n    function _getBorrowBalance() internal view override returns (uint256) {\\n        return\\n            IERC20(borrowToken).balanceOf(address(this)) +\\n            ((vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18);\\n    }\\n\\n    function _rebalanceBorrow(uint256 _excessBorrow) internal override {\\n        if (_excessBorrow > 0) {\\n            uint256 _borrowedHereBefore = IERC20(borrowToken).balanceOf(address(this));\\n            _withdrawFromPool(_excessBorrow);\\n            uint256 _borrowedHere = IERC20(borrowToken).balanceOf(address(this)) - _borrowedHereBefore;\\n            if (_borrowedHere > 0) {\\n                _safeSwap(borrowToken, address(collateralToken), _borrowedHere, 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\\n    function _withdrawFromPool(uint256 _amount) internal {\\n        uint256 _pricePerShare = vPool.pricePerShare();\\n        uint256 _shares = (_amount * 1e18) / _pricePerShare;\\n        _shares = _amount > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\\n\\n        uint256 _maxShares = vPool.balanceOf(address(this));\\n        vPool.withdraw(_shares > _maxShares ? _maxShares : _shares);\\n    }\\n}\\n\",\"keccak256\":\"0xdfd30d274c7190a7e7cb5fbc5c05cd5cfcef6a8397535b0bbf0d0bc4b383e75a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610140604052600080546001600160a01b03191673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2178155610e10600455600555612710600655611b58600a55612134600b553480156200005357600080fd5b506040516200616d3803806200616d8339810160408190526200007691620007b6565b8787878787858585846001600160a01b038316620000db5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620001285760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401620000d2565b600380546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200018657600080fd5b505afa1580156200019b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c191906200090f565b6001600160a01b03908116608052600180546001600160a01b03191691831691909117905562000208620001f23390565b6007620005c560201b62001f8b1790919060201c565b6200024a5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401620000d2565b5050506001600160a01b038316620002a55760405162461bcd60e51b815260206004820152601660248201527f63546f6b656e2d616464726573732d69732d7a65726f000000000000000000006044820152606401620000d2565b6001600160a01b038416620002fd5760405162461bcd60e51b815260206004820152601b60248201527f636f6d7074726f6c6c65722d616464726573732d69732d7a65726f00000000006044820152606401620000d2565b805162000312906009906020840190620006ae565b50600d80546001600160a01b0319166001600160a01b038681169190911790915583811660c052821660e0526200034982620005e5565b600c80546001600160a01b0319166001600160a01b03929092169190911790556040805160028082526060820183526000926020830190803683370190505090508381600081518110620003a157620003a162000936565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110620003d857620003d862000936565b6001600160a01b039283166020918202929092010152600d54604051631853304760e31b815291169063c299823890620004179084906004016200094c565b600060405180830381600087803b1580156200043257600080fd5b505af115801562000447573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200047191908101906200099b565b50505050506001600160a01b03851615159250620004d59150505760405162461bcd60e51b815260206004820152601360248201527f7673702d616464726573732d69732d7a65726f000000000000000000000000006044820152606401620000d2565b600c5460408051637e062a3560e11b815290516001600160a01b039283169286169163fc0c546a916004808301926020929190829003018186803b1580156200051d57600080fd5b505afa15801562000532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200055891906200090f565b6001600160a01b031614620005a45760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a590b59dc9bddcb5c1bdbdb607a1b6044820152606401620000d2565b506001600160a01b039182166101005216610120525062000a889350505050565b6000620005dc836001600160a01b0384166200065c565b90505b92915050565b6000816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156200062157600080fd5b505afa15801562000636573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005df91906200090f565b6000818152600183016020526040812054620006a557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620005df565b506000620005df565b828054620006bc9062000a4b565b90600052602060002090601f016020900481019282620006e057600085556200072b565b82601f10620006fb57805160ff19168380011785556200072b565b828001600101855582156200072b579182015b828111156200072b5782518255916020019190600101906200070e565b50620007399291506200073d565b5090565b5b808211156200073957600081556001016200073e565b6001600160a01b03811681146200076a57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620007ae57620007ae6200076d565b604052919050565b600080600080600080600080610100898b031215620007d457600080fd5b8851620007e18162000754565b809850506020808a0151620007f68162000754565b60408b0151909850620008098162000754565b60608b01519097506200081c8162000754565b60808b01519096506200082f8162000754565b60a08b0151909550620008428162000754565b60c08b0151909450620008558162000754565b60e08b01519093506001600160401b03808211156200087357600080fd5b818c0191508c601f8301126200088857600080fd5b8151818111156200089d576200089d6200076d565b620008b1601f8201601f1916850162000783565b91508082528d84828501011115620008c857600080fd5b60005b81811015620008e8578381018501518382018601528401620008cb565b81811115620008fa5760008583850101525b50508093505050509295985092959890939650565b6000602082840312156200092257600080fd5b81516200092f8162000754565b9392505050565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b818110156200098f5783516001600160a01b03168352928401929184019160010162000968565b50909695505050505050565b60006020808385031215620009af57600080fd5b82516001600160401b0380821115620009c757600080fd5b818501915085601f830112620009dc57600080fd5b815181811115620009f157620009f16200076d565b8060051b915062000a0484830162000783565b818152918301840191848101908884111562000a1f57600080fd5b938501935b8385101562000a3f5784518252938501939085019062000a24565b98975050505050505050565b600181811c9082168062000a6057607f821691505b6020821081141562000a8257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161546c62000d01600039600081816102c801528181611a09015281816135cb0152818161365e0152614c5b0152600081816103a1015281816108120152818161189201528181611fc901528181612065015281816128d5015281816134b40152818161493601528181614a2201528181614ac00152614be701526000818161037a015281816110a701528181611d2c015281816123f601528181612ad301528181612d16015281816130a601528181613aea01528181613de901528181614021015281816142010152614799015260008181610506015281816121c301528181612561015281816129d301528181612bc501528181612c6b0152818161334a01528181613ba301528181613c3301528181613d4901528181613f44015281816141ca015261486f0152600081816102830152818161057a015281816106a5015281816106f50152818161084e01528181610a0101528181610bb501528181610c3801528181610da301528181611280015281816113c10152818161145e015281816116bb01528181611dc8015281816121970152818161227701528181612317015261417601526000818161044b0152818161117b0152818161122a01528181611251015281816112a2015281816115ee0152818161169201528181611a2b01528181611b3a015281816121fe015281816123b8015281816124d6015281816126870152818161274b0152818161281101528181612dd601528181612e9101528181613068015281816132bf01528181613418015281816136b80152818161376101528181613a4501528181614154015281816141a8015261434c015261546c6000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806399b71d5c1161013b578063d4c3eea0116100b8578063efead58c1161007c578063efead58c14610501578063fa3ae6dc14610528578063fb7ee10214610530578063fc0c546a14610543578063ffa1ad741461055457600080fd5b8063d4c3eea0146104c2578063e00af4a7146104ca578063e260d747146104dd578063e645c202146104e6578063ec78e832146104ee57600080fd5b8063c415b95c116100ff578063c415b95c1461046d578063c7ad274814610480578063cd2d7ebe14610493578063ce5494bb1461049c578063d2c35ce8146104af57600080fd5b806399b71d5c1461040e578063a3f4df7e14610416578063a923b2a61461042b578063aa1018861461043e578063b2016bd41461044657600080fd5b8063456dc17a116101c957806367f5e4b81161018d57806367f5e4b8146103c3578063709d039d146103d65780637d7c2a1c146103e957806392986024146103f1578063951dc22c146103f957600080fd5b8063456dc17a1461033c5780634c36fad71461034f5780635fe3b56714610362578063620a96d5146103755780636719578c1461039c57600080fd5b806329ba73ed1161021057806329ba73ed146102c35780632e1a7d4d146102ea5780634032b72b146102fd57806342189c8f14610310578063440d72481461031957600080fd5b80630181686c1461024d57806314ae9f2e1461026957806316f0115b1461027e5780631aedeabe146102b2578063243cd14e146102bb575b600080fd5b610256600b5481565b6040519081526020015b60405180910390f35b61027c610277366004614e18565b610578565b005b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6040516102609190614e35565b61025660065481565b610256610693565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b61027c6102f8366004614e49565b6106a2565b61027c61030b366004614e18565b6106f3565b61025660045481565b61032c610327366004614e18565b6107ff565b6040519015158152602001610260565b600c546102a5906001600160a01b031681565b61027c61035d366004614e18565b61084c565b600d546102a5906001600160a01b031681565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b61027c6103d1366004614e49565b6109ff565b6003546102a5906001600160a01b031681565b61027c610b4b565b61032c610c1e565b610401610ccb565b6040516102609190614ea6565b61027c610cd7565b61041e610d13565b6040516102609190614ee5565b61027c610439366004614f18565b610da1565b61027c610fd6565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6002546102a5906001600160a01b031681565b61027c61048e366004614e49565b610ffb565b61025660055481565b61027c6104aa366004614e18565b6113be565b61027c6104bd366004614e18565b6116b9565b610256611882565b61027c6104d8366004614e18565b611ac3565b610256600a5481565b610256611ce2565b6001546102a5906001600160a01b031681565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b61027c611cec565b61027c61053e366004614f18565b611dc6565b6001546001600160a01b03166102a5565b61041e604051806040016040528060058152602001640342e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d157600080fd5b505afa1580156105e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106099190614f3a565b6001600160a01b0316336001600160a01b0316146106425760405162461bcd60e51b815260040161063990614f57565b60405180910390fd5b61064d600782611fa7565b6106905760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610639565b50565b600061069d611fbc565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106ea5760405162461bcd60e51b815260040161063990614f8e565b61069081612192565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561074c57600080fd5b505afa158015610760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107849190614f3a565b6001600160a01b0316336001600160a01b0316146107b45760405162461bcd60e51b815260040161063990614f57565b6107bf600782611f8b565b6106905760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610639565b600061080a826121bf565b8061084657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a557600080fd5b505afa1580156108b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dd9190614f3a565b6001600160a01b0316336001600160a01b03161461090d5760405162461bcd60e51b815260040161063990614f57565b6001600160a01b0381166109585760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401610639565b6003546001600160a01b03828116911614156109a35760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b6044820152606401610639565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5857600080fd5b505afa158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a909190614f3a565b6001600160a01b0316336001600160a01b031614610ac05760405162461bcd60e51b815260040161063990614f57565b612710811115610b0b5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610639565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b610b58335b60079061224d565b610b745760405162461bcd60e51b815260040161063990614fc1565b6000806000610b8161226f565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015610bf957600080fd5b505af1158015610c0d573d6000803e3d6000fd5b50505050610c19612731565b505050565b604051639f2b283360e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b283390610c6d903090600401614e35565b60206040518083038186803b158015610c8557600080fd5b505afa158015610c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbd9190614ff1565b610cc5611882565b10905090565b606061069d60076128ad565b610ce033610b50565b610cfc5760405162461bcd60e51b815260040161063990614fc1565b610d0660006128ba565b610d116000196128ba565b565b60098054610d209061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4c9061500a565b8015610d995780601f10610d6e57610100808354040283529160200191610d99565b820191906000526020600020905b815481529060010190602001808311610d7c57829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610dfa57600080fd5b505afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e329190614f3a565b6001600160a01b0316336001600160a01b031614610e625760405162461bcd60e51b815260040161063990614f57565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb057600080fd5b505afa158015610ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee89190614ff1565b8110610f2d5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b6044820152606401610639565b81610f385760045491505b603b8211610f805760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b6044820152606401610639565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b610fdf33610b50565b610d115760405162461bcd60e51b815260040161063990614fc1565b61100433610b50565b6110205760405162461bcd60e51b815260040161063990614fc1565b600c546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611051903090600401614e35565b60206040518083038186803b15801561106957600080fd5b505afa15801561107d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a19190614ff1565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395dd9193306040518263ffffffff1660e01b81526004016110f19190614e35565b60206040518083038186803b15801561110957600080fd5b505afa15801561111d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111419190614ff1565b905080821115610c19576000611157828461505b565b90506000808511801561116957508482115b6111735781611175565b845b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016111c59190614e35565b60206040518083038186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112159190614ff1565b600c5490915061124f906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000846128fa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb7f0000000000000000000000000000000000000000000000000000000000000000837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016112ec9190614e35565b60206040518083038186803b15801561130457600080fd5b505afa158015611318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133c9190614ff1565b611346919061505b565b6040518363ffffffff1660e01b8152600401611363929190615072565b602060405180830381600087803b15801561137d57600080fd5b505af1158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b591906150a0565b50505050505050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146114065760405162461bcd60e51b815260040161063990614f8e565b6001600160a01b03811661145c5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610639565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114bf57600080fd5b505afa1580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f79190614f3a565b6001600160a01b0316146115465760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610639565b61154f816129d1565b6001546040516370a0823160e01b81526115e89183916001600160a01b03909116906370a0823190611585903090600401614e35565b60206040518083038186803b15801561159d57600080fd5b505afa1580156115b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d59190614ff1565b6001546001600160a01b03169190612b61565b610690817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016116389190614e35565b60206040518083038186803b15801561165057600080fd5b505afa158015611664573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116889190614ff1565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612b61565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561171257600080fd5b505afa158015611726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174a9190614f3a565b6001600160a01b0316336001600160a01b03161461177a5760405162461bcd60e51b815260040161063990614f57565b6001600160a01b0381166117d05760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610639565b6002546001600160a01b03828116911614156118265760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610639565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600061188c612bb7565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e957600080fd5b505afa1580156118fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119219190614f3a565b90506001600160a01b03811615611abf5760405163402914f560e01b81526000906001600160a01b0383169063402914f590611961903090600401614e35565b60006040518083038186803b15801561197957600080fd5b505afa15801561198d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119b591908101906151f5565b9150506000816000815181106119cd576119cd615259565b602002602001015190506000811115611abc57600354604051631d1f307960e31b81526000916001600160a01b03169063e8f983c890611a55907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090879060040161526f565b60006040518083038186803b158015611a6d57600080fd5b505afa158015611a81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aa99190810190615293565b509150611ab8905081866152e3565b9450505b50505b5090565b611acc33610b50565b611ae85760405162461bcd60e51b815260040161063990614fc1565b6002546001600160a01b0316611b385760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610639565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611bba5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610639565b611bc3816107ff565b15611c075760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610639565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611c4257600254610690906001600160a01b031647612f2a565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611c71903090600401614e35565b60206040518083038186803b158015611c8957600080fd5b505afa158015611c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc19190614ff1565b600254909150611cde906001600160a01b03848116911683612b61565b5050565b600061069d611882565b611cf533610b50565b611d115760405162461bcd60e51b815260040161063990614fc1565b6040516305eff7ef60e21b8152611dba906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc90611d61903090600401614e35565b602060405180830381600087803b158015611d7b57600080fd5b505af1158015611d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db39190614ff1565b6001613043565b6000600a819055600b55565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1f57600080fd5b505afa158015611e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e579190614f3a565b6001600160a01b0316336001600160a01b031614611e875760405162461bcd60e51b815260040161063990614f57565b6127108110611ed35760405162461bcd60e51b81526020600482015260186024820152771a5b9d985b1a590b5b585e0b589bdc9c9bddcb5b1a5b5a5d60421b6044820152606401610639565b80158015611edf575081155b80611ee957508181115b611f355760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e0000006044820152606401610639565b600a54600b546040805192835260208301859052820152606081018290527fedd77444afdf63401315e81ffe86d08f7865796e8ad2e11acf1d56a1393f07d59060800160405180910390a1600a91909155600b55565b6000611fa0836001600160a01b038416613147565b9392505050565b6000611fa0836001600160a01b038416613196565b6000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016120139190614e35565b60206040518083038186803b15801561202b57600080fd5b505afa15801561203f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120639190614ff1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156120bc57600080fd5b505afa1580156120d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f49190614ff1565b6120fe91906152fb565b612108919061531a565b600c546040516370a0823160e01b81526001600160a01b03909116906370a0823190612138903090600401614e35565b60206040518083038186803b15801561215057600080fd5b505afa158015612164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121889190614ff1565b61069d91906152e3565b6106907f000000000000000000000000000000000000000000000000000000000000000061168883613289565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148061223257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b80610846575050600c546001600160a01b0390811691161490565b6001600160a01b03811660009081526001830160205260408120541515611fa0565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b81526004016122c19190614e35565b60206040518083038186803b1580156122d957600080fd5b505afa1580156122ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123119190614ff1565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016123619190614e35565b60206040518083038186803b15801561237957600080fd5b505afa15801561238d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b19190614ff1565b90506123dc7f00000000000000000000000000000000000000000000000000000000000000006134b0565b6040516305eff7ef60e21b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc9061242b903090600401614e35565b602060405180830381600087803b15801561244557600080fd5b505af1158015612459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247d9190614ff1565b90506000612489611fbc565b9050808211156124aa576124a56124a0828461505b565b613686565b6124bc565b6124bc6124b7838361505b565b61390a565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061250b903090600401614e35565b60206040518083038186803b15801561252357600080fd5b505afa158015612537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255b9190614ff1565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633af9e669306040518263ffffffff1660e01b81526004016125ab9190614e35565b602060405180830381600087803b1580156125c557600080fd5b505af11580156125d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fd9190614ff1565b9050600061260b83836152e3565b9050858111156126265761261f868261505b565b9950612633565b612630818761505b565b98505b600061263f888c6152e3565b90508084101561271157600061265e612658868461505b565b85613a6c565b9050801561270f5761266f81613289565b506040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906126bc903090600401614e35565b60206040518083038186803b1580156126d457600080fd5b505afa1580156126e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270c9190614ff1565b94505b505b8715612724576127218489613a6c565b98505b5050505050505050909192565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612780903090600401614e35565b60206040518083038186803b15801561279857600080fd5b505afa1580156127ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d09190614ff1565b90506000806127e0836000613a82565b9092509050801561289b576127f6816000613043565b6040516370a0823160e01b8152610c19906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612846903090600401614e35565b60206040518083038186803b15801561285e57600080fd5b505afa158015612872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128969190614ff1565b613f28565b6128a483613f28565b610c1982614005565b60606000611fa0836140eb565b6128c381614147565b600c54610690906001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000008361439d565b6000600654612710141561290f5760016129bd565b6040516358fac00360e01b81526001600160a01b0380861660048301526024820184905284166044820152610e1060648201526129bd90730f1f5a87f99f0918e6c81f16e59f3518698221ff906358fac0039060840160206040518083038186803b15801561297d57600080fd5b505afa158015612991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b59190614ff1565b6006546144b0565b90506129cb848484846144d3565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a3457600080fd5b505afa158015612a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6c9190614f3a565b6001600160a01b031614612ab85760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b6044820152606401610639565b6040516305eff7ef60e21b8152610690906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc90612b08903090600401614e35565b602060405180830381600087803b158015612b2257600080fd5b505af1158015612b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5a9190614ff1565b6000613043565b610c198363a9059cbb60e01b8484604051602401612b80929190615072565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526146a8565b600080670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015612c1c57600080fd5b505afa158015612c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c549190614ff1565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612ca0903090600401614e35565b60206040518083038186803b158015612cb857600080fd5b505afa158015612ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf09190614ff1565b612cfa91906152fb565b612d04919061531a565b90506000612d10611fbc565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395dd9193306040518263ffffffff1660e01b8152600401612d609190614e35565b60206040518083038186803b158015612d7857600080fd5b505afa158015612d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db09190614ff1565b9050600082821115612e7857600354600c546001600160a01b039182169163f4de46f6917f00000000000000000000000000000000000000000000000000000000000000009116612e01878761505b565b6040518463ffffffff1660e01b8152600401612e1f9392919061526f565b60006040518083038186803b158015612e3757600080fd5b505afa158015612e4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e739190810190615293565b509150505b6040516370a0823160e01b815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612ec6903090600401614e35565b60206040518083038186803b158015612ede57600080fd5b505afa158015612ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f169190614ff1565b612f2090866152e3565b611ab8919061505b565b80471015612f7a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610639565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612fc7576040519150601f19603f3d011682016040523d82523d6000602084013e612fcc565b606091505b5050905080610c195760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610639565b8115611cde576000613053611fbc565b90508083111561313e57811561308c5761308c7f00000000000000000000000000000000000000000000000000000000000000006134b0565b6040516305eff7ef60e21b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc906130db903090600401614e35565b602060405180830381600087803b1580156130f557600080fd5b505af1158015613109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312d9190614ff1565b905061313c6124a0838361505b565b505b610c198361477a565b600081815260018301602052604081205461318e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610846565b506000610846565b6000818152600183016020526040812054801561327f5760006131ba60018361505b565b85549091506000906131ce9060019061505b565b90508181146132335760008660000182815481106131ee576131ee615259565b906000526020600020015490508087600001848154811061321157613211615259565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806132445761324461533c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610846565b6000915050610846565b600080613297600084613a82565b9150506132a5816001613043565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906132f4903090600401614e35565b60206040518083038186803b15801561330c57600080fd5b505afa158015613320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133449190614ff1565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633af9e669306040518263ffffffff1660e01b81526004016133949190614e35565b602060405180830381600087803b1580156133ae57600080fd5b505af11580156133c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e69190614ff1565b90506133ff8582116133f85781614859565b855b614859565b6040516370a0823160e01b815282906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061344d903090600401614e35565b60206040518083038186803b15801561346557600080fd5b505afa158015613479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061349d9190614ff1565b6134a7919061505b565b95945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b15801561350b57600080fd5b505afa15801561351f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135439190614f3a565b90506001600160a01b03811615611cde5760405163d279c19160e01b81526001600160a01b0382169063d279c19190613580903090600401614e35565b600060405180830381600087803b15801561359a57600080fd5b505af11580156135ae573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a0823190613601903090600401614e35565b60206040518083038186803b15801561361957600080fd5b505afa15801561362d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136519190614ff1565b90508015610c1957610c197f0000000000000000000000000000000000000000000000000000000000000000848360016144d3565b600354600c54604051637a6f237b60e11b8152600092839283926001600160a01b039283169263f4de46f6926136e6927f00000000000000000000000000000000000000000000000000000000000000009290911690899060040161526f565b60006040518083038186803b1580156136fe57600080fd5b505afa158015613712573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261373a9190810190615293565b9194509250905081156129cb576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613796903090600401614e35565b60206040518083038186803b1580156137ae57600080fd5b505afa1580156137c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137e69190614ff1565b9050808311156137fd576137fd6133fa828561505b565b600354604051636e74a6f760e01b8152600481018490526001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561384157600080fd5b505afa158015613855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138799190614f3a565b6001600160a01b0316638803dbee86858730426040518663ffffffff1660e01b81526004016138ac959493929190615352565b600060405180830381600087803b1580156138c657600080fd5b505af11580156138da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613902919081019061538e565b505050505050565b801561069057600c546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613941903090600401614e35565b60206040518083038186803b15801561395957600080fd5b505afa15801561396d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139919190614ff1565b905061399c82614932565b600c546040516370a0823160e01b815260009183916001600160a01b03909116906370a08231906139d1903090600401614e35565b60206040518083038186803b1580156139e957600080fd5b505afa1580156139fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a219190614ff1565b613a2b919061505b565b90508015610c1957600c54610c19906001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000008360016144d3565b6000818310613a7b5781611fa0565b5090919050565b600080831580613a90575082155b613ad05760405162461bcd60e51b8152602060048201526011602482015270616c6c2d696e7075742d67742d7a65726f60781b6044820152606401610639565b6040516305eff7ef60e21b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc90613b1f903090600401614e35565b602060405180830381600087803b158015613b3957600080fd5b505af1158015613b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b719190614ff1565b9050600b5460001415613b8957600092509050613f21565b604051633af9e66960e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633af9e66990613bd8903090600401614e35565b602060405180830381600087803b158015613bf257600080fd5b505af1158015613c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2a9190614ff1565b90506000613c577f0000000000000000000000000000000000000000000000000000000000000000614b48565b90506000808811613c7f57868311613c70576000613c89565b613c7a878461505b565b613c89565b613c8988846152e3565b90506000670de0b6b3a7640000613ca084846152fb565b613caa919061531a565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015613cfc57600080fd5b505afa158015613d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d349190614f3a565b90506000816001600160a01b031663fc57d4df7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401613d849190614e35565b60206040518083038186803b158015613d9c57600080fd5b505afa158015613db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dd49190614ff1565b90506000826001600160a01b031663fc57d4df7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401613e249190614e35565b60206040518083038186803b158015613e3c57600080fd5b505afa158015613e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e749190614ff1565b9050600081613e8384876152fb565b613e8d919061531a565b905080613ea9576000899a509a50505050505050505050613f21565b6000612710600b5483613ebc91906152fb565b613ec6919061531a565b90506000612710600a5484613edb91906152fb565b613ee5919061531a565b9050818b1115613f0057613ef9818c61505b565b9b50613f15565b8a811115613f1557613f128b8261505b565b9c505b50505050505050505050505b9250929050565b80156106905760405163140e25ad60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a0712d6890602401602060405180830381600087803b158015613f9057600080fd5b505af1158015613fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fc89190614ff1565b156106905760405162461bcd60e51b815260206004820152600d60248201526c1cdd5c1c1b1e4b59985a5b1959609a1b6044820152606401610639565b80156106905760405163317afabb60e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c5ebeaec90602401602060405180830381600087803b15801561406d57600080fd5b505af1158015614081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140a59190614ff1565b156140e25760405162461bcd60e51b815260206004820152600d60248201526c189bdc9c9bddcb59985a5b1959609a1b6044820152606401610639565b61069081614bd1565b60608160000180548060200260200160405190810160405280929190818152602001828054801561413b57602002820191906000526020600020905b815481526020019060010190808311614127575b50505050509050919050565b61419b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361439d565b6141ef6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361439d565b600c54614226906001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000008361439d565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561427757600080fd5b505afa15801561428b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142af9190614ff1565b811015611cde57600354604051636e74a6f760e01b8152600481018390526000916001600160a01b031690636e74a6f79060240160206040518083038186803b1580156142fb57600080fd5b505afa15801561430f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143339190614f3a565b905061433f8184614c4e565b6143736001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016828561439d565b600c5461438a906001600160a01b0316828561439d565b5080614395816153c3565b915050614229565b8015806144265750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156143ec57600080fd5b505afa158015614400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144249190614ff1565b155b6144915760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610639565b610c198363095ea7b360e01b8484604051602401612b80929190615072565b60006127106144bf838261505b565b6144c990856152fb565b611fa0919061531a565b826001600160a01b0316846001600160a01b031614156144f2576129cb565b600354604051631d1f307960e31b8152600091829182916001600160a01b03169063e8f983c89061452b908a908a908a9060040161526f565b60006040518083038186803b15801561454357600080fd5b505afa158015614557573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261457f9190810190615293565b925092509250836000141561459357600193505b81156113b557600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156145dd57600080fd5b505afa1580156145f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146159190614f3a565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401614648959493929190615352565b600060405180830381600087803b15801561466257600080fd5b505af1158015614676573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261469e919081019061538e565b5050505050505050565b60006146fd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614c829092919063ffffffff16565b805190915015610c19578080602001905181019061471b91906150a0565b610c195760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610639565b61478381614c99565b60405163073a938160e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630e75270290602401602060405180830381600087803b1580156147e557600080fd5b505af11580156147f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061481d9190614ff1565b156106905760405162461bcd60e51b815260206004820152600c60248201526b1c995c185e4b59985a5b195960a21b6044820152606401610639565b60405163852a12e360e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063852a12e390602401602060405180830381600087803b1580156148bb57600080fd5b505af11580156148cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148f39190614ff1565b156106905760405162461bcd60e51b815260206004820152600f60248201526e1dda5d1a191c985dcb59985a5b1959608a1b6044820152606401610639565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561498d57600080fd5b505afa1580156149a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149c59190614ff1565b90506000816149dc84670de0b6b3a76400006152fb565b6149e6919061531a565b9050670de0b6b3a76400006149fb83836152fb565b614a05919061531a565b8311614a115780614a1c565b614a1c8160016152e3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401614a6c9190614e35565b60206040518083038186803b158015614a8457600080fd5b505afa158015614a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614abc9190614ff1565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d828411614afa5783614afc565b825b6040518263ffffffff1660e01b8152600401614b1a91815260200190565b600060405180830381600087803b158015614b3457600080fd5b505af115801561469e573d6000803e3d6000fd5b600d54604051638e8f294b60e01b81526000916001600160a01b031690638e8f294b90614b79908590600401614e35565b60606040518083038186803b158015614b9157600080fd5b505afa158015614ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bc991906153de565b509392505050565b60405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015614c3357600080fd5b505af1158015614c47573d6000803e3d6000fd5b5050505050565b611cde6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838361439d565b6060614c918484600085614ca2565b949350505050565b61069081614932565b606082471015614d035760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610639565b843b614d515760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610639565b600080866001600160a01b03168587604051614d6d919061541a565b60006040518083038185875af1925050503d8060008114614daa576040519150601f19603f3d011682016040523d82523d6000602084013e614daf565b606091505b5091509150614dbf828286614dca565b979650505050505050565b60608315614dd9575081611fa0565b825115614de95782518084602001fd5b8160405162461bcd60e51b81526004016106399190614ee5565b6001600160a01b038116811461069057600080fd5b600060208284031215614e2a57600080fd5b8135611fa081614e03565b6001600160a01b0391909116815260200190565b600060208284031215614e5b57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015614e9b5781516001600160a01b031687529582019590820190600101614e76565b509495945050505050565b602081526000611fa06020830184614e62565b60005b83811015614ed4578181015183820152602001614ebc565b838111156129cb5750506000910152565b6020815260008251806020840152614f04816040850160208701614eb9565b601f01601f19169190910160400192915050565b60008060408385031215614f2b57600080fd5b50508035926020909101359150565b600060208284031215614f4c57600080fd5b8151611fa081614e03565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b60006020828403121561500357600080fd5b5051919050565b600181811c9082168061501e57607f821691505b6020821081141561503f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561506d5761506d615045565b500390565b6001600160a01b03929092168252602082015260400190565b8051801515811461509b57600080fd5b919050565b6000602082840312156150b257600080fd5b611fa08261508b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156150fa576150fa6150bb565b604052919050565b600067ffffffffffffffff82111561511c5761511c6150bb565b5060051b60200190565b600082601f83011261513757600080fd5b8151602061514c61514783615102565b6150d1565b82815260059290921b8401810191818101908684111561516b57600080fd5b8286015b8481101561518f57805161518281614e03565b835291830191830161516f565b509695505050505050565b600082601f8301126151ab57600080fd5b815160206151bb61514783615102565b82815260059290921b840181019181810190868411156151da57600080fd5b8286015b8481101561518f57805183529183019183016151de565b6000806040838503121561520857600080fd5b825167ffffffffffffffff8082111561522057600080fd5b61522c86838701615126565b9350602085015191508082111561524257600080fd5b5061524f8582860161519a565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000806000606084860312156152a857600080fd5b835167ffffffffffffffff8111156152bf57600080fd5b6152cb86828701615126565b93505060208401519150604084015190509250925092565b600082198211156152f6576152f6615045565b500190565b600081600019048311821515161561531557615315615045565b500290565b60008261533757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fd5b85815284602082015260a06040820152600061537160a0830186614e62565b6001600160a01b0394909416606083015250608001529392505050565b6000602082840312156153a057600080fd5b815167ffffffffffffffff8111156153b757600080fd5b614c918482850161519a565b60006000198214156153d7576153d7615045565b5060010190565b6000806000606084860312156153f357600080fd5b6153fc8461508b565b9250602084015191506154116040850161508b565b90509250925092565b6000825161542c818460208701614eb9565b919091019291505056fea2646970667358221220f1e5a8c198ade7e680e70cae4f2977eed26c5c893829fdcb45c161287ad1842d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102485760003560e01c806399b71d5c1161013b578063d4c3eea0116100b8578063efead58c1161007c578063efead58c14610501578063fa3ae6dc14610528578063fb7ee10214610530578063fc0c546a14610543578063ffa1ad741461055457600080fd5b8063d4c3eea0146104c2578063e00af4a7146104ca578063e260d747146104dd578063e645c202146104e6578063ec78e832146104ee57600080fd5b8063c415b95c116100ff578063c415b95c1461046d578063c7ad274814610480578063cd2d7ebe14610493578063ce5494bb1461049c578063d2c35ce8146104af57600080fd5b806399b71d5c1461040e578063a3f4df7e14610416578063a923b2a61461042b578063aa1018861461043e578063b2016bd41461044657600080fd5b8063456dc17a116101c957806367f5e4b81161018d57806367f5e4b8146103c3578063709d039d146103d65780637d7c2a1c146103e957806392986024146103f1578063951dc22c146103f957600080fd5b8063456dc17a1461033c5780634c36fad71461034f5780635fe3b56714610362578063620a96d5146103755780636719578c1461039c57600080fd5b806329ba73ed1161021057806329ba73ed146102c35780632e1a7d4d146102ea5780634032b72b146102fd57806342189c8f14610310578063440d72481461031957600080fd5b80630181686c1461024d57806314ae9f2e1461026957806316f0115b1461027e5780631aedeabe146102b2578063243cd14e146102bb575b600080fd5b610256600b5481565b6040519081526020015b60405180910390f35b61027c610277366004614e18565b610578565b005b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6040516102609190614e35565b61025660065481565b610256610693565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b61027c6102f8366004614e49565b6106a2565b61027c61030b366004614e18565b6106f3565b61025660045481565b61032c610327366004614e18565b6107ff565b6040519015158152602001610260565b600c546102a5906001600160a01b031681565b61027c61035d366004614e18565b61084c565b600d546102a5906001600160a01b031681565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b61027c6103d1366004614e49565b6109ff565b6003546102a5906001600160a01b031681565b61027c610b4b565b61032c610c1e565b610401610ccb565b6040516102609190614ea6565b61027c610cd7565b61041e610d13565b6040516102609190614ee5565b61027c610439366004614f18565b610da1565b61027c610fd6565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6002546102a5906001600160a01b031681565b61027c61048e366004614e49565b610ffb565b61025660055481565b61027c6104aa366004614e18565b6113be565b61027c6104bd366004614e18565b6116b9565b610256611882565b61027c6104d8366004614e18565b611ac3565b610256600a5481565b610256611ce2565b6001546102a5906001600160a01b031681565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b61027c611cec565b61027c61053e366004614f18565b611dc6565b6001546001600160a01b03166102a5565b61041e604051806040016040528060058152602001640342e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d157600080fd5b505afa1580156105e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106099190614f3a565b6001600160a01b0316336001600160a01b0316146106425760405162461bcd60e51b815260040161063990614f57565b60405180910390fd5b61064d600782611fa7565b6106905760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610639565b50565b600061069d611fbc565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106ea5760405162461bcd60e51b815260040161063990614f8e565b61069081612192565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561074c57600080fd5b505afa158015610760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107849190614f3a565b6001600160a01b0316336001600160a01b0316146107b45760405162461bcd60e51b815260040161063990614f57565b6107bf600782611f8b565b6106905760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610639565b600061080a826121bf565b8061084657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a557600080fd5b505afa1580156108b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dd9190614f3a565b6001600160a01b0316336001600160a01b03161461090d5760405162461bcd60e51b815260040161063990614f57565b6001600160a01b0381166109585760405162461bcd60e51b8152602060048201526012602482015271736d2d616464726573732d69732d7a65726f60701b6044820152606401610639565b6003546001600160a01b03828116911614156109a35760405162461bcd60e51b815260206004820152600a602482015269736d2d69732d73616d6560b01b6044820152606401610639565b6003546040516001600160a01b038084169216907f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e190600090a3600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5857600080fd5b505afa158015610a6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a909190614f3a565b6001600160a01b0316336001600160a01b031614610ac05760405162461bcd60e51b815260040161063990614f57565b612710811115610b0b5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610639565b60065460408051918252602082018390527ef1c5db862c7598b3b6765552ca951f498611e06412c2d57f8d0b58f82e7f82910160405180910390a1600655565b610b58335b60079061224d565b610b745760405162461bcd60e51b815260040161063990614fc1565b6000806000610b8161226f565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015610bf957600080fd5b505af1158015610c0d573d6000803e3d6000fd5b50505050610c19612731565b505050565b604051639f2b283360e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b283390610c6d903090600401614e35565b60206040518083038186803b158015610c8557600080fd5b505afa158015610c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbd9190614ff1565b610cc5611882565b10905090565b606061069d60076128ad565b610ce033610b50565b610cfc5760405162461bcd60e51b815260040161063990614fc1565b610d0660006128ba565b610d116000196128ba565b565b60098054610d209061500a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4c9061500a565b8015610d995780601f10610d6e57610100808354040283529160200191610d99565b820191906000526020600020905b815481529060010190602001808311610d7c57829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610dfa57600080fd5b505afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e329190614f3a565b6001600160a01b0316336001600160a01b031614610e625760405162461bcd60e51b815260040161063990614f57565b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb057600080fd5b505afa158015610ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee89190614ff1565b8110610f2d5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c85ae4deeae8cae45ad2dcc8caf60631b6044820152606401610639565b81610f385760045491505b603b8211610f805760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590b5bdc9858db194b5c195c9a5bd9605a1b6044820152606401610639565b6004546005546040805192835260208301859052820152606081018290527f83bc5ab8030537fcf1d29c2334f6d22c26c82dcbe5ff03923d2cff5c692c0a7f9060800160405180910390a1600491909155600555565b610fdf33610b50565b610d115760405162461bcd60e51b815260040161063990614fc1565b61100433610b50565b6110205760405162461bcd60e51b815260040161063990614fc1565b600c546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611051903090600401614e35565b60206040518083038186803b15801561106957600080fd5b505afa15801561107d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a19190614ff1565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395dd9193306040518263ffffffff1660e01b81526004016110f19190614e35565b60206040518083038186803b15801561110957600080fd5b505afa15801561111d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111419190614ff1565b905080821115610c19576000611157828461505b565b90506000808511801561116957508482115b6111735781611175565b845b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016111c59190614e35565b60206040518083038186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112159190614ff1565b600c5490915061124f906001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000846128fa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb7f0000000000000000000000000000000000000000000000000000000000000000837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016112ec9190614e35565b60206040518083038186803b15801561130457600080fd5b505afa158015611318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133c9190614ff1565b611346919061505b565b6040518363ffffffff1660e01b8152600401611363929190615072565b602060405180830381600087803b15801561137d57600080fd5b505af1158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b591906150a0565b50505050505050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146114065760405162461bcd60e51b815260040161063990614f8e565b6001600160a01b03811661145c5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610639565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114bf57600080fd5b505afa1580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f79190614f3a565b6001600160a01b0316146115465760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610639565b61154f816129d1565b6001546040516370a0823160e01b81526115e89183916001600160a01b03909116906370a0823190611585903090600401614e35565b60206040518083038186803b15801561159d57600080fd5b505afa1580156115b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d59190614ff1565b6001546001600160a01b03169190612b61565b610690817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016116389190614e35565b60206040518083038186803b15801561165057600080fd5b505afa158015611664573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116889190614ff1565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612b61565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561171257600080fd5b505afa158015611726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174a9190614f3a565b6001600160a01b0316336001600160a01b03161461177a5760405162461bcd60e51b815260040161063990614f57565b6001600160a01b0381166117d05760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610639565b6002546001600160a01b03828116911614156118265760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610639565b6002546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600061188c612bb7565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e957600080fd5b505afa1580156118fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119219190614f3a565b90506001600160a01b03811615611abf5760405163402914f560e01b81526000906001600160a01b0383169063402914f590611961903090600401614e35565b60006040518083038186803b15801561197957600080fd5b505afa15801561198d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119b591908101906151f5565b9150506000816000815181106119cd576119cd615259565b602002602001015190506000811115611abc57600354604051631d1f307960e31b81526000916001600160a01b03169063e8f983c890611a55907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090879060040161526f565b60006040518083038186803b158015611a6d57600080fd5b505afa158015611a81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aa99190810190615293565b509150611ab8905081866152e3565b9450505b50505b5090565b611acc33610b50565b611ae85760405162461bcd60e51b815260040161063990614fc1565b6002546001600160a01b0316611b385760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610639565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611bba5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610639565b611bc3816107ff565b15611c075760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610639565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611c4257600254610690906001600160a01b031647612f2a565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611c71903090600401614e35565b60206040518083038186803b158015611c8957600080fd5b505afa158015611c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc19190614ff1565b600254909150611cde906001600160a01b03848116911683612b61565b5050565b600061069d611882565b611cf533610b50565b611d115760405162461bcd60e51b815260040161063990614fc1565b6040516305eff7ef60e21b8152611dba906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc90611d61903090600401614e35565b602060405180830381600087803b158015611d7b57600080fd5b505af1158015611d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db39190614ff1565b6001613043565b6000600a819055600b55565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611e1f57600080fd5b505afa158015611e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e579190614f3a565b6001600160a01b0316336001600160a01b031614611e875760405162461bcd60e51b815260040161063990614f57565b6127108110611ed35760405162461bcd60e51b81526020600482015260186024820152771a5b9d985b1a590b5b585e0b589bdc9c9bddcb5b1a5b5a5d60421b6044820152606401610639565b80158015611edf575081155b80611ee957508181115b611f355760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e0000006044820152606401610639565b600a54600b546040805192835260208301859052820152606081018290527fedd77444afdf63401315e81ffe86d08f7865796e8ad2e11acf1d56a1393f07d59060800160405180910390a1600a91909155600b55565b6000611fa0836001600160a01b038416613147565b9392505050565b6000611fa0836001600160a01b038416613196565b6000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016120139190614e35565b60206040518083038186803b15801561202b57600080fd5b505afa15801561203f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120639190614ff1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156120bc57600080fd5b505afa1580156120d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f49190614ff1565b6120fe91906152fb565b612108919061531a565b600c546040516370a0823160e01b81526001600160a01b03909116906370a0823190612138903090600401614e35565b60206040518083038186803b15801561215057600080fd5b505afa158015612164573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121889190614ff1565b61069d91906152e3565b6106907f000000000000000000000000000000000000000000000000000000000000000061168883613289565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148061223257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b80610846575050600c546001600160a01b0390811691161490565b6001600160a01b03811660009081526001830160205260408120541515611fa0565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b81526004016122c19190614e35565b60206040518083038186803b1580156122d957600080fd5b505afa1580156122ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123119190614ff1565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016123619190614e35565b60206040518083038186803b15801561237957600080fd5b505afa15801561238d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b19190614ff1565b90506123dc7f00000000000000000000000000000000000000000000000000000000000000006134b0565b6040516305eff7ef60e21b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc9061242b903090600401614e35565b602060405180830381600087803b15801561244557600080fd5b505af1158015612459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247d9190614ff1565b90506000612489611fbc565b9050808211156124aa576124a56124a0828461505b565b613686565b6124bc565b6124bc6124b7838361505b565b61390a565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061250b903090600401614e35565b60206040518083038186803b15801561252357600080fd5b505afa158015612537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255b9190614ff1565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633af9e669306040518263ffffffff1660e01b81526004016125ab9190614e35565b602060405180830381600087803b1580156125c557600080fd5b505af11580156125d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fd9190614ff1565b9050600061260b83836152e3565b9050858111156126265761261f868261505b565b9950612633565b612630818761505b565b98505b600061263f888c6152e3565b90508084101561271157600061265e612658868461505b565b85613a6c565b9050801561270f5761266f81613289565b506040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906126bc903090600401614e35565b60206040518083038186803b1580156126d457600080fd5b505afa1580156126e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270c9190614ff1565b94505b505b8715612724576127218489613a6c565b98505b5050505050505050909192565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612780903090600401614e35565b60206040518083038186803b15801561279857600080fd5b505afa1580156127ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d09190614ff1565b90506000806127e0836000613a82565b9092509050801561289b576127f6816000613043565b6040516370a0823160e01b8152610c19906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612846903090600401614e35565b60206040518083038186803b15801561285e57600080fd5b505afa158015612872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128969190614ff1565b613f28565b6128a483613f28565b610c1982614005565b60606000611fa0836140eb565b6128c381614147565b600c54610690906001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000008361439d565b6000600654612710141561290f5760016129bd565b6040516358fac00360e01b81526001600160a01b0380861660048301526024820184905284166044820152610e1060648201526129bd90730f1f5a87f99f0918e6c81f16e59f3518698221ff906358fac0039060840160206040518083038186803b15801561297d57600080fd5b505afa158015612991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129b59190614ff1565b6006546144b0565b90506129cb848484846144d3565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a3457600080fd5b505afa158015612a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6c9190614f3a565b6001600160a01b031614612ab85760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b6044820152606401610639565b6040516305eff7ef60e21b8152610690906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc90612b08903090600401614e35565b602060405180830381600087803b158015612b2257600080fd5b505af1158015612b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5a9190614ff1565b6000613043565b610c198363a9059cbb60e01b8484604051602401612b80929190615072565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526146a8565b600080670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015612c1c57600080fd5b505afa158015612c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c549190614ff1565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612ca0903090600401614e35565b60206040518083038186803b158015612cb857600080fd5b505afa158015612ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf09190614ff1565b612cfa91906152fb565b612d04919061531a565b90506000612d10611fbc565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166395dd9193306040518263ffffffff1660e01b8152600401612d609190614e35565b60206040518083038186803b158015612d7857600080fd5b505afa158015612d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db09190614ff1565b9050600082821115612e7857600354600c546001600160a01b039182169163f4de46f6917f00000000000000000000000000000000000000000000000000000000000000009116612e01878761505b565b6040518463ffffffff1660e01b8152600401612e1f9392919061526f565b60006040518083038186803b158015612e3757600080fd5b505afa158015612e4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e739190810190615293565b509150505b6040516370a0823160e01b815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612ec6903090600401614e35565b60206040518083038186803b158015612ede57600080fd5b505afa158015612ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f169190614ff1565b612f2090866152e3565b611ab8919061505b565b80471015612f7a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610639565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612fc7576040519150601f19603f3d011682016040523d82523d6000602084013e612fcc565b606091505b5050905080610c195760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610639565b8115611cde576000613053611fbc565b90508083111561313e57811561308c5761308c7f00000000000000000000000000000000000000000000000000000000000000006134b0565b6040516305eff7ef60e21b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc906130db903090600401614e35565b602060405180830381600087803b1580156130f557600080fd5b505af1158015613109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312d9190614ff1565b905061313c6124a0838361505b565b505b610c198361477a565b600081815260018301602052604081205461318e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610846565b506000610846565b6000818152600183016020526040812054801561327f5760006131ba60018361505b565b85549091506000906131ce9060019061505b565b90508181146132335760008660000182815481106131ee576131ee615259565b906000526020600020015490508087600001848154811061321157613211615259565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806132445761324461533c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610846565b6000915050610846565b600080613297600084613a82565b9150506132a5816001613043565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906132f4903090600401614e35565b60206040518083038186803b15801561330c57600080fd5b505afa158015613320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133449190614ff1565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633af9e669306040518263ffffffff1660e01b81526004016133949190614e35565b602060405180830381600087803b1580156133ae57600080fd5b505af11580156133c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e69190614ff1565b90506133ff8582116133f85781614859565b855b614859565b6040516370a0823160e01b815282906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061344d903090600401614e35565b60206040518083038186803b15801561346557600080fd5b505afa158015613479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061349d9190614ff1565b6134a7919061505b565b95945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b15801561350b57600080fd5b505afa15801561351f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135439190614f3a565b90506001600160a01b03811615611cde5760405163d279c19160e01b81526001600160a01b0382169063d279c19190613580903090600401614e35565b600060405180830381600087803b15801561359a57600080fd5b505af11580156135ae573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a0823190613601903090600401614e35565b60206040518083038186803b15801561361957600080fd5b505afa15801561362d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136519190614ff1565b90508015610c1957610c197f0000000000000000000000000000000000000000000000000000000000000000848360016144d3565b600354600c54604051637a6f237b60e11b8152600092839283926001600160a01b039283169263f4de46f6926136e6927f00000000000000000000000000000000000000000000000000000000000000009290911690899060040161526f565b60006040518083038186803b1580156136fe57600080fd5b505afa158015613712573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261373a9190810190615293565b9194509250905081156129cb576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613796903090600401614e35565b60206040518083038186803b1580156137ae57600080fd5b505afa1580156137c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137e69190614ff1565b9050808311156137fd576137fd6133fa828561505b565b600354604051636e74a6f760e01b8152600481018490526001600160a01b0390911690636e74a6f79060240160206040518083038186803b15801561384157600080fd5b505afa158015613855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138799190614f3a565b6001600160a01b0316638803dbee86858730426040518663ffffffff1660e01b81526004016138ac959493929190615352565b600060405180830381600087803b1580156138c657600080fd5b505af11580156138da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613902919081019061538e565b505050505050565b801561069057600c546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613941903090600401614e35565b60206040518083038186803b15801561395957600080fd5b505afa15801561396d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139919190614ff1565b905061399c82614932565b600c546040516370a0823160e01b815260009183916001600160a01b03909116906370a08231906139d1903090600401614e35565b60206040518083038186803b1580156139e957600080fd5b505afa1580156139fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a219190614ff1565b613a2b919061505b565b90508015610c1957600c54610c19906001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000008360016144d3565b6000818310613a7b5781611fa0565b5090919050565b600080831580613a90575082155b613ad05760405162461bcd60e51b8152602060048201526011602482015270616c6c2d696e7075742d67742d7a65726f60781b6044820152606401610639565b6040516305eff7ef60e21b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906317bfdfbc90613b1f903090600401614e35565b602060405180830381600087803b158015613b3957600080fd5b505af1158015613b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b719190614ff1565b9050600b5460001415613b8957600092509050613f21565b604051633af9e66960e01b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633af9e66990613bd8903090600401614e35565b602060405180830381600087803b158015613bf257600080fd5b505af1158015613c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c2a9190614ff1565b90506000613c577f0000000000000000000000000000000000000000000000000000000000000000614b48565b90506000808811613c7f57868311613c70576000613c89565b613c7a878461505b565b613c89565b613c8988846152e3565b90506000670de0b6b3a7640000613ca084846152fb565b613caa919061531a565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015613cfc57600080fd5b505afa158015613d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d349190614f3a565b90506000816001600160a01b031663fc57d4df7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401613d849190614e35565b60206040518083038186803b158015613d9c57600080fd5b505afa158015613db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dd49190614ff1565b90506000826001600160a01b031663fc57d4df7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401613e249190614e35565b60206040518083038186803b158015613e3c57600080fd5b505afa158015613e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e749190614ff1565b9050600081613e8384876152fb565b613e8d919061531a565b905080613ea9576000899a509a50505050505050505050613f21565b6000612710600b5483613ebc91906152fb565b613ec6919061531a565b90506000612710600a5484613edb91906152fb565b613ee5919061531a565b9050818b1115613f0057613ef9818c61505b565b9b50613f15565b8a811115613f1557613f128b8261505b565b9c505b50505050505050505050505b9250929050565b80156106905760405163140e25ad60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a0712d6890602401602060405180830381600087803b158015613f9057600080fd5b505af1158015613fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fc89190614ff1565b156106905760405162461bcd60e51b815260206004820152600d60248201526c1cdd5c1c1b1e4b59985a5b1959609a1b6044820152606401610639565b80156106905760405163317afabb60e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c5ebeaec90602401602060405180830381600087803b15801561406d57600080fd5b505af1158015614081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140a59190614ff1565b156140e25760405162461bcd60e51b815260206004820152600d60248201526c189bdc9c9bddcb59985a5b1959609a1b6044820152606401610639565b61069081614bd1565b60608160000180548060200260200160405190810160405280929190818152602001828054801561413b57602002820191906000526020600020905b815481526020019060010190808311614127575b50505050509050919050565b61419b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361439d565b6141ef6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361439d565b600c54614226906001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000008361439d565b60005b600360009054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b15801561427757600080fd5b505afa15801561428b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142af9190614ff1565b811015611cde57600354604051636e74a6f760e01b8152600481018390526000916001600160a01b031690636e74a6f79060240160206040518083038186803b1580156142fb57600080fd5b505afa15801561430f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143339190614f3a565b905061433f8184614c4e565b6143736001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016828561439d565b600c5461438a906001600160a01b0316828561439d565b5080614395816153c3565b915050614229565b8015806144265750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156143ec57600080fd5b505afa158015614400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144249190614ff1565b155b6144915760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610639565b610c198363095ea7b360e01b8484604051602401612b80929190615072565b60006127106144bf838261505b565b6144c990856152fb565b611fa0919061531a565b826001600160a01b0316846001600160a01b031614156144f2576129cb565b600354604051631d1f307960e31b8152600091829182916001600160a01b03169063e8f983c89061452b908a908a908a9060040161526f565b60006040518083038186803b15801561454357600080fd5b505afa158015614557573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261457f9190810190615293565b925092509250836000141561459357600193505b81156113b557600354604051636e74a6f760e01b8152600481018390526001600160a01b0390911690636e74a6f79060240160206040518083038186803b1580156145dd57600080fd5b505afa1580156145f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146159190614f3a565b6001600160a01b03166338ed173986868630426040518663ffffffff1660e01b8152600401614648959493929190615352565b600060405180830381600087803b15801561466257600080fd5b505af1158015614676573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261469e919081019061538e565b5050505050505050565b60006146fd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614c829092919063ffffffff16565b805190915015610c19578080602001905181019061471b91906150a0565b610c195760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610639565b61478381614c99565b60405163073a938160e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630e75270290602401602060405180830381600087803b1580156147e557600080fd5b505af11580156147f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061481d9190614ff1565b156106905760405162461bcd60e51b815260206004820152600c60248201526b1c995c185e4b59985a5b195960a21b6044820152606401610639565b60405163852a12e360e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063852a12e390602401602060405180830381600087803b1580156148bb57600080fd5b505af11580156148cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148f39190614ff1565b156106905760405162461bcd60e51b815260206004820152600f60248201526e1dda5d1a191c985dcb59985a5b1959608a1b6044820152606401610639565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561498d57600080fd5b505afa1580156149a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149c59190614ff1565b90506000816149dc84670de0b6b3a76400006152fb565b6149e6919061531a565b9050670de0b6b3a76400006149fb83836152fb565b614a05919061531a565b8311614a115780614a1c565b614a1c8160016152e3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401614a6c9190614e35565b60206040518083038186803b158015614a8457600080fd5b505afa158015614a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614abc9190614ff1565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d828411614afa5783614afc565b825b6040518263ffffffff1660e01b8152600401614b1a91815260200190565b600060405180830381600087803b158015614b3457600080fd5b505af115801561469e573d6000803e3d6000fd5b600d54604051638e8f294b60e01b81526000916001600160a01b031690638e8f294b90614b79908590600401614e35565b60606040518083038186803b158015614b9157600080fd5b505afa158015614ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bc991906153de565b509392505050565b60405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401600060405180830381600087803b158015614c3357600080fd5b505af1158015614c47573d6000803e3d6000fd5b5050505050565b611cde6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016838361439d565b6060614c918484600085614ca2565b949350505050565b61069081614932565b606082471015614d035760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610639565b843b614d515760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610639565b600080866001600160a01b03168587604051614d6d919061541a565b60006040518083038185875af1925050503d8060008114614daa576040519150601f19603f3d011682016040523d82523d6000602084013e614daf565b606091505b5091509150614dbf828286614dca565b979650505050505050565b60608315614dd9575081611fa0565b825115614de95782518084602001fd5b8160405162461bcd60e51b81526004016106399190614ee5565b6001600160a01b038116811461069057600080fd5b600060208284031215614e2a57600080fd5b8135611fa081614e03565b6001600160a01b0391909116815260200190565b600060208284031215614e5b57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015614e9b5781516001600160a01b031687529582019590820190600101614e76565b509495945050505050565b602081526000611fa06020830184614e62565b60005b83811015614ed4578181015183820152602001614ebc565b838111156129cb5750506000910152565b6020815260008251806020840152614f04816040850160208701614eb9565b601f01601f19169190910160400192915050565b60008060408385031215614f2b57600080fd5b50508035926020909101359150565b600060208284031215614f4c57600080fd5b8151611fa081614e03565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b60006020828403121561500357600080fd5b5051919050565b600181811c9082168061501e57607f821691505b6020821081141561503f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561506d5761506d615045565b500390565b6001600160a01b03929092168252602082015260400190565b8051801515811461509b57600080fd5b919050565b6000602082840312156150b257600080fd5b611fa08261508b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156150fa576150fa6150bb565b604052919050565b600067ffffffffffffffff82111561511c5761511c6150bb565b5060051b60200190565b600082601f83011261513757600080fd5b8151602061514c61514783615102565b6150d1565b82815260059290921b8401810191818101908684111561516b57600080fd5b8286015b8481101561518f57805161518281614e03565b835291830191830161516f565b509695505050505050565b600082601f8301126151ab57600080fd5b815160206151bb61514783615102565b82815260059290921b840181019181810190868411156151da57600080fd5b8286015b8481101561518f57805183529183019183016151de565b6000806040838503121561520857600080fd5b825167ffffffffffffffff8082111561522057600080fd5b61522c86838701615126565b9350602085015191508082111561524257600080fd5b5061524f8582860161519a565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000806000606084860312156152a857600080fd5b835167ffffffffffffffff8111156152bf57600080fd5b6152cb86828701615126565b93505060208401519150604084015190509250925092565b600082198211156152f6576152f6615045565b500190565b600081600019048311821515161561531557615315615045565b500290565b60008261533757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fd5b85815284602082015260a06040820152600061537160a0830186614e62565b6001600160a01b0394909416606083015250608001529392505050565b6000602082840312156153a057600080fd5b815167ffffffffffffffff8111156153b757600080fd5b614c918482850161519a565b60006000198214156153d7576153d7615045565b5060010190565b6000806000606084860312156153f357600080fd5b6153fc8461508b565b9250602084015191506154116040850161508b565b90509250925092565b6000825161542c818460208701614eb9565b919091019291505056fea2646970667358221220f1e5a8c198ade7e680e70cae4f2977eed26c5c893829fdcb45c161287ad1842d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "details": "Rebalance profit, loss and investment of this strategy"
      },
      "recoverBorrowToken(uint256)": {
        "details": "If we get liquidation in Compound, we will have borrowToken sitting in strategy. This function allows to recover idle borrow token amount.",
        "params": {
          "_amountToRecover": "Amount of borrow token we want to recover in 1 call.      Set it 0 to recover all available borrow tokens"
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "repayAll()": {
        "details": "This action usually done when loss is detected in strategy.0 borrow limit make sure that any future rebalance do not borrow again."
      },
      "sweepERC20(address)": {
        "details": "sweep given token to feeCollector of strategy",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "totalValueCurrent()": {
        "details": "Report total value in collateral token"
      },
      "updateBorrowLimit(uint256,uint256)": {
        "details": "It is possible to set 0 as _minBorrowLimit to not borrow anything",
        "params": {
          "_maxBorrowLimit": "It is % of actual collateral factor of protocol",
          "_minBorrowLimit": "It is % of actual collateral factor of protocol"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "Deposit Collateral in IronBank and earn interest by depositing borrowed token in a Vesper Pool.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "borrowBalance()": {
        "notice": "Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool"
      },
      "isLossMaking()": {
        "notice": "Calculate current position based on totalValue and debt of strategy"
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "recoverBorrowToken(uint256)": {
        "notice": "Recover extra borrow tokens from strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "repayAll()": {
        "notice": "Repay all borrow amount and set min borrow limit to 0."
      },
      "token()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "totalValue()": {
        "notice": "Calculate total value based VSP rewards, supply and borrow position"
      },
      "totalValueCurrent()": {
        "notice": "Calculate total value of asset under management (in real-time)"
      },
      "updateBorrowLimit(uint256,uint256)": {
        "notice": "Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol."
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13972,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "WETH",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13977,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "receiptToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13983,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "feeCollector",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13986,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "swapManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ISwapManager)5729"
      },
      {
        "astId": 13989,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "oraclePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13992,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "oracleRouterIdx",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 13995,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "swapSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 13998,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "_keepers",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)4634_storage"
      },
      {
        "astId": 26379,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "NAME",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 26391,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "minBorrowLimit",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 26394,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "maxBorrowLimit",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 26396,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "borrowToken",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 26399,
        "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
        "label": "comptroller",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(Comptroller)5923"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Comptroller)5923": {
        "encoding": "inplace",
        "label": "contract Comptroller",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)5729": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4634_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4633,
            "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4333_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4333_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4328,
            "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4332,
            "contract": "contracts/strategies/compound/VesperIronBankXYStrategy.sol:VesperIronBankXYStrategy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}