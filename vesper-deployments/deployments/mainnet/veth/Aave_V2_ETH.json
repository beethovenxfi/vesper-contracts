{
  "address": "0xE5eF7F0835213E820b1eC86Ce10Fb78eDD32aF6E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiptToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AAVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveIncentivesController",
      "outputs": [
        {
          "internalType": "contract AaveIncentivesController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveLendingPool",
      "outputs": [
        {
          "internalType": "contract AaveLendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveProtocolDataProvider",
      "outputs": [
        {
          "internalType": "contract AaveProtocolDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canStartCooldown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canUnstake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cooldownData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_cooldownStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cooldownEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unstakeEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startCooldown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stkAAVE",
      "outputs": [
        {
          "internalType": "contract StakedAave",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeAave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x08ef442af892e41ad1768299a0f62a316fd084f70b6ecf36ba2110120cc314de",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xE5eF7F0835213E820b1eC86Ce10Fb78eDD32aF6E",
    "transactionIndex": 20,
    "gasUsed": "3021847",
    "logsBloom": "0x
    "blockHash": "0x8cc21fa10cee5250b2bc81cf2e674eadb9e524cf6bd635c1cb5c85e137d2df4a",
    "transactionHash": "0x08ef442af892e41ad1768299a0f62a316fd084f70b6ecf36ba2110120cc314de",
    "logs": [],
    "blockNumber": 15532610,
    "cumulativeGasUsed": "5189057",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x951397286E4b78aE5827502ed494d7902D3CCA8C",
    "0x8f156189A3CD28dFc8FB7BbbAce58F98F09c0bB3",
    "0x030bA81f1c18d280636F32af80b9AAd02Cf0854e",
    "Aave_V2_ETH"
  ],
  "numDeployments": 1,
  "solcInputHash": "14d008c3c1d3ad58729812cf4060964d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveIncentivesController\",\"outputs\":[{\"internalType\":\"contract AaveIncentivesController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveLendingPool\",\"outputs\":[{\"internalType\":\"contract AaveLendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveProtocolDataProvider\",\"outputs\":[{\"internalType\":\"contract AaveProtocolDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canStartCooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cooldownEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unstakeEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stkAAVE\",\"outputs\":[{\"internalType\":\"contract StakedAave\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This strategy will deposit collateral token in Aave and earn interest.\",\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"tvl()\":{\"details\":\"aToken and collateral are 1:1\"},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"canStartCooldown()\":{\"notice\":\"Returns true if we should start cooldown\"},\"canUnstake()\":{\"notice\":\"Returns true if Aave can be unstaked\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"cooldownData()\":{\"notice\":\"Return cooldown related timestamps\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"startCooldown()\":{\"notice\":\"Initiate cooldown to unstake aave.\"},\"sweepERC20(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Report total value locked\"},\"unstakeAave()\":{\"notice\":\"Unstake Aave from stakedAave contract\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol\":\"AaveV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance()\\n        external\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xddea3754059443771113c169ee1647ef9e83ee6ee509a911ceb7729fea62adc0\",\"license\":\"MIT\"},\"vesper-pools/contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title Errors library\\nlibrary Errors {\\n    string public constant INVALID_COLLATERAL_AMOUNT = \\\"1\\\"; // Collateral must be greater than 0 or > defined limit\\n    string public constant INVALID_SHARE_AMOUNT = \\\"2\\\"; // Share must be greater than 0\\n    string public constant INVALID_INPUT_LENGTH = \\\"3\\\"; // Input array length must be greater than 0\\n    string public constant INPUT_LENGTH_MISMATCH = \\\"4\\\"; // Input array length mismatch with another array length\\n    string public constant NOT_WHITELISTED_ADDRESS = \\\"5\\\"; // Caller is not whitelisted to withdraw without fee\\n    string public constant MULTI_TRANSFER_FAILED = \\\"6\\\"; // Multi transfer of tokens has failed\\n    string public constant FEE_COLLECTOR_NOT_SET = \\\"7\\\"; // Fee Collector is not set\\n    string public constant NOT_ALLOWED_TO_SWEEP = \\\"8\\\"; // Token is not allowed to sweep\\n    string public constant INSUFFICIENT_BALANCE = \\\"9\\\"; // Insufficient balance to performs operations to follow\\n    string public constant INPUT_ADDRESS_IS_ZERO = \\\"10\\\"; // Input address is zero\\n    string public constant FEE_LIMIT_REACHED = \\\"11\\\"; // Fee must be less than MAX_BPS\\n    string public constant ALREADY_INITIALIZED = \\\"12\\\"; // Data structure, contract, or logic already initialized and can not be called again\\n    string public constant ADD_IN_LIST_FAILED = \\\"13\\\"; // Cannot add address in address list\\n    string public constant REMOVE_FROM_LIST_FAILED = \\\"14\\\"; // Cannot remove address from address list\\n    string public constant STRATEGY_IS_ACTIVE = \\\"15\\\"; // Strategy is already active, an inactive strategy is required\\n    string public constant STRATEGY_IS_NOT_ACTIVE = \\\"16\\\"; // Strategy is not active, an active strategy is required\\n    string public constant INVALID_STRATEGY = \\\"17\\\"; // Given strategy is not a strategy of this pool\\n    string public constant DEBT_RATIO_LIMIT_REACHED = \\\"18\\\"; // Debt ratio limit reached. It must be less than MAX_BPS\\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \\\"19\\\"; // Strategy total debt must be 0\\n    string public constant LOSS_TOO_HIGH = \\\"20\\\"; // Strategy reported loss must be less than current debt\\n    string public constant INVALID_MAX_BORROW_LIMIT = \\\"21\\\"; // Max borrow limit is beyond range.\\n    string public constant MAX_LIMIT_LESS_THAN_MIN = \\\"22\\\"; // Max limit should be greater than min limit.\\n    string public constant INVALID_SLIPPAGE = \\\"23\\\"; // Slippage should be less than MAX_BPS\\n    string public constant WRONG_RECEIPT_TOKEN = \\\"24\\\"; // Wrong receipt token address\\n    string public constant AAVE_FLASH_LOAN_NOT_ACTIVE = \\\"25\\\"; // aave flash loan is not active\\n    string public constant DYDX_FLASH_LOAN_NOT_ACTIVE = \\\"26\\\"; // DYDX flash loan is not active\\n    string public constant INVALID_FLASH_LOAN = \\\"27\\\"; // invalid-flash-loan\\n    string public constant INVALID_INITIATOR = \\\"28\\\"; // \\\"invalid-initiator\\\"\\n    string public constant INCORRECT_WITHDRAW_AMOUNT = \\\"29\\\"; // withdrawn amount is not correct\\n    string public constant NO_MARKET_ID_FOUND = \\\"30\\\"; // dydx flash loan no marketId found for token\\n    string public constant SAME_AS_PREVIOUS = \\\"31\\\"; // Input should not be same as previous value.\\n    string public constant INVALID_INPUT = \\\"32\\\"; // Generic invalid input error code\\n}\\n\",\"keccak256\":\"0x96be83cb172a1efef0ff9771392f0b1d192a680fb2b36b061efbd49177afb947\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x193c2dd96da7b717f15736d5f13ccab8a7b4e90853b6cb922a864f1e8fdd9dc7\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/aave/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// @dev Interface support both Aave v2 and v3 methods\\ninterface PoolAddressesProvider {\\n    function getPool() external view returns (address);\\n\\n    // Aave v2 method.\\n    function getLendingPool() external view returns (address);\\n\\n    function getPoolDataProvider() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\\ninterface AaveOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\\n\\ninterface AToken is IERC20 {\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (address);\\n\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    //solhint-disable func-name-mixedcase\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\\ninterface AaveIncentivesController {\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function claimAllRewards(address[] calldata assets, address to)\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    function getRewardsList() external view returns (address[] memory);\\n}\\n\\ninterface AaveLendingPool {\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function getUserAccountData(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n}\\n\\ninterface AaveProtocolDataProvider {\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n}\\n\\n//solhint-disable func-name-mixedcase\\ninterface StakedAave is IERC20 {\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function stake(address onBehalfOf, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x142a75fa1d552c9a3046bbd11f69fc23fc365e97856f75f103e8bab0718366f8\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x81fccad24b581704ec06b681d0f75d2af86c461142bf0224e118779783271d10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance()\\n        external\\n        onlyKeeper\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _rebalance()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x947a4185d2e76769bda95e405241a2d8d1b17093955a486265cdf1d92893786b\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./AaveV2Core.sol\\\";\\nimport \\\"../../Strategy.sol\\\";\\n\\n/// @dev This strategy will deposit collateral token in Aave and earn interest.\\ncontract AaveV2 is Strategy, AaveV2Core {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"5.0.0\\\";\\n\\n    constructor(\\n        address _pool,\\n        address _swapManager,\\n        address _receiptToken,\\n        string memory _name\\n    ) Strategy(_pool, _swapManager, _receiptToken) AaveV2Core(_receiptToken) {\\n        NAME = _name;\\n    }\\n\\n    /// @notice Initiate cooldown to unstake aave.\\n    function startCooldown() external onlyKeeper returns (bool) {\\n        return _startCooldown();\\n    }\\n\\n    /// @notice Unstake Aave from stakedAave contract\\n    function unstakeAave() external onlyKeeper {\\n        _unstakeAave();\\n    }\\n\\n    /**\\n     * @notice Report total value locked\\n     * @dev aToken and collateral are 1:1\\n     */\\n    function tvl() public view virtual override returns (uint256) {\\n        return aToken.balanceOf(address(this)) + collateralToken.balanceOf(address(this));\\n    }\\n\\n    function isReservedToken(address _token) public view override returns (bool) {\\n        return _token == address(aToken) || _token == address(collateralToken);\\n    }\\n\\n    /// @notice Large approval of token\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        collateralToken.safeApprove(address(aaveLendingPool), _amount);\\n        IERC20(AAVE).safeApprove(address(swapper), _amount);\\n    }\\n\\n    /**\\n     * @notice Transfer StakeAave to newStrategy\\n     * @param _newStrategy Address of newStrategy\\n     */\\n    function _beforeMigration(address _newStrategy) internal override {\\n        uint256 _stkAaveAmount = stkAAVE.balanceOf(address(this));\\n        if (_stkAaveAmount != 0) {\\n            IERC20(stkAAVE).safeTransfer(_newStrategy, _stkAaveAmount);\\n        }\\n    }\\n\\n    /// @notice Claim Aave rewards and convert to _toToken.\\n    function _claimRewardsAndConvertTo(address _toToken) internal {\\n        uint256 _aaveAmount = _claimAave();\\n        if (_aaveAmount > 0) {\\n            _swapExactInput(AAVE, _toToken, _aaveAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\\n     * @dev Claim rewardToken and convert to collateral.\\n     */\\n    function _generateReport()\\n        internal\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = aToken.balanceOf(address(this)) + _collateralHere;\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_profitAndExcessDebt > _collateralHere) {\\n            _withdrawHere(_profitAndExcessDebt - _collateralHere);\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n        }\\n\\n        // Set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n    }\\n\\n    /**\\n     * @dev Generate report for pools accounting and also send profit and any payback to pool.\\n     */\\n    function _rebalance()\\n        internal\\n        virtual\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        (_profit, _loss, _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        // Pool may give fund to strategy. Deposit fund to generate yield.\\n        _deposit(address(collateralToken), collateralToken.balanceOf(address(this)));\\n    }\\n\\n    function _withdrawHere(uint256 _amount) internal override {\\n        _safeWithdraw(address(collateralToken), address(this), _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x51c7ec519ef67d1f70e6d693c4831a1fc68d4276bff48d9653c9aa709712d74f\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/aave/v2/AaveV2Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-pools/contracts/Errors.sol\\\";\\nimport \\\"../../../interfaces/aave/IAave.sol\\\";\\n\\n/// @title This contract provide core operations for Aave\\nabstract contract AaveV2Core {\\n    //solhint-disable-next-line const-name-snakecase\\n    StakedAave public constant stkAAVE = StakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\\n    address public constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n\\n    AaveLendingPool public immutable aaveLendingPool;\\n    AaveProtocolDataProvider public aaveProtocolDataProvider;\\n    AaveIncentivesController public immutable aaveIncentivesController;\\n    PoolAddressesProvider internal immutable aaveAddressesProvider_;\\n\\n    AToken internal immutable aToken;\\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n\\n    constructor(address _receiptToken) {\\n        require(_receiptToken != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n        aToken = AToken(_receiptToken);\\n        // If there is no AAVE incentive then below call will fail\\n        try AToken(_receiptToken).getIncentivesController() returns (address _aaveIncentivesController) {\\n            aaveIncentivesController = AaveIncentivesController(_aaveIncentivesController);\\n        } catch {} //solhint-disable no-empty-blocks\\n        aaveAddressesProvider_ = PoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider_.getLendingPool());\\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider_.getAddress(AAVE_PROVIDER_ID));\\n    }\\n\\n    ///////////////////////// External access functions /////////////////////////\\n\\n    /**\\n     * @notice Initiate cooldown to unstake aave.\\n     * @dev We only want to call this function when cooldown is expired and\\n     * that's the reason we have 'if' condition.\\n     * @dev Child contract should expose this function as external and onlyKeeper\\n     */\\n    function _startCooldown() internal returns (bool) {\\n        if (canStartCooldown()) {\\n            stkAAVE.cooldown();\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Unstake Aave from stakedAave contract\\n     * @dev We want to unstake as soon as favorable condition exit\\n     * @dev No guarding condition thus this call can fail, if we can't unstake.\\n     * @dev Child contract should expose this function as external and onlyKeeper\\n     */\\n    function _unstakeAave() internal {\\n        stkAAVE.redeem(address(this), type(uint256).max);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    /// @notice Returns true if Aave can be unstaked\\n    function canUnstake() external view returns (bool) {\\n        (, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\\n        return _canUnstake(_cooldownEnd, _unstakeEnd);\\n    }\\n\\n    /// @notice Returns true if we should start cooldown\\n    function canStartCooldown() public view returns (bool) {\\n        (uint256 _cooldownStart, , uint256 _unstakeEnd) = cooldownData();\\n        return _canStartCooldown(_cooldownStart, _unstakeEnd);\\n    }\\n\\n    /// @notice Return cooldown related timestamps\\n    function cooldownData()\\n        public\\n        view\\n        returns (\\n            uint256 _cooldownStart,\\n            uint256 _cooldownEnd,\\n            uint256 _unstakeEnd\\n        )\\n    {\\n        _cooldownStart = stkAAVE.stakersCooldowns(address(this));\\n        _cooldownEnd = _cooldownStart + stkAAVE.COOLDOWN_SECONDS();\\n        _unstakeEnd = _cooldownEnd + stkAAVE.UNSTAKE_WINDOW();\\n    }\\n\\n    /**\\n     * @notice Claim Aave. Also unstake all Aave if favorable condition exits or start cooldown.\\n     * @dev If we unstake all Aave, we can't start cooldown because it requires StakedAave balance.\\n     * @dev DO NOT convert 'if else' to 2 'if's as we are reading cooldown state once to save gas.\\n     * @dev Not all collateral token has aave incentive\\n     */\\n    function _claimAave() internal returns (uint256) {\\n        if (address(aaveIncentivesController) == address(0)) {\\n            return 0;\\n        }\\n        (uint256 _cooldownStart, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\\n        if (_cooldownStart == 0 || block.timestamp > _unstakeEnd) {\\n            // claim stkAave when its first rebalance or unstake period passed.\\n            aaveIncentivesController.claimRewards(getAssets(), type(uint256).max, address(this));\\n        }\\n        // Fetch and check again for next action.\\n        (_cooldownStart, _cooldownEnd, _unstakeEnd) = cooldownData();\\n        if (_canUnstake(_cooldownEnd, _unstakeEnd)) {\\n            stkAAVE.redeem(address(this), type(uint256).max);\\n        } else if (_canStartCooldown(_cooldownStart, _unstakeEnd)) {\\n            stkAAVE.cooldown();\\n        }\\n\\n        stkAAVE.claimRewards(address(this), type(uint256).max);\\n        return IERC20(AAVE).balanceOf(address(this));\\n    }\\n\\n    /// @notice Deposit asset into Aave\\n    function _deposit(address _asset, uint256 _amount) internal {\\n        if (_amount > 0) {\\n            try aaveLendingPool.deposit(_asset, _amount, address(this), 0) {} catch Error(string memory _reason) {\\n                // Aave uses liquidityIndex and some other indexes as needed to normalize input.\\n                // If normalized input equals to 0 then error will be thrown with '56' error code.\\n                // CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n                // Hence discard error where error code is '56'\\n                require(bytes32(bytes(_reason)) == \\\"56\\\", \\\"deposit failed\\\");\\n            }\\n        }\\n    }\\n\\n    function getAssets() internal view returns (address[] memory) {\\n        address[] memory _assets = new address[](1);\\n        _assets[0] = address(aToken);\\n        return _assets;\\n    }\\n\\n    /**\\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\\n     * @dev Check we have enough aToken and liquidity to support this withdraw\\n     * @param _asset Address of asset to withdraw\\n     * @param _to Address that will receive collateral token.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _safeWithdraw(\\n        address _asset,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\\n        // In this case we might have more aToken compare to available liquidity in Aave and any\\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\\n        // _amount against available liquidity.\\n        uint256 _availableLiquidity = IERC20(_asset).balanceOf(address(aToken));\\n\\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\\n        return _withdraw(_asset, _to, Math.min(_amount, Math.min(_aTokenBalance, _availableLiquidity)));\\n    }\\n\\n    /**\\n     * @notice Withdraw given amount of collateral from Aave to given address\\n     * @param _asset Address of asset to withdraw\\n     * @param _to Address that will receive collateral token.\\n     * @param _amount Amount of collateral to withdraw.\\n     * @return Actual collateral withdrawn\\n     */\\n    function _withdraw(\\n        address _asset,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256) {\\n        if (_amount > 0) {\\n            require(aaveLendingPool.withdraw(_asset, _amount, _to) == _amount, Errors.INCORRECT_WITHDRAW_AMOUNT);\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n     * @dev Return true, only if we have StakedAave balance and either cooldown expired or cooldown is zero\\n     * @dev If we are in cooldown period we cannot unstake Aave. But our cooldown is still valid so we do\\n     * not want to reset/start cooldown.\\n     */\\n    function _canStartCooldown(uint256 _cooldownStart, uint256 _unstakeEnd) internal view returns (bool) {\\n        return stkAAVE.balanceOf(address(this)) > 0 && (_cooldownStart == 0 || block.timestamp > _unstakeEnd);\\n    }\\n\\n    /// @dev Return true, if cooldown is over and we are in unstake window.\\n    function _canUnstake(uint256 _cooldownEnd, uint256 _unstakeEnd) internal view returns (bool) {\\n        return block.timestamp > _cooldownEnd && block.timestamp <= _unstakeEnd;\\n    }\\n\\n    /**\\n     * @notice Return total AAVE incentive allocated to this address\\n     * @dev Aave and StakedAave are 1:1\\n     * @dev Not all collateral token has aave incentive\\n     */\\n    function _totalAave() internal view returns (uint256) {\\n        if (address(aaveIncentivesController) == address(0)) {\\n            return 0;\\n        }\\n        // TotalAave = Get current StakedAave rewards from controller +\\n        //             StakedAave balance here +\\n        //             Aave rewards by staking Aave in StakedAave contract\\n        return\\n            aaveIncentivesController.getRewardsBalance(getAssets(), address(this)) +\\n            stkAAVE.balanceOf(address(this)) +\\n            stkAAVE.getTotalRewardsBalance(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa5e0879431382d1e98a4e9ba506a2673474524e7000b7a2af083712157d500b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162003aaf38038062003aaf8339810160408190526200003591620005ba565b818484826001600160a01b038316620000955760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000ed5760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f00000000000000000060448201526064016200008c565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200014b57600080fd5b505afa15801562000160573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001869190620006b3565b6001600160a01b03908116608052600080546001600160a01b031916918316919091179055620001cd620001b73390565b60036200044060201b620016741790919060201c565b6200020f5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016200008c565b5050604080518082019091526002815261031360f41b602082015290506001600160a01b038216620002565760405162461bcd60e51b81526004016200008c9190620006da565b506001600160a01b038116610120819052604080516375d2641360e01b815290516375d2641391600480820192602092909190829003018186803b1580156200029e57600080fd5b505afa925050508015620002d1575060408051601f3d908101601f19168201909252620002ce91810190620006b3565b60015b620002dc57620002e9565b6001600160a01b031660e0525b73b53c1a33016b2dc2ff3653530bff1848a515c8c561010081905260408051630261bf8b60e01b81529051630261bf8b91600480820192602092909190829003018186803b1580156200033b57600080fd5b505afa15801562000350573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003769190620006b3565b6001600160a01b0390811660c052610100516040516321f8a72160e01b8152600160f81b60048201529116906321f8a7219060240160206040518083038186803b158015620003c457600080fd5b505afa158015620003d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ff9190620006b3565b600580546001600160a01b0319166001600160a01b039290921691909117905550805162000435906006906020840190620004b2565b50505050506200074c565b600062000457836001600160a01b03841662000460565b90505b92915050565b6000818152600183016020526040812054620004a9575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200045a565b5060006200045a565b828054620004c0906200070f565b90600052602060002090601f016020900481019282620004e457600085556200052f565b82601f10620004ff57805160ff19168380011785556200052f565b828001600101855582156200052f579182015b828111156200052f57825182559160200191906001019062000512565b506200053d92915062000541565b5090565b5b808211156200053d576000815560010162000542565b6001600160a01b03811681146200056e57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620005a45781810151838201526020016200058a565b83811115620005b4576000848401525b50505050565b60008060008060808587031215620005d157600080fd5b8451620005de8162000558565b6020860151909450620005f18162000558565b6040860151909350620006048162000558565b60608601519092506001600160401b03808211156200062257600080fd5b818701915087601f8301126200063757600080fd5b8151818111156200064c576200064c62000571565b604051601f8201601f19908116603f0116810190838211818310171562000677576200067762000571565b816040528281528a60208487010111156200069157600080fd5b620006a483602083016020880162000587565b979a9699509497505050505050565b600060208284031215620006c657600080fd5b8151620006d38162000558565b9392505050565b6020815260008251806020840152620006fb81604085016020870162000587565b601f01601f19169190910160400192915050565b600181811c908216806200072457607f821691505b602082108114156200074657634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516131fe620008b160003960008181610aca015281816115c901528181611ecb01528181611f7a015281816122410152612d3a015260005050600081816102b80152818161294701526129a10152600081816103fe01528181611a8e0152818161244101526127290152600081816101c401528181610472015281816107660152818161088201528181610960015281816109bc01528181610cab01528181610d4801528181610f740152818161113d0152818161192001528181612036015281816120d601526125a601526000818161033c015281816103ac015281816107c501528181610860015281816108d40152818161099301528181610b0501528181610ed80152818161136f0152818161152d0152818161179001528181611989015281816119aa01528181611a6c01528181612177015281816121b501528181612347015261258401526131fe6000f3fe608060405234801561001057600080fd5b50600436106101a55760003560e01c8063951dc22c116100ef578063d8dfeb4511610092578063d8dfeb45146103aa578063e00af4a7146103d0578063e5328e06146103e3578063e9d337b8146103f9578063ec78e83214610420578063f51896f814610433578063fc0c546a1461043b578063ffa1ad741461044c57600080fd5b8063951dc22c1461030557806399b71d5c1461031a578063a3f4df7e14610322578063b2016bd414610337578063c415b95c1461035e578063ce5494bb14610371578063d2c35ce814610384578063d3033c391461039757600080fd5b80634032b72b116101575780634032b72b14610262578063440d72481461027557806348ccda3c146102985780635f2475ca146102b35780635f9d4d2e146102da57806360a05a85146102ed578063680ff458146102f55780637d7c2a1c146102fd57600080fd5b806314ae9f2e146101aa57806316f0115b146101bf578063189adf76146101fc5780631fc29c011461020457806321fc6bb0146102195780632b3297f91461023c5780632e1a7d4d1461024f575b600080fd5b6101bd6101b8366004612d9e565b610470565b005b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6040516101f39190612dbb565b60405180910390f35b6101bd61058b565b6101e66000805160206131a983398151915281565b6102216105be565b604080519384526020840192909252908201526060016101f3565b6002546101e6906001600160a01b031681565b6101bd61025d366004612dcf565b610763565b6101bd610270366004612d9e565b6109ba565b610288610283366004612d9e565b610ac6565b60405190151581526020016101f3565b6101e6737fc66500c84a76ad7e9c93437bfc5ac33e2ddae981565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6005546101e6906001600160a01b031681565b610288610b3f565b610288610b62565b610221610b97565b61030d610bd4565b6040516101f39190612e2c565b6101bd610be0565b61032a610c1a565b6040516101f39190612e6b565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6001546101e6906001600160a01b031681565b6101bd61037f366004612d9e565b610ca8565b6101bd610392366004612d9e565b610f72565b6101bd6103a5366004612d9e565b61113b565b7f00000000000000000000000000000000000000000000000000000000000000006101e6565b6101bd6103de366004612d9e565b6112f8565b6103eb611513565b6040519081526020016101f3565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6000546101e6906001600160a01b031681565b610288611658565b6000546001600160a01b03166101e6565b61032a604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c957600080fd5b505afa1580156104dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105019190612e9e565b6001600160a01b0316336001600160a01b03161461053a5760405162461bcd60e51b815260040161053190612ebb565b60405180910390fd5b610545600382611690565b6105885760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610531565b50565b610598335b6003906116a5565b6105b45760405162461bcd60e51b815260040161053190612ef2565b6105bc6116c7565b565b60405163091030c360e01b8152600090819081906000805160206131a98339815191529063091030c3906105f6903090600401612dbb565b60206040518083038186803b15801561060e57600080fd5b505afa158015610622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106469190612f22565b92506000805160206131a98339815191526001600160a01b03166372b49d636040518163ffffffff1660e01b815260040160206040518083038186803b15801561068f57600080fd5b505afa1580156106a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c79190612f22565b6106d19084612f51565b91506000805160206131a98339815191526001600160a01b031663359c4a966040518163ffffffff1660e01b815260040160206040518083038186803b15801561071a57600080fd5b505afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107529190612f22565b61075c9083612f51565b9050909192565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146107ab5760405162461bcd60e51b815260040161053190612f69565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906107fa903090600401612dbb565b60206040518083038186803b15801561081257600080fd5b505afa158015610826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084a9190612f22565b90508181106108ab576108a76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611730565b5050565b6108bd6108b88284612f9c565b61178b565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610909903090600401612dbb565b60206040518083038186803b15801561092157600080fd5b505afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190612f22565b90506108a77f000000000000000000000000000000000000000000000000000000000000000061098984846117b6565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611730565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1357600080fd5b505afa158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4b9190612e9e565b6001600160a01b0316336001600160a01b031614610a7b5760405162461bcd60e51b815260040161053190612ebb565b610a86600382611674565b6105885760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610531565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610b3957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b6000806000610b4c6105be565b9250509150610b5b82826117cc565b9250505090565b6000610b6d33610590565b610b895760405162461bcd60e51b815260040161053190612ef2565b610b9161186a565b90505b90565b60008080610ba433610590565b610bc05760405162461bcd60e51b815260040161053190612ef2565b610bc86118e7565b9250925092505b909192565b6060610b916003611a49565b610be933610590565b610c055760405162461bcd60e51b815260040161053190612ef2565b610c0f6000611a56565b6105bc600019611a56565b60068054610c2790612fb3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5390612fb3565b8015610ca05780601f10610c7557610100808354040283529160200191610ca0565b820191906000526020600020905b815481529060010190602001808311610c8357829003601f168201915b505050505081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610cf05760405162461bcd60e51b815260040161053190612f69565b6001600160a01b038116610d465760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610531565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610da957600080fd5b505afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de19190612e9e565b6001600160a01b031614610e305760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610531565b610e3981611adf565b6000546040516370a0823160e01b8152610ed29183916001600160a01b03909116906370a0823190610e6f903090600401612dbb565b60206040518083038186803b158015610e8757600080fd5b505afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf9190612f22565b6000546001600160a01b03169190611730565b610588817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610f229190612dbb565b60206040518083038186803b158015610f3a57600080fd5b505afa158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190612f22565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fcb57600080fd5b505afa158015610fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110039190612e9e565b6001600160a01b0316336001600160a01b0316146110335760405162461bcd60e51b815260040161053190612ebb565b6001600160a01b0381166110895760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610531565b6001546001600160a01b03828116911614156110df5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610531565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561119457600080fd5b505afa1580156111a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cc9190612e9e565b6001600160a01b0316336001600160a01b0316146111fc5760405162461bcd60e51b815260040161053190612ebb565b6001600160a01b03811661124c5760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b6044820152606401610531565b6002546001600160a01b038281169116141561129c5760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b6044820152606401610531565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b61130133610590565b61131d5760405162461bcd60e51b815260040161053190612ef2565b6001546001600160a01b031661136d5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610531565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156113ef5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610531565b6113f881610ac6565b1561143c5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610531565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561147757600154610588906001600160a01b031647611b84565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906114a6903090600401612dbb565b60206040518083038186803b1580156114be57600080fd5b505afa1580156114d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f69190612f22565b6001549091506108a7906001600160a01b03848116911683611730565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611562903090600401612dbb565b60206040518083038186803b15801561157a57600080fd5b505afa15801561158e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b29190612f22565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906115fe903090600401612dbb565b60206040518083038186803b15801561161657600080fd5b505afa15801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190612f22565b610b919190612f51565b60008060006116656105be565b9250925050610b5b8282611c9d565b6000611689836001600160a01b038416611cb2565b9392505050565b6000611689836001600160a01b038416611d01565b6001600160a01b03811660009081526001830160205260408120541515611689565b6040516301e9a69560e41b81526000805160206131a983398151915290631e9a6950906116fc90309060001990600401612fee565b600060405180830381600087803b15801561171657600080fd5b505af115801561172a573d6000803e3d6000fd5b50505050565b6117868363a9059cbb60e01b848460405160240161174f929190612fee565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611df4565b505050565b6108a77f00000000000000000000000000000000000000000000000000000000000000003083611ec6565b60008183106117c55781611689565b5090919050565b6040516370a0823160e01b815260009081906000805160206131a9833981519152906370a0823190611802903090600401612dbb565b60206040518083038186803b15801561181a57600080fd5b505afa15801561182e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118529190612f22565b11801561168957508215806116895750504211919050565b6000611874610b3f565b156118e1576000805160206131a98339815191526001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156118c257600080fd5b505af11580156118d6573d6000803e3d6000fd5b505050506001905090565b50600090565b60008060006118f461202e565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b15801561196c57600080fd5b505af1158015611980573d6000803e3d6000fd5b50505050610bcf7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016119f49190612dbb565b60206040518083038186803b158015611a0c57600080fd5b505afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a449190612f22565b612408565b606060006116898361251b565b611a5f81612577565b611ab36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836125c7565b60025461058890737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9906001600160a01b0316836125c7565b6040516370a0823160e01b81526000906000805160206131a9833981519152906370a0823190611b13903090600401612dbb565b60206040518083038186803b158015611b2b57600080fd5b505afa158015611b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b639190612f22565b905080156108a7576108a76000805160206131a98339815191528383611730565b80471015611bd45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610531565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611c21576040519150601f19603f3d011682016040523d82523d6000602084013e611c26565b606091505b50509050806117865760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610531565b60008242118015611689575050421115919050565b6000818152600183016020526040812054611cf957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b39565b506000610b39565b60008181526001830160205260408120548015611dea576000611d25600183612f9c565b8554909150600090611d3990600190612f9c565b9050818114611d9e576000866000018281548110611d5957611d59613007565b9060005260206000200154905080876000018481548110611d7c57611d7c613007565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611daf57611daf61301d565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b39565b6000915050610b39565b6000611e49826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126da9092919063ffffffff16565b8051909150156117865780806020019051810190611e679190613033565b6117865760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610531565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611f159190612dbb565b60206040518083038186803b158015611f2d57600080fd5b505afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f659190612f22565b90506000856001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611fb59190612dbb565b60206040518083038186803b158015611fcd57600080fd5b505afa158015611fe1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120059190612f22565b9050612024868661201f8761201a87876117b6565b6117b6565b6126f1565b9695505050505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b81526004016120809190612dbb565b60206040518083038186803b15801561209857600080fd5b505afa1580156120ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d09190612f22565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016121209190612dbb565b60206040518083038186803b15801561213857600080fd5b505afa15801561214c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121709190612f22565b905061219b7f00000000000000000000000000000000000000000000000000000000000000006127ea565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906121ea903090600401612dbb565b60206040518083038186803b15801561220257600080fd5b505afa158015612216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223a9190612f22565b90506000817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161228b9190612dbb565b60206040518083038186803b1580156122a357600080fd5b505afa1580156122b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122db9190612f22565b6122e59190612f51565b905082811115612300576122f98382612f9c565b965061230d565b61230a8184612f9c565b95505b60006123198589612f51565b9050828111156123cf576123306108b88483612f9c565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061237c903090600401612dbb565b60206040518083038186803b15801561239457600080fd5b505afa1580156123a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cc9190612f22565b92505b6123d983866117b6565b95508583116123e95760006123fc565b6123fc6123f68785612f9c565b896117b6565b97505050505050909192565b80156108a75760405163e8eda9df60e01b81526001600160a01b03838116600483015260248201839052306044830152600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063e8eda9df90608401600060405180830381600087803b15801561248557600080fd5b505af1925050508015612496575060015b6108a7576124a2613055565b806308c379a0141561250f57506124b76130ab565b806124c25750612511565b6124cb81613135565b611a9b60f11b146117865760405162461bcd60e51b815260206004820152600e60248201526d19195c1bdcda5d0819985a5b195960921b6044820152606401610531565b505b3d6000803e3d6000fd5b60608160000180548060200260200160405190810160405280929190818152602001828054801561256b57602002820191906000526020600020905b815481526020019060010190808311612557575b50505050509050919050565b6105886001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000835b8015806126505750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561261657600080fd5b505afa15801561262a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264e9190612f22565b155b6126bb5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610531565b6117868363095ea7b360e01b848460405160240161174f929190612fee565b60606126e9848460008561281b565b949350505050565b600081156127e357604051631a4ca37b60e21b81526001600160a01b03858116600483015260248201849052848116604483015283917f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec90606401602060405180830381600087803b15801561276f57600080fd5b505af1158015612783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a79190612f22565b1460405180604001604052806002815260200161323960f01b815250906127e15760405162461bcd60e51b81526004016105319190612e6b565b505b5092915050565b60006127f4612943565b905080156108a757611786737fc66500c84a76ad7e9c93437bfc5ac33e2ddae98383612c3d565b60608247101561287c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610531565b843b6128ca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610531565b600080866001600160a01b031685876040516128e69190613159565b60006040518083038185875af1925050503d8060008114612923576040519150601f19603f3d011682016040523d82523d6000602084013e612928565b606091505b5091509150612938828286612cd9565b979650505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166129795750600090565b60008060006129866105be565b925092509250826000148061299a57508042115b15612a4c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633111e7b36129d6612d12565b600019306040518463ffffffff1660e01b81526004016129f893929190613175565b602060405180830381600087803b158015612a1257600080fd5b505af1158015612a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4a9190612f22565b505b612a546105be565b91945092509050612a658282611c9d565b15612ad6576040516301e9a69560e41b81526000805160206131a983398151915290631e9a695090612a9f90309060001990600401612fee565b600060405180830381600087803b158015612ab957600080fd5b505af1158015612acd573d6000803e3d6000fd5b50505050612b47565b612ae083826117cc565b15612b47576000805160206131a98339815191526001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612b2e57600080fd5b505af1158015612b42573d6000803e3d6000fd5b505050505b6040516309a99b4f60e41b81526000805160206131a983398151915290639a99b4f090612b7c90309060001990600401612fee565b600060405180830381600087803b158015612b9657600080fd5b505af1158015612baa573d6000803e3d6000fd5b50506040516370a0823160e01b8152737fc66500c84a76ad7e9c93437bfc5ac33e2ddae992506370a082319150612be5903090600401612dbb565b60206040518083038186803b158015612bfd57600080fd5b505afa158015612c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c359190612f22565b935050505090565b600254604051636ccb2b0160e01b81526001600160a01b038581166004830152848116602483015260448201849052600160648301523060848301526000921690636ccb2b019060a401602060405180830381600087803b158015612ca157600080fd5b505af1158015612cb5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e99190612f22565b60608315612ce8575081611689565b825115612cf85782518084602001fd5b8160405162461bcd60e51b81526004016105319190612e6b565b60408051600180825281830190925260609160009190602080830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110612d6c57612d6c613007565b6001600160a01b0390921660209283029190910190910152919050565b6001600160a01b038116811461058857600080fd5b600060208284031215612db057600080fd5b813561168981612d89565b6001600160a01b0391909116815260200190565b600060208284031215612de157600080fd5b5035919050565b600081518084526020808501945080840160005b83811015612e215781516001600160a01b031687529582019590820190600101612dfc565b509495945050505050565b6020815260006116896020830184612de8565b60005b83811015612e5a578181015183820152602001612e42565b8381111561172a5750506000910152565b6020815260008251806020840152612e8a816040850160208701612e3f565b601f01601f19169190910160400192915050565b600060208284031215612eb057600080fd5b815161168981612d89565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600060208284031215612f3457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612f6457612f64612f3b565b500190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600082821015612fae57612fae612f3b565b500390565b600181811c90821680612fc757607f821691505b60208210811415612fe857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006020828403121561304557600080fd5b8151801515811461168957600080fd5b600060033d1115610b945760046000803e5060005160e01c90565b601f8201601f1916810167ffffffffffffffff811182821017156130a457634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d10156130b95790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156130e957505050505090565b82850191508151818111156131015750505050505090565b843d870101602082850101111561311b5750505050505090565b61312a60208286010187613070565b509095945050505050565b80516020808301519190811015612fe85760001960209190910360031b1b16919050565b6000825161316b818460208701612e3f565b9190910192915050565b6060815260006131886060830186612de8565b6020830194909452506001600160a01b039190911660409091015291905056fe0000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f5a2646970667358221220dad5583c89d771b460687909529d8e65b59b829b437a7264d91d2304f873375364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a55760003560e01c8063951dc22c116100ef578063d8dfeb4511610092578063d8dfeb45146103aa578063e00af4a7146103d0578063e5328e06146103e3578063e9d337b8146103f9578063ec78e83214610420578063f51896f814610433578063fc0c546a1461043b578063ffa1ad741461044c57600080fd5b8063951dc22c1461030557806399b71d5c1461031a578063a3f4df7e14610322578063b2016bd414610337578063c415b95c1461035e578063ce5494bb14610371578063d2c35ce814610384578063d3033c391461039757600080fd5b80634032b72b116101575780634032b72b14610262578063440d72481461027557806348ccda3c146102985780635f2475ca146102b35780635f9d4d2e146102da57806360a05a85146102ed578063680ff458146102f55780637d7c2a1c146102fd57600080fd5b806314ae9f2e146101aa57806316f0115b146101bf578063189adf76146101fc5780631fc29c011461020457806321fc6bb0146102195780632b3297f91461023c5780632e1a7d4d1461024f575b600080fd5b6101bd6101b8366004612d9e565b610470565b005b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6040516101f39190612dbb565b60405180910390f35b6101bd61058b565b6101e66000805160206131a983398151915281565b6102216105be565b604080519384526020840192909252908201526060016101f3565b6002546101e6906001600160a01b031681565b6101bd61025d366004612dcf565b610763565b6101bd610270366004612d9e565b6109ba565b610288610283366004612d9e565b610ac6565b60405190151581526020016101f3565b6101e6737fc66500c84a76ad7e9c93437bfc5ac33e2ddae981565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6005546101e6906001600160a01b031681565b610288610b3f565b610288610b62565b610221610b97565b61030d610bd4565b6040516101f39190612e2c565b6101bd610be0565b61032a610c1a565b6040516101f39190612e6b565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6001546101e6906001600160a01b031681565b6101bd61037f366004612d9e565b610ca8565b6101bd610392366004612d9e565b610f72565b6101bd6103a5366004612d9e565b61113b565b7f00000000000000000000000000000000000000000000000000000000000000006101e6565b6101bd6103de366004612d9e565b6112f8565b6103eb611513565b6040519081526020016101f3565b6101e67f000000000000000000000000000000000000000000000000000000000000000081565b6000546101e6906001600160a01b031681565b610288611658565b6000546001600160a01b03166101e6565b61032a604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c957600080fd5b505afa1580156104dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105019190612e9e565b6001600160a01b0316336001600160a01b03161461053a5760405162461bcd60e51b815260040161053190612ebb565b60405180910390fd5b610545600382611690565b6105885760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610531565b50565b610598335b6003906116a5565b6105b45760405162461bcd60e51b815260040161053190612ef2565b6105bc6116c7565b565b60405163091030c360e01b8152600090819081906000805160206131a98339815191529063091030c3906105f6903090600401612dbb565b60206040518083038186803b15801561060e57600080fd5b505afa158015610622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106469190612f22565b92506000805160206131a98339815191526001600160a01b03166372b49d636040518163ffffffff1660e01b815260040160206040518083038186803b15801561068f57600080fd5b505afa1580156106a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c79190612f22565b6106d19084612f51565b91506000805160206131a98339815191526001600160a01b031663359c4a966040518163ffffffff1660e01b815260040160206040518083038186803b15801561071a57600080fd5b505afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107529190612f22565b61075c9083612f51565b9050909192565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146107ab5760405162461bcd60e51b815260040161053190612f69565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906107fa903090600401612dbb565b60206040518083038186803b15801561081257600080fd5b505afa158015610826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084a9190612f22565b90508181106108ab576108a76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611730565b5050565b6108bd6108b88284612f9c565b61178b565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610909903090600401612dbb565b60206040518083038186803b15801561092157600080fd5b505afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109599190612f22565b90506108a77f000000000000000000000000000000000000000000000000000000000000000061098984846117b6565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611730565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1357600080fd5b505afa158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4b9190612e9e565b6001600160a01b0316336001600160a01b031614610a7b5760405162461bcd60e51b815260040161053190612ebb565b610a86600382611674565b6105885760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610531565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610b3957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b6000806000610b4c6105be565b9250509150610b5b82826117cc565b9250505090565b6000610b6d33610590565b610b895760405162461bcd60e51b815260040161053190612ef2565b610b9161186a565b90505b90565b60008080610ba433610590565b610bc05760405162461bcd60e51b815260040161053190612ef2565b610bc86118e7565b9250925092505b909192565b6060610b916003611a49565b610be933610590565b610c055760405162461bcd60e51b815260040161053190612ef2565b610c0f6000611a56565b6105bc600019611a56565b60068054610c2790612fb3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5390612fb3565b8015610ca05780601f10610c7557610100808354040283529160200191610ca0565b820191906000526020600020905b815481529060010190602001808311610c8357829003601f168201915b505050505081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610cf05760405162461bcd60e51b815260040161053190612f69565b6001600160a01b038116610d465760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610531565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610da957600080fd5b505afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de19190612e9e565b6001600160a01b031614610e305760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610531565b610e3981611adf565b6000546040516370a0823160e01b8152610ed29183916001600160a01b03909116906370a0823190610e6f903090600401612dbb565b60206040518083038186803b158015610e8757600080fd5b505afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf9190612f22565b6000546001600160a01b03169190611730565b610588817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610f229190612dbb565b60206040518083038186803b158015610f3a57600080fd5b505afa158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109899190612f22565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fcb57600080fd5b505afa158015610fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110039190612e9e565b6001600160a01b0316336001600160a01b0316146110335760405162461bcd60e51b815260040161053190612ebb565b6001600160a01b0381166110895760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610531565b6001546001600160a01b03828116911614156110df5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610531565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561119457600080fd5b505afa1580156111a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cc9190612e9e565b6001600160a01b0316336001600160a01b0316146111fc5760405162461bcd60e51b815260040161053190612ebb565b6001600160a01b03811661124c5760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b6044820152606401610531565b6002546001600160a01b038281169116141561129c5760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b6044820152606401610531565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b61130133610590565b61131d5760405162461bcd60e51b815260040161053190612ef2565b6001546001600160a01b031661136d5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610531565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156113ef5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610531565b6113f881610ac6565b1561143c5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610531565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561147757600154610588906001600160a01b031647611b84565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906114a6903090600401612dbb565b60206040518083038186803b1580156114be57600080fd5b505afa1580156114d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f69190612f22565b6001549091506108a7906001600160a01b03848116911683611730565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611562903090600401612dbb565b60206040518083038186803b15801561157a57600080fd5b505afa15801561158e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b29190612f22565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906115fe903090600401612dbb565b60206040518083038186803b15801561161657600080fd5b505afa15801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190612f22565b610b919190612f51565b60008060006116656105be565b9250925050610b5b8282611c9d565b6000611689836001600160a01b038416611cb2565b9392505050565b6000611689836001600160a01b038416611d01565b6001600160a01b03811660009081526001830160205260408120541515611689565b6040516301e9a69560e41b81526000805160206131a983398151915290631e9a6950906116fc90309060001990600401612fee565b600060405180830381600087803b15801561171657600080fd5b505af115801561172a573d6000803e3d6000fd5b50505050565b6117868363a9059cbb60e01b848460405160240161174f929190612fee565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611df4565b505050565b6108a77f00000000000000000000000000000000000000000000000000000000000000003083611ec6565b60008183106117c55781611689565b5090919050565b6040516370a0823160e01b815260009081906000805160206131a9833981519152906370a0823190611802903090600401612dbb565b60206040518083038186803b15801561181a57600080fd5b505afa15801561182e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118529190612f22565b11801561168957508215806116895750504211919050565b6000611874610b3f565b156118e1576000805160206131a98339815191526001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156118c257600080fd5b505af11580156118d6573d6000803e3d6000fd5b505050506001905090565b50600090565b60008060006118f461202e565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b15801561196c57600080fd5b505af1158015611980573d6000803e3d6000fd5b50505050610bcf7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016119f49190612dbb565b60206040518083038186803b158015611a0c57600080fd5b505afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a449190612f22565b612408565b606060006116898361251b565b611a5f81612577565b611ab36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836125c7565b60025461058890737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9906001600160a01b0316836125c7565b6040516370a0823160e01b81526000906000805160206131a9833981519152906370a0823190611b13903090600401612dbb565b60206040518083038186803b158015611b2b57600080fd5b505afa158015611b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b639190612f22565b905080156108a7576108a76000805160206131a98339815191528383611730565b80471015611bd45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610531565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611c21576040519150601f19603f3d011682016040523d82523d6000602084013e611c26565b606091505b50509050806117865760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610531565b60008242118015611689575050421115919050565b6000818152600183016020526040812054611cf957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610b39565b506000610b39565b60008181526001830160205260408120548015611dea576000611d25600183612f9c565b8554909150600090611d3990600190612f9c565b9050818114611d9e576000866000018281548110611d5957611d59613007565b9060005260206000200154905080876000018481548110611d7c57611d7c613007565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611daf57611daf61301d565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610b39565b6000915050610b39565b6000611e49826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126da9092919063ffffffff16565b8051909150156117865780806020019051810190611e679190613033565b6117865760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610531565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611f159190612dbb565b60206040518083038186803b158015611f2d57600080fd5b505afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f659190612f22565b90506000856001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611fb59190612dbb565b60206040518083038186803b158015611fcd57600080fd5b505afa158015611fe1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120059190612f22565b9050612024868661201f8761201a87876117b6565b6117b6565b6126f1565b9695505050505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b81526004016120809190612dbb565b60206040518083038186803b15801561209857600080fd5b505afa1580156120ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d09190612f22565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016121209190612dbb565b60206040518083038186803b15801561213857600080fd5b505afa15801561214c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121709190612f22565b905061219b7f00000000000000000000000000000000000000000000000000000000000000006127ea565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906121ea903090600401612dbb565b60206040518083038186803b15801561220257600080fd5b505afa158015612216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223a9190612f22565b90506000817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161228b9190612dbb565b60206040518083038186803b1580156122a357600080fd5b505afa1580156122b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122db9190612f22565b6122e59190612f51565b905082811115612300576122f98382612f9c565b965061230d565b61230a8184612f9c565b95505b60006123198589612f51565b9050828111156123cf576123306108b88483612f9c565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061237c903090600401612dbb565b60206040518083038186803b15801561239457600080fd5b505afa1580156123a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cc9190612f22565b92505b6123d983866117b6565b95508583116123e95760006123fc565b6123fc6123f68785612f9c565b896117b6565b97505050505050909192565b80156108a75760405163e8eda9df60e01b81526001600160a01b03838116600483015260248201839052306044830152600060648301527f0000000000000000000000000000000000000000000000000000000000000000169063e8eda9df90608401600060405180830381600087803b15801561248557600080fd5b505af1925050508015612496575060015b6108a7576124a2613055565b806308c379a0141561250f57506124b76130ab565b806124c25750612511565b6124cb81613135565b611a9b60f11b146117865760405162461bcd60e51b815260206004820152600e60248201526d19195c1bdcda5d0819985a5b195960921b6044820152606401610531565b505b3d6000803e3d6000fd5b60608160000180548060200260200160405190810160405280929190818152602001828054801561256b57602002820191906000526020600020905b815481526020019060010190808311612557575b50505050509050919050565b6105886001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000835b8015806126505750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561261657600080fd5b505afa15801561262a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264e9190612f22565b155b6126bb5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610531565b6117868363095ea7b360e01b848460405160240161174f929190612fee565b60606126e9848460008561281b565b949350505050565b600081156127e357604051631a4ca37b60e21b81526001600160a01b03858116600483015260248201849052848116604483015283917f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec90606401602060405180830381600087803b15801561276f57600080fd5b505af1158015612783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a79190612f22565b1460405180604001604052806002815260200161323960f01b815250906127e15760405162461bcd60e51b81526004016105319190612e6b565b505b5092915050565b60006127f4612943565b905080156108a757611786737fc66500c84a76ad7e9c93437bfc5ac33e2ddae98383612c3d565b60608247101561287c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610531565b843b6128ca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610531565b600080866001600160a01b031685876040516128e69190613159565b60006040518083038185875af1925050503d8060008114612923576040519150601f19603f3d011682016040523d82523d6000602084013e612928565b606091505b5091509150612938828286612cd9565b979650505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166129795750600090565b60008060006129866105be565b925092509250826000148061299a57508042115b15612a4c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633111e7b36129d6612d12565b600019306040518463ffffffff1660e01b81526004016129f893929190613175565b602060405180830381600087803b158015612a1257600080fd5b505af1158015612a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4a9190612f22565b505b612a546105be565b91945092509050612a658282611c9d565b15612ad6576040516301e9a69560e41b81526000805160206131a983398151915290631e9a695090612a9f90309060001990600401612fee565b600060405180830381600087803b158015612ab957600080fd5b505af1158015612acd573d6000803e3d6000fd5b50505050612b47565b612ae083826117cc565b15612b47576000805160206131a98339815191526001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612b2e57600080fd5b505af1158015612b42573d6000803e3d6000fd5b505050505b6040516309a99b4f60e41b81526000805160206131a983398151915290639a99b4f090612b7c90309060001990600401612fee565b600060405180830381600087803b158015612b9657600080fd5b505af1158015612baa573d6000803e3d6000fd5b50506040516370a0823160e01b8152737fc66500c84a76ad7e9c93437bfc5ac33e2ddae992506370a082319150612be5903090600401612dbb565b60206040518083038186803b158015612bfd57600080fd5b505afa158015612c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c359190612f22565b935050505090565b600254604051636ccb2b0160e01b81526001600160a01b038581166004830152848116602483015260448201849052600160648301523060848301526000921690636ccb2b019060a401602060405180830381600087803b158015612ca157600080fd5b505af1158015612cb5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e99190612f22565b60608315612ce8575081611689565b825115612cf85782518084602001fd5b8160405162461bcd60e51b81526004016105319190612e6b565b60408051600180825281830190925260609160009190602080830190803683370190505090507f000000000000000000000000000000000000000000000000000000000000000081600081518110612d6c57612d6c613007565b6001600160a01b0390921660209283029190910190910152919050565b6001600160a01b038116811461058857600080fd5b600060208284031215612db057600080fd5b813561168981612d89565b6001600160a01b0391909116815260200190565b600060208284031215612de157600080fd5b5035919050565b600081518084526020808501945080840160005b83811015612e215781516001600160a01b031687529582019590820190600101612dfc565b509495945050505050565b6020815260006116896020830184612de8565b60005b83811015612e5a578181015183820152602001612e42565b8381111561172a5750506000910152565b6020815260008251806020840152612e8a816040850160208701612e3f565b601f01601f19169190910160400192915050565b600060208284031215612eb057600080fd5b815161168981612d89565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600060208284031215612f3457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612f6457612f64612f3b565b500190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600082821015612fae57612fae612f3b565b500390565b600181811c90821680612fc757607f821691505b60208210811415612fe857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60006020828403121561304557600080fd5b8151801515811461168957600080fd5b600060033d1115610b945760046000803e5060005160e01c90565b601f8201601f1916810167ffffffffffffffff811182821017156130a457634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d10156130b95790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156130e957505050505090565b82850191508151818111156131015750505050505090565b843d870101602082850101111561311b5750505050505090565b61312a60208286010187613070565b509095945050505050565b80516020808301519190811015612fe85760001960209190910360031b1b16919050565b6000825161316b818460208701612e3f565b9190910192915050565b6060815260006131886060830186612de8565b6020830194909452506001600160a01b039190911660409091015291905056fe0000000000000000000000004da27a545c0c5b758a6ba100e3a049001de870f5a2646970667358221220dad5583c89d771b460687909529d8e65b59b829b437a7264d91d2304f873375364736f6c63430008090033",
  "devdoc": {
    "details": "This strategy will deposit collateral token in Aave and earn interest.",
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "tvl()": {
        "details": "aToken and collateral are 1:1"
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "canStartCooldown()": {
        "notice": "Returns true if we should start cooldown"
      },
      "canUnstake()": {
        "notice": "Returns true if Aave can be unstaked"
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "cooldownData()": {
        "notice": "Return cooldown related timestamps"
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "startCooldown()": {
        "notice": "Initiate cooldown to unstake aave."
      },
      "sweepERC20(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Report total value locked"
      },
      "unstakeAave()": {
        "notice": "Unstake Aave from stakedAave contract"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11965,
        "contract": "vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol:AaveV2",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11971,
        "contract": "vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol:AaveV2",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11974,
        "contract": "vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol:AaveV2",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)11616"
      },
      {
        "astId": 11987,
        "contract": "vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol:AaveV2",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3007_storage"
      },
      {
        "astId": 12998,
        "contract": "vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol:AaveV2",
        "label": "aaveProtocolDataProvider",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AaveProtocolDataProvider)10321"
      },
      {
        "astId": 12596,
        "contract": "vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol:AaveV2",
        "label": "NAME",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AaveProtocolDataProvider)10321": {
        "encoding": "inplace",
        "label": "contract AaveProtocolDataProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IRoutedSwapper)11616": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3007_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3006,
            "contract": "vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol:AaveV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2706_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2706_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2701,
            "contract": "vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol:AaveV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2705,
            "contract": "vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol:AaveV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}