{
  "address": "0xd08CFE37f44f2f9AFda5F8788cb856C63EA7c078",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vPool",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_highWater",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lowWater",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "claimAndSwapRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cm",
      "outputs": [
        {
          "internalType": "contract ICollateralManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralType",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertFrom18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertTo18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimalConversionFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highWater",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUnderwater",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lowWater",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maximumCollateralForDaiSwap",
          "type": "uint256"
        }
      ],
      "name": "resurface",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_highWater",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lowWater",
          "type": "uint256"
        }
      ],
      "name": "updateBalancingFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8637a3b2a9466667dd82253df5b9fec7a6e34e333b27396eaed18a7b4a7c6c1",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xd08CFE37f44f2f9AFda5F8788cb856C63EA7c078",
    "transactionIndex": 151,
    "gasUsed": "3744912",
    "logsBloom": "0x
    "blockHash": "0xfd97ee9fa5778a13a2199069476c4471546ac53eb755e316aebc30cedca7187a",
    "transactionHash": "0xc8637a3b2a9466667dd82253df5b9fec7a6e34e333b27396eaed18a7b4a7c6c1",
    "logs": [],
    "blockNumber": 16541671,
    "cumulativeGasUsed": "17593325",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDD9F61a85fFE73E41eF889817972f0B0AaE6D6Dd",
    "0xaBC64889601F01e7B26277Ef8756250d6ABf8c18",
    "0x8f156189A3CD28dFc8FB7BbbAce58F98F09c0bB3",
    "0x0538C8bAc84E95A9dF8aC10Aad17DbE81b9E36ee",
    "0x524554482d410000000000000000000000000000000000000000000000000000",
    250,
    225,
    "Maker_Vesper_RETH"
  ],
  "numDeployments": 1,
  "solcInputHash": "57d8d4de6de4c51891db3a907f2b9273",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vPool\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_highWater\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowWater\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"claimAndSwapRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cm\",\"outputs\":[{\"internalType\":\"contract ICollateralManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertTo18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalConversionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highWater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnderwater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowWater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumCollateralForDaiSwap\",\"type\":\"uint256\"}],\"name\":\"resurface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_highWater\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lowWater\",\"type\":\"uint256\"}],\"name\":\"updateBalancingFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken(uint256)\":{\"details\":\"Approve all required tokens\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"resurface(uint256)\":{\"details\":\"If pool is underwater this function will resolve underwater condition. If Debt in Maker is greater than Dai balance in lender then pool is underwater. Lowering DAI debt in Maker will resolve underwater condition. Resolve: Calculate required collateral token to lower DAI debt. Withdraw required collateral token from Maker and convert those to DAI via Uniswap. Finally payback debt in Maker using DAI.Also report loss in pool.\",\"params\":{\"_maximumCollateralForDaiSwap\":\"To protect from sandwich attack let keeper send _maximumCollateralForDaiSwap\"}},\"sweepERC20(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateBalancingFactor(uint256,uint256)\":{\"params\":{\"_highWater\":\"Value for high water mark.\",\"_lowWater\":\"Value for low water mark.\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"This strategy will deposit collateral token in Maker, borrow Dai and deposit borrowed DAI in Vesper DAI pool to earn interest.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"claimAndSwapRewards(uint256)\":{\"notice\":\"Claim rewardToken and convert rewardToken into collateral token.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"convertFrom18(uint256)\":{\"notice\":\"Convert from 18 decimals to token defined decimals.\"},\"convertTo18(uint256)\":{\"notice\":\"Convert from 18 decimals to token defined decimals.\"},\"createVault()\":{\"notice\":\"Create new Maker vault\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"isUnderwater()\":{\"notice\":\"Returns true if pool is underwater.Underwater - If debt is greater than (earning of pool + DAI in pool + some wei buffer).Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"sweepERC20(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns total collateral locked in the strategy\"},\"updateBalancingFactor(uint256,uint256)\":{\"notice\":\"Update balancing factors aka high water and low water values. Water mark values represent Collateral Ratio in Maker. For example 300 as high water means 300% collateral ratio.\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/maker/MakerVesper.sol\":\"MakerVesper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xba0130149442ec454dbf8b583e80ea623138a764d52a5193d64df7143c07e3d2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(address _rewardToken, uint256 _rewardAmount, uint256 _rewardDuration) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(\\n        address _account\\n    ) external view returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n}\\n\",\"keccak256\":\"0x5a7ed8ab606f30f37c78e48206faf59f07cfdf9141a4a64376174b9775633430\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(uint256 _profit, uint256 _loss, uint256 _payback) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(\\n        address _strategy\\n    )\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf01e75effe99d22a092f144e597f47d4bb71a652e4784410010b7e527862406b\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(address tokenIn_, address tokenOut_, uint256 amountOut_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(address tokenIn_, address tokenOut_, uint256 amountIn_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x853ff5f9fbdd441f535370e39d43221d72d7a02fd5e48e343bbecb716a633f10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/vesper/ICollateralManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ICollateralManager {\\n    function addGemJoin(address[] calldata _gemJoins) external;\\n\\n    function borrow(uint256 _amount) external;\\n\\n    function createVault(bytes32 _collateralType) external returns (uint256 _vaultNum);\\n\\n    function depositCollateral(uint256 _amount) external;\\n\\n    function payback(uint256 _amount) external;\\n\\n    function transferVaultOwnership(address _newOwner) external;\\n\\n    function withdrawCollateral(uint256 _amount) external;\\n\\n    function getVaultBalance(address _vaultOwner) external view returns (uint256 collateralLocked);\\n\\n    function getVaultDebt(address _vaultOwner) external view returns (uint256 daiDebt);\\n\\n    function getVaultInfo(\\n        address _vaultOwner\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 daiDebt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        );\\n\\n    function mcdManager() external view returns (address);\\n\\n    function vaultNum(address _vaultOwner) external view returns (uint256 _vaultNum);\\n\\n    function whatWouldWithdrawDo(\\n        address _vaultOwner,\\n        uint256 _amount\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 collateralLocked,\\n            uint256 daiDebt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        );\\n\\n    function mcdGemJoin(bytes32) external view returns (address);\\n\\n    function governor() external view returns (address);\\n}\\n\",\"keccak256\":\"0x462b1c1b00855e27ffa6385fa0ce43fbd727ea12a49aca2331a82b92743f7788\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(address _pool, address _swapper, address _receiptToken) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken(uint256 _approvalAmount) external onlyKeeper {\\n        _approveToken(_approvalAmount);\\n    }\\n\\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\\n    function claimAndSwapRewards(uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        _claimAndSwapRewards();\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance() external onlyKeeper returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _claimAndSwapRewards() internal virtual {\\n        (address _rewardToken, uint256 _rewardsAmount) = _claimRewards();\\n        if (_rewardsAmount > 0) {\\n            _safeSwapExactInput(_rewardToken, address(collateralToken), _rewardsAmount);\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _claimRewards() internal virtual returns (address, uint256) {}\\n\\n    function _rebalance() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(address _tokenIn, address _tokenOut, uint256 _amountIn) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x2a3d103cd68d7af098c85b6e0cde4679c67bba8fab139fc4ddc84dad2745ee99\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/maker/Maker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/vesper/ICollateralManager.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Maker, borrow Dai and\\n/// deposit borrowed DAI in other lending pool to earn interest.\\nabstract contract Maker is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"5.1.0\\\";\\n\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    ICollateralManager public immutable cm;\\n    bytes32 public immutable collateralType;\\n    uint256 public highWater;\\n    uint256 public lowWater;\\n    uint256 public immutable decimalConversionFactor;\\n    uint256 private constant WAT = 10 ** 16;\\n\\n    constructor(\\n        address _pool,\\n        address _cm,\\n        address _swapper,\\n        address _receiptToken,\\n        bytes32 _collateralType,\\n        uint256 _highWater,\\n        uint256 _lowWater,\\n        string memory _name\\n    ) Strategy(_pool, _swapper, _receiptToken) {\\n        require(_cm != address(0), \\\"cm-address-is-zero\\\");\\n        collateralType = _collateralType;\\n        cm = ICollateralManager(_cm);\\n        _updateBalancingFactor(_highWater, _lowWater);\\n        // Assuming token supports 18 or less decimals.\\n        uint256 _decimals = IERC20Metadata(address(IVesperPool(_pool).token())).decimals();\\n        decimalConversionFactor = 10 ** (18 - _decimals);\\n        NAME = _name;\\n    }\\n\\n    /// @notice Convert from 18 decimals to token defined decimals.\\n    function convertFrom18(uint256 _amount) public view returns (uint256) {\\n        return _amount / decimalConversionFactor;\\n    }\\n\\n    /// @notice Convert from 18 decimals to token defined decimals.\\n    function convertTo18(uint256 _amount) public view returns (uint256) {\\n        return _amount * decimalConversionFactor;\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _token == receiptToken || _token == address(collateralToken);\\n    }\\n\\n    /**\\n     * @notice Returns true if pool is underwater.\\n     * @notice Underwater - If debt is greater than (earning of pool + DAI in pool + some wei buffer).\\n     * @notice Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool.\\n     */\\n    function isUnderwater() external view virtual returns (bool) {\\n        return cm.getVaultDebt(address(this)) > (_daiSupplied() + IERC20(DAI).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view override returns (uint256) {\\n        return convertFrom18(cm.getVaultBalance(address(this))) + collateralToken.balanceOf(address(this));\\n    }\\n\\n    function vaultNum() external view returns (uint256) {\\n        return cm.vaultNum(address(this));\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        IERC20(DAI).safeApprove(address(cm), _amount);\\n        collateralToken.safeApprove(address(cm), _amount);\\n        collateralToken.safeApprove(address(swapper), _amount);\\n        IERC20(DAI).safeApprove(address(swapper), _amount);\\n    }\\n\\n    /**\\n     * @dev It will be called during migration. Transfer Maker vault ownership to new strategy\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual override {\\n        require(Maker(_newStrategy).collateralType() == collateralType, \\\"collateral-type-must-be-the-same\\\");\\n        cm.transferVaultOwnership(_newStrategy);\\n    }\\n\\n    function _calculateSafeBorrowPosition(\\n        uint256 _collateralLocked, // All collateral are 18 decimal in Maker\\n        uint256 _currentDaiDebt, // DAI is 18 decimal\\n        uint256 _collateralUsdRate,\\n        uint256 _minimumDebt\\n    ) internal view returns (uint256 _daiToRepay, uint256 _daiToBorrow) {\\n        uint256 _safeDebt = (_collateralLocked * _collateralUsdRate) / highWater;\\n        if (_safeDebt < _minimumDebt) {\\n            _daiToRepay = _currentDaiDebt;\\n        } else {\\n            uint256 _unSafeDebt = (_collateralLocked * _collateralUsdRate) / lowWater;\\n            if (_currentDaiDebt > _unSafeDebt) {\\n                // Being below low water brings risk of liquidation in Maker.\\n                // Withdraw DAI from Lender and deposit in Maker\\n                // highWater > lowWater hence _safeDebt < unSafeDebt\\n                _daiToRepay = _currentDaiDebt - _safeDebt;\\n            } else if (_currentDaiDebt < _safeDebt) {\\n                _daiToBorrow = _safeDebt - _currentDaiDebt;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert amount to wrapped (i.e. asset to shares)\\n     * @dev Only used when dealing with wrapped token as collateral (e.g. wstETH)\\n     */\\n    function _convertToWrapped(uint256 _amount) internal view virtual returns (uint256 _wrappedAmount) {\\n        _wrappedAmount = _amount;\\n    }\\n\\n    function _depositDaiToLender(uint256 _amount) internal virtual;\\n\\n    // Dai supplied to other protocol to generate yield in DAI.\\n    function _daiSupplied() internal view virtual returns (uint256);\\n\\n    function _moveDaiToMaker(uint256 _amount) internal {\\n        if (_amount > 0) {\\n            _withdrawDaiFromLender(_amount);\\n            cm.payback(_amount);\\n        }\\n    }\\n\\n    function _rebalance() internal virtual override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        (\\n            uint256 _wrappedCollateralInVault18,\\n            uint256 _currentDaiDebt,\\n            uint256 _collateralUsdRate,\\n            ,\\n            uint256 _minimumDaiDebt\\n        ) = cm.getVaultInfo(address(this));\\n        _payback = IVesperPool(pool).excessDebt(address(this));\\n        uint256 withdrawFromVault;\\n        if (_payback > 0) {\\n            withdrawFromVault = _convertToWrapped(_payback);\\n        }\\n        // Assets in maker is always in 18 decimal.\\n        {\\n            uint256 _wrappedCollateralInVault = convertFrom18(_wrappedCollateralInVault18);\\n            uint256 _strategyDebtInWrapped = _convertToWrapped(IVesperPool(pool).totalDebtOf(address(this)));\\n            if (_wrappedCollateralInVault > _strategyDebtInWrapped) {\\n                withdrawFromVault += _wrappedCollateralInVault - _strategyDebtInWrapped;\\n            }\\n            if (withdrawFromVault > _wrappedCollateralInVault) {\\n                withdrawFromVault = _wrappedCollateralInVault;\\n            }\\n        }\\n        // remaining _collateralInVault\\n        _wrappedCollateralInVault18 -= convertTo18(withdrawFromVault); // Collateral in Maker vault is always 18 decimal.\\n\\n        // Calculate daiToRepay or daiToBorrow considering current collateral in Vault, payback, collateralUsdRate\\n        (uint256 _daiToRepay, uint256 _daiToBorrow) = _calculateSafeBorrowPosition(\\n            _wrappedCollateralInVault18,\\n            _currentDaiDebt,\\n            _collateralUsdRate,\\n            _minimumDaiDebt\\n        );\\n        uint256 _daiToWithdraw = _daiToRepay;\\n\\n        uint256 _daiInLender = _daiSupplied();\\n        if (_daiInLender > _currentDaiDebt) {\\n            // Yield generated in DAI. Withdraw these yield to convert to collateral.\\n            _daiToWithdraw += _daiInLender - _currentDaiDebt;\\n        }\\n        if (_daiToWithdraw > 0) {\\n            // This can withdraw less than requested amount.  This is not problem as long as Dai here >= _daiToRepay. Profit earned in DAI can be reused for _daiToRepay.\\n            _withdrawDaiFromLender(_daiToWithdraw);\\n        }\\n\\n        if (_daiToRepay > 0) {\\n            cm.payback(_daiToRepay);\\n            _currentDaiDebt -= _daiToRepay;\\n        }\\n        // Dai paid back by now. Good to withdraw excessDebt in collateral.\\n        if (withdrawFromVault > 0) {\\n            cm.withdrawCollateral(withdrawFromVault);\\n            _unwrap(withdrawFromVault);\\n        }\\n\\n        // All remaining dai here is profit.\\n        uint256 _profitInDai = IERC20(DAI).balanceOf(address(this));\\n        if (_profitInDai > 0) {\\n            // calling safeSwap to not revert in case profit conversion to collateralToken fails. Let Dai remains here. It doesn't harm overall.\\n            _safeSwapExactInput(DAI, address(collateralToken), _profitInDai);\\n        }\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        _payback = Math.min(_payback, _collateralHere);\\n        if (_collateralHere > _payback) {\\n            _profit = _collateralHere - _payback;\\n        }\\n\\n        // Pool expect this contract has _profit + _payback in the contract. This method would revert if collateral.balanceOf(strategy) < (_profit + _excessDebt);\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n\\n        // Pool may send some collateral after reporting earning.\\n        _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere > 0) {\\n            uint256 _wrappedHere = _wrap(_collateralHere);\\n            cm.depositCollateral(_wrappedHere);\\n            _wrappedCollateralInVault18 += convertTo18(_wrappedHere);\\n            (, _daiToBorrow) = _calculateSafeBorrowPosition(\\n                _wrappedCollateralInVault18,\\n                _currentDaiDebt,\\n                _collateralUsdRate,\\n                _minimumDaiDebt\\n            );\\n        }\\n\\n        if (_daiToBorrow > 100e18) {\\n            // borrow only if its above dust\\n            cm.borrow(_daiToBorrow);\\n            _depositDaiToLender(_daiToBorrow);\\n        }\\n    }\\n\\n    function _resurface(uint256 _maximumCollateralForDaiSwap) internal virtual {\\n        uint256 _totalDaiBalance = _daiSupplied() + IERC20(DAI).balanceOf(address(this));\\n        uint256 _daiDebt = cm.getVaultDebt(address(this));\\n        require(_daiDebt > _totalDaiBalance, \\\"pool-is-above-water\\\");\\n        uint256 _daiNeeded = _daiDebt - _totalDaiBalance;\\n        uint256 _collateralNeeded = swapper.getAmountIn(address(collateralToken), DAI, _daiNeeded);\\n        require(_collateralNeeded <= _maximumCollateralForDaiSwap, \\\"collateral-require-too-high\\\");\\n        if (_collateralNeeded > 0) {\\n            uint256 _wrappedNeeded = _convertToWrapped(_collateralNeeded);\\n            if (_wrappedNeeded > 0) {\\n                cm.withdrawCollateral(_wrappedNeeded);\\n                _collateralNeeded = _unwrap(_wrappedNeeded);\\n                swapper.swapExactOutput(address(collateralToken), DAI, _daiNeeded, _collateralNeeded, address(this));\\n                cm.payback(IERC20(DAI).balanceOf(address(this)));\\n                IVesperPool(pool).reportLoss(_collateralNeeded);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Unwraps collateral token\\n     * @dev Only used when dealing with wrapped token as collateral (e.g. wstETH)\\n     */\\n    function _unwrap(uint256 _amount) internal virtual returns (uint256 _unwrappedAmount) {\\n        _unwrappedAmount = _amount;\\n    }\\n\\n    function _updateBalancingFactor(uint256 _highWater, uint256 _lowWater) internal {\\n        require(_lowWater > 0, \\\"lowWater-is-zero\\\");\\n        require(_highWater > _lowWater, \\\"highWater-less-than-lowWater\\\");\\n        highWater = _highWater * WAT;\\n        lowWater = _lowWater * WAT;\\n    }\\n\\n    function _withdrawDaiFromLender(uint256 _amount) internal virtual;\\n\\n    /**\\n     * @notice Wraps collateral token\\n     * @dev Only used when dealing with wrapped token as collateral (e.g. wstETH)\\n     */\\n    function _wrap(uint256 _amount) internal virtual returns (uint256 _wrappedAmount) {\\n        _wrappedAmount = _amount;\\n    }\\n\\n    function _withdrawHere(uint256 _amount) internal virtual override {\\n        _amount = _convertToWrapped(_amount);\\n\\n        (\\n            uint256 collateralLocked,\\n            uint256 debt,\\n            uint256 collateralUsdRate,\\n            uint256 collateralRatio,\\n            uint256 minimumDebt\\n        ) = cm.whatWouldWithdrawDo(address(this), _amount);\\n        if (debt > 0 && collateralRatio < lowWater) {\\n            // If this withdraw results in Low Water scenario.\\n            uint256 maxDebt = (collateralLocked * collateralUsdRate) / highWater;\\n            if (maxDebt < minimumDebt) {\\n                // This is Dusting scenario\\n                _moveDaiToMaker(debt);\\n            } else if (maxDebt < debt) {\\n                _moveDaiToMaker(debt - maxDebt);\\n            }\\n        }\\n        cm.withdrawCollateral(_amount);\\n        _unwrap(_amount);\\n    }\\n\\n    /******************************************************************************\\n     *                            Admin functions                              *\\n     *****************************************************************************/\\n\\n    /// @notice Create new Maker vault\\n    function createVault() external onlyGovernor {\\n        cm.createVault(collateralType);\\n    }\\n\\n    /**\\n     * @param _maximumCollateralForDaiSwap To protect from sandwich attack let keeper send _maximumCollateralForDaiSwap\\n     * @dev If pool is underwater this function will resolve underwater condition.\\n     * If Debt in Maker is greater than Dai balance in lender then pool is underwater.\\n     * Lowering DAI debt in Maker will resolve underwater condition.\\n     * Resolve: Calculate required collateral token to lower DAI debt. Withdraw required\\n     * collateral token from Maker and convert those to DAI via Uniswap.\\n     * Finally payback debt in Maker using DAI.\\n     * @dev Also report loss in pool.\\n     */\\n    function resurface(uint256 _maximumCollateralForDaiSwap) external onlyKeeper {\\n        _resurface(_maximumCollateralForDaiSwap);\\n    }\\n\\n    /**\\n     * @notice Update balancing factors aka high water and low water values.\\n     * Water mark values represent Collateral Ratio in Maker. For example 300 as high water\\n     * means 300% collateral ratio.\\n     * @param _highWater Value for high water mark.\\n     * @param _lowWater Value for low water mark.\\n     */\\n    function updateBalancingFactor(uint256 _highWater, uint256 _lowWater) external onlyGovernor {\\n        _updateBalancingFactor(_highWater, _lowWater);\\n    }\\n}\\n\",\"keccak256\":\"0x0b76d387961bc9faad93733d304b27038cae7dc2fc9fb46cfbceb53fdef23d9e\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/maker/MakerVesper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./Maker.sol\\\";\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Maker, borrow Dai and\\n/// deposit borrowed DAI in Vesper DAI pool to earn interest.\\ncontract MakerVesper is Maker {\\n    using SafeERC20 for IERC20;\\n    address internal constant VSP = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421;\\n\\n    constructor(\\n        address _pool,\\n        address _cm,\\n        address _swapManager,\\n        address _vPool,\\n        bytes32 _collateralType,\\n        uint256 _highWater,\\n        uint256 _lowWater,\\n        string memory _name\\n    ) Maker(_pool, _cm, _swapManager, _vPool, _collateralType, _highWater, _lowWater, _name) {\\n        require(address(IVesperPool(_vPool).token()) == DAI, \\\"not-a-valid-dai-pool\\\");\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        IERC20(DAI).safeApprove(address(receiptToken), _amount);\\n        IERC20(VSP).safeApprove(address(swapper), _amount);\\n    }\\n\\n    /// @notice Claim VSP\\n    function _claimRewards() internal virtual override returns (address, uint256) {\\n        address _poolRewards = IVesperPool(receiptToken).poolRewards();\\n        if (_poolRewards != address(0)) {\\n            IPoolRewards(_poolRewards).claimReward(address(this));\\n        }\\n        return (VSP, IERC20(VSP).balanceOf(address(this)));\\n    }\\n\\n    function _depositDaiToLender(uint256 _amount) internal override {\\n        IVesperPool(receiptToken).deposit(_amount);\\n    }\\n\\n    function _daiSupplied() internal view override returns (uint256) {\\n        return (IVesperPool(receiptToken).pricePerShare() * IVesperPool(receiptToken).balanceOf(address(this))) / 1e18;\\n    }\\n\\n    function _withdrawDaiFromLender(uint256 _amount) internal override {\\n        uint256 _pricePerShare = IVesperPool(receiptToken).pricePerShare();\\n        uint256 _share = (_amount * 1e18) / _pricePerShare;\\n        // Should not withdraw less than requested amount\\n        _share = _amount > ((_share * _pricePerShare) / 1e18) ? _share + 1 : _share;\\n        IVesperPool(receiptToken).withdraw(Math.min(_share, IVesperPool(receiptToken).balanceOf(address(this))));\\n    }\\n}\\n\",\"keccak256\":\"0x10b620f57c47c52f2e1cefd299323c1fb287bf12b9c75c712356f7386c6ce299\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162004a4d38038062004a4d8339810160408190526200003591620006b7565b87878787878787878786866001600160a01b0383166200009c5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000f45760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f000000000000000000604482015260640162000093565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200015257600080fd5b505afa15801562000167573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018d91906200080b565b6001600160a01b03908116608052600080546001600160a01b031916918316919091179055620001d4620001be3390565b6003620004aa60201b62001ad91790919060201c565b620002165760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640162000093565b5050506001600160a01b038716620002665760405162461bcd60e51b8152602060048201526012602482015271636d2d616464726573732d69732d7a65726f60701b604482015260640162000093565b60e08490526001600160a01b03871660c052620002848383620004ca565b6000886001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620002c057600080fd5b505afa158015620002d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002fb91906200080b565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200033457600080fd5b505afa15801562000349573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200036f919062000832565b60ff169050620003818160126200086d565b6200038e90600a62000984565b610100528151620003a7906005906020850190620005e2565b50505050505050505050736b175474e89094c44da98b954eedeac495271d0f6001600160a01b0316856001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200040957600080fd5b505afa1580156200041e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200044491906200080b565b6001600160a01b0316146200049c5760405162461bcd60e51b815260206004820152601460248201527f6e6f742d612d76616c69642d6461692d706f6f6c000000000000000000000000604482015260640162000093565b5050505050505050620009f1565b6000620004c1836001600160a01b03841662000590565b90505b92915050565b600081116200050f5760405162461bcd60e51b815260206004820152601060248201526f6c6f7757617465722d69732d7a65726f60801b604482015260640162000093565b808211620005605760405162461bcd60e51b815260206004820152601c60248201527f6869676857617465722d6c6573732d7468616e2d6c6f77576174657200000000604482015260640162000093565b62000573662386f26fc100008362000992565b60065562000589662386f26fc100008262000992565b6007555050565b6000818152600183016020526040812054620005d957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620004c4565b506000620004c4565b828054620005f090620009b4565b90600052602060002090601f0160209004810192826200061457600085556200065f565b82601f106200062f57805160ff19168380011785556200065f565b828001600101855582156200065f579182015b828111156200065f57825182559160200191906001019062000642565b506200066d92915062000671565b5090565b5b808211156200066d576000815560010162000672565b6001600160a01b03811681146200069e57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600080610100898b031215620006d557600080fd5b8851620006e28162000688565b809850506020808a0151620006f78162000688565b60408b01519098506200070a8162000688565b60608b01519097506200071d8162000688565b60808b015160a08c015160c08d015160e08e0151939950919750955093506001600160401b03808211156200075157600080fd5b818c0191508c601f8301126200076657600080fd5b8151818111156200077b576200077b620006a1565b604051601f8201601f19908116603f01168101908382118183101715620007a657620007a6620006a1565b816040528281528f86848701011115620007bf57600080fd5b600093505b82841015620007e35784840186015181850187015292850192620007c4565b82841115620007f55760008684830101525b8096505050505050509295985092959890939650565b6000602082840312156200081e57600080fd5b81516200082b8162000688565b9392505050565b6000602082840312156200084557600080fd5b815160ff811681146200082b57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008282101562000882576200088262000857565b500390565b600181815b80851115620008c8578160001904821115620008ac57620008ac62000857565b80851615620008ba57918102915b93841c93908002906200088c565b509250929050565b600082620008e157506001620004c4565b81620008f057506000620004c4565b8160018114620009095760028114620009145762000934565b6001915050620004c4565b60ff84111562000928576200092862000857565b50506001821b620004c4565b5060208310610133831016604e8410600b841016171562000959575081810a620004c4565b62000965838362000887565b80600019048211156200097c576200097c62000857565b029392505050565b6000620004c18383620008d0565b6000816000190483118215151615620009af57620009af62000857565b500290565b600181811c90821680620009c957607f821691505b60208210811415620009eb57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051613e8162000bcc60003960008181610305015281816110d40152611ab401526000818161046001528181610e820152612ce001526000818161032c01528181610af501528181610cd401528181610ea801528181611a1e01528181611c0901528181611e2b01528181611f670152818161213b0152818161225b0152818161246e0152818161271a015281816127a901528181612ae501528181612b9601528181612dd4015281816133a7015281816133fb015261344f01526000818161020b015281816106b3015281816107f401528181610910015281816109ee01528181610bb001528181610db401528181611004015281816110fc01528181611199015281816113c50152818161158e0152818161206601528181612513015281816125ce015281816129c901526138fa0152600081816103860152818161041c0152818161052b015281816105d301528181610853015281816108ee0152818161096201528181610a2101528181610d7801528181611329015281816117c00152818161197e01528181611b3301528181611d1001528181611ebf015281816128b6015281816128f501528181612a3a0152818161342d0152818161348501526138d80152613e816000f3fe608060405234801561001057600080fd5b50600436106101c65760003560e01c8063a3f4df7e116100fa578063d3033c391161009d578063d3033c3914610407578063d8dfeb451461041a578063e00af4a714610440578063e5328e0614610453578063e824600f1461045b578063ec78e83214610482578063fb589de214610495578063fc0c546a146104a8578063ffa1ad74146104b957600080fd5b8063a3f4df7e14610363578063b09e879714610378578063b2016bd414610381578063b442bb23146103a8578063c415b95c146103bb578063ce27b903146103ce578063ce5494bb146103e1578063d2c35ce8146103f457600080fd5b80633ac9fc111161016d5780633ac9fc11146102945780634032b72b146102a7578063415eea1b146102ba578063440d7248146102c25780635d12928b146102d55780637d7c2a1c146102dd5780638fe91ffb146103005780639318162014610327578063951dc22c1461034e57600080fd5b80631026013a146101cb57806314ae9f2e146101f157806316f0115b146102065780631e6a471c1461023a57806325afda831461024d5780632b3297f9146102565780632e1a7d4d146102695780632ecd89d41461027c575b600080fd5b6101de6101d9366004613a80565b6104dd565b6040519081526020015b60405180910390f35b6102046101ff366004613aae565b6106b1565b005b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516101e89190613acb565b610204610248366004613a80565b6107c3565b6101de60075481565b60025461022d906001600160a01b031681565b610204610277366004613a80565b6107f1565b610284610a48565b60405190151581526020016101e8565b6102046102a2366004613a80565b610b80565b6102046102b5366004613aae565b610bae565b6101de610cba565b6102846102d0366004613aae565b610d5e565b610204610db2565b6102e5610f2c565b604080519384526020840192909252908201526060016101e8565b6101de7f000000000000000000000000000000000000000000000000000000000000000081565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b610356610f68565b6040516101e89190613adf565b61036b610f74565b6040516101e89190613b58565b6101de60065481565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b6102046103b6366004613b8b565b611002565b60015461022d906001600160a01b031681565b6101de6103dc366004613a80565b6110cd565b6102046103ef366004613aae565b6110f9565b610204610402366004613aae565b6113c3565b610204610415366004613aae565b61158c565b7f000000000000000000000000000000000000000000000000000000000000000061022d565b61020461044e366004613aae565b611749565b6101de611964565b6101de7f000000000000000000000000000000000000000000000000000000000000000081565b60005461022d906001600160a01b031681565b6101de6104a3366004613a80565b611aad565b6000546001600160a01b031661022d565b61036b604051806040016040528060058152602001640352e312e360dc1b81525081565b60006104ec335b600390611af5565b6105115760405162461bcd60e51b815260040161050890613bad565b60405180910390fd5b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610560903090600401613acb565b60206040518083038186803b15801561057857600080fd5b505afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190613bdd565b90506105ba611b17565b6040516370a0823160e01b815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610608903090600401613acb565b60206040518083038186803b15801561062057600080fd5b505afa158015610634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106589190613bdd565b6106629190613c0c565b9150828210156106ab5760405162461bcd60e51b81526020600482015260146024820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b6044820152606401610508565b50919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190613c23565b6001600160a01b0316336001600160a01b0316146107725760405162461bcd60e51b815260040161050890613c40565b61077d600382611b58565b6107c05760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610508565b50565b6107cc336104e4565b6107e85760405162461bcd60e51b815260040161050890613bad565b6107c081611b6d565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146108395760405162461bcd60e51b815260040161050890613c77565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610888903090600401613acb565b60206040518083038186803b1580156108a057600080fd5b505afa1580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190613bdd565b9050818110610939576109356001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846120d6565b5050565b61094b6109468284613c0c565b612131565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610997903090600401613acb565b60206040518083038186803b1580156109af57600080fd5b505afa1580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e79190613bdd565b90506109357f0000000000000000000000000000000000000000000000000000000000000000610a1784846122cf565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906120d6565b6040516370a0823160e01b8152600090600080516020613e2c833981519152906370a0823190610a7c903090600401613acb565b60206040518083038186803b158015610a9457600080fd5b505afa158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc9190613bdd565b610ad46122e5565b610ade9190613caa565b60405163c0af0d3b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c0af0d3b90610b2a903090600401613acb565b60206040518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a9190613bdd565b11905090565b610b89336104e4565b610ba55760405162461bcd60e51b815260040161050890613bad565b6107c081612406565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0757600080fd5b505afa158015610c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3f9190613c23565b6001600160a01b0316336001600160a01b031614610c6f5760405162461bcd60e51b815260040161050890613c40565b610c7a600382611ad9565b6107c05760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610508565b60405163cd1adb6160e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cd1adb6190610d09903090600401613acb565b60206040518083038186803b158015610d2157600080fd5b505afa158015610d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d599190613bdd565b905090565b600080546001600160a01b0383811691161480610dac57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0b57600080fd5b505afa158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e439190613c23565b6001600160a01b0316336001600160a01b031614610e735760405162461bcd60e51b815260040161050890613c40565b604051630bbccf9b60e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906317799f3690602401602060405180830381600087803b158015610ef457600080fd5b505af1158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c09190613bdd565b60008080610f39336104e4565b610f555760405162461bcd60e51b815260040161050890613bad565b610f5d612461565b925092509250909192565b6060610d596003612c13565b60058054610f8190613cc2565b80601f0160208091040260200160405190810160405280929190818152602001828054610fad90613cc2565b8015610ffa5780601f10610fcf57610100808354040283529160200191610ffa565b820191906000526020600020905b815481529060010190602001808311610fdd57829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561105b57600080fd5b505afa15801561106f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110939190613c23565b6001600160a01b0316336001600160a01b0316146110c35760405162461bcd60e51b815260040161050890613c40565b6109358282612c20565b6000610dac7f000000000000000000000000000000000000000000000000000000000000000083613cf7565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146111415760405162461bcd60e51b815260040161050890613c77565b6001600160a01b0381166111975760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610508565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111fa57600080fd5b505afa15801561120e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112329190613c23565b6001600160a01b0316146112815760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610508565b61128a81612cde565b6000546040516370a0823160e01b81526113239183916001600160a01b03909116906370a08231906112c0903090600401613acb565b60206040518083038186803b1580156112d857600080fd5b505afa1580156112ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113109190613bdd565b6000546001600160a01b031691906120d6565b6107c0817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016113739190613acb565b60206040518083038186803b15801561138b57600080fd5b505afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a179190613bdd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114549190613c23565b6001600160a01b0316336001600160a01b0316146114845760405162461bcd60e51b815260040161050890613c40565b6001600160a01b0381166114da5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610508565b6001546001600160a01b03828116911614156115305760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610508565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e557600080fd5b505afa1580156115f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161d9190613c23565b6001600160a01b0316336001600160a01b03161461164d5760405162461bcd60e51b815260040161050890613c40565b6001600160a01b03811661169d5760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b6044820152606401610508565b6002546001600160a01b03828116911614156116ed5760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b6044820152606401610508565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b611752336104e4565b61176e5760405162461bcd60e51b815260040161050890613bad565b6001546001600160a01b03166117be5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610508565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156118405760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610508565b61184981610d5e565b1561188d5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610508565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156118c8576001546107c0906001600160a01b031647612e37565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906118f7903090600401613acb565b60206040518083038186803b15801561190f57600080fd5b505afa158015611923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119479190613bdd565b600154909150610935906001600160a01b038481169116836120d6565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906119b3903090600401613acb565b60206040518083038186803b1580156119cb57600080fd5b505afa1580156119df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a039190613bdd565b6040516369ebe00160e11b8152611aa3906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d3d7c00290611a53903090600401613acb565b60206040518083038186803b158015611a6b57600080fd5b505afa158015611a7f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a39190613bdd565b610d599190613caa565b6000610dac7f000000000000000000000000000000000000000000000000000000000000000083613d16565b6000611aee836001600160a01b038416612f50565b9392505050565b6001600160a01b03811660009081526001830160205260408120541515611aee565b600080611b22612f9f565b9092509050801561093557610935827f00000000000000000000000000000000000000000000000000000000000000008361312b565b6000611aee836001600160a01b0384166131bd565b6040516370a0823160e01b8152600090600080516020613e2c833981519152906370a0823190611ba1903090600401613acb565b60206040518083038186803b158015611bb957600080fd5b505afa158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190613bdd565b611bf96122e5565b611c039190613caa565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c0af0d3b306040518263ffffffff1660e01b8152600401611c539190613acb565b60206040518083038186803b158015611c6b57600080fd5b505afa158015611c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca39190613bdd565b9050818111611cea5760405162461bcd60e51b81526020600482015260136024820152723837b7b616b4b996b0b137bb3296bbb0ba32b960691b6044820152606401610508565b6000611cf68383613c0c565b6002546040516353b609b560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600080516020613e2c833981519152602483015260448201849052929350600092909116906353b609b590606401602060405180830381600087803b158015611d7e57600080fd5b505af1158015611d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db69190613bdd565b905084811115611e085760405162461bcd60e51b815260206004820152601b60248201527f636f6c6c61746572616c2d726571756972652d746f6f2d6869676800000000006044820152606401610508565b80156120cf578080156120cd576040516330897f1760e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636112fe2e90602401600060405180830381600087803b158015611e7757600080fd5b505af1158015611e8b573d6000803e3d6000fd5b50505050611e968190565b6002546040516381cc619b60e01b81529193506001600160a01b0316906381cc619b90611efd907f000000000000000000000000000000000000000000000000000000000000000090600080516020613e2c83398151915290889088903090600401613d38565b602060405180830381600087803b158015611f1757600080fd5b505af1158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f9190613bdd565b506040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a846c2fd90600080516020613e2c833981519152906370a0823190611fb2903090600401613acb565b60206040518083038186803b158015611fca57600080fd5b505afa158015611fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120029190613bdd565b6040518263ffffffff1660e01b815260040161202091815260200190565b600060405180830381600087803b15801561203a57600080fd5b505af115801561204e573d6000803e3d6000fd5b50506040516306eeb69360e51b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063ddd6d2609150602401600060405180830381600087803b1580156120b457600080fd5b505af11580156120c8573d6000803e3d6000fd5b505050505b505b5050505050565b61212c8363a9059cbb60e01b84846040516024016120f5929190613d68565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526132b0565b505050565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352d5aee830886040518363ffffffff1660e01b8152600401612187929190613d68565b60a06040518083038186803b15801561219f57600080fd5b505afa1580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d79190613d81565b945094509450945094506000841180156121f2575060075482105b15612245576006546000906122078588613cf7565b6122119190613d16565b9050818110156122295761222485613382565b612243565b848110156122435761224361223e8287613c0c565b613382565b505b6040516330897f1760e11b8152600481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636112fe2e90602401600060405180830381600087803b1580156122a757600080fd5b505af11580156122bb573d6000803e3d6000fd5b505050506122c68690565b50505050505050565b60008183106122de5781611aee565b5090919050565b600080546040516370a0823160e01b8152670de0b6b3a7640000916001600160a01b0316906370a082319061231e903090600401613acb565b60206040518083038186803b15801561233657600080fd5b505afa15801561234a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236e9190613bdd565b60008054906101000a90046001600160a01b03166001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156123ba57600080fd5b505afa1580156123ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f29190613bdd565b6123fc9190613cf7565b610d599190613d16565b61240f816133de565b60005461243590600080516020613e2c833981519152906001600160a01b0316836134d0565b6002546107c090731b40183efb4dd766f11bda7a7c3ad8982e998421906001600160a01b0316836134d0565b60008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166390229af7306040518263ffffffff1660e01b81526004016124b89190613acb565b60a06040518083038186803b1580156124d057600080fd5b505afa1580156124e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125089190613d81565b9450509350935093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b815260040161255d9190613acb565b60206040518083038186803b15801561257557600080fd5b505afa158015612589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ad9190613bdd565b9450600085156125ba5750845b60006125c586611aad565b9050600061266b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016126189190613acb565b60206040518083038186803b15801561263057600080fd5b505afa158015612644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126689190613bdd565b90565b90508082111561268c5761267f8183613c0c565b6126899084613caa565b92505b81831115612698578192505b50506126a3816110cd565b6126ad9086613c0c565b94506000806126be878787876135e3565b90925090508160006126ce6122e5565b9050878111156126ef576126e28882613c0c565b6126ec9083613caa565b91505b81156126fe576126fe82613669565b831561278d5760405163a846c2fd60e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a846c2fd90602401600060405180830381600087803b15801561276657600080fd5b505af115801561277a573d6000803e3d6000fd5b50505050838861278a9190613c0c565b97505b8415612816576040516330897f1760e11b8152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636112fe2e90602401600060405180830381600087803b1580156127f557600080fd5b505af1158015612809573d6000803e3d6000fd5b505050506128148590565b505b6040516370a0823160e01b8152600090600080516020613e2c833981519152906370a082319061284a903090600401613acb565b60206040518083038186803b15801561286257600080fd5b505afa158015612876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289a9190613bdd565b905080156128db576128db600080516020613e2c8339815191527f00000000000000000000000000000000000000000000000000000000000000008361312b565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061292a903090600401613acb565b60206040518083038186803b15801561294257600080fd5b505afa158015612956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297a9190613bdd565b90506129868c826122cf565b9b508b81111561299d5761299a8c82613c0c565b9d505b6040516302df682360e11b8152600481018f9052602481018e9052604481018d90526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015612a0d57600080fd5b505af1158015612a21573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692506370a082319150612a71903090600401613acb565b60206040518083038186803b158015612a8957600080fd5b505afa158015612a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac19190613bdd565b90508015612b6f5760008160405163bad4a01f60e01b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bad4a01f90602401600060405180830381600087803b158015612b3157600080fd5b505af1158015612b45573d6000803e3d6000fd5b50505050612b52816110cd565b612b5c908d613caa565b9b50612b6a8c8c8c8c6135e3565b965050505b68056bc75e2d63100000851115612c035760405163317afabb60e21b8152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c5ebeaec90602401600060405180830381600087803b158015612be257600080fd5b505af1158015612bf6573d6000803e3d6000fd5b50505050612c0385613827565b5050505050505050505050909192565b60606000611aee83613858565b60008111612c635760405162461bcd60e51b815260206004820152601060248201526f6c6f7757617465722d69732d7a65726f60801b6044820152606401610508565b808211612cb25760405162461bcd60e51b815260206004820152601c60248201527f6869676857617465722d6c6573732d7468616e2d6c6f775761746572000000006044820152606401610508565b612cc3662386f26fc1000083613cf7565b600655612cd7662386f26fc1000082613cf7565b6007555050565b7f0000000000000000000000000000000000000000000000000000000000000000816001600160a01b031663e824600f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d3857600080fd5b505afa158015612d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d709190613bdd565b14612dbd5760405162461bcd60e51b815260206004820181905260248201527f636f6c6c61746572616c2d747970652d6d7573742d62652d7468652d73616d656044820152606401610508565b604051637038e06560e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e071c0ca90612e09908490600401613acb565b600060405180830381600087803b158015612e2357600080fd5b505af11580156120cf573d6000803e3d6000fd5b80471015612e875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610508565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612ed4576040519150601f19603f3d011682016040523d82523d6000602084013e612ed9565b606091505b505090508061212c5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610508565b6000818152600183016020526040812054612f9757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dac565b506000610dac565b60008060008060009054906101000a90046001600160a01b03166001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b158015612ff157600080fd5b505afa158015613005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130299190613c23565b90506001600160a01b038116156130995760405163d279c19160e01b81526001600160a01b0382169063d279c19190613066903090600401613acb565b600060405180830381600087803b15801561308057600080fd5b505af1158015613094573d6000803e3d6000fd5b505050505b6040516370a0823160e01b8152731b40183efb4dd766f11bda7a7c3ad8982e9984219081906370a08231906130d2903090600401613acb565b60206040518083038186803b1580156130ea57600080fd5b505afa1580156130fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131229190613bdd565b92509250509091565b600254604051636ccb2b0160e01b81526001600160a01b0390911690636ccb2b0190613164908690869086906001903090600401613d38565b602060405180830381600087803b15801561317e57600080fd5b505af19250505080156131ae575060408051601f3d908101601f191682019092526131ab91810190613bdd565b60015b6131b757505050565b50505050565b600081815260018301602052604081205480156132a65760006131e1600183613c0c565b85549091506000906131f590600190613c0c565b905081811461325a57600086600001828154811061321557613215613dc1565b906000526020600020015490508087600001848154811061323857613238613dc1565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061326b5761326b613dd7565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610dac565b6000915050610dac565b6000613305826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138b49092919063ffffffff16565b80519091501561212c57808060200190518101906133239190613ded565b61212c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610508565b80156107c05761339181613669565b60405163a846c2fd60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a846c2fd90602401612e09565b6133e7816138cb565b613420600080516020613e2c8339815191527f0000000000000000000000000000000000000000000000000000000000000000836134d0565b6134746001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836134d0565b6002546134ae906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836134d0565b6002546107c090600080516020613e2c833981519152906001600160a01b0316835b8015806135595750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561351f57600080fd5b505afa158015613533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135579190613bdd565b155b6135c45760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610508565b61212c8363095ea7b360e01b84846040516024016120f5929190613d68565b600080600060065485886135f79190613cf7565b6136019190613d16565b9050838110156136135785925061365f565b600754600090613623878a613cf7565b61362d9190613d16565b905080871115613648576136418288613c0c565b935061365d565b8187101561365d5761365a8783613c0c565b92505b505b5094509492505050565b60008060009054906101000a90046001600160a01b03166001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156136b857600080fd5b505afa1580156136cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f09190613bdd565b905060008161370784670de0b6b3a7640000613cf7565b6137119190613d16565b9050670de0b6b3a76400006137268383613cf7565b6137309190613d16565b831161373c5780613747565b613747816001613caa565b6000546040516370a0823160e01b81529192506001600160a01b031690632e1a7d4d906137db90849084906370a0823190613786903090600401613acb565b60206040518083038186803b15801561379e57600080fd5b505afa1580156137b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d69190613bdd565b6122cf565b6040518263ffffffff1660e01b81526004016137f991815260200190565b600060405180830381600087803b15801561381357600080fd5b505af11580156122c6573d6000803e3d6000fd5b60005460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401612e09565b6060816000018054806020026020016040519081016040528092919081815260200182805480156138a857602002820191906000526020600020905b815481526020019060010190808311613894575b50505050509050919050565b60606138c3848460008561391f565b949350505050565b6107c06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836134d0565b6060824710156139805760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610508565b843b6139ce5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610508565b600080866001600160a01b031685876040516139ea9190613e0f565b60006040518083038185875af1925050503d8060008114613a27576040519150601f19603f3d011682016040523d82523d6000602084013e613a2c565b606091505b5091509150613a3c828286613a47565b979650505050505050565b60608315613a56575081611aee565b825115613a665782518084602001fd5b8160405162461bcd60e51b81526004016105089190613b58565b600060208284031215613a9257600080fd5b5035919050565b6001600160a01b03811681146107c057600080fd5b600060208284031215613ac057600080fd5b8135611aee81613a99565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015613b205783516001600160a01b031683529284019291840191600101613afb565b50909695505050505050565b60005b83811015613b47578181015183820152602001613b2f565b838111156131b75750506000910152565b6020815260008251806020840152613b77816040850160208701613b2c565b601f01601f19169190910160400192915050565b60008060408385031215613b9e57600080fd5b50508035926020909101359150565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600060208284031215613bef57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613c1e57613c1e613bf6565b500390565b600060208284031215613c3557600080fd5b8151611aee81613a99565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60008219821115613cbd57613cbd613bf6565b500190565b600181811c90821680613cd657607f821691505b602082108114156106ab57634e487b7160e01b600052602260045260246000fd5b6000816000190483118215151615613d1157613d11613bf6565b500290565b600082613d3357634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b6001600160a01b03929092168252602082015260400190565b600080600080600060a08688031215613d9957600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600060208284031215613dff57600080fd5b81518015158114611aee57600080fd5b60008251613e21818460208701613b2c565b919091019291505056fe0000000000000000000000006b175474e89094c44da98b954eedeac495271d0fa2646970667358221220f43c8dd3990bfb55b4b39d5f1ab6842b1e5e08812540e05ebc469e3a84a8327864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c65760003560e01c8063a3f4df7e116100fa578063d3033c391161009d578063d3033c3914610407578063d8dfeb451461041a578063e00af4a714610440578063e5328e0614610453578063e824600f1461045b578063ec78e83214610482578063fb589de214610495578063fc0c546a146104a8578063ffa1ad74146104b957600080fd5b8063a3f4df7e14610363578063b09e879714610378578063b2016bd414610381578063b442bb23146103a8578063c415b95c146103bb578063ce27b903146103ce578063ce5494bb146103e1578063d2c35ce8146103f457600080fd5b80633ac9fc111161016d5780633ac9fc11146102945780634032b72b146102a7578063415eea1b146102ba578063440d7248146102c25780635d12928b146102d55780637d7c2a1c146102dd5780638fe91ffb146103005780639318162014610327578063951dc22c1461034e57600080fd5b80631026013a146101cb57806314ae9f2e146101f157806316f0115b146102065780631e6a471c1461023a57806325afda831461024d5780632b3297f9146102565780632e1a7d4d146102695780632ecd89d41461027c575b600080fd5b6101de6101d9366004613a80565b6104dd565b6040519081526020015b60405180910390f35b6102046101ff366004613aae565b6106b1565b005b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516101e89190613acb565b610204610248366004613a80565b6107c3565b6101de60075481565b60025461022d906001600160a01b031681565b610204610277366004613a80565b6107f1565b610284610a48565b60405190151581526020016101e8565b6102046102a2366004613a80565b610b80565b6102046102b5366004613aae565b610bae565b6101de610cba565b6102846102d0366004613aae565b610d5e565b610204610db2565b6102e5610f2c565b604080519384526020840192909252908201526060016101e8565b6101de7f000000000000000000000000000000000000000000000000000000000000000081565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b610356610f68565b6040516101e89190613adf565b61036b610f74565b6040516101e89190613b58565b6101de60065481565b61022d7f000000000000000000000000000000000000000000000000000000000000000081565b6102046103b6366004613b8b565b611002565b60015461022d906001600160a01b031681565b6101de6103dc366004613a80565b6110cd565b6102046103ef366004613aae565b6110f9565b610204610402366004613aae565b6113c3565b610204610415366004613aae565b61158c565b7f000000000000000000000000000000000000000000000000000000000000000061022d565b61020461044e366004613aae565b611749565b6101de611964565b6101de7f000000000000000000000000000000000000000000000000000000000000000081565b60005461022d906001600160a01b031681565b6101de6104a3366004613a80565b611aad565b6000546001600160a01b031661022d565b61036b604051806040016040528060058152602001640352e312e360dc1b81525081565b60006104ec335b600390611af5565b6105115760405162461bcd60e51b815260040161050890613bad565b60405180910390fd5b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610560903090600401613acb565b60206040518083038186803b15801561057857600080fd5b505afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190613bdd565b90506105ba611b17565b6040516370a0823160e01b815281906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610608903090600401613acb565b60206040518083038186803b15801561062057600080fd5b505afa158015610634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106589190613bdd565b6106629190613c0c565b9150828210156106ab5760405162461bcd60e51b81526020600482015260146024820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b6044820152606401610508565b50919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190613c23565b6001600160a01b0316336001600160a01b0316146107725760405162461bcd60e51b815260040161050890613c40565b61077d600382611b58565b6107c05760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610508565b50565b6107cc336104e4565b6107e85760405162461bcd60e51b815260040161050890613bad565b6107c081611b6d565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146108395760405162461bcd60e51b815260040161050890613c77565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610888903090600401613acb565b60206040518083038186803b1580156108a057600080fd5b505afa1580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d89190613bdd565b9050818110610939576109356001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846120d6565b5050565b61094b6109468284613c0c565b612131565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610997903090600401613acb565b60206040518083038186803b1580156109af57600080fd5b505afa1580156109c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e79190613bdd565b90506109357f0000000000000000000000000000000000000000000000000000000000000000610a1784846122cf565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906120d6565b6040516370a0823160e01b8152600090600080516020613e2c833981519152906370a0823190610a7c903090600401613acb565b60206040518083038186803b158015610a9457600080fd5b505afa158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc9190613bdd565b610ad46122e5565b610ade9190613caa565b60405163c0af0d3b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c0af0d3b90610b2a903090600401613acb565b60206040518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a9190613bdd565b11905090565b610b89336104e4565b610ba55760405162461bcd60e51b815260040161050890613bad565b6107c081612406565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0757600080fd5b505afa158015610c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3f9190613c23565b6001600160a01b0316336001600160a01b031614610c6f5760405162461bcd60e51b815260040161050890613c40565b610c7a600382611ad9565b6107c05760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610508565b60405163cd1adb6160e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cd1adb6190610d09903090600401613acb565b60206040518083038186803b158015610d2157600080fd5b505afa158015610d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d599190613bdd565b905090565b600080546001600160a01b0383811691161480610dac57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0b57600080fd5b505afa158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e439190613c23565b6001600160a01b0316336001600160a01b031614610e735760405162461bcd60e51b815260040161050890613c40565b604051630bbccf9b60e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906317799f3690602401602060405180830381600087803b158015610ef457600080fd5b505af1158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c09190613bdd565b60008080610f39336104e4565b610f555760405162461bcd60e51b815260040161050890613bad565b610f5d612461565b925092509250909192565b6060610d596003612c13565b60058054610f8190613cc2565b80601f0160208091040260200160405190810160405280929190818152602001828054610fad90613cc2565b8015610ffa5780601f10610fcf57610100808354040283529160200191610ffa565b820191906000526020600020905b815481529060010190602001808311610fdd57829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561105b57600080fd5b505afa15801561106f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110939190613c23565b6001600160a01b0316336001600160a01b0316146110c35760405162461bcd60e51b815260040161050890613c40565b6109358282612c20565b6000610dac7f000000000000000000000000000000000000000000000000000000000000000083613cf7565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146111415760405162461bcd60e51b815260040161050890613c77565b6001600160a01b0381166111975760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610508565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111fa57600080fd5b505afa15801561120e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112329190613c23565b6001600160a01b0316146112815760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610508565b61128a81612cde565b6000546040516370a0823160e01b81526113239183916001600160a01b03909116906370a08231906112c0903090600401613acb565b60206040518083038186803b1580156112d857600080fd5b505afa1580156112ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113109190613bdd565b6000546001600160a01b031691906120d6565b6107c0817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016113739190613acb565b60206040518083038186803b15801561138b57600080fd5b505afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a179190613bdd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561141c57600080fd5b505afa158015611430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114549190613c23565b6001600160a01b0316336001600160a01b0316146114845760405162461bcd60e51b815260040161050890613c40565b6001600160a01b0381166114da5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610508565b6001546001600160a01b03828116911614156115305760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610508565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e557600080fd5b505afa1580156115f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161d9190613c23565b6001600160a01b0316336001600160a01b03161461164d5760405162461bcd60e51b815260040161050890613c40565b6001600160a01b03811661169d5760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b6044820152606401610508565b6002546001600160a01b03828116911614156116ed5760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b6044820152606401610508565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b611752336104e4565b61176e5760405162461bcd60e51b815260040161050890613bad565b6001546001600160a01b03166117be5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610508565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156118405760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610508565b61184981610d5e565b1561188d5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610508565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156118c8576001546107c0906001600160a01b031647612e37565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906118f7903090600401613acb565b60206040518083038186803b15801561190f57600080fd5b505afa158015611923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119479190613bdd565b600154909150610935906001600160a01b038481169116836120d6565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906119b3903090600401613acb565b60206040518083038186803b1580156119cb57600080fd5b505afa1580156119df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a039190613bdd565b6040516369ebe00160e11b8152611aa3906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d3d7c00290611a53903090600401613acb565b60206040518083038186803b158015611a6b57600080fd5b505afa158015611a7f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a39190613bdd565b610d599190613caa565b6000610dac7f000000000000000000000000000000000000000000000000000000000000000083613d16565b6000611aee836001600160a01b038416612f50565b9392505050565b6001600160a01b03811660009081526001830160205260408120541515611aee565b600080611b22612f9f565b9092509050801561093557610935827f00000000000000000000000000000000000000000000000000000000000000008361312b565b6000611aee836001600160a01b0384166131bd565b6040516370a0823160e01b8152600090600080516020613e2c833981519152906370a0823190611ba1903090600401613acb565b60206040518083038186803b158015611bb957600080fd5b505afa158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190613bdd565b611bf96122e5565b611c039190613caa565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c0af0d3b306040518263ffffffff1660e01b8152600401611c539190613acb565b60206040518083038186803b158015611c6b57600080fd5b505afa158015611c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca39190613bdd565b9050818111611cea5760405162461bcd60e51b81526020600482015260136024820152723837b7b616b4b996b0b137bb3296bbb0ba32b960691b6044820152606401610508565b6000611cf68383613c0c565b6002546040516353b609b560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600080516020613e2c833981519152602483015260448201849052929350600092909116906353b609b590606401602060405180830381600087803b158015611d7e57600080fd5b505af1158015611d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db69190613bdd565b905084811115611e085760405162461bcd60e51b815260206004820152601b60248201527f636f6c6c61746572616c2d726571756972652d746f6f2d6869676800000000006044820152606401610508565b80156120cf578080156120cd576040516330897f1760e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636112fe2e90602401600060405180830381600087803b158015611e7757600080fd5b505af1158015611e8b573d6000803e3d6000fd5b50505050611e968190565b6002546040516381cc619b60e01b81529193506001600160a01b0316906381cc619b90611efd907f000000000000000000000000000000000000000000000000000000000000000090600080516020613e2c83398151915290889088903090600401613d38565b602060405180830381600087803b158015611f1757600080fd5b505af1158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f9190613bdd565b506040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a846c2fd90600080516020613e2c833981519152906370a0823190611fb2903090600401613acb565b60206040518083038186803b158015611fca57600080fd5b505afa158015611fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120029190613bdd565b6040518263ffffffff1660e01b815260040161202091815260200190565b600060405180830381600087803b15801561203a57600080fd5b505af115801561204e573d6000803e3d6000fd5b50506040516306eeb69360e51b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063ddd6d2609150602401600060405180830381600087803b1580156120b457600080fd5b505af11580156120c8573d6000803e3d6000fd5b505050505b505b5050505050565b61212c8363a9059cbb60e01b84846040516024016120f5929190613d68565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526132b0565b505050565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352d5aee830886040518363ffffffff1660e01b8152600401612187929190613d68565b60a06040518083038186803b15801561219f57600080fd5b505afa1580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d79190613d81565b945094509450945094506000841180156121f2575060075482105b15612245576006546000906122078588613cf7565b6122119190613d16565b9050818110156122295761222485613382565b612243565b848110156122435761224361223e8287613c0c565b613382565b505b6040516330897f1760e11b8152600481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636112fe2e90602401600060405180830381600087803b1580156122a757600080fd5b505af11580156122bb573d6000803e3d6000fd5b505050506122c68690565b50505050505050565b60008183106122de5781611aee565b5090919050565b600080546040516370a0823160e01b8152670de0b6b3a7640000916001600160a01b0316906370a082319061231e903090600401613acb565b60206040518083038186803b15801561233657600080fd5b505afa15801561234a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236e9190613bdd565b60008054906101000a90046001600160a01b03166001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156123ba57600080fd5b505afa1580156123ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f29190613bdd565b6123fc9190613cf7565b610d599190613d16565b61240f816133de565b60005461243590600080516020613e2c833981519152906001600160a01b0316836134d0565b6002546107c090731b40183efb4dd766f11bda7a7c3ad8982e998421906001600160a01b0316836134d0565b60008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166390229af7306040518263ffffffff1660e01b81526004016124b89190613acb565b60a06040518083038186803b1580156124d057600080fd5b505afa1580156124e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125089190613d81565b9450509350935093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b815260040161255d9190613acb565b60206040518083038186803b15801561257557600080fd5b505afa158015612589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ad9190613bdd565b9450600085156125ba5750845b60006125c586611aad565b9050600061266b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016126189190613acb565b60206040518083038186803b15801561263057600080fd5b505afa158015612644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126689190613bdd565b90565b90508082111561268c5761267f8183613c0c565b6126899084613caa565b92505b81831115612698578192505b50506126a3816110cd565b6126ad9086613c0c565b94506000806126be878787876135e3565b90925090508160006126ce6122e5565b9050878111156126ef576126e28882613c0c565b6126ec9083613caa565b91505b81156126fe576126fe82613669565b831561278d5760405163a846c2fd60e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a846c2fd90602401600060405180830381600087803b15801561276657600080fd5b505af115801561277a573d6000803e3d6000fd5b50505050838861278a9190613c0c565b97505b8415612816576040516330897f1760e11b8152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636112fe2e90602401600060405180830381600087803b1580156127f557600080fd5b505af1158015612809573d6000803e3d6000fd5b505050506128148590565b505b6040516370a0823160e01b8152600090600080516020613e2c833981519152906370a082319061284a903090600401613acb565b60206040518083038186803b15801561286257600080fd5b505afa158015612876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289a9190613bdd565b905080156128db576128db600080516020613e2c8339815191527f00000000000000000000000000000000000000000000000000000000000000008361312b565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061292a903090600401613acb565b60206040518083038186803b15801561294257600080fd5b505afa158015612956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297a9190613bdd565b90506129868c826122cf565b9b508b81111561299d5761299a8c82613c0c565b9d505b6040516302df682360e11b8152600481018f9052602481018e9052604481018d90526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015612a0d57600080fd5b505af1158015612a21573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692506370a082319150612a71903090600401613acb565b60206040518083038186803b158015612a8957600080fd5b505afa158015612a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac19190613bdd565b90508015612b6f5760008160405163bad4a01f60e01b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bad4a01f90602401600060405180830381600087803b158015612b3157600080fd5b505af1158015612b45573d6000803e3d6000fd5b50505050612b52816110cd565b612b5c908d613caa565b9b50612b6a8c8c8c8c6135e3565b965050505b68056bc75e2d63100000851115612c035760405163317afabb60e21b8152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c5ebeaec90602401600060405180830381600087803b158015612be257600080fd5b505af1158015612bf6573d6000803e3d6000fd5b50505050612c0385613827565b5050505050505050505050909192565b60606000611aee83613858565b60008111612c635760405162461bcd60e51b815260206004820152601060248201526f6c6f7757617465722d69732d7a65726f60801b6044820152606401610508565b808211612cb25760405162461bcd60e51b815260206004820152601c60248201527f6869676857617465722d6c6573732d7468616e2d6c6f775761746572000000006044820152606401610508565b612cc3662386f26fc1000083613cf7565b600655612cd7662386f26fc1000082613cf7565b6007555050565b7f0000000000000000000000000000000000000000000000000000000000000000816001600160a01b031663e824600f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d3857600080fd5b505afa158015612d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d709190613bdd565b14612dbd5760405162461bcd60e51b815260206004820181905260248201527f636f6c6c61746572616c2d747970652d6d7573742d62652d7468652d73616d656044820152606401610508565b604051637038e06560e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e071c0ca90612e09908490600401613acb565b600060405180830381600087803b158015612e2357600080fd5b505af11580156120cf573d6000803e3d6000fd5b80471015612e875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610508565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612ed4576040519150601f19603f3d011682016040523d82523d6000602084013e612ed9565b606091505b505090508061212c5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610508565b6000818152600183016020526040812054612f9757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610dac565b506000610dac565b60008060008060009054906101000a90046001600160a01b03166001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b158015612ff157600080fd5b505afa158015613005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130299190613c23565b90506001600160a01b038116156130995760405163d279c19160e01b81526001600160a01b0382169063d279c19190613066903090600401613acb565b600060405180830381600087803b15801561308057600080fd5b505af1158015613094573d6000803e3d6000fd5b505050505b6040516370a0823160e01b8152731b40183efb4dd766f11bda7a7c3ad8982e9984219081906370a08231906130d2903090600401613acb565b60206040518083038186803b1580156130ea57600080fd5b505afa1580156130fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131229190613bdd565b92509250509091565b600254604051636ccb2b0160e01b81526001600160a01b0390911690636ccb2b0190613164908690869086906001903090600401613d38565b602060405180830381600087803b15801561317e57600080fd5b505af19250505080156131ae575060408051601f3d908101601f191682019092526131ab91810190613bdd565b60015b6131b757505050565b50505050565b600081815260018301602052604081205480156132a65760006131e1600183613c0c565b85549091506000906131f590600190613c0c565b905081811461325a57600086600001828154811061321557613215613dc1565b906000526020600020015490508087600001848154811061323857613238613dc1565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061326b5761326b613dd7565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610dac565b6000915050610dac565b6000613305826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138b49092919063ffffffff16565b80519091501561212c57808060200190518101906133239190613ded565b61212c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610508565b80156107c05761339181613669565b60405163a846c2fd60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a846c2fd90602401612e09565b6133e7816138cb565b613420600080516020613e2c8339815191527f0000000000000000000000000000000000000000000000000000000000000000836134d0565b6134746001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836134d0565b6002546134ae906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836134d0565b6002546107c090600080516020613e2c833981519152906001600160a01b0316835b8015806135595750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561351f57600080fd5b505afa158015613533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135579190613bdd565b155b6135c45760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610508565b61212c8363095ea7b360e01b84846040516024016120f5929190613d68565b600080600060065485886135f79190613cf7565b6136019190613d16565b9050838110156136135785925061365f565b600754600090613623878a613cf7565b61362d9190613d16565b905080871115613648576136418288613c0c565b935061365d565b8187101561365d5761365a8783613c0c565b92505b505b5094509492505050565b60008060009054906101000a90046001600160a01b03166001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156136b857600080fd5b505afa1580156136cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f09190613bdd565b905060008161370784670de0b6b3a7640000613cf7565b6137119190613d16565b9050670de0b6b3a76400006137268383613cf7565b6137309190613d16565b831161373c5780613747565b613747816001613caa565b6000546040516370a0823160e01b81529192506001600160a01b031690632e1a7d4d906137db90849084906370a0823190613786903090600401613acb565b60206040518083038186803b15801561379e57600080fd5b505afa1580156137b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d69190613bdd565b6122cf565b6040518263ffffffff1660e01b81526004016137f991815260200190565b600060405180830381600087803b15801561381357600080fd5b505af11580156122c6573d6000803e3d6000fd5b60005460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401612e09565b6060816000018054806020026020016040519081016040528092919081815260200182805480156138a857602002820191906000526020600020905b815481526020019060010190808311613894575b50505050509050919050565b60606138c3848460008561391f565b949350505050565b6107c06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836134d0565b6060824710156139805760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610508565b843b6139ce5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610508565b600080866001600160a01b031685876040516139ea9190613e0f565b60006040518083038185875af1925050503d8060008114613a27576040519150601f19603f3d011682016040523d82523d6000602084013e613a2c565b606091505b5091509150613a3c828286613a47565b979650505050505050565b60608315613a56575081611aee565b825115613a665782518084602001fd5b8160405162461bcd60e51b81526004016105089190613b58565b600060208284031215613a9257600080fd5b5035919050565b6001600160a01b03811681146107c057600080fd5b600060208284031215613ac057600080fd5b8135611aee81613a99565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015613b205783516001600160a01b031683529284019291840191600101613afb565b50909695505050505050565b60005b83811015613b47578181015183820152602001613b2f565b838111156131b75750506000910152565b6020815260008251806020840152613b77816040850160208701613b2c565b601f01601f19169190910160400192915050565b60008060408385031215613b9e57600080fd5b50508035926020909101359150565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600060208284031215613bef57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613c1e57613c1e613bf6565b500390565b600060208284031215613c3557600080fd5b8151611aee81613a99565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60008219821115613cbd57613cbd613bf6565b500190565b600181811c90821680613cd657607f821691505b602082108114156106ab57634e487b7160e01b600052602260045260246000fd5b6000816000190483118215151615613d1157613d11613bf6565b500290565b600082613d3357634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b6001600160a01b03929092168252602082015260400190565b600080600080600060a08688031215613d9957600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600060208284031215613dff57600080fd5b81518015158114611aee57600080fd5b60008251613e21818460208701613b2c565b919091019291505056fe0000000000000000000000006b175474e89094c44da98b954eedeac495271d0fa2646970667358221220f43c8dd3990bfb55b4b39d5f1ab6842b1e5e08812540e05ebc469e3a84a8327864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken(uint256)": {
        "details": "Approve all required tokens"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "resurface(uint256)": {
        "details": "If pool is underwater this function will resolve underwater condition. If Debt in Maker is greater than Dai balance in lender then pool is underwater. Lowering DAI debt in Maker will resolve underwater condition. Resolve: Calculate required collateral token to lower DAI debt. Withdraw required collateral token from Maker and convert those to DAI via Uniswap. Finally payback debt in Maker using DAI.Also report loss in pool.",
        "params": {
          "_maximumCollateralForDaiSwap": "To protect from sandwich attack let keeper send _maximumCollateralForDaiSwap"
        }
      },
      "sweepERC20(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateBalancingFactor(uint256,uint256)": {
        "params": {
          "_highWater": "Value for high water mark.",
          "_lowWater": "Value for low water mark."
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "This strategy will deposit collateral token in Maker, borrow Dai and deposit borrowed DAI in Vesper DAI pool to earn interest.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "claimAndSwapRewards(uint256)": {
        "notice": "Claim rewardToken and convert rewardToken into collateral token."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "convertFrom18(uint256)": {
        "notice": "Convert from 18 decimals to token defined decimals."
      },
      "convertTo18(uint256)": {
        "notice": "Convert from 18 decimals to token defined decimals."
      },
      "createVault()": {
        "notice": "Create new Maker vault"
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "isUnderwater()": {
        "notice": "Returns true if pool is underwater.Underwater - If debt is greater than (earning of pool + DAI in pool + some wei buffer).Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "sweepERC20(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns total collateral locked in the strategy"
      },
      "updateBalancingFactor(uint256,uint256)": {
        "notice": "Update balancing factors aka high water and low water values. Water mark values represent Collateral Ratio in Maker. For example 300 as high water means 300% collateral ratio."
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14536,
        "contract": "vesper-strategies/contracts/strategies/maker/MakerVesper.sol:MakerVesper",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14542,
        "contract": "vesper-strategies/contracts/strategies/maker/MakerVesper.sol:MakerVesper",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14545,
        "contract": "vesper-strategies/contracts/strategies/maker/MakerVesper.sol:MakerVesper",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)13384"
      },
      {
        "astId": 14558,
        "contract": "vesper-strategies/contracts/strategies/maker/MakerVesper.sol:MakerVesper",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3024_storage"
      },
      {
        "astId": 30628,
        "contract": "vesper-strategies/contracts/strategies/maker/MakerVesper.sol:MakerVesper",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 30641,
        "contract": "vesper-strategies/contracts/strategies/maker/MakerVesper.sol:MakerVesper",
        "label": "highWater",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 30643,
        "contract": "vesper-strategies/contracts/strategies/maker/MakerVesper.sol:MakerVesper",
        "label": "lowWater",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRoutedSwapper)13384": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3024_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3023,
            "contract": "vesper-strategies/contracts/strategies/maker/MakerVesper.sol:MakerVesper",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2723_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2723_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2718,
            "contract": "vesper-strategies/contracts/strategies/maker/MakerVesper.sol:MakerVesper",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2722,
            "contract": "vesper-strategies/contracts/strategies/maker/MakerVesper.sol:MakerVesper",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}