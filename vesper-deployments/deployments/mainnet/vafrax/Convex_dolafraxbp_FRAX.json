{
  "address": "0xb4906Ef3c39805e101AdfAe34baEE1D75862e5f3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "crvPool_",
          "type": "address"
        },
        {
          "internalType": "enum Curve.PoolType",
          "name": "curvePoolType_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "depositZap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "crvToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "crvSlippage_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "masterOracle_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapper_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralIdx_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "convexPoolId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCrvSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCrvSlippage",
          "type": "uint256"
        }
      ],
      "name": "CrvSlippageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IMasterOracle",
          "name": "oldMasterOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle",
          "type": "address"
        }
      ],
      "name": "MasterOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOSTER",
      "outputs": [
        {
          "internalType": "contract IConvex",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_MINTER",
      "outputs": [
        {
          "internalType": "contract ITokenMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CVX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvGauge",
      "outputs": [
        {
          "internalType": "contract ILiquidityGaugeV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvLp",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curvePoolType",
      "outputs": [
        {
          "internalType": "enum Curve.PoolType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvxCrvRewards",
      "outputs": [
        {
          "internalType": "contract Rewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceHere",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpHere",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceHereAndStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpHereAndStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterOracle",
      "outputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCrvSlippage_",
          "type": "uint256"
        }
      ],
      "name": "updateCrvSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle_",
          "type": "address"
        }
      ],
      "name": "updateMasterOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbfff7d73a33cb197b8afe3344264c9001b39552317774ab24a3d3306b82fde34",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xb4906Ef3c39805e101AdfAe34baEE1D75862e5f3",
    "transactionIndex": 0,
    "gasUsed": "4703407",
    "logsBloom": "0x
    "blockHash": "0x6e9294ff76b04c9b0e121ef51649a282fbc81cd7bebbe889c9189d227a0f02e2",
    "transactionHash": "0xbfff7d73a33cb197b8afe3344264c9001b39552317774ab24a3d3306b82fde34",
    "logs": [],
    "blockNumber": 16242075,
    "cumulativeGasUsed": "4703407",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc14900dFB1Aa54e7674e1eCf9ce02b3b35157ba5",
    "0xE57180685E3348589E9521aa53Af0BCD497E884d",
    6,
    "0x08780fb7e580e492c1935bee4fa5920b94aa95da",
    "0xD533a949740bb3306d119CC777fa900bA034cd52",
    100,
    "0x80704Acdf97723963263c78F861F091ad04F46E2",
    "0x8f156189A3CD28dFc8FB7BbbAce58F98F09c0bB3",
    1,
    115,
    "Convex_dolafraxbp_FRAX"
  ],
  "numDeployments": 1,
  "solcInputHash": "ccf4d0cfa144a9dfcb402544460f4d45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvPool_\",\"type\":\"address\"},{\"internalType\":\"enum Curve.PoolType\",\"name\":\"curvePoolType_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositZap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"crvSlippage_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"masterOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdx_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"convexPoolId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCrvSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCrvSlippage\",\"type\":\"uint256\"}],\"name\":\"CrvSlippageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IMasterOracle\",\"name\":\"oldMasterOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle\",\"type\":\"address\"}],\"name\":\"MasterOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOSTER\",\"outputs\":[{\"internalType\":\"contract IConvex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_MINTER\",\"outputs\":[{\"internalType\":\"contract ITokenMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvGauge\",\"outputs\":[{\"internalType\":\"contract ILiquidityGaugeV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvLp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePoolType\",\"outputs\":[{\"internalType\":\"enum Curve.PoolType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrvRewards\",\"outputs\":[{\"internalType\":\"contract Rewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceHere\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpHere\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceHereAndStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpHereAndStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOracle\",\"outputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"setRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCrvSlippage_\",\"type\":\"uint256\"}],\"name\":\"updateCrvSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle_\",\"type\":\"address\"}],\"name\":\"updateMasterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"isReservedToken(address)\":{\"details\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"setRewardTokens(address[])\":{\"details\":\"convex pool can add new rewards. This method refresh list.\"},\"sweepERC20(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"sweepERC20(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns collateral balance + collateral deposited to curve\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/convex/Convex.sol\":\"Convex\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance()\\n        external\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xddea3754059443771113c169ee1647ef9e83ee6ee509a911ceb7729fea62adc0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc37d85b96c2a8d7bc09f25958e0a81394bf5780286444147ddf875fa628d53ce\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x193c2dd96da7b717f15736d5f13ccab8a7b4e90853b6cb922a864f1e8fdd9dc7\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/convex/IConvexForCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IConvex {\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    // deposit lp tokens and stake\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    // deposit all lp tokens and stake\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    // withdraw lp tokens\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    // withdraw all lp tokens\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    // claim crv + extra rewards\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    // claim  rewards on stash (msg.sender == stash)\\n    function claimRewards(uint256 _pid, address _gauge) external returns (bool);\\n\\n    // delegate address votes on dao (needs to be voteDelegate)\\n    function vote(\\n        uint256 _voteId,\\n        address _votingAddress,\\n        bool _support\\n    ) external returns (bool);\\n\\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight) external returns (bool);\\n}\\n\\ninterface Rewards {\\n    function pid() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256) external view returns (address);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardPerTokenStored() external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function rewards(address) external view returns (uint256);\\n\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n\\n    function stakingToken() external view returns (address);\\n\\n    function stake(uint256) external returns (bool);\\n\\n    function stakeAll() external returns (bool);\\n\\n    function stakeFor(address, uint256) external returns (bool);\\n\\n    function withdraw(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAll(bool claim) external returns (bool);\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAllAndUnwrap(bool claim) external;\\n\\n    function getReward() external returns (bool);\\n\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function donate(uint256 _amount) external returns (bool);\\n\\n    function queuedRewards() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2c6f0376a56aa78b7b66ba0325face5af49f527d67600fc7d087ba234beda28c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0x475e55655e2868cd6d31dea7a571bb9c73337937529df19563054d08f8c1f73c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IDeposit2x {\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n}\\n\\ninterface IDeposit3x {\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n}\\n\\ninterface IDeposit4x {\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2d188bb85ee9ccb1a44ec799fcadbf9a8ad2a3c2b9e2f16ca6cf3956dcc1885e\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IDepositZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IDepositZap {\\n    function remove_liquidity_one_coin(\\n        address _pool,\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(\\n        address _pool,\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n}\\n\\ninterface IDepositZap3x is IDepositZap {\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[3] memory _amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        address _pool,\\n        uint256[3] memory _deposit_amounts,\\n        uint256 _min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity(\\n        address _pool,\\n        uint256 _burn_amount,\\n        uint256[3] memory _min_amounts\\n    ) external;\\n}\\n\\ninterface IDepositZap4x is IDepositZap {\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        uint256 _min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity(\\n        address _pool,\\n        uint256 _amount,\\n        uint256[4] memory _min_amounts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x004539ff52c8f7f318f9f294f6b2d5c9065eb8057fbe908dee3196a0e494f0e1\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Not a complete interface, but should have what we need\\ninterface ILiquidityGaugeV2 is IERC20 {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address addr) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function claim_rewards(address addr) external;\\n\\n    function claim_rewards() external;\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function claimable_reward(address, address) external returns (uint256);\\n\\n    function integrate_fraction(address addr) external view returns (uint256);\\n\\n    function user_checkpoint(address addr) external returns (bool);\\n\\n    function reward_integral(address) external view returns (uint256);\\n\\n    function reward_integral_for(address, address) external view returns (uint256);\\n\\n    function lp_token() external view returns (address);\\n\\n    function reward_count() external view returns (uint256);\\n\\n    function reward_tokens(uint256 _i) external view returns (address);\\n}\\n\\ninterface ILiquidityGaugeV3 is ILiquidityGaugeV2 {\\n    function claimable_reward(address addr, address token) external view override returns (uint256);\\n\\n    function claimable_reward_write(address addr, address token) external returns (uint256);\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0xde96ff55d81a9f17788ef598dcdf84939c1523e8ffc44768eff52efbb0e2a234\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IMetapoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/* solhint-disable func-name-mixedcase*/\\npragma solidity 0.8.9;\\n\\ninterface IMetapoolFactory {\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_decimals(address pool) external view returns (uint256[8] memory);\\n\\n    function get_coins(address pool) external view returns (address[4] memory);\\n\\n    function get_n_coins(address pool) external view returns (uint256);\\n\\n    function get_meta_n_coins(address pool) external view returns (uint256[2] memory);\\n\\n    function get_decimals(address pool) external view returns (uint256[4] memory);\\n\\n    function get_gauge(address pool) external view returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0b34a43d929c27a7f0fe8cfcda363e5bf02cd08e66a283d402181ef0a072c3f7\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IRegistry {\\n    function get_pool_from_lp_token() external view returns (address);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function get_n_coins(address pool) external view returns (uint256[2] memory);\\n\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_decimals(address pool) external view returns (uint256[8] memory);\\n\\n    function get_gauges(address pool) external view returns (address[10] memory);\\n}\\n\",\"keccak256\":\"0x2ebd1ea8b845d34dd2a389b994a396a57cc8c423f03272ed51dcea203d3b6288\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\n// Not a complete interface, but should have what we need\\ninterface IStableSwap {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function fee() external view returns (uint256); // fee * 1e10\\n\\n    function lp_token() external view returns (address);\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n}\\n\\ninterface IStableSwapV2 {\\n    function coins(int128 i) external view returns (address);\\n}\\n\\ninterface IStableSwapUnderlying is IStableSwap {\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount,\\n        bool _use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap2x is IStableSwap {\\n    function calc_token_amount(uint256[2] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap3x is IStableSwap {\\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap4x is IStableSwap {\\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap2xUnderlying is IStableSwap2x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[2] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap3xUnderlying is IStableSwap3x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[3] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap4xUnderlying is IStableSwap4x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[4] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0x366c9af63373252a74c060394ccf4d6b0cf1b83c8499b10df739bf5067bb5b97\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/ITokenMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\n// Not a complete interface, but should have what we need\\ninterface ITokenMinter {\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n\\n    function mint(address gauge_addr) external;\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x4c11e543dddafeaa1f90af55d8aa750d943a050cf7cb1100456832fce39617cf\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/one-oracle/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x6bb781352f8af1fce0e5dafc46ac0855ccd923fd76369eecee443556a06fe4fa\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x81fccad24b581704ec06b681d0f75d2af86c461142bf0224e118779783271d10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance()\\n        external\\n        onlyKeeper\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _rebalance()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x947a4185d2e76769bda95e405241a2d8d1b17093955a486265cdf1d92893786b\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/convex/Convex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/convex/IConvexForCurve.sol\\\";\\nimport \\\"../../strategies/curve/Curve.sol\\\";\\n\\n// Convex Strategies common variables and helper functions\\ncontract Convex is Curve {\\n    using SafeERC20 for IERC20;\\n\\n    address public constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n    IConvex public constant BOOSTER = IConvex(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n\\n    Rewards public immutable cvxCrvRewards;\\n    uint256 public immutable convexPoolId;\\n\\n    struct ClaimableRewardInfo {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    constructor(\\n        address pool_,\\n        address crvPool_,\\n        PoolType curvePoolType_,\\n        address depositZap_,\\n        address crvToken_,\\n        uint256 crvSlippage_,\\n        address masterOracle_,\\n        address swapper_,\\n        uint256 collateralIdx_,\\n        uint256 convexPoolId_,\\n        string memory name_\\n    )\\n        Curve(\\n            pool_,\\n            crvPool_,\\n            curvePoolType_,\\n            depositZap_,\\n            crvToken_,\\n            crvSlippage_,\\n            masterOracle_,\\n            swapper_,\\n            collateralIdx_,\\n            name_\\n        )\\n    {\\n        (address _lp, , , address _reward, , ) = BOOSTER.poolInfo(convexPoolId_);\\n        require(_lp == address(crvLp), \\\"incorrect-lp-token\\\");\\n        cvxCrvRewards = Rewards(_reward);\\n        convexPoolId = convexPoolId_;\\n        rewardTokens = _getRewardTokens();\\n    }\\n\\n    function lpBalanceStaked() public view override returns (uint256 _total) {\\n        _total = cvxCrvRewards.balanceOf(address(this));\\n    }\\n\\n    function _approveToken(uint256 amount_) internal virtual override {\\n        super._approveToken(amount_);\\n        crvLp.safeApprove(address(BOOSTER), amount_);\\n    }\\n\\n    function _claimRewards() internal override {\\n        require(cvxCrvRewards.getReward(address(this), true), \\\"reward-claim-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Add reward tokens\\n     * The Convex pools have CRV and CVX as base rewards and may have others tokens as extra rewards\\n     * In some cases, CVX is also added as extra reward, reason why we have to ensure to not add it twice\\n     * @return _rewardTokens The array of reward tokens (both base and extra rewards)\\n     */\\n    function _getRewardTokens() private view returns (address[] memory _rewardTokens) {\\n        uint256 _extraRewardCount;\\n        uint256 _length = cvxCrvRewards.extraRewardsLength();\\n\\n        for (uint256 i; i < _length; i++) {\\n            address _rewardToken = Rewards(cvxCrvRewards.extraRewards(i)).rewardToken();\\n            // Some pool has CVX as extra rewards but other do not. CVX still reward token\\n            if (_rewardToken != CRV && _rewardToken != CVX) {\\n                _extraRewardCount++;\\n            }\\n        }\\n\\n        _rewardTokens = new address[](_extraRewardCount + 2);\\n        _rewardTokens[0] = CRV;\\n        _rewardTokens[1] = CVX;\\n        uint256 _nextIdx = 2;\\n\\n        for (uint256 i; i < _length; i++) {\\n            address _rewardToken = Rewards(cvxCrvRewards.extraRewards(i)).rewardToken();\\n            // CRV and CVX already added in array\\n            if (_rewardToken != CRV && _rewardToken != CVX) {\\n                _rewardTokens[_nextIdx++] = _rewardToken;\\n            }\\n        }\\n    }\\n\\n    function _stakeAllLp() internal virtual override {\\n        uint256 _balance = crvLp.balanceOf(address(this));\\n        if (_balance > 0) {\\n            require(BOOSTER.deposit(convexPoolId, _balance, true), \\\"booster-deposit-failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Unstake all LPs\\n     * @dev This function is called by `_beforeMigration()` hook\\n     * Should claim rewards that will be swept later\\n     */\\n    function _unstakeAllLp() internal override {\\n        cvxCrvRewards.withdrawAllAndUnwrap(true);\\n    }\\n\\n    /**\\n     * @notice Unstake LPs\\n     * Don't claiming rewards because `_claimRewards()` already does that\\n     */\\n    function _unstakeLp(uint256 _amount) internal override {\\n        if (_amount > 0) {\\n            require(cvxCrvRewards.withdrawAndUnwrap(_amount, false), \\\"withdraw-and-unwrap-failed\\\");\\n        }\\n    }\\n\\n    /// @dev convex pool can add new rewards. This method refresh list.\\n    function setRewardTokens(\\n        address[] memory /*_rewardTokens*/\\n    ) external override onlyKeeper {\\n        // Claims all rewards, if any, before updating the reward list\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        rewardTokens = _getRewardTokens();\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n}\\n\",\"keccak256\":\"0x7bdaecdf3046aa86ebb4b01fcd269a727fc511341b4cbaea6f4254dd38708ae4\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/curve/Curve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../interfaces/curve/IDeposit.sol\\\";\\nimport \\\"../../interfaces/curve/IDepositZap.sol\\\";\\nimport \\\"../../interfaces/curve/IStableSwap.sol\\\";\\nimport \\\"../../interfaces/curve/ILiquidityGauge.sol\\\";\\nimport \\\"../../interfaces/curve/ITokenMinter.sol\\\";\\nimport \\\"../../interfaces/curve/IMetapoolFactory.sol\\\";\\nimport \\\"../../interfaces/curve/IRegistry.sol\\\";\\nimport \\\"../../interfaces/curve/IAddressProvider.sol\\\";\\nimport \\\"../../interfaces/one-oracle/IMasterOracle.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Curve Pool and earn interest.\\n// solhint-disable no-empty-blocks\\ncontract Curve is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    enum PoolType {\\n        PLAIN_2_POOL,\\n        PLAIN_3_POOL,\\n        PLAIN_4_POOL,\\n        LENDING_2_POOL,\\n        LENDING_3_POOL,\\n        LENDING_4_POOL,\\n        META_3_POOL,\\n        META_4_POOL\\n    }\\n\\n    string public constant VERSION = \\\"5.0.0\\\";\\n    uint256 internal constant MAX_BPS = 10_000;\\n    ITokenMinter public constant CRV_MINTER = ITokenMinter(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0); // This contract only exists on mainnet\\n    IAddressProvider public constant ADDRESS_PROVIDER = IAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383); // Same address to all chains\\n    uint256 private constant FACTORY_ADDRESS_ID = 3;\\n\\n    address public immutable CRV;\\n    IERC20 public immutable crvLp; // Note: Same as `receiptToken` but using this in order to save gas since it's `immutable` and `receiptToken` isn't\\n    address public immutable crvPool;\\n    ILiquidityGaugeV2 public immutable crvGauge;\\n    uint256 public immutable collateralIdx;\\n    address internal immutable depositZap;\\n    PoolType public immutable curvePoolType;\\n    bool private immutable isFactoryPool;\\n\\n    string public NAME;\\n    uint256 public crvSlippage;\\n    IMasterOracle public masterOracle;\\n    address[] public rewardTokens;\\n\\n    event CrvSlippageUpdated(uint256 oldCrvSlippage, uint256 newCrvSlippage);\\n    event MasterOracleUpdated(IMasterOracle oldMasterOracle, IMasterOracle newMasterOracle);\\n\\n    constructor(\\n        address pool_,\\n        address crvPool_,\\n        PoolType curvePoolType_,\\n        address depositZap_,\\n        address crvToken_,\\n        uint256 crvSlippage_,\\n        address masterOracle_,\\n        address swapper_,\\n        uint256 collateralIdx_,\\n        string memory name_\\n    ) Strategy(pool_, swapper_, address(0)) {\\n        require(crvToken_ != address(0), \\\"crv-token-is-null\\\");\\n\\n        address _crvGauge;\\n        IRegistry _registry = IRegistry(ADDRESS_PROVIDER.get_registry());\\n        address _crvLp = _registry.get_lp_token(crvPool_);\\n\\n        if (_crvLp != address(0)) {\\n            // Get data from Registry contract\\n            require(collateralIdx_ < _registry.get_n_coins(crvPool_)[1], \\\"invalid-collateral\\\");\\n            require(\\n                _registry.get_underlying_coins(crvPool_)[collateralIdx_] == address(collateralToken),\\n                \\\"collateral-mismatch\\\"\\n            );\\n            _crvGauge = _registry.get_gauges(crvPool_)[0];\\n        } else {\\n            // Get data from Factory contract\\n            IMetapoolFactory _factory = IMetapoolFactory(ADDRESS_PROVIDER.get_address(FACTORY_ADDRESS_ID));\\n\\n            if (_factory.is_meta(crvPool_)) {\\n                require(collateralIdx_ < _factory.get_meta_n_coins(crvPool_)[1], \\\"invalid-collateral\\\");\\n                require(\\n                    _factory.get_underlying_coins(crvPool_)[collateralIdx_] == address(collateralToken),\\n                    \\\"collateral-mismatch\\\"\\n                );\\n            } else {\\n                require(collateralIdx_ < _factory.get_n_coins(crvPool_), \\\"invalid-collateral\\\");\\n                require(\\n                    _factory.get_coins(crvPool_)[collateralIdx_] == address(collateralToken),\\n                    \\\"collateral-mismatch\\\"\\n                );\\n            }\\n            _crvLp = crvPool_;\\n            _crvGauge = _factory.get_gauge(crvPool_);\\n        }\\n\\n        require(crvPool_ != address(0), \\\"pool-is-null\\\");\\n        require(_crvLp != address(0), \\\"lp-is-null\\\");\\n        require(_crvGauge != address(0), \\\"gauge-is-null\\\");\\n\\n        CRV = crvToken_;\\n        crvPool = crvPool_;\\n        crvLp = IERC20(_crvLp);\\n        crvGauge = ILiquidityGaugeV2(_crvGauge);\\n        crvSlippage = crvSlippage_;\\n        receiptToken = _crvLp;\\n        collateralIdx = collateralIdx_;\\n        curvePoolType = curvePoolType_;\\n        isFactoryPool = _crvLp == crvPool_;\\n        depositZap = depositZap_;\\n        masterOracle = IMasterOracle(masterOracle_);\\n        rewardTokens.push(crvToken_);\\n        NAME = name_;\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address token_) public view override returns (bool) {\\n        return token_ == address(crvLp) || token_ == address(collateralToken);\\n    }\\n\\n    // Gets LP value not staked in gauge\\n    function lpBalanceHere() public view virtual returns (uint256 _lpHere) {\\n        _lpHere = crvLp.balanceOf(address(this));\\n    }\\n\\n    function lpBalanceHereAndStaked() public view virtual returns (uint256 _lpHereAndStaked) {\\n        _lpHereAndStaked = crvLp.balanceOf(address(this)) + lpBalanceStaked();\\n    }\\n\\n    function lpBalanceStaked() public view virtual returns (uint256 _lpStaked) {\\n        _lpStaked = crvGauge.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns collateral balance + collateral deposited to curve\\n    function tvl() external view override returns (uint256) {\\n        return\\n            collateralToken.balanceOf(address(this)) +\\n            _quoteLpToCoin(lpBalanceHereAndStaked(), SafeCast.toInt128(int256(collateralIdx)));\\n    }\\n\\n    function _approveToken(uint256 amount_) internal virtual override {\\n        super._approveToken(amount_);\\n\\n        address _swapper = address(swapper);\\n\\n        collateralToken.safeApprove(crvPool, amount_);\\n        collateralToken.safeApprove(_swapper, amount_);\\n\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; ++i) {\\n            IERC20(rewardTokens[i]).safeApprove(_swapper, amount_);\\n        }\\n        crvLp.safeApprove(address(crvGauge), amount_);\\n\\n        if (depositZap != address(0)) {\\n            collateralToken.safeApprove(depositZap, amount_);\\n            crvLp.safeApprove(depositZap, amount_);\\n        }\\n    }\\n\\n    /// @notice Unstake LP tokens in order to transfer to the new strategy\\n    function _beforeMigration(address newStrategy_) internal override {\\n        require(IStrategy(newStrategy_).collateral() == address(collateralToken), \\\"wrong-collateral-token\\\");\\n        require(IStrategy(newStrategy_).token() == address(crvLp), \\\"wrong-receipt-token\\\");\\n        _unstakeAllLp();\\n    }\\n\\n    function _calculateAmountOutMin(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOutMin) {\\n        _amountOutMin = (masterOracle.quote(tokenIn_, tokenOut_, amountIn_) * (MAX_BPS - crvSlippage)) / MAX_BPS;\\n    }\\n\\n    function _claimRewards() internal virtual {\\n        if (block.chainid == 1) {\\n            // Side-chains don't have minter contract\\n            CRV_MINTER.mint(address(crvGauge));\\n        }\\n        try crvGauge.claim_rewards() {} catch {\\n            // This call may fail in some scenarios\\n            // e.g. 3Crv gauge doesn't have such function\\n        }\\n    }\\n\\n    /**\\n     * @notice Curve pool may have more than one reward token. Child contract should override _claimRewards\\n     */\\n    function _claimRewardsAndConvertTo(address tokenOut_) internal virtual {\\n        _claimRewards();\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; ++i) {\\n            address _rewardToken = rewardTokens[i];\\n            uint256 _amountIn = IERC20(_rewardToken).balanceOf(address(this));\\n            if (_amountIn > 0) {\\n                try swapper.swapExactInput(_rewardToken, tokenOut_, _amountIn, 1, address(this)) {} catch {\\n                    // Note: It may fail under some conditions\\n                    // For instance: 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT'\\n                }\\n            }\\n        }\\n    }\\n\\n    function _deposit() internal {\\n        _depositToCurve(collateralToken.balanceOf(address(this)));\\n        _stakeAllLp();\\n    }\\n\\n    function _depositTo2PlainPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[2] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        IStableSwap2x(crvPool).add_liquidity(_depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo2LendingPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[2] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: Using use_underlying = true to deposit underlying instead of IB token\\n        IStableSwap2xUnderlying(crvPool).add_liquidity(_depositAmounts, lpAmountOutMin_, true);\\n    }\\n\\n    function _depositTo3PlainPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[3] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        IStableSwap3x(crvPool).add_liquidity(_depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo3LendingPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[3] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: Using use_underlying = true to deposit underlying instead of IB token\\n        IStableSwap3xUnderlying(crvPool).add_liquidity(_depositAmounts, lpAmountOutMin_, true);\\n    }\\n\\n    function _depositTo4PlainOrMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[4] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        IDeposit4x(depositZap).add_liquidity(_depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo3FactoryMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[3] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: The function below won't return a reason when reverting due to slippage\\n        IDepositZap3x(depositZap).add_liquidity(address(crvPool), _depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo4FactoryMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[4] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: The function below won't return a reason when reverting due to slippage\\n        IDepositZap4x(depositZap).add_liquidity(address(crvPool), _depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositToCurve(uint256 coinAmountIn_) private {\\n        if (coinAmountIn_ == 0) {\\n            return;\\n        }\\n\\n        uint256 _lpAmountOutMin = _calculateAmountOutMin(address(collateralToken), address(crvLp), coinAmountIn_);\\n\\n        if (curvePoolType == PoolType.PLAIN_2_POOL) {\\n            return _depositTo2PlainPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n        if (curvePoolType == PoolType.LENDING_2_POOL) {\\n            return _depositTo2LendingPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n        if (curvePoolType == PoolType.PLAIN_3_POOL) {\\n            return _depositTo3PlainPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n        if (curvePoolType == PoolType.LENDING_3_POOL) {\\n            return _depositTo3LendingPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n        if (curvePoolType == PoolType.PLAIN_4_POOL) {\\n            return _depositTo4PlainOrMetaPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n        if (curvePoolType == PoolType.META_3_POOL) {\\n            return _depositTo3FactoryMetaPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n        if (curvePoolType == PoolType.META_4_POOL) {\\n            if (isFactoryPool) {\\n                return _depositTo4FactoryMetaPool(coinAmountIn_, _lpAmountOutMin);\\n            }\\n            return _depositTo4PlainOrMetaPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n\\n        revert(\\\"deposit-to-curve-failed\\\");\\n    }\\n\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _strategyDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n\\n        int128 _i = SafeCast.toInt128(int256(collateralIdx));\\n        uint256 _lpHere = lpBalanceHere();\\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\\n        uint256 _collateralInCurve = _quoteLpToCoin(_totalLp, _i);\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = _collateralHere + _collateralInCurve;\\n\\n        if (_totalCollateral > _strategyDebt) {\\n            _profit = _totalCollateral - _strategyDebt;\\n        } else {\\n            _loss = _strategyDebt - _totalCollateral;\\n        }\\n\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_profitAndExcessDebt > _collateralHere) {\\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _collateralInCurve);\\n            if (_totalAmountToWithdraw > 0) {\\n                uint256 _lpToBurn = Math.min((_totalAmountToWithdraw * _totalLp) / _collateralInCurve, _totalLp);\\n\\n                if (_lpToBurn > 0) {\\n                    if (_lpToBurn > _lpHere) {\\n                        _unstakeLp(_lpToBurn - _lpHere);\\n                    }\\n\\n                    _withdrawFromCurve(_lpToBurn, _i);\\n\\n                    _collateralHere = collateralToken.balanceOf(address(this));\\n                }\\n            }\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n    }\\n\\n    function _quoteLpToCoin(uint256 amountIn_, int128 toIdx_) private view returns (uint256 _amountOut) {\\n        if (amountIn_ == 0) {\\n            return 0;\\n        }\\n\\n        if (curvePoolType == PoolType.PLAIN_4_POOL) {\\n            return IDeposit4x(depositZap).calc_withdraw_one_coin(amountIn_, toIdx_);\\n        }\\n        if (curvePoolType == PoolType.META_3_POOL) {\\n            return IDepositZap3x(depositZap).calc_withdraw_one_coin(address(crvLp), amountIn_, toIdx_);\\n        }\\n        if (curvePoolType == PoolType.META_4_POOL) {\\n            if (isFactoryPool) {\\n                return IDepositZap4x(depositZap).calc_withdraw_one_coin(address(crvLp), amountIn_, toIdx_);\\n            }\\n            return IDeposit4x(depositZap).calc_withdraw_one_coin(amountIn_, toIdx_);\\n        }\\n\\n        return IStableSwap(crvPool).calc_withdraw_one_coin(amountIn_, toIdx_);\\n    }\\n\\n    function _rebalance()\\n        internal\\n        virtual\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        (_profit, _loss, _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _deposit();\\n    }\\n\\n    // Requires that gauge has approval for lp token\\n    function _stakeAllLp() internal virtual {\\n        uint256 _balance = crvLp.balanceOf(address(this));\\n        if (_balance > 0) {\\n            crvGauge.deposit(_balance);\\n        }\\n    }\\n\\n    function _unstakeAllLp() internal virtual {\\n        _unstakeLp(crvGauge.balanceOf(address(this)));\\n    }\\n\\n    function _unstakeLp(uint256 amount_) internal virtual {\\n        if (amount_ > 0) {\\n            crvGauge.withdraw(amount_);\\n        }\\n    }\\n\\n    function _withdrawFromPlainPool(\\n        uint256 lpAmount_,\\n        uint256 minAmountOut_,\\n        int128 i_\\n    ) private {\\n        IStableSwap(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_);\\n    }\\n\\n    function _withdrawFrom2LendingPool(\\n        uint256 lpAmount_,\\n        uint256 minAmountOut_,\\n        int128 i_\\n    ) private {\\n        // Note: Using use_underlying = true to withdraw underlying instead of IB token\\n        IStableSwap2xUnderlying(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_, true);\\n    }\\n\\n    function _withdrawFrom3LendingPool(\\n        uint256 lpAmount_,\\n        uint256 minAmountOut_,\\n        int128 i_\\n    ) private {\\n        // Note: Using use_underlying = true to withdraw underlying instead of IB token\\n        IStableSwap3xUnderlying(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_, true);\\n    }\\n\\n    function _withdrawFrom4PlainOrMetaPool(\\n        uint256 lpAmount_,\\n        uint256 minAmountOut_,\\n        int128 i_\\n    ) private {\\n        IDeposit4x(depositZap).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_);\\n    }\\n\\n    function _withdrawFrom3FactoryMetaOr4FactoryMetaPool(\\n        uint256 lpAmount_,\\n        uint256 minAmountOut_,\\n        int128 i_\\n    ) private {\\n        // Note: The function below won't return a reason when reverting due to slippage\\n        IDepositZap(depositZap).remove_liquidity_one_coin(address(crvLp), lpAmount_, i_, minAmountOut_);\\n    }\\n\\n    function _withdrawFromCurve(uint256 lpToBurn_, int128 coinIdx_) internal {\\n        if (lpToBurn_ == 0) {\\n            return;\\n        }\\n\\n        uint256 _minCoinAmountOut = _calculateAmountOutMin(address(crvLp), address(collateralToken), lpToBurn_);\\n\\n        if (curvePoolType == PoolType.PLAIN_2_POOL || curvePoolType == PoolType.PLAIN_3_POOL) {\\n            return _withdrawFromPlainPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        }\\n        if (curvePoolType == PoolType.LENDING_2_POOL) {\\n            return _withdrawFrom2LendingPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        }\\n        if (curvePoolType == PoolType.LENDING_3_POOL) {\\n            return _withdrawFrom3LendingPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        }\\n        if (curvePoolType == PoolType.PLAIN_4_POOL) {\\n            return _withdrawFrom4PlainOrMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        }\\n        if (curvePoolType == PoolType.META_3_POOL) {\\n            return _withdrawFrom3FactoryMetaOr4FactoryMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        }\\n        if (curvePoolType == PoolType.META_4_POOL) {\\n            if (isFactoryPool) {\\n                return _withdrawFrom3FactoryMetaOr4FactoryMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n            }\\n            return _withdrawFrom4PlainOrMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        }\\n\\n        revert(\\\"withdraw-from-curve-failed\\\");\\n    }\\n\\n    function _withdrawHere(uint256 coinAmountOut_) internal override {\\n        int128 _i = SafeCast.toInt128(int256(collateralIdx));\\n\\n        uint256 _lpHere = lpBalanceHere();\\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\\n        uint256 _lpToBurn = Math.min((coinAmountOut_ * _totalLp) / _quoteLpToCoin(_totalLp, _i), _totalLp);\\n\\n        if (_lpToBurn == 0) return;\\n\\n        if (_lpToBurn > _lpHere) {\\n            _unstakeLp(_lpToBurn - _lpHere);\\n        }\\n\\n        _withdrawFromCurve(_lpToBurn, _i);\\n    }\\n\\n    /// @dev Rewards token in gauge can be updated any time. Governor can set reward tokens\\n    /// Different version of gauge has different method to read reward tokens better governor set it\\n    function setRewardTokens(address[] memory rewardTokens_) external virtual onlyGovernor {\\n        rewardTokens = rewardTokens_;\\n        address _receiptToken = receiptToken;\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; ++i) {\\n            require(\\n                rewardTokens_[i] != _receiptToken &&\\n                    rewardTokens_[i] != address(collateralToken) &&\\n                    rewardTokens_[i] != pool &&\\n                    rewardTokens_[i] != address(crvLp),\\n                \\\"Invalid reward token\\\"\\n            );\\n        }\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function updateCrvSlippage(uint256 newCrvSlippage_) external onlyGovernor {\\n        require(newCrvSlippage_ < MAX_BPS, \\\"invalid-slippage-value\\\");\\n        emit CrvSlippageUpdated(crvSlippage, newCrvSlippage_);\\n        crvSlippage = newCrvSlippage_;\\n    }\\n\\n    function updateMasterOracle(IMasterOracle newMasterOracle_) external onlyGovernor {\\n        emit MasterOracleUpdated(masterOracle, newMasterOracle_);\\n        masterOracle = newMasterOracle_;\\n    }\\n}\\n\",\"keccak256\":\"0x7922efd536925d2c17ee815a1864fa2146a419d6e94e3512ccbf3260d883617e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6102006040523480156200001257600080fd5b5060405162006a1938038062006a198339810160408190526200003591620014c4565b8a8a8a8a8a8a8a8a8a89898360006001600160a01b0383166200009f5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000f75760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f000000000000000000604482015260640162000096565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200015557600080fd5b505afa1580156200016a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001909190620015ae565b6001600160a01b03908116608052600080546001600160a01b031916918316919091179055620001d7620001c13390565b600362000dca60201b62001a601790919060201c565b620002195760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640162000096565b5050506001600160a01b038616620002685760405162461bcd60e51b815260206004820152601160248201527018dc9d8b5d1bdad95b8b5a5ccb5b9d5b1b607a1b604482015260640162000096565b6000806f22d53366457f9d5e68ec105046fc43836001600160a01b031663a262904b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620002b557600080fd5b505afa158015620002ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002f09190620015ae565b604051633795104960e01b81526001600160a01b038d8116600483015291925060009183169063379510499060240160206040518083038186803b1580156200033857600080fd5b505afa1580156200034d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003739190620015ae565b90506001600160a01b03811615620005bd5760405163940494f160e01b81526001600160a01b038d8116600483015283169063940494f190602401604080518083038186803b158015620003c657600080fd5b505afa158015620003db573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004019190620015d5565b6020015185106200044a5760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b604482015260640162000096565b60805160405163a77576ef60e01b81526001600160a01b038e811660048301529182169184169063a77576ef906024016101006040518083038186803b1580156200049457600080fd5b505afa158015620004a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004cf919062001672565b8660088110620004e357620004e36200165c565b60200201516001600160a01b031614620005365760405162461bcd60e51b81526020600482015260136024820152720c6ded8d8c2e8cae4c2d85adad2e6dac2e8c6d606b1b604482015260640162000096565b6040516356059ffb60e01b81526001600160a01b038d811660048301528316906356059ffb906024016101406040518083038186803b1580156200057957600080fd5b505afa1580156200058e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005b4919062001703565b51925062000ab2565b60405163124fd3dd60e21b8152600360048201526000906f22d53366457f9d5e68ec105046fc43839063493f4f749060240160206040518083038186803b1580156200060857600080fd5b505afa1580156200061d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006439190620015ae565b60405163e4d332a960e01b81526001600160a01b038f811660048301529192509082169063e4d332a99060240160206040518083038186803b1580156200068957600080fd5b505afa1580156200069e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c491906200179a565b15620008815760405163eb73f37d60e01b81526001600160a01b038e8116600483015282169063eb73f37d90602401604080518083038186803b1580156200070b57600080fd5b505afa15801562000720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007469190620015d5565b6020015186106200078f5760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b604482015260640162000096565b60805160405163a77576ef60e01b81526001600160a01b038f811660048301529182169183169063a77576ef906024016101006040518083038186803b158015620007d957600080fd5b505afa158015620007ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000814919062001672565b87600881106200082857620008286200165c565b60200201516001600160a01b0316146200087b5760405162461bcd60e51b81526020600482015260136024820152720c6ded8d8c2e8cae4c2d85adad2e6dac2e8c6d606b1b604482015260640162000096565b62000a2e565b60405163940494f160e01b81526001600160a01b038e8116600483015282169063940494f19060240160206040518083038186803b158015620008c357600080fd5b505afa158015620008d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008fe9190620017b8565b8610620009435760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b604482015260640162000096565b608051604051639ac90d3d60e01b81526001600160a01b038f8116600483015291821691831690639ac90d3d9060240160806040518083038186803b1580156200098c57600080fd5b505afa158015620009a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009c79190620017d2565b8760048110620009db57620009db6200165c565b60200201516001600160a01b03161462000a2e5760405162461bcd60e51b81526020600482015260136024820152720c6ded8d8c2e8cae4c2d85adad2e6dac2e8c6d606b1b604482015260640162000096565b60405163daf297b960e01b81526001600160a01b03808f1660048301528e935082169063daf297b99060240160206040518083038186803b15801562000a7357600080fd5b505afa15801562000a88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000aae9190620015ae565b9350505b6001600160a01b038c1662000af95760405162461bcd60e51b815260206004820152600c60248201526b1c1bdbdb0b5a5ccb5b9d5b1b60a21b604482015260640162000096565b6001600160a01b03811662000b3e5760405162461bcd60e51b815260206004820152600a6024820152691b1c0b5a5ccb5b9d5b1b60b21b604482015260640162000096565b6001600160a01b03831662000b865760405162461bcd60e51b815260206004820152600d60248201526c19d85d59d94b5a5ccb5b9d5b1b609a1b604482015260640162000096565b6001600160a01b03808a1660c0528c81166101005281811660e0819052908416610120526006899055600080546001600160a01b03191690911790556101408590528a600781111562000bdd5762000bdd62001857565b61018081600781111562000bf55762000bf562001857565b9052506001600160a01b038c8116828216146101a0528a811661016052600780546001600160a01b03199081168a841617909155600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018054909116918b16919091179055835162000c7e906005906020870190620012ad565b5050604051631526fe2760e01b8152600481018f905260009c508c9b5073f403c135812408bfbe8713b5a23a04b3d48aae319a50631526fe279950602401975062000ccc9650505050505050565b60c06040518083038186803b15801562000ce557600080fd5b505afa15801562000cfa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d2091906200186d565b505093505050915060e0516001600160a01b0316826001600160a01b03161462000d825760405162461bcd60e51b815260206004820152601260248201527134b731b7b93932b1ba16b63816ba37b5b2b760711b604482015260640162000096565b6001600160a01b0381166101c0526101e084905262000da062000dea565b805162000db6916008916020909101906200133c565b505050505050505050505050505062001988565b600062000de1836001600160a01b0384166200125b565b90505b92915050565b60606000806101c0516001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e2c57600080fd5b505afa15801562000e41573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e679190620017b8565b905060005b8181101562000fdb576101c051604051632061aa2360e11b8152600481018390526000916001600160a01b0316906340c354469060240160206040518083038186803b15801562000ebc57600080fd5b505afa15801562000ed1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ef79190620015ae565b6001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f3057600080fd5b505afa15801562000f45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f6b9190620015ae565b905060c0516001600160a01b0316816001600160a01b03161415801562000faf57506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b1562000fc5578362000fc18162001912565b9450505b508062000fd28162001912565b91505062000e6c565b5062000fe982600262001930565b6001600160401b03811115620010035762001003620013e6565b6040519080825280602002602001820160405280156200102d578160200160208202803683370190505b50925060c051836000815181106200104957620010496200165c565b60200260200101906001600160a01b031690816001600160a01b031681525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b836001815181106200109457620010946200165c565b6001600160a01b0390921660209283029190910190910152600260005b8281101562001254576101c051604051632061aa2360e11b8152600481018390526000916001600160a01b0316906340c354469060240160206040518083038186803b1580156200110157600080fd5b505afa15801562001116573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200113c9190620015ae565b6001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156200117557600080fd5b505afa1580156200118a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011b09190620015ae565b905060c0516001600160a01b0316816001600160a01b031614158015620011f457506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b156200123e57808684620012088162001912565b9550815181106200121d576200121d6200165c565b60200260200101906001600160a01b031690816001600160a01b0316815250505b50806200124b8162001912565b915050620010b1565b5050505090565b6000818152600183016020526040812054620012a45750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000de4565b50600062000de4565b828054620012bb906200194b565b90600052602060002090601f016020900481019282620012df57600085556200132a565b82601f10620012fa57805160ff19168380011785556200132a565b828001600101855582156200132a579182015b828111156200132a5782518255916020019190600101906200130d565b506200133892915062001394565b5090565b8280548282559060005260206000209081019282156200132a579160200282015b828111156200132a57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200135d565b5b8082111562001338576000815560010162001395565b6001600160a01b0381168114620013c157600080fd5b50565b8051620013d181620013ab565b919050565b805160088110620013d157600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620014275762001427620013e6565b604052919050565b600082601f8301126200144157600080fd5b81516001600160401b038111156200145d576200145d620013e6565b602062001473601f8301601f19168201620013fc565b82815285828487010111156200148857600080fd5b60005b83811015620014a85785810183015182820184015282016200148b565b83811115620014ba5760008385840101525b5095945050505050565b60008060008060008060008060008060006101608c8e031215620014e757600080fd5b8b51620014f481620013ab565b60208d0151909b506200150781620013ab565b99506200151760408d01620013d6565b98506200152760608d01620013c4565b97506200153760808d01620013c4565b965060a08c015195506200154e60c08d01620013c4565b94506200155e60e08d01620013c4565b6101008d01516101208e01516101408f015192965090945092506001600160401b038111156200158d57600080fd5b6200159b8e828f016200142f565b9150509295989b509295989b9093969950565b600060208284031215620015c157600080fd5b8151620015ce81620013ab565b9392505050565b600060408284031215620015e857600080fd5b82601f830112620015f857600080fd5b604080519081016001600160401b03811182821017156200161d576200161d620013e6565b80604052508060408401858111156200163557600080fd5b845b818110156200165157805183526020928301920162001637565b509195945050505050565b634e487b7160e01b600052603260045260246000fd5b60006101008083850312156200168757600080fd5b83601f8401126200169757600080fd5b6040518181016001600160401b0381118282101715620016bb57620016bb620013e6565b604052908301908085831115620016d157600080fd5b845b83811015620016f8578051620016e981620013ab565b825260209182019101620016d3565b509095945050505050565b60006101408083850312156200171857600080fd5b83601f8401126200172857600080fd5b6040518181016001600160401b03811182821017156200174c576200174c620013e6565b6040529083019080858311156200176257600080fd5b845b83811015620016f85780516200177a81620013ab565b82526020918201910162001764565b80518015158114620013d157600080fd5b600060208284031215620017ad57600080fd5b62000de18262001789565b600060208284031215620017cb57600080fd5b5051919050565b600060808284031215620017e557600080fd5b82601f830112620017f557600080fd5b604051608081016001600160401b03811182821017156200181a576200181a620013e6565b6040528060808401858111156200183057600080fd5b845b81811015620016515780516200184881620013ab565b83526020928301920162001832565b634e487b7160e01b600052602160045260246000fd5b60008060008060008060c087890312156200188757600080fd5b86516200189481620013ab565b6020880151909650620018a781620013ab565b6040880151909550620018ba81620013ab565b6060880151909450620018cd81620013ab565b6080880151909350620018e081620013ab565b9150620018f060a0880162001789565b90509295509295509295565b634e487b7160e01b600052601160045260246000fd5b6000600019821415620019295762001929620018fc565b5060010190565b60008219821115620019465762001946620018fc565b500190565b600181811c908216806200196057607f821691505b602082108114156200198257634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051614cf662001d23600039600081816105f10152613fb60152600081816104cb0152818161108901528181611c2e01528181611ce301528181611f6601528181612b770152818161306901526138fb01526000818161288c015281816133620152613e8601526000818161027d015281816126c6015281816127aa0152818161285401528181613195015281816131d0015281816132160152818161325b015281816132a0015281816132e50152818161332a01528181613cb601528181613cfa01528181613d3e01528181613d8201528181613dc601528181613e0a0152613e4e01526000818161271c015281816127f7015281816128c70152818161294001528181612d7f01528181612ddb01528181612e2f01528181613b9e01528181613c2c0152818161445a015281816144e80152614598015260008181610387015281816119eb015281816121d201528181613558015281816141d201528181614260015281816142f10152818161437f015281816144100152818161449d015261454d0152600081816106570152612d5801526000818161052c0152818161299701528181612c7d01528181613aa801528181613b400152818161421d015281816142ab0152818161433c015281816143ca0152818161451501526145c501526000818161044b01528181610cef01528181610d7e0152818161172f0152818161212d0152818161243001528181612824015281816128f401528181612d3601528181612e0d0152818161314901528181613bec01528181613c8b0152613f1a01526000818161047201528181611dd901528181611eae015261205c0152600081816102cd0152818161069f015281816107f40152818161098b01528181610aa701528181610b8501528181610be101528181610f47015281816110c10152818161115e0152818161138a01528181611553015281816122cb015281816133ec0152818161348c0152613990015260008181610505015281816105ad01528181610932015281816109ea01528181610a8501528181610af901528181610bb801528181610d2a015281816112ee0152818161183501528181611a2b0152818161234601528181612c5b01528181612caf01528181612db90152818161316a0152818161352d015281816135b201528181613713015281816137f70152818161396e0152613c6a0152614cf66000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c8063a3f4df7e11610146578063d572fd7f116100c3578063e5328e0611610087578063e5328e0614610613578063eaada3821461061b578063ec78e8321461062e578063fc0c546a14610641578063fd57a4df14610652578063ffa1ad741461067957600080fd5b8063d572fd7f146105a2578063d8dfeb45146105ab578063de603fdc146105d1578063e00af4a7146105d9578063e529ee95146105ec57600080fd5b8063c415b95c1161010a578063c415b95c1461054e578063c965fa8a14610561578063ce5494bb14610569578063d2c35ce81461057c578063d3033c391461058f57600080fd5b8063a3f4df7e146104b1578063a7404b70146104c6578063abc9b45e146104ed578063b2016bd414610500578063b20fdc0d1461052757600080fd5b806348cd2ddd116101df5780637bb7bed1116101a35780637bb7bed1146104105780637d7c2a1c146104235780637f44579b14610446578063945c91421461046d578063951dc22c1461049457806399b71d5c146104a957600080fd5b806348cd2ddd1461038257806374db9ad4146103b7578063759cb53b146103d257806375b0ffd1146103ed578063795dae661461040857600080fd5b8063201e81a811610226578063201e81a8146103135780632b3297f9146103265780632e1a7d4d146103395780634032b72b1461034c578063440d72481461035f57600080fd5b806304f4efc51461026357806306beb80a1461027857806314ae9f2e146102b557806316f0115b146102c85780631848effa146102fc575b600080fd5b6102766102713660046146fa565b61069d565b005b61029f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516102ac9190614729565b60405180910390f35b6102766102c3366004614776565b6107f2565b6102ef7f000000000000000000000000000000000000000000000000000000000000000081565b6040516102ac9190614793565b6102ef6f22d53366457f9d5e68ec105046fc438381565b6102766103213660046147bd565b610904565b6002546102ef906001600160a01b031681565b6102766103473660046146fa565b610988565b61027661035a366004614776565b610bdf565b61037261036d366004614776565b610ceb565b60405190151581526020016102ac565b6103a97f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016102ac565b6102ef73d061d61a4d941c39e5453435b6345dc261c2fce081565b6102ef734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b81565b6102ef73f403c135812408bfbe8713b5a23a04b3d48aae3181565b6103a9610d64565b6102ef61041e3660046146fa565b610e08565b61042b610e32565b604080519384526020840192909252908201526060016102ac565b6102ef7f000000000000000000000000000000000000000000000000000000000000000081565b6102ef7f000000000000000000000000000000000000000000000000000000000000000081565b61049c610e6f565b6040516102ac9190614882565b610276610e7b565b6104b9610eb7565b6040516102ac91906148fb565b6102ef7f000000000000000000000000000000000000000000000000000000000000000081565b6102766104fb366004614776565b610f45565b6102ef7f000000000000000000000000000000000000000000000000000000000000000081565b6102ef7f000000000000000000000000000000000000000000000000000000000000000081565b6001546102ef906001600160a01b031681565b6103a961106f565b610276610577366004614776565b6110be565b61027661058a366004614776565b611388565b61027661059d366004614776565b611551565b6103a960065481565b7f00000000000000000000000000000000000000000000000000000000000000006102ef565b6103a961170e565b6102766105e7366004614776565b6117be565b6103a97f000000000000000000000000000000000000000000000000000000000000000081565b6103a96119d9565b6007546102ef906001600160a01b031681565b6000546102ef906001600160a01b031681565b6000546001600160a01b03166102ef565b6102ef7f000000000000000000000000000000000000000000000000000000000000000081565b6104b9604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f657600080fd5b505afa15801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e919061492e565b6001600160a01b0316336001600160a01b0316146107675760405162461bcd60e51b815260040161075e9061494b565b60405180910390fd5b61271081106107b15760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b604482015260640161075e565b60065460408051918252602082018390527f43a94473b3422f31e660358900c02b907f22142a3224beace1f2b9f1fa079a9e910160405180910390a1600655565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561084b57600080fd5b505afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610883919061492e565b6001600160a01b0316336001600160a01b0316146108b35760405162461bcd60e51b815260040161075e9061494b565b6108be600382611a7c565b6109015760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b604482015260640161075e565b50565b610911335b600390611a91565b61092d5760405162461bcd60e51b815260040161075e90614982565b6109567f0000000000000000000000000000000000000000000000000000000000000000611ab3565b61095e611c27565b80516109729160089160209091019061462a565b5061097d6000612117565b610901600019612117565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146109d05760405162461bcd60e51b815260040161075e906149b2565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610a1f903090600401614793565b60206040518083038186803b158015610a3757600080fd5b505afa158015610a4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6f91906149e5565b9050818110610ad057610acc6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612168565b5050565b610ae2610add8284614a14565b6121cb565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610b2e903090600401614793565b60206040518083038186803b158015610b4657600080fd5b505afa158015610b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7e91906149e5565b9050610acc7f0000000000000000000000000000000000000000000000000000000000000000610bae848461227c565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612168565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3857600080fd5b505afa158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c70919061492e565b6001600160a01b0316336001600160a01b031614610ca05760405162461bcd60e51b815260040161075e9061494b565b610cab600382611a60565b6109015760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161075e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610d5e57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610db3903090600401614793565b60206040518083038186803b158015610dcb57600080fd5b505afa158015610ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0391906149e5565b905090565b60088181548110610e1857600080fd5b6000918252602090912001546001600160a01b0316905081565b60008080610e3f33610909565b610e5b5760405162461bcd60e51b815260040161075e90614982565b610e63612292565b9250925092505b909192565b6060610e036003612337565b610e8433610909565b610ea05760405162461bcd60e51b815260040161075e90614982565b610eaa6000612117565b610eb5600019612117565b565b60058054610ec490614a2b565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef090614a2b565b8015610f3d5780601f10610f1257610100808354040283529160200191610f3d565b820191906000526020600020905b815481529060010190602001808311610f2057829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9e57600080fd5b505afa158015610fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd6919061492e565b6001600160a01b0316336001600160a01b0316146110065760405162461bcd60e51b815260040161075e9061494b565b600754604080516001600160a01b03928316815291831660208301527fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610db3903090600401614793565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146111065760405162461bcd60e51b815260040161075e906149b2565b6001600160a01b03811661115c5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f00000000604482015260640161075e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111bf57600080fd5b505afa1580156111d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f7919061492e565b6001600160a01b0316146112465760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b604482015260640161075e565b61124f81612344565b6000546040516370a0823160e01b81526112e89183916001600160a01b03909116906370a0823190611285903090600401614793565b60206040518083038186803b15801561129d57600080fd5b505afa1580156112b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d591906149e5565b6000546001600160a01b03169190612168565b610901817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016113389190614793565b60206040518083038186803b15801561135057600080fd5b505afa158015611364573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae91906149e5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156113e157600080fd5b505afa1580156113f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611419919061492e565b6001600160a01b0316336001600160a01b0316146114495760405162461bcd60e51b815260040161075e9061494b565b6001600160a01b03811661149f5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f000000604482015260640161075e565b6001546001600160a01b03828116911614156114f55760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b604482015260640161075e565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156115aa57600080fd5b505afa1580156115be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e2919061492e565b6001600160a01b0316336001600160a01b0316146116125760405162461bcd60e51b815260040161075e9061494b565b6001600160a01b0381166116625760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b604482015260640161075e565b6002546001600160a01b03828116911614156116b25760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b604482015260640161075e565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600061171861106f565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611764903090600401614793565b60206040518083038186803b15801561177c57600080fd5b505afa158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b491906149e5565b610e039190614a66565b6117c733610909565b6117e35760405162461bcd60e51b815260040161075e90614982565b6001546001600160a01b03166118335760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b604482015260640161075e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156118b55760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604482015260640161075e565b6118be81610ceb565b156119025760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b604482015260640161075e565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561193d57600154610901906001600160a01b03164761251d565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061196c903090600401614793565b60206040518083038186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc91906149e5565b600154909150610acc906001600160a01b03848116911683612168565b6000611a146119e661170e565b611a0f7f0000000000000000000000000000000000000000000000000000000000000000612636565b6126b3565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611764903090600401614793565b6000611a75836001600160a01b038416612a19565b9392505050565b6000611a75836001600160a01b038416612a68565b6001600160a01b03811660009081526001830160205260408120541515611a75565b611abb612b5b565b60085460005b81811015611c2257600060088281548110611ade57611ade614a7e565b60009182526020822001546040516370a0823160e01b81526001600160a01b03909116925082906370a0823190611b19903090600401614793565b60206040518083038186803b158015611b3157600080fd5b505afa158015611b45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6991906149e5565b90508015611c0f57600254604051636ccb2b0160e01b81526001600160a01b0384811660048301528781166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b158015611bd457600080fd5b505af1925050508015611c04575060408051601f3d908101601f19168201909252611c01918101906149e5565b60015b611c0d57611c0f565b505b505080611c1b90614a94565b9050611ac1565b505050565b60606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8557600080fd5b505afa158015611c99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbd91906149e5565b905060005b81811015611e5c57604051632061aa2360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c354469060240160206040518083038186803b158015611d2d57600080fd5b505afa158015611d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d65919061492e565b6001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9d57600080fd5b505afa158015611db1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd5919061492e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614158015611e3657506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b15611e495783611e4581614a94565b9450505b5080611e5481614a94565b915050611cc2565b50611e68826002614a66565b67ffffffffffffffff811115611e8057611e806147a7565b604051908082528060200260200182016040528015611ea9578160200160208202803683370190505b5092507f000000000000000000000000000000000000000000000000000000000000000083600081518110611ee057611ee0614a7e565b60200260200101906001600160a01b031690816001600160a01b031681525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b83600181518110611f2857611f28614a7e565b6001600160a01b0390921660209283029190910190910152600260005b8281101561211057604051632061aa2360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c354469060240160206040518083038186803b158015611fb057600080fd5b505afa158015611fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe8919061492e565b6001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561202057600080fd5b505afa158015612034573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612058919061492e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141580156120b957506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b156120fd578086846120ca81614a94565b9550815181106120dc576120dc614a7e565b60200260200101906001600160a01b031690816001600160a01b0316815250505b508061210881614a94565b915050611f45565b5050505090565b61212081612c3d565b6109016001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673f403c135812408bfbe8713b5a23a04b3d48aae3183612e50565b6040516001600160a01b038316602482015260448101829052611c2290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612f74565b60006121f67f0000000000000000000000000000000000000000000000000000000000000000612636565b90506000612202610d64565b9050600061220e61106f565b6122189083614a66565b9050600061224361222983866126b3565b6122338488614aaf565b61223d9190614ace565b8361227c565b905080612251575050505050565b8281111561226b5761226b6122668483614a14565b613046565b6122758185613139565b5050505050565b600081831061228b5781611a75565b5090919050565b600080600061229f6133e4565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b15801561231757600080fd5b505af115801561232b573d6000803e3d6000fd5b50505050610e6a6137dc565b60606000611a7583613889565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b1580156123a757600080fd5b505afa1580156123bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123df919061492e565b6001600160a01b03161461242e5760405162461bcd60e51b81526020600482015260166024820152753bb937b73396b1b7b63630ba32b930b616ba37b5b2b760511b604482015260640161075e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561249157600080fd5b505afa1580156124a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c9919061492e565b6001600160a01b0316146125155760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b604482015260640161075e565b6109016138e5565b8047101561256d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161075e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146125ba576040519150601f19603f3d011682016040523d82523d6000602084013e6125bf565b606091505b5050905080611c225760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161075e565b600060016001607f1b0319821215801561265357506001607f1b82125b6126af5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840161075e565b5090565b6000826126c257506000610d5e565b60027f000000000000000000000000000000000000000000000000000000000000000060078111156126f6576126f6614713565b14156127a65760405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d7906044015b60206040518083038186803b15801561276757600080fd5b505afa15801561277b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279f91906149e5565b9050610d5e565b60067f000000000000000000000000000000000000000000000000000000000000000060078111156127da576127da614713565b1415612850576040516341b028f360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906341b028f39061274f907f00000000000000000000000000000000000000000000000000000000000000009087908790600401614af0565b60077f0000000000000000000000000000000000000000000000000000000000000000600781111561288457612884614713565b1415612977577f000000000000000000000000000000000000000000000000000000000000000015612920576040516341b028f360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906341b028f39061274f907f00000000000000000000000000000000000000000000000000000000000000009087908790600401614af0565b60405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d79060440161274f565b60405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d79060440160206040518083038186803b1580156129e157600080fd5b505afa1580156129f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7591906149e5565b6000818152600183016020526040812054612a6057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d5e565b506000610d5e565b60008181526001830160205260408120548015612b51576000612a8c600183614a14565b8554909150600090612aa090600190614a14565b9050818114612b05576000866000018281548110612ac057612ac0614a7e565b9060005260206000200154905080876000018481548110612ae357612ae3614a7e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612b1657612b16614b14565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d5e565b6000915050610d5e565b604051637050ccd960e01b8152306004820152600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637050ccd990604401602060405180830381600087803b158015612bc357600080fd5b505af1158015612bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfb9190614b2a565b610eb55760405162461bcd60e51b81526020600482015260136024820152721c995dd85c990b58db185a5b4b59985a5b1959606a1b604482015260640161075e565b612c4681613961565b6002546001600160a01b0390811690612ca2907f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612e50565b612cd66001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284612e50565b60085460005b81811015612d2857612d18838560088481548110612cfc57612cfc614a7e565b6000918252602090912001546001600160a01b03169190612e50565b612d2181614a94565b9050612cdc565b50612d7d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000085612e50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615611c2257612e006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000085612e50565b611c226001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000855b801580612ed95750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612e9f57600080fd5b505afa158015612eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed791906149e5565b155b612f445760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161075e565b6040516001600160a01b038316602482015260448101829052611c2290849063095ea7b360e01b90606401612194565b6000612fc9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139b59092919063ffffffff16565b805190915015611c225780806020019051810190612fe79190614b2a565b611c225760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161075e565b801561090157604051636197390160e11b815260048101829052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c32e720290604401602060405180830381600087803b1580156130b557600080fd5b505af11580156130c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ed9190614b2a565b6109015760405162461bcd60e51b815260206004820152601a60248201527f77697468647261772d616e642d756e777261702d6661696c6564000000000000604482015260640161075e565b81613142575050565b600061318f7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000856139cc565b905060007f000000000000000000000000000000000000000000000000000000000000000060078111156131c5576131c5614713565b1480613202575060017f0000000000000000000000000000000000000000000000000000000000000000600781111561320057613200614713565b145b1561321257611c22838284613a81565b60037f0000000000000000000000000000000000000000000000000000000000000000600781111561324657613246614713565b141561325757611c22838284613b12565b60047f0000000000000000000000000000000000000000000000000000000000000000600781111561328b5761328b614713565b141561329c57611c22838284613b12565b60027f000000000000000000000000000000000000000000000000000000000000000060078111156132d0576132d0614713565b14156132e157611c22838284613b77565b60067f0000000000000000000000000000000000000000000000000000000000000000600781111561331557613315614713565b141561332657611c22838284613bd5565b60077f0000000000000000000000000000000000000000000000000000000000000000600781111561335a5761335a614713565b141561339c577f00000000000000000000000000000000000000000000000000000000000000001561339157611c22838284613bd5565b611c22838284613b77565b60405162461bcd60e51b815260206004820152601a60248201527f77697468647261772d66726f6d2d63757276652d6661696c6564000000000000604482015260640161075e565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b81526004016134369190614793565b60206040518083038186803b15801561344e57600080fd5b505afa158015613462573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348691906149e5565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016134d69190614793565b60206040518083038186803b1580156134ee57600080fd5b505afa158015613502573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352691906149e5565b90506135517f0000000000000000000000000000000000000000000000000000000000000000611ab3565b600061357c7f0000000000000000000000000000000000000000000000000000000000000000612636565b90506000613588610d64565b9050600061359461106f565b61359e9083614a66565b905060006135ac82856126b3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016135fc9190614793565b60206040518083038186803b15801561361457600080fd5b505afa158015613628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364c91906149e5565b9050600061365a8383614a66565b9050868111156136755761366e8782614a14565b9a50613682565b61367f8188614a14565b99505b600061368e898d614a66565b90508281111561379f5760006136ad6136a78584614a14565b8661227c565b9050801561379d5760006136d5866136c58985614aaf565b6136cf9190614ace565b8861227c565b9050801561379b57878111156136f2576136f26122668983614a14565b6136fc818a613139565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613748903090600401614793565b60206040518083038186803b15801561376057600080fd5b505afa158015613774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379891906149e5565b94505b505b505b6137a9838a61227c565b99508983116137b95760006137cc565b6137cc6137c68b85614a14565b8d61227c565b9b50505050505050505050909192565b6040516370a0823160e01b8152613881906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061382c903090600401614793565b60206040518083038186803b15801561384457600080fd5b505afa158015613858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387c91906149e5565b613c5b565b610eb5613f00565b6060816000018054806020026020016040519081016040528092919081815260200182805480156138d957602002820191906000526020600020905b8154815260200190600101908083116138c5575b50505050509050919050565b6040516324f81cd160e11b8152600160048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906349f039a290602401600060405180830381600087803b15801561394757600080fd5b505af115801561395b573d6000803e3d6000fd5b50505050565b6109016001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612e50565b60606139c4848460008561409e565b949350505050565b60006127106006546127106139e19190614a14565b600754604051632d9198e160e21b81526001600160a01b0388811660048301528781166024830152604482018790529091169063b64663849060640160206040518083038186803b158015613a3557600080fd5b505afa158015613a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a6d91906149e5565b613a779190614aaf565b6139c49190614ace565b604051630d2680e960e11b815260048101849052600f82900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d2906064015b600060405180830381600087803b158015613af557600080fd5b505af1158015613b09573d6000803e3d6000fd5b50505050505050565b60405163517a55a360e01b815260048101849052600f82900b602482015260448101839052600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063517a55a390608401613adb565b604051630d2680e960e11b815260048101849052600f82900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d290606401613adb565b6040516314f6943160e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600f83900b6044830152606482018490527f000000000000000000000000000000000000000000000000000000000000000016906329ed286290608401613adb565b80613c635750565b6000613cb07f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846139cc565b905060007f00000000000000000000000000000000000000000000000000000000000000006007811115613ce657613ce6614713565b1415613cf657610acc82826141c6565b60037f00000000000000000000000000000000000000000000000000000000000000006007811115613d2a57613d2a614713565b1415613d3a57610acc8282614254565b60017f00000000000000000000000000000000000000000000000000000000000000006007811115613d6e57613d6e614713565b1415613d7e57610acc82826142e5565b60047f00000000000000000000000000000000000000000000000000000000000000006007811115613db257613db2614713565b1415613dc257610acc8282614373565b60027f00000000000000000000000000000000000000000000000000000000000000006007811115613df657613df6614713565b1415613e0657610acc8282614404565b60067f00000000000000000000000000000000000000000000000000000000000000006007811115613e3a57613e3a614713565b1415613e4a57610acc8282614491565b60077f00000000000000000000000000000000000000000000000000000000000000006007811115613e7e57613e7e614713565b1415613ebe577f000000000000000000000000000000000000000000000000000000000000000015613eb457610acc8282614541565b610acc8282614404565b60405162461bcd60e51b815260206004820152601760248201527619195c1bdcda5d0b5d1bcb58dd5c9d994b59985a5b1959604a1b604482015260640161075e565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613f4f903090600401614793565b60206040518083038186803b158015613f6757600080fd5b505afa158015613f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f9f91906149e5565b90508015610901576040516321d0683360e11b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290526001604482015273f403c135812408bfbe8713b5a23a04b3d48aae31906343a0d06690606401602060405180830381600087803b15801561402157600080fd5b505af1158015614035573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140599190614b2a565b6109015760405162461bcd60e51b8152602060048201526016602482015275189bdbdcdd195c8b59195c1bdcda5d0b59985a5b195960521b604482015260640161075e565b6060824710156140ff5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161075e565b843b61414d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161075e565b600080866001600160a01b031685876040516141699190614b4c565b60006040518083038185875af1925050503d80600081146141a6576040519150601f19603f3d011682016040523d82523d6000602084013e6141ab565b606091505b50915091506141bb8282866145f1565b979650505050505050565b6141ce61468b565b82817f00000000000000000000000000000000000000000000000000000000000000006002811061420157614201614a7e565b6020020152604051630b4c7e4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630b4c7e4d90613adb9084908690600401614b8b565b61425c61468b565b82817f00000000000000000000000000000000000000000000000000000000000000006002811061428f5761428f614a7e565b602002015260405163ee22be2360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ee22be2390613adb9084908690600190600401614ba6565b6142ed6146a9565b82817f00000000000000000000000000000000000000000000000000000000000000006003811061432057614320614a7e565b6020020152604051634515cef360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634515cef390613adb9084908690600401614bed565b61437b6146a9565b82817f0000000000000000000000000000000000000000000000000000000000000000600381106143ae576143ae614a7e565b60200201526040516315b74c9d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632b6e993a90613adb9084908690600190600401614c08565b61440c6146c7565b82817f00000000000000000000000000000000000000000000000000000000000000006004811061443f5761443f614a7e565b602002015260405162a6cbcd60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063029b2f3490613adb9084908690600401614c4f565b6144996146a9565b82817f0000000000000000000000000000000000000000000000000000000000000000600381106144cc576144cc614a7e565b602002015260405163a318517960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a318517990613adb907f00000000000000000000000000000000000000000000000000000000000000009085908790600401614c6a565b6145496146c7565b82817f00000000000000000000000000000000000000000000000000000000000000006004811061457c5761457c614a7e565b602002015260405163384e03db60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063384e03db90613adb907f00000000000000000000000000000000000000000000000000000000000000009085908790600401614c95565b60608315614600575081611a75565b8251156146105782518084602001fd5b8160405162461bcd60e51b815260040161075e91906148fb565b82805482825590600052602060002090810192821561467f579160200282015b8281111561467f57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061464a565b506126af9291506146e5565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b5b808211156126af57600081556001016146e6565b60006020828403121561470c57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061474b57634e487b7160e01b600052602160045260246000fd5b91905290565b6001600160a01b038116811461090157600080fd5b803561477181614751565b919050565b60006020828403121561478857600080fd5b8135611a7581614751565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156147d057600080fd5b823567ffffffffffffffff808211156147e857600080fd5b818501915085601f8301126147fc57600080fd5b81358181111561480e5761480e6147a7565b8060051b604051601f19603f83011681018181108582111715614833576148336147a7565b60405291825284820192508381018501918883111561485157600080fd5b938501935b828510156148765761486785614766565b84529385019392850192614856565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156148c35783516001600160a01b03168352928401929184019160010161489e565b50909695505050505050565b60005b838110156148ea5781810151838201526020016148d2565b8381111561395b5750506000910152565b602081526000825180602084015261491a8160408501602087016148cf565b601f01601f19169190910160400192915050565b60006020828403121561494057600080fd5b8151611a7581614751565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b6000602082840312156149f757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015614a2657614a266149fe565b500390565b600181811c90821680614a3f57607f821691505b60208210811415614a6057634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115614a7957614a796149fe565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614aa857614aa86149fe565b5060010190565b6000816000190483118215151615614ac957614ac96149fe565b500290565b600082614aeb57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039390931683526020830191909152600f0b604082015260600190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215614b3c57600080fd5b81518015158114611a7557600080fd5b60008251614b5e8184602087016148cf565b9190910192915050565b8060005b600281101561395b578151845260209384019390910190600101614b6c565b60608101614b998285614b68565b8260408301529392505050565b60808101614bb48286614b68565b8360408301528215156060830152949350505050565b8060005b600381101561395b578151845260209384019390910190600101614bce565b60808101614bfb8285614bca565b8260608301529392505050565b60a08101614c168286614bca565b8360608301528215156080830152949350505050565b8060005b600481101561395b578151845260209384019390910190600101614c30565b60a08101614c5d8285614c2c565b8260808301529392505050565b6001600160a01b038416815260a08101614c876020830185614bca565b826080830152949350505050565b6001600160a01b038416815260c08101614cb26020830185614c2c565b8260a083015294935050505056fea264697066735822122083dafa20865cba4a55ba9a7ebdbaa31ebe42b493dbc8dfa4cec9e41af1bc58bb64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "isReservedToken(address)": {
        "details": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "setRewardTokens(address[])": {
        "details": "convex pool can add new rewards. This method refresh list."
      },
      "sweepERC20(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "sweepERC20(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns collateral balance + collateral deposited to curve"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14313,
        "contract": "vesper-strategies/contracts/strategies/convex/Convex.sol:Convex",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14319,
        "contract": "vesper-strategies/contracts/strategies/convex/Convex.sol:Convex",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14322,
        "contract": "vesper-strategies/contracts/strategies/convex/Convex.sol:Convex",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)13174"
      },
      {
        "astId": 14335,
        "contract": "vesper-strategies/contracts/strategies/convex/Convex.sol:Convex",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3020_storage"
      },
      {
        "astId": 22658,
        "contract": "vesper-strategies/contracts/strategies/convex/Convex.sol:Convex",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 22660,
        "contract": "vesper-strategies/contracts/strategies/convex/Convex.sol:Convex",
        "label": "crvSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 22663,
        "contract": "vesper-strategies/contracts/strategies/convex/Convex.sol:Convex",
        "label": "masterOracle",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IMasterOracle)12858"
      },
      {
        "astId": 22666,
        "contract": "vesper-strategies/contracts/strategies/convex/Convex.sol:Convex",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMasterOracle)12858": {
        "encoding": "inplace",
        "label": "contract IMasterOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IRoutedSwapper)13174": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3020_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3019,
            "contract": "vesper-strategies/contracts/strategies/convex/Convex.sol:Convex",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2719_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2719_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2714,
            "contract": "vesper-strategies/contracts/strategies/convex/Convex.sol:Convex",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2718,
            "contract": "vesper-strategies/contracts/strategies/convex/Convex.sol:Convex",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}