{
  "address": "0xeb365dfEFEEBe677281da9114A0B66d4dbBFA6D8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "crvPool_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "crvSlippage_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "masterOracle_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapper_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralIdx_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "convexPoolId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCrvSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCrvSlippage",
          "type": "uint256"
        }
      ],
      "name": "CrvSlippageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IMasterOracle",
          "name": "oldMasterOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle",
          "type": "address"
        }
      ],
      "name": "MasterOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOOSTER",
      "outputs": [
        {
          "internalType": "contract IConvex",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_MINTER",
      "outputs": [
        {
          "internalType": "contract ITokenMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CVX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvGauge",
      "outputs": [
        {
          "internalType": "contract ILiquidityGaugeV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvLp",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvxCrvRewards",
      "outputs": [
        {
          "internalType": "contract Rewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceHere",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpHere",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceHereAndStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpHereAndStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterOracle",
      "outputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCrvSlippage_",
          "type": "uint256"
        }
      ],
      "name": "updateCrvSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle_",
          "type": "address"
        }
      ],
      "name": "updateMasterOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c11133cecd42f92bfacf51a0114716bd412c3b1093144cd47e43891338f5cfa",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xeb365dfEFEEBe677281da9114A0B66d4dbBFA6D8",
    "transactionIndex": 88,
    "gasUsed": "3847326",
    "logsBloom": "0x
    "blockHash": "0x5a428e202848fa371a3ffd43f1afdd5fbb1f7203499980cc74449e8473c1556f",
    "transactionHash": "0x7c11133cecd42f92bfacf51a0114716bd412c3b1093144cd47e43891338f5cfa",
    "logs": [],
    "blockNumber": 15347895,
    "cumulativeGasUsed": "9398730",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc14900dFB1Aa54e7674e1eCf9ce02b3b35157ba5",
    "0xDcEF968d416a41Cdac0ED8702fAC8128A64241A2",
    50,
    "0xdB2D0baae78f1dc2A8504B471F3cea257b2C3766",
    "0x8f156189A3CD28dFc8FB7BbbAce58F98F09c0bB3",
    0,
    100,
    "Convex_fraxusdc_FRAX"
  ],
  "numDeployments": 1,
  "solcInputHash": "4040d041c2528b9ffde1f617c463dec7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvPool_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"crvSlippage_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"masterOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdx_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"convexPoolId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCrvSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCrvSlippage\",\"type\":\"uint256\"}],\"name\":\"CrvSlippageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IMasterOracle\",\"name\":\"oldMasterOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle\",\"type\":\"address\"}],\"name\":\"MasterOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOSTER\",\"outputs\":[{\"internalType\":\"contract IConvex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_MINTER\",\"outputs\":[{\"internalType\":\"contract ITokenMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvGauge\",\"outputs\":[{\"internalType\":\"contract ILiquidityGaugeV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvLp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxCrvRewards\",\"outputs\":[{\"internalType\":\"contract Rewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceHere\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpHere\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceHereAndStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpHereAndStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOracle\",\"outputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"setRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCrvSlippage_\",\"type\":\"uint256\"}],\"name\":\"updateCrvSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle_\",\"type\":\"address\"}],\"name\":\"updateMasterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"isReservedToken(address)\":{\"details\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"setRewardTokens(address[])\":{\"details\":\"convex pool can add new rewards. This method refresh list.\"},\"sweepERC20(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"This strategy will deposit collateral token in a Curve 2Pool and stake lp token to convex.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"sweepERC20(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns collateral balance + collateral deposited to curve\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol\":\"Convex2PlainPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance()\\n        external\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xddea3754059443771113c169ee1647ef9e83ee6ee509a911ceb7729fea62adc0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc37d85b96c2a8d7bc09f25958e0a81394bf5780286444147ddf875fa628d53ce\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x193c2dd96da7b717f15736d5f13ccab8a7b4e90853b6cb922a864f1e8fdd9dc7\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/convex/IConvex.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IConvex {\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    // deposit lp tokens and stake\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    // deposit all lp tokens and stake\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    // withdraw lp tokens\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    // withdraw all lp tokens\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    // claim crv + extra rewards\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    // claim  rewards on stash (msg.sender == stash)\\n    function claimRewards(uint256 _pid, address _gauge) external returns (bool);\\n\\n    // delegate address votes on dao (needs to be voteDelegate)\\n    function vote(\\n        uint256 _voteId,\\n        address _votingAddress,\\n        bool _support\\n    ) external returns (bool);\\n\\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight) external returns (bool);\\n}\\n\\ninterface Rewards {\\n    function pid() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256) external view returns (address);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardPerTokenStored() external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function rewards(address) external view returns (uint256);\\n\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n\\n    function stakingToken() external view returns (address);\\n\\n    function stake(uint256) external returns (bool);\\n\\n    function stakeAll() external returns (bool);\\n\\n    function stakeFor(address, uint256) external returns (bool);\\n\\n    function withdraw(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAll(bool claim) external returns (bool);\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\\n\\n    function withdrawAllAndUnwrap(bool claim) external;\\n\\n    function getReward() external returns (bool);\\n\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function donate(uint256 _amount) external returns (bool);\\n\\n    function queuedRewards() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2c6f0376a56aa78b7b66ba0325face5af49f527d67600fc7d087ba234beda28c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/convex/IConvexToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IConvexToken {\\n    function maxSupply() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function reductionPerCliff() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1370c11709575c82c2275f98b423d073d7ea99643ccda24fc69ec02f2a823310\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0x475e55655e2868cd6d31dea7a571bb9c73337937529df19563054d08f8c1f73c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Not a complete interface, but should have what we need\\ninterface ILiquidityGaugeV2 is IERC20 {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address addr) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function claim_rewards(address addr) external;\\n\\n    function claim_rewards() external;\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function claimable_reward(address, address) external returns (uint256);\\n\\n    function integrate_fraction(address addr) external view returns (uint256);\\n\\n    function user_checkpoint(address addr) external returns (bool);\\n\\n    function reward_integral(address) external view returns (uint256);\\n\\n    function reward_integral_for(address, address) external view returns (uint256);\\n\\n    function lp_token() external view returns (address);\\n\\n    function reward_count() external view returns (uint256);\\n\\n    function reward_tokens(uint256 _i) external view returns (address);\\n}\\n\\ninterface ILiquidityGaugeV3 is ILiquidityGaugeV2 {\\n    function claimable_reward(address addr, address token) external view override returns (uint256);\\n\\n    function claimable_reward_write(address addr, address token) external returns (uint256);\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0xde96ff55d81a9f17788ef598dcdf84939c1523e8ffc44768eff52efbb0e2a234\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IMetapoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/* solhint-disable func-name-mixedcase*/\\npragma solidity 0.8.9;\\n\\ninterface IMetapoolFactory {\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_decimals(address pool) external view returns (uint256[8] memory);\\n\\n    function get_coins(address pool) external view returns (address[4] memory);\\n\\n    function get_n_coins(address pool) external view returns (uint256);\\n\\n    function get_meta_n_coins(address pool) external view returns (uint256[2] memory);\\n\\n    function get_decimals(address pool) external view returns (uint256[4] memory);\\n\\n    function get_gauge(address pool) external view returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0b34a43d929c27a7f0fe8cfcda363e5bf02cd08e66a283d402181ef0a072c3f7\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IRegistry {\\n    function get_pool_from_lp_token() external view returns (address);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function get_n_coins(address pool) external view returns (uint256[2] memory);\\n\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_decimals(address pool) external view returns (uint256[8] memory);\\n\\n    function get_gauges(address pool) external view returns (address[10] memory);\\n}\\n\",\"keccak256\":\"0x2ebd1ea8b845d34dd2a389b994a396a57cc8c423f03272ed51dcea203d3b6288\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\n// Not a complete interface, but should have what we need\\ninterface IStableSwap {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function fee() external view returns (uint256); // fee * 1e10\\n\\n    function lp_token() external view returns (address);\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n}\\n\\ninterface IStableSwapV2 {\\n    function coins(int128 i) external view returns (address);\\n}\\n\\ninterface IStableSwapUnderlying is IStableSwap {\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount,\\n        bool _use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap2x is IStableSwap {\\n    function calc_token_amount(uint256[2] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap3x is IStableSwap {\\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap4x is IStableSwap {\\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap2xUnderlying is IStableSwap2x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[2] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap3xUnderlying is IStableSwap3x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[3] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap4xUnderlying is IStableSwap4x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[4] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0x366c9af63373252a74c060394ccf4d6b0cf1b83c8499b10df739bf5067bb5b97\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/ITokenMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\n// Not a complete interface, but should have what we need\\ninterface ITokenMinter {\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n\\n    function mint(address gauge_addr) external;\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x4c11e543dddafeaa1f90af55d8aa750d943a050cf7cb1100456832fce39617cf\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/one-oracle/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x6bb781352f8af1fce0e5dafc46ac0855ccd923fd76369eecee443556a06fe4fa\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x81fccad24b581704ec06b681d0f75d2af86c461142bf0224e118779783271d10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance()\\n        external\\n        onlyKeeper\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _rebalance()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x947a4185d2e76769bda95e405241a2d8d1b17093955a486265cdf1d92893786b\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../curve/2Pool/Curve2PlainPool.sol\\\";\\nimport \\\"../ConvexBase.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Curve 2Pool and stake lp token to convex.\\ncontract Convex2PlainPool is Curve2PlainPool, ConvexBase {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address pool_,\\n        address crvPool_,\\n        uint256 crvSlippage_,\\n        address masterOracle_,\\n        address swapper_,\\n        uint256 collateralIdx_,\\n        uint256 convexPoolId_,\\n        string memory _name\\n    )\\n        Curve2PlainPool(pool_, crvPool_, crvSlippage_, masterOracle_, swapper_, collateralIdx_, _name)\\n        ConvexBase(convexPoolId_)\\n    {\\n        (address _lp, , , , , ) = BOOSTER.poolInfo(convexPoolId_);\\n        require(_lp == address(crvLp), \\\"incorrect-lp-token\\\");\\n    }\\n\\n    function lpBalanceStaked() public view override returns (uint256 _total) {\\n        _total = cvxCrvRewards.balanceOf(address(this));\\n    }\\n\\n    function _approveToken(uint256 amount_) internal virtual override {\\n        crvLp.safeApprove(address(BOOSTER), amount_);\\n        super._approveToken(amount_);\\n    }\\n\\n    function _claimRewards() internal override {\\n        require(cvxCrvRewards.getReward(address(this), true), \\\"reward-claim-failed\\\");\\n    }\\n\\n    function _stakeAllLp() internal override {\\n        uint256 _balance = crvLp.balanceOf(address(this));\\n        if (_balance > 0) {\\n            require(BOOSTER.deposit(convexPoolId, _balance, true), \\\"booster-deposit-failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Unstake all LPs\\n     * @dev This function is called by `_beforeMigration()` hook\\n     * Should claim rewards that will be swept later\\n     */\\n    function _unstakeAllLp() internal override {\\n        cvxCrvRewards.withdrawAllAndUnwrap(true);\\n    }\\n\\n    /**\\n     * @notice Unstake LPs\\n     * Don't claiming rewards because `_claimRewards()` already does that\\n     */\\n    function _unstakeLp(uint256 amount_) internal override {\\n        if (amount_ > 0) {\\n            require(cvxCrvRewards.withdrawAndUnwrap(amount_, false), \\\"withdraw-and-unwrap-failed\\\");\\n        }\\n    }\\n\\n    /// @dev convex pool can add new rewards. This method refresh list.\\n    function setRewardTokens(\\n        address[] memory /*_rewardTokens*/\\n    ) external override onlyKeeper {\\n        // Claims all rewards, if any, before updating the reward list\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        rewardTokens = _getRewardTokens();\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n}\\n\",\"keccak256\":\"0x0e73a511c79a6701c1905b5655214b00318008d1819f735700d343500416d91e\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/convex/ConvexBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/convex/IConvex.sol\\\";\\nimport \\\"../../interfaces/convex/IConvexToken.sol\\\";\\n\\n// Convex Strategies common variables and helper functions\\nabstract contract ConvexBase {\\n    using SafeERC20 for IERC20;\\n\\n    address public constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n    address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n    IConvex public constant BOOSTER = IConvex(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n\\n    Rewards public immutable cvxCrvRewards;\\n    uint256 public immutable convexPoolId;\\n\\n    struct ClaimableRewardInfo {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    constructor(uint256 convexPoolId_) {\\n        (, , , address _reward, , ) = BOOSTER.poolInfo(convexPoolId_);\\n        cvxCrvRewards = Rewards(_reward);\\n        convexPoolId = convexPoolId_;\\n    }\\n\\n    /**\\n     * @notice Add reward tokens\\n     * The Convex pools have CRV and CVX as base rewards and may have others tokens as extra rewards\\n     * In some cases, CVX is also added as extra reward, reason why we have to ensure to not add it twice\\n     * @return _rewardTokens The array of reward tokens (both base and extra rewards)\\n     */\\n    function _getRewardTokens() internal view returns (address[] memory _rewardTokens) {\\n        uint256 _extraRewardCount;\\n        uint256 _length = cvxCrvRewards.extraRewardsLength();\\n\\n        for (uint256 i; i < _length; i++) {\\n            address _rewardToken = Rewards(cvxCrvRewards.extraRewards(i)).rewardToken();\\n            // Some pool has CVX as extra rewards but other do not. CVX still reward token\\n            if (_rewardToken != CRV && _rewardToken != CVX) {\\n                _extraRewardCount++;\\n            }\\n        }\\n\\n        _rewardTokens = new address[](_extraRewardCount + 2);\\n        _rewardTokens[0] = CRV;\\n        _rewardTokens[1] = CVX;\\n        uint256 _nextIdx = 2;\\n\\n        for (uint256 i; i < _length; i++) {\\n            address _rewardToken = Rewards(cvxCrvRewards.extraRewards(i)).rewardToken();\\n            // CRV and CVX already added in array\\n            if (_rewardToken != CRV && _rewardToken != CVX) {\\n                _rewardTokens[_nextIdx++] = _rewardToken;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf9c05ceedc95d2f322ade0619655e9286022e51eb846741e54ce44a24897d83\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/curve/2Pool/Curve2PlainPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../CurvePoolBase.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\n/// @title This strategy will deposit collateral token in a Curve 2Pool and earn interest.\\ncontract Curve2PlainPool is CurvePoolBase {\\n    constructor(\\n        address pool_,\\n        address crvPool_,\\n        uint256 crvSlippage_,\\n        address masterOracle_,\\n        address swapper_,\\n        uint256 collateralIdx_,\\n        string memory name_\\n    ) CurvePoolBase(pool_, crvPool_, crvSlippage_, masterOracle_, swapper_, collateralIdx_, name_) {}\\n\\n    function _depositToCurve(uint256 coinAmountIn_) internal virtual override {\\n        if (coinAmountIn_ > 0) {\\n            uint256[2] memory _depositAmounts;\\n            _depositAmounts[collateralIdx] = coinAmountIn_;\\n\\n            uint256 _lpAmountOutMin = _calculateAmountOutMin(address(collateralToken), address(crvLp), coinAmountIn_);\\n            IStableSwap2x(crvPool).add_liquidity(_depositAmounts, _lpAmountOutMin);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe7f3ff9d19af7f5e2c3c86b15a33544109ea642197abee77da8353a3711fa904\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/curve/CurvePoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../interfaces/curve/IStableSwap.sol\\\";\\nimport \\\"../../interfaces/curve/ILiquidityGauge.sol\\\";\\nimport \\\"../../interfaces/curve/ITokenMinter.sol\\\";\\nimport \\\"../../interfaces/curve/IMetapoolFactory.sol\\\";\\nimport \\\"../../interfaces/curve/IRegistry.sol\\\";\\nimport \\\"../../interfaces/curve/IAddressProvider.sol\\\";\\nimport \\\"../../interfaces/one-oracle/IMasterOracle.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Curve Pool and earn interest.\\n// solhint-disable no-empty-blocks\\nabstract contract CurvePoolBase is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant VERSION = \\\"5.0.0\\\";\\n\\n    uint256 internal constant MAX_BPS = 10_000;\\n\\n    ITokenMinter public constant CRV_MINTER = ITokenMinter(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0); // This contract only exists on mainnet\\n    IAddressProvider public constant ADDRESS_PROVIDER = IAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383); // Same address to all chains\\n    uint256 private constant FACTORY_ADDRESS_ID = 3;\\n\\n    // Note: Same as `receiptToken` but using this in order to save gas since it's `immutable` and `receiptToken` isn't\\n    IERC20 public immutable crvLp;\\n    address public immutable crvPool;\\n    ILiquidityGaugeV2 public immutable crvGauge;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52; // Mainnet\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n\\n    uint256 public immutable collateralIdx;\\n    uint256 public crvSlippage;\\n    IMasterOracle public masterOracle;\\n\\n    address[] public rewardTokens;\\n\\n    event CrvSlippageUpdated(uint256 oldCrvSlippage, uint256 newCrvSlippage);\\n    event MasterOracleUpdated(IMasterOracle oldMasterOracle, IMasterOracle newMasterOracle);\\n\\n    constructor(\\n        address pool_,\\n        address crvPool_,\\n        uint256 crvSlippage_,\\n        address masterOracle_,\\n        address swapper_,\\n        uint256 collateralIdx_,\\n        string memory name_\\n    ) Strategy(pool_, swapper_, address(0)) {\\n        if (block.chainid == 43114) {\\n            // Avalanche\\n            CRV = 0x47536F17F4fF30e64A96a7555826b8f9e66ec468;\\n        } else if (block.chainid == 137) {\\n            // Polygon\\n            CRV = 0x172370d5Cd63279eFa6d502DAB29171933a610AF;\\n        } else if (block.chainid == 42161) {\\n            // Arbitrum\\n            CRV = 0x11cDb42B0EB46D95f990BeDD4695A6e3fA034978;\\n        }\\n\\n        address _crvLp;\\n        address _crvGauge;\\n        address _collateral;\\n\\n        IRegistry _registry = IRegistry(ADDRESS_PROVIDER.get_registry());\\n        _crvLp = _registry.get_lp_token(crvPool_);\\n\\n        bool _isFactoryPool = _crvLp == address(0);\\n\\n        if (!_isFactoryPool) {\\n            require(collateralIdx_ < _registry.get_n_coins(crvPool_)[1], \\\"invalid-collateral\\\");\\n            _collateral = _registry.get_underlying_coins(crvPool_)[collateralIdx_];\\n            _crvGauge = _registry.get_gauges(crvPool_)[0]; // TODO: Check other gauges?\\n\\n            // Note: The Curve's `Registry` is returning null when calling `get_gauges()` for the FRAX-USDC pool\\n            // See more: https://github.com/curvefi/curve-pool-registry/issues/36\\n            if (_crvGauge == address(0) && crvPool_ == 0xDcEF968d416a41Cdac0ED8702fAC8128A64241A2) {\\n                // Address get from https://curve.fi/contracts page\\n                _crvGauge = 0xCFc25170633581Bf896CB6CDeE170e3E3Aa59503;\\n            }\\n        } else {\\n            IMetapoolFactory _factory = IMetapoolFactory(ADDRESS_PROVIDER.get_address(FACTORY_ADDRESS_ID));\\n\\n            if (_factory.is_meta(crvPool_)) {\\n                require(collateralIdx_ < _factory.get_meta_n_coins(crvPool_)[1], \\\"invalid-collateral\\\");\\n                _collateral = _factory.get_underlying_coins(crvPool_)[collateralIdx_];\\n            } else {\\n                require(collateralIdx_ < _factory.get_n_coins(crvPool_), \\\"invalid-collateral\\\");\\n                _collateral = _factory.get_coins(crvPool_)[collateralIdx_];\\n            }\\n            _crvLp = crvPool_;\\n            _crvGauge = _factory.get_gauge(crvPool_);\\n        }\\n\\n        require(_collateral == address(IVesperPool(pool_).token()), \\\"collateral-mismatch\\\");\\n        require(crvPool_ != address(0), \\\"pool-is-null\\\");\\n        require(_crvLp != address(0), \\\"lp-is-null\\\");\\n        require(_crvGauge != address(0), \\\"gauge-is-null\\\");\\n\\n        crvPool = crvPool_;\\n        crvLp = IERC20(_crvLp);\\n        crvGauge = ILiquidityGaugeV2(_crvGauge);\\n        crvSlippage = crvSlippage_;\\n        receiptToken = _crvLp;\\n        collateralIdx = collateralIdx_;\\n\\n        NAME = name_;\\n        masterOracle = IMasterOracle(masterOracle_);\\n        rewardTokens.push(CRV);\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address token_) public view override returns (bool) {\\n        return token_ == address(crvLp) || token_ == address(collateralToken);\\n    }\\n\\n    // Gets LP value not staked in gauge\\n    function lpBalanceHere() public view virtual returns (uint256 _lpHere) {\\n        _lpHere = crvLp.balanceOf(address(this));\\n    }\\n\\n    function lpBalanceHereAndStaked() public view virtual returns (uint256 _lpHereAndStaked) {\\n        _lpHereAndStaked = crvLp.balanceOf(address(this)) + lpBalanceStaked();\\n    }\\n\\n    function lpBalanceStaked() public view virtual returns (uint256 _lpStaked) {\\n        _lpStaked = crvGauge.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns collateral balance + collateral deposited to curve\\n    function tvl() external view override returns (uint256) {\\n        return\\n            collateralToken.balanceOf(address(this)) +\\n            _quoteLpToCoin(lpBalanceHereAndStaked(), SafeCast.toInt128(int256(collateralIdx)));\\n    }\\n\\n    function _approveToken(uint256 amount_) internal virtual override {\\n        super._approveToken(amount_);\\n\\n        address _swapper = address(swapper);\\n\\n        collateralToken.safeApprove(crvPool, amount_);\\n        collateralToken.safeApprove(_swapper, amount_);\\n\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; i++) {\\n            IERC20(rewardTokens[i]).safeApprove(_swapper, amount_);\\n        }\\n        crvLp.safeApprove(address(crvGauge), amount_);\\n    }\\n\\n    /// @notice Unstake LP tokens in order to transfer to the new strategy\\n    function _beforeMigration(address newStrategy_) internal override {\\n        require(IStrategy(newStrategy_).collateral() == address(collateralToken), \\\"wrong-collateral-token\\\");\\n        require(IStrategy(newStrategy_).token() == address(crvLp), \\\"wrong-receipt-token\\\");\\n        _unstakeAllLp();\\n    }\\n\\n    function _calculateAmountOutMin(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) internal view returns (uint256 _amountOutMin) {\\n        _amountOutMin = (masterOracle.quote(tokenIn_, tokenOut_, amountIn_) * (MAX_BPS - crvSlippage)) / MAX_BPS;\\n    }\\n\\n    function _claimRewards() internal virtual {\\n        try CRV_MINTER.mint(address(crvGauge)) {} catch {\\n            // This call may fail in some scenarios\\n            // e.g. Side-chains don't have minter contract\\n        }\\n        try crvGauge.claim_rewards() {} catch {\\n            // This call may fail in some scenarios\\n            // e.g. 3Crv gauge doesn't have such function\\n        }\\n    }\\n\\n    /**\\n     * @notice Curve pool may have more than one reward token. Child contract should override _claimRewards\\n     */\\n    function _claimRewardsAndConvertTo(address tokenOut_) internal virtual {\\n        _claimRewards();\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; i++) {\\n            address _rewardToken = rewardTokens[i];\\n            uint256 _amountIn = IERC20(_rewardToken).balanceOf(address(this));\\n            if (_amountIn > 0) {\\n                try swapper.swapExactInput(_rewardToken, tokenOut_, _amountIn, 1, address(this)) {} catch {\\n                    // Note: It may fail under some conditions\\n                    // For instance: 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT'\\n                }\\n            }\\n        }\\n    }\\n\\n    function _deposit() internal {\\n        _depositToCurve(collateralToken.balanceOf(address(this)));\\n        _stakeAllLp();\\n    }\\n\\n    function _depositToCurve(uint256 amount_) internal virtual;\\n\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _strategyDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n\\n        int128 _i = SafeCast.toInt128(int256(collateralIdx));\\n        uint256 _lpHere = lpBalanceHere();\\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\\n        uint256 _collateralInCurve = _quoteLpToCoin(_totalLp, _i);\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = _collateralHere + _collateralInCurve;\\n\\n        if (_totalCollateral > _strategyDebt) {\\n            _profit = _totalCollateral - _strategyDebt;\\n        } else {\\n            _loss = _strategyDebt - _totalCollateral;\\n        }\\n\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_profitAndExcessDebt > _collateralHere) {\\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _collateralInCurve);\\n            if (_totalAmountToWithdraw > 0) {\\n                uint256 _lpToBurn = Math.min((_totalAmountToWithdraw * _totalLp) / _collateralInCurve, _totalLp);\\n\\n                if (_lpToBurn > 0) {\\n                    if (_lpToBurn > _lpHere) {\\n                        _unstakeLp(_lpToBurn - _lpHere);\\n                    }\\n\\n                    _withdrawFromCurve(\\n                        _lpToBurn,\\n                        _calculateAmountOutMin(receiptToken, address(collateralToken), _lpToBurn),\\n                        _i\\n                    );\\n\\n                    _collateralHere = collateralToken.balanceOf(address(this));\\n                }\\n            }\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n    }\\n\\n    function _quoteLpToCoin(uint256 amountIn_, int128 toIdx_) internal view virtual returns (uint256 amountOut) {\\n        if (amountIn_ > 0) {\\n            amountOut = IStableSwap(crvPool).calc_withdraw_one_coin(amountIn_, toIdx_);\\n        }\\n    }\\n\\n    function _rebalance()\\n        internal\\n        virtual\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        (_profit, _loss, _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _deposit();\\n    }\\n\\n    // Requires that gauge has approval for lp token\\n    function _stakeAllLp() internal virtual {\\n        uint256 _balance = crvLp.balanceOf(address(this));\\n        if (_balance > 0) {\\n            crvGauge.deposit(_balance);\\n        }\\n    }\\n\\n    function _unstakeAllLp() internal virtual {\\n        _unstakeLp(crvGauge.balanceOf(address(this)));\\n    }\\n\\n    function _unstakeLp(uint256 amount_) internal virtual {\\n        if (amount_ > 0) {\\n            crvGauge.withdraw(amount_);\\n        }\\n    }\\n\\n    function _withdrawFromCurve(\\n        uint256 lpToBurn_,\\n        uint256 minCoinAmountOut_,\\n        int128 coinIdx_\\n    ) internal virtual {\\n        IStableSwap(crvPool).remove_liquidity_one_coin(lpToBurn_, coinIdx_, minCoinAmountOut_);\\n    }\\n\\n    function _withdrawHere(uint256 coinAmountOut_) internal override {\\n        int128 _i = SafeCast.toInt128(int256(collateralIdx));\\n\\n        uint256 _lpHere = lpBalanceHere();\\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\\n\\n        uint256 _lpToBurn = Math.min((coinAmountOut_ * _totalLp) / _quoteLpToCoin(_totalLp, _i), _totalLp);\\n\\n        if (_lpToBurn == 0) return;\\n\\n        if (_lpToBurn > _lpHere) {\\n            _unstakeLp(_lpToBurn - _lpHere);\\n        }\\n\\n        uint256 _coinAmountOutMin = _calculateAmountOutMin(address(crvLp), address(collateralToken), _lpToBurn);\\n        _withdrawFromCurve(_lpToBurn, _coinAmountOutMin, _i);\\n    }\\n\\n    /// @dev Rewards token in gauge can be updated any time. Governor can set reward tokens\\n    /// Different version of gauge has different method to read reward tokens better governor set it\\n    function setRewardTokens(address[] memory rewardTokens_) external virtual onlyGovernor {\\n        rewardTokens = rewardTokens_;\\n        address _receiptToken = receiptToken;\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; i++) {\\n            require(\\n                rewardTokens_[i] != _receiptToken &&\\n                    rewardTokens_[i] != address(collateralToken) &&\\n                    rewardTokens_[i] != pool &&\\n                    rewardTokens_[i] != address(crvLp),\\n                \\\"Invalid reward token\\\"\\n            );\\n        }\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function updateCrvSlippage(uint256 newCrvSlippage_) external onlyGovernor {\\n        require(newCrvSlippage_ < MAX_BPS, \\\"invalid-slippage-value\\\");\\n        emit CrvSlippageUpdated(crvSlippage, newCrvSlippage_);\\n        crvSlippage = newCrvSlippage_;\\n    }\\n\\n    function updateMasterOracle(IMasterOracle newMasterOracle_) external onlyGovernor {\\n        emit MasterOracleUpdated(masterOracle, newMasterOracle_);\\n        masterOracle = newMasterOracle_;\\n    }\\n}\\n\",\"keccak256\":\"0xa01171a5cdaa2a7ac206f94efcfa5f717c1d3a388530e6fe049c092e131abe58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610180604052600580546001600160a01b03191673d533a949740bb3306d119cc777fa900ba034cd521790553480156200003857600080fd5b50604051620054df380380620054df8339810160408190526200005b9162001049565b818888888888888786868686868686868360006001600160a01b038316620000ca5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620001225760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f0000000000000000006044820152606401620000c1565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200018057600080fd5b505afa15801562000195573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001bb91906200117f565b6001600160a01b03908116608052600080546001600160a01b03191691831691909117905562000202620001ec3390565b600362000ecf60201b62001a0d1790919060201c565b620002445760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401620000c1565b5050504661a86a14156200027e57600580546001600160a01b0319167347536f17f4ff30e64a96a7555826b8f9e66ec468179055620002e6565b4660891415620002b457600580546001600160a01b03191673172370d5cd63279efa6d502dab29171933a610af179055620002e6565b4661a4b11415620002e657600580546001600160a01b0319167311cdb42b0eb46d95f990bedd4695a6e3fa0349781790555b6000806000806f22d53366457f9d5e68ec105046fc43836001600160a01b031663a262904b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200033657600080fd5b505afa1580156200034b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200037191906200117f565b604051633795104960e01b81526001600160a01b038c811660048301529192509082169063379510499060240160206040518083038186803b158015620003b757600080fd5b505afa158015620003cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f291906200117f565b93506001600160a01b03841615806200063e5760405163940494f160e01b81526001600160a01b038c8116600483015283169063940494f190602401604080518083038186803b1580156200044657600080fd5b505afa1580156200045b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004819190620011a6565b602001518710620004ca5760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b6044820152606401620000c1565b60405163a77576ef60e01b81526001600160a01b038c8116600483015283169063a77576ef906024016101006040518083038186803b1580156200050d57600080fd5b505afa15801562000522573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000548919062001243565b87600881106200055c576200055c6200122d565b60200201516040516356059ffb60e01b81526001600160a01b038d81166004830152919450908316906356059ffb906024016101406040518083038186803b158015620005a857600080fd5b505afa158015620005bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005e39190620012d4565b5193506001600160a01b0384161580156200061a575073dcef968d416a41cdac0ed8702fac8128a64241a26001600160a01b038c16145b15620006385773cfc25170633581bf896cb6cdee170e3e3aa5950393505b62000a8e565b60405163124fd3dd60e21b8152600360048201526000906f22d53366457f9d5e68ec105046fc43839063493f4f749060240160206040518083038186803b1580156200068957600080fd5b505afa1580156200069e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c491906200117f565b60405163e4d332a960e01b81526001600160a01b038e811660048301529192509082169063e4d332a99060240160206040518083038186803b1580156200070a57600080fd5b505afa1580156200071f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000745919062001370565b15620008af5760405163eb73f37d60e01b81526001600160a01b038d8116600483015282169063eb73f37d90602401604080518083038186803b1580156200078c57600080fd5b505afa158015620007a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007c79190620011a6565b602001518810620008105760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b6044820152606401620000c1565b60405163a77576ef60e01b81526001600160a01b038d8116600483015282169063a77576ef906024016101006040518083038186803b1580156200085357600080fd5b505afa15801562000868573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200088e919062001243565b8860088110620008a257620008a26200122d565b6020020151935062000a0a565b60405163940494f160e01b81526001600160a01b038d8116600483015282169063940494f19060240160206040518083038186803b158015620008f157600080fd5b505afa15801562000906573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200092c91906200138e565b8810620009715760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b6044820152606401620000c1565b604051639ac90d3d60e01b81526001600160a01b038d81166004830152821690639ac90d3d9060240160806040518083038186803b158015620009b357600080fd5b505afa158015620009c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009ee9190620013a8565b886004811062000a025762000a026200122d565b602002015193505b60405163daf297b960e01b81526001600160a01b03808e1660048301528d975082169063daf297b99060240160206040518083038186803b15801562000a4f57600080fd5b505afa15801562000a64573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a8a91906200117f565b9450505b8b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ac857600080fd5b505afa15801562000add573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b0391906200117f565b6001600160a01b0316836001600160a01b03161462000b655760405162461bcd60e51b815260206004820152601360248201527f636f6c6c61746572616c2d6d69736d61746368000000000000000000000000006044820152606401620000c1565b6001600160a01b038b1662000bac5760405162461bcd60e51b815260206004820152600c60248201526b1c1bdbdb0b5a5ccb5b9d5b1b60a21b6044820152606401620000c1565b6001600160a01b03851662000bf15760405162461bcd60e51b815260206004820152600a6024820152691b1c0b5a5ccb5b9d5b1b60b21b6044820152606401620000c1565b6001600160a01b03841662000c395760405162461bcd60e51b815260206004820152600d60248201526c19d85d59d94b5a5ccb5b9d5b1b609a1b6044820152606401620000c1565b6001600160a01b03808c1660e05285811660c08190529085166101005260078b9055600080546001600160a01b0319169091179055610120879052855162000c8990600690602089019062000f41565b5088600860006101000a8154816001600160a01b0302191690836001600160a01b031602179055506009600560009054906101000a90046001600160a01b03169080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050505050505050505050505050505050600073f403c135812408bfbe8713b5a23a04b3d48aae316001600160a01b0316631526fe27836040518263ffffffff1660e01b815260040162000d6791815260200190565b60c06040518083038186803b15801562000d8057600080fd5b505afa15801562000d95573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dbb91906200142d565b50506001600160a01b0316610140525050506101609190915250604051631526fe2760e01b81526004810183905260009073f403c135812408bfbe8713b5a23a04b3d48aae3190631526fe279060240160c06040518083038186803b15801562000e2457600080fd5b505afa15801562000e39573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e5f91906200142d565b5050505050905060c0516001600160a01b0316816001600160a01b03161462000ec05760405162461bcd60e51b815260206004820152601260248201527134b731b7b93932b1ba16b63816ba37b5b2b760711b6044820152606401620000c1565b505050505050505050620014f9565b600062000ee6836001600160a01b03841662000eef565b90505b92915050565b600081815260018301602052604081205462000f385750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000ee9565b50600062000ee9565b82805462000f4f90620014bc565b90600052602060002090601f01602090048101928262000f73576000855562000fbe565b82601f1062000f8e57805160ff191683800117855562000fbe565b8280016001018555821562000fbe579182015b8281111562000fbe57825182559160200191906001019062000fa1565b5062000fcc92915062000fd0565b5090565b5b8082111562000fcc576000815560010162000fd1565b6001600160a01b038116811462000ffd57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562001041576200104162001000565b604052919050565b600080600080600080600080610100898b0312156200106757600080fd5b8851620010748162000fe7565b809850506020808a0151620010898162000fe7565b60408b015160608c01519199509750620010a38162000fe7565b60808b0151909650620010b68162000fe7565b60a08b015160c08c015160e08d015192975090955093506001600160401b0380821115620010e357600080fd5b818c0191508c601f830112620010f857600080fd5b8151818111156200110d576200110d62001000565b62001121601f8201601f1916850162001016565b91508082528d848285010111156200113857600080fd5b60005b81811015620011585783810185015183820186015284016200113b565b818111156200116a5760008583850101525b50508093505050509295985092959890939650565b6000602082840312156200119257600080fd5b81516200119f8162000fe7565b9392505050565b600060408284031215620011b957600080fd5b82601f830112620011c957600080fd5b604080519081016001600160401b0381118282101715620011ee57620011ee62001000565b80604052508060408401858111156200120657600080fd5b845b818110156200122257805183526020928301920162001208565b509195945050505050565b634e487b7160e01b600052603260045260246000fd5b60006101008083850312156200125857600080fd5b83601f8401126200126857600080fd5b6040518181016001600160401b03811182821017156200128c576200128c62001000565b604052908301908085831115620012a257600080fd5b845b83811015620012c9578051620012ba8162000fe7565b825260209182019101620012a4565b509095945050505050565b6000610140808385031215620012e957600080fd5b83601f840112620012f957600080fd5b6040518181016001600160401b03811182821017156200131d576200131d62001000565b6040529083019080858311156200133357600080fd5b845b83811015620012c95780516200134b8162000fe7565b82526020918201910162001335565b805180151581146200136b57600080fd5b919050565b6000602082840312156200138357600080fd5b62000ee6826200135a565b600060208284031215620013a157600080fd5b5051919050565b600060808284031215620013bb57600080fd5b82601f830112620013cb57600080fd5b604051608081016001600160401b0381118282101715620013f057620013f062001000565b6040528060808401858111156200140657600080fd5b845b81811015620012225780516200141e8162000fe7565b83526020928301920162001408565b60008060008060008060c087890312156200144757600080fd5b8651620014548162000fe7565b6020880151909650620014678162000fe7565b60408801519095506200147a8162000fe7565b60608801519094506200148d8162000fe7565b6080880151909350620014a08162000fe7565b9150620014b060a088016200135a565b90509295509295509295565b600181811c90821680620014d157607f821691505b60208210811415620014f357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051613dce620017116000396000818161059e01526136770152600081816104780152818161103601528181611bdd01528181611c9201528181611ef40152818161288501528181612ca60152613414015260008181610348015281816119980152818161214b0152818161303801526134ef0152600081816106040152612b8c0152600081816104d9015281816126a501528181612aaf01528181612e5a015261358a01526000818161040c01528181610c9c01528181610d2b015281816116dc0152818161209d015281816121eb015281816123fa01528181612b6a0152818161354b01526135db0152600081816102850152818161064c015281816107a10152818161093801528181610a5401528181610b3201528181610b8e01528181610ef40152818161106e0152818161110b01528181611337015281816115000152818161229501528181612ecc01528181612f6c01526134a90152600081816104b20152818161055a015281816108df0152818161099701528181610a3201528181610aa601528181610b6501528181610cd70152818161129b015281816117e2015281816119d80152818161220c0152818161231001528181612a8d01528181612ae10152818161300d01528181613092015281816131ea0152818161322c0152818161331001528181613487015261352a0152613dce6000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c8063a3f4df7e11610146578063d572fd7f116100c3578063e5328e0611610087578063e5328e06146105c0578063eaada382146105c8578063ec78e832146105db578063fc0c546a146105ee578063fd57a4df146105ff578063ffa1ad741461062657600080fd5b8063d572fd7f1461054f578063d8dfeb4514610558578063de603fdc1461057e578063e00af4a714610586578063e529ee951461059957600080fd5b8063c415b95c1161010a578063c415b95c146104fb578063c965fa8a1461050e578063ce5494bb14610516578063d2c35ce814610529578063d3033c391461053c57600080fd5b8063a3f4df7e1461045e578063a7404b7014610473578063abc9b45e1461049a578063b2016bd4146104ad578063b20fdc0d146104d457600080fd5b806374db9ad4116101d45780637d7c2a1c116101985780637d7c2a1c146103e45780637f44579b14610407578063945c91421461042e578063951dc22c1461044157806399b71d5c1461045657600080fd5b806374db9ad414610378578063759cb53b1461039357806375b0ffd1146103ae578063795dae66146103c95780637bb7bed1146103d157600080fd5b80632b3297f91161021b5780632b3297f9146102e75780632e1a7d4d146102fa5780634032b72b1461030d578063440d72481461032057806348cd2ddd1461034357600080fd5b806304f4efc51461025857806314ae9f2e1461026d57806316f0115b146102805780631848effa146102bd578063201e81a8146102d4575b600080fd5b61026b610266366004613954565b61064a565b005b61026b61027b366004613992565b61079f565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b6040516102b491906139af565b60405180910390f35b6102a76f22d53366457f9d5e68ec105046fc438381565b61026b6102e23660046139d9565b6108b1565b6002546102a7906001600160a01b031681565b61026b610308366004613954565b610935565b61026b61031b366004613992565b610b8c565b61033361032e366004613992565b610c98565b60405190151581526020016102b4565b61036a7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016102b4565b6102a773d061d61a4d941c39e5453435b6345dc261c2fce081565b6102a7734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b81565b6102a773f403c135812408bfbe8713b5a23a04b3d48aae3181565b61036a610d11565b6102a76103df366004613954565b610db5565b6103ec610ddf565b604080519384526020840192909252908201526060016102b4565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b6005546102a7906001600160a01b031681565b610449610e1c565b6040516102b49190613a9e565b61026b610e28565b610466610e64565b6040516102b49190613b17565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b61026b6104a8366004613992565b610ef2565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b6001546102a7906001600160a01b031681565b61036a61101c565b61026b610524366004613992565b61106b565b61026b610537366004613992565b611335565b61026b61054a366004613992565b6114fe565b61036a60075481565b7f00000000000000000000000000000000000000000000000000000000000000006102a7565b61036a6116bb565b61026b610594366004613992565b61176b565b61036a7f000000000000000000000000000000000000000000000000000000000000000081565b61036a611986565b6008546102a7906001600160a01b031681565b6000546102a7906001600160a01b031681565b6000546001600160a01b03166102a7565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b610466604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a357600080fd5b505afa1580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db9190613b4a565b6001600160a01b0316336001600160a01b0316146107145760405162461bcd60e51b815260040161070b90613b67565b60405180910390fd5b612710811061075e5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b604482015260640161070b565b60075460408051918252602082018390527f43a94473b3422f31e660358900c02b907f22142a3224beace1f2b9f1fa079a9e910160405180910390a1600755565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190613b4a565b6001600160a01b0316336001600160a01b0316146108605760405162461bcd60e51b815260040161070b90613b67565b61086b600382611a29565b6108ae5760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b604482015260640161070b565b50565b6108be335b600390611a3e565b6108da5760405162461bcd60e51b815260040161070b90613b9e565b6109037f0000000000000000000000000000000000000000000000000000000000000000611a60565b61090b611bd6565b805161091f916009916020909101906138c0565b5061092a6000612090565b6108ae600019612090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461097d5760405162461bcd60e51b815260040161070b90613bce565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906109cc9030906004016139af565b60206040518083038186803b1580156109e457600080fd5b505afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190613c01565b9050818110610a7d57610a796001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846120e1565b5050565b610a8f610a8a8284613c30565b612144565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610adb9030906004016139af565b60206040518083038186803b158015610af357600080fd5b505afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b9190613c01565b9050610a797f0000000000000000000000000000000000000000000000000000000000000000610b5b8484612246565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906120e1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610be557600080fd5b505afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190613b4a565b6001600160a01b0316336001600160a01b031614610c4d5760405162461bcd60e51b815260040161070b90613b67565b610c58600382611a0d565b6108ae5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161070b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610d0b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610d609030906004016139af565b60206040518083038186803b158015610d7857600080fd5b505afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190613c01565b905090565b60098181548110610dc557600080fd5b6000918252602090912001546001600160a01b0316905081565b60008080610dec336108b6565b610e085760405162461bcd60e51b815260040161070b90613b9e565b610e1061225c565b9250925092505b909192565b6060610db06003612301565b610e31336108b6565b610e4d5760405162461bcd60e51b815260040161070b90613b9e565b610e576000612090565b610e62600019612090565b565b60068054610e7190613c47565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9d90613c47565b8015610eea5780601f10610ebf57610100808354040283529160200191610eea565b820191906000526020600020905b815481529060010190602001808311610ecd57829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4b57600080fd5b505afa158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f839190613b4a565b6001600160a01b0316336001600160a01b031614610fb35760405162461bcd60e51b815260040161070b90613b67565b600854604080516001600160a01b03928316815291831660208301527fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c910160405180910390a1600880546001600160a01b0319166001600160a01b0392909216919091179055565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610d609030906004016139af565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146110b35760405162461bcd60e51b815260040161070b90613bce565b6001600160a01b0381166111095760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f00000000604482015260640161070b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116c57600080fd5b505afa158015611180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a49190613b4a565b6001600160a01b0316146111f35760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b604482015260640161070b565b6111fc8161230e565b6000546040516370a0823160e01b81526112959183916001600160a01b03909116906370a08231906112329030906004016139af565b60206040518083038186803b15801561124a57600080fd5b505afa15801561125e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112829190613c01565b6000546001600160a01b031691906120e1565b6108ae817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016112e591906139af565b60206040518083038186803b1580156112fd57600080fd5b505afa158015611311573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5b9190613c01565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561138e57600080fd5b505afa1580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c69190613b4a565b6001600160a01b0316336001600160a01b0316146113f65760405162461bcd60e51b815260040161070b90613b67565b6001600160a01b03811661144c5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f000000604482015260640161070b565b6001546001600160a01b03828116911614156114a25760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b604482015260640161070b565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561155757600080fd5b505afa15801561156b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158f9190613b4a565b6001600160a01b0316336001600160a01b0316146115bf5760405162461bcd60e51b815260040161070b90613b67565b6001600160a01b03811661160f5760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b604482015260640161070b565b6002546001600160a01b038281169116141561165f5760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b604482015260640161070b565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b60006116c561101c565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906117119030906004016139af565b60206040518083038186803b15801561172957600080fd5b505afa15801561173d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117619190613c01565b610db09190613c82565b611774336108b6565b6117905760405162461bcd60e51b815260040161070b90613b9e565b6001546001600160a01b03166117e05760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b604482015260640161070b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156118625760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604482015260640161070b565b61186b81610c98565b156118af5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b604482015260640161070b565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156118ea576001546108ae906001600160a01b0316476124e7565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906119199030906004016139af565b60206040518083038186803b15801561193157600080fd5b505afa158015611945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119699190613c01565b600154909150610a79906001600160a01b038481169116836120e1565b60006119c16119936116bb565b6119bc7f0000000000000000000000000000000000000000000000000000000000000000612600565b61267d565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906117119030906004016139af565b6000611a22836001600160a01b038416612727565b9392505050565b6000611a22836001600160a01b038416612776565b6001600160a01b03811660009081526001830160205260408120541515611a22565b611a68612869565b60095460005b81811015611bd157600060098281548110611a8b57611a8b613c9a565b60009182526020822001546040516370a0823160e01b81526001600160a01b03909116925082906370a0823190611ac69030906004016139af565b60206040518083038186803b158015611ade57600080fd5b505afa158015611af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b169190613c01565b90508015611bbc57600254604051636ccb2b0160e01b81526001600160a01b0384811660048301528781166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b158015611b8157600080fd5b505af1925050508015611bb1575060408051601f3d908101601f19168201909252611bae91810190613c01565b60015b611bba57611bbc565b505b50508080611bc990613cb0565b915050611a6e565b505050565b60606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b158015611c3457600080fd5b505afa158015611c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6c9190613c01565b905060005b81811015611df657604051632061aa2360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c354469060240160206040518083038186803b158015611cdc57600080fd5b505afa158015611cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d149190613b4a565b6001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611d4c57600080fd5b505afa158015611d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d849190613b4a565b90506001600160a01b03811673d533a949740bb3306d119cc777fa900ba034cd5214801590611dd057506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b15611de35783611ddf81613cb0565b9450505b5080611dee81613cb0565b915050611c71565b50611e02826002613c82565b67ffffffffffffffff811115611e1a57611e1a6139c3565b604051908082528060200260200182016040528015611e43578160200160208202803683370190505b50925073d533a949740bb3306d119cc777fa900ba034cd5283600081518110611e6e57611e6e613c9a565b60200260200101906001600160a01b031690816001600160a01b031681525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b83600181518110611eb657611eb6613c9a565b6001600160a01b0390921660209283029190910190910152600260005b8281101561208957604051632061aa2360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c354469060240160206040518083038186803b158015611f3e57600080fd5b505afa158015611f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f769190613b4a565b6001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611fae57600080fd5b505afa158015611fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe69190613b4a565b90506001600160a01b03811673d533a949740bb3306d119cc777fa900ba034cd521480159061203257506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b156120765780868461204381613cb0565b95508151811061205557612055613c9a565b60200260200101906001600160a01b031690816001600160a01b0316815250505b508061208181613cb0565b915050611ed3565b5050505090565b6120d86001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673f403c135812408bfbe8713b5a23a04b3d48aae318361294b565b6108ae81612a6f565b6040516001600160a01b038316602482015260448101829052611bd190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612bb1565b600061216f7f0000000000000000000000000000000000000000000000000000000000000000612600565b9050600061217b610d11565b9050600061218761101c565b6121919083613c82565b905060006121bc6121a2838661267d565b6121ac8488613ccb565b6121b69190613cea565b83612246565b9050806121ca575050505050565b828111156121e4576121e46121df8483613c30565b612c83565b60006122317f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084612d76565b905061223e828287612e33565b505050505050565b60008183106122555781611a22565b5090919050565b6000806000612269612ec4565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b1580156122e157600080fd5b505af11580156122f5573d6000803e3d6000fd5b50505050610e176132f5565b60606000611a22836133a2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561237157600080fd5b505afa158015612385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a99190613b4a565b6001600160a01b0316146123f85760405162461bcd60e51b81526020600482015260166024820152753bb937b73396b1b7b63630ba32b930b616ba37b5b2b760511b604482015260640161070b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561245b57600080fd5b505afa15801561246f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124939190613b4a565b6001600160a01b0316146124df5760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b604482015260640161070b565b6108ae6133fe565b804710156125375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161070b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612584576040519150601f19603f3d011682016040523d82523d6000602084013e612589565b606091505b5050905080611bd15760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161070b565b600060016001607f1b0319821215801561261d57506001607f1b82125b6126795760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840161070b565b5090565b60008215610d0b5760405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d79060440160206040518083038186803b1580156126ef57600080fd5b505afa158015612703573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a229190613c01565b600081815260018301602052604081205461276e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d0b565b506000610d0b565b6000818152600183016020526040812054801561285f57600061279a600183613c30565b85549091506000906127ae90600190613c30565b90508181146128135760008660000182815481106127ce576127ce613c9a565b90600052602060002001549050808760000184815481106127f1576127f1613c9a565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061282457612824613d0c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d0b565b6000915050610d0b565b604051637050ccd960e01b8152306004820152600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637050ccd990604401602060405180830381600087803b1580156128d157600080fd5b505af11580156128e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129099190613d22565b610e625760405162461bcd60e51b81526020600482015260136024820152721c995dd85c990b58db185a5b4b59985a5b1959606a1b604482015260640161070b565b8015806129d45750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561299a57600080fd5b505afa1580156129ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d29190613c01565b155b612a3f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161070b565b6040516001600160a01b038316602482015260448101829052611bd190849063095ea7b360e01b9060640161210d565b612a788161347a565b6002546001600160a01b0390811690612ad4907f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008461294b565b612b086001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016828461294b565b60095460005b81811015612b5c57612b4a838560098481548110612b2e57612b2e613c9a565b6000918252602090912001546001600160a01b0316919061294b565b80612b5481613cb0565b915050612b0e565b50611bd16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008561294b565b6000612c06826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134ce9092919063ffffffff16565b805190915015611bd15780806020019051810190612c249190613d22565b611bd15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161070b565b80156108ae57604051636197390160e11b815260048101829052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c32e720290604401602060405180830381600087803b158015612cf257600080fd5b505af1158015612d06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2a9190613d22565b6108ae5760405162461bcd60e51b815260206004820152601a60248201527f77697468647261772d616e642d756e777261702d6661696c6564000000000000604482015260640161070b565b6000612710600754612710612d8b9190613c30565b600854604051632d9198e160e21b81526001600160a01b0388811660048301528781166024830152604482018790529091169063b64663849060640160206040518083038186803b158015612ddf57600080fd5b505afa158015612df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e179190613c01565b612e219190613ccb565b612e2b9190613cea565b949350505050565b604051630d2680e960e11b815260048101849052600f82900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d2906064015b600060405180830381600087803b158015612ea757600080fd5b505af1158015612ebb573d6000803e3d6000fd5b50505050505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401612f1691906139af565b60206040518083038186803b158015612f2e57600080fd5b505afa158015612f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f669190613c01565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401612fb691906139af565b60206040518083038186803b158015612fce57600080fd5b505afa158015612fe2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130069190613c01565b90506130317f0000000000000000000000000000000000000000000000000000000000000000611a60565b600061305c7f0000000000000000000000000000000000000000000000000000000000000000612600565b90506000613068610d11565b9050600061307461101c565b61307e9083613c82565b9050600061308c828561267d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016130dc91906139af565b60206040518083038186803b1580156130f457600080fd5b505afa158015613108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312c9190613c01565b9050600061313a8383613c82565b9050868111156131555761314e8782613c30565b9a50613162565b61315f8188613c30565b99505b600061316e898d613c82565b9050828111156132b857600061318d6131878584613c30565b86612246565b905080156132b65760006131b5866131a58985613ccb565b6131af9190613cea565b88612246565b905080156132b457878111156131d2576131d26121df8983613c30565b60005461321590829061320f906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083612d76565b8b612e33565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906132619030906004016139af565b60206040518083038186803b15801561327957600080fd5b505afa15801561328d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b19190613c01565b94505b505b505b6132c2838a612246565b99508983116132d25760006132e5565b6132e56132df8b85613c30565b8d612246565b9b50505050505050505050909192565b6040516370a0823160e01b815261339a906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906133459030906004016139af565b60206040518083038186803b15801561335d57600080fd5b505afa158015613371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133959190613c01565b6134dd565b610e626135c1565b6060816000018054806020026020016040519081016040528092919081815260200182805480156133f257602002820191906000526020600020905b8154815260200190600101908083116133de575b50505050509050919050565b6040516324f81cd160e11b8152600160048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906349f039a290602401600060405180830381600087803b15801561346057600080fd5b505af1158015613474573d6000803e3d6000fd5b50505050565b6108ae6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361294b565b6060612e2b848460008561375f565b80156108ae576134eb613921565b81817f00000000000000000000000000000000000000000000000000000000000000006002811061351e5761351e613c9a565b602002015260006135707f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085612d76565b604051630b4c7e4d60e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630b4c7e4d90612e8d9085908590600401613d44565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906136109030906004016139af565b60206040518083038186803b15801561362857600080fd5b505afa15801561363c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136609190613c01565b905080156108ae576040516321d0683360e11b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290526001604482015273f403c135812408bfbe8713b5a23a04b3d48aae31906343a0d06690606401602060405180830381600087803b1580156136e257600080fd5b505af11580156136f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371a9190613d22565b6108ae5760405162461bcd60e51b8152602060048201526016602482015275189bdbdcdd195c8b59195c1bdcda5d0b59985a5b195960521b604482015260640161070b565b6060824710156137c05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161070b565b843b61380e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161070b565b600080866001600160a01b0316858760405161382a9190613d7c565b60006040518083038185875af1925050503d8060008114613867576040519150601f19603f3d011682016040523d82523d6000602084013e61386c565b606091505b509150915061387c828286613887565b979650505050505050565b60608315613896575081611a22565b8251156138a65782518084602001fd5b8160405162461bcd60e51b815260040161070b9190613b17565b828054828255906000526020600020908101928215613915579160200282015b8281111561391557825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906138e0565b5061267992915061393f565b60405180604001604052806002906020820280368337509192915050565b5b808211156126795760008155600101613940565b60006020828403121561396657600080fd5b5035919050565b6001600160a01b03811681146108ae57600080fd5b803561398d8161396d565b919050565b6000602082840312156139a457600080fd5b8135611a228161396d565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156139ec57600080fd5b823567ffffffffffffffff80821115613a0457600080fd5b818501915085601f830112613a1857600080fd5b813581811115613a2a57613a2a6139c3565b8060051b604051601f19603f83011681018181108582111715613a4f57613a4f6139c3565b604052918252848201925083810185019188831115613a6d57600080fd5b938501935b82851015613a9257613a8385613982565b84529385019392850192613a72565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613adf5783516001600160a01b031683529284019291840191600101613aba565b50909695505050505050565b60005b83811015613b06578181015183820152602001613aee565b838111156134745750506000910152565b6020815260008251806020840152613b36816040850160208701613aeb565b601f01601f19169190910160400192915050565b600060208284031215613b5c57600080fd5b8151611a228161396d565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600060208284031215613c1357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613c4257613c42613c1a565b500390565b600181811c90821680613c5b57607f821691505b60208210811415613c7c57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115613c9557613c95613c1a565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613cc457613cc4613c1a565b5060010190565b6000816000190483118215151615613ce557613ce5613c1a565b500290565b600082613d0757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613d3457600080fd5b81518015158114611a2257600080fd5b60608101818460005b6002811015613d6c578151835260209283019290910190600101613d4d565b5050508260408301529392505050565b60008251613d8e818460208701613aeb565b919091019291505056fea26469706673582212209120bdb297341817579e73659cb82099f7b828dd41f725911538d7ddd2a5bb8764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c8063a3f4df7e11610146578063d572fd7f116100c3578063e5328e0611610087578063e5328e06146105c0578063eaada382146105c8578063ec78e832146105db578063fc0c546a146105ee578063fd57a4df146105ff578063ffa1ad741461062657600080fd5b8063d572fd7f1461054f578063d8dfeb4514610558578063de603fdc1461057e578063e00af4a714610586578063e529ee951461059957600080fd5b8063c415b95c1161010a578063c415b95c146104fb578063c965fa8a1461050e578063ce5494bb14610516578063d2c35ce814610529578063d3033c391461053c57600080fd5b8063a3f4df7e1461045e578063a7404b7014610473578063abc9b45e1461049a578063b2016bd4146104ad578063b20fdc0d146104d457600080fd5b806374db9ad4116101d45780637d7c2a1c116101985780637d7c2a1c146103e45780637f44579b14610407578063945c91421461042e578063951dc22c1461044157806399b71d5c1461045657600080fd5b806374db9ad414610378578063759cb53b1461039357806375b0ffd1146103ae578063795dae66146103c95780637bb7bed1146103d157600080fd5b80632b3297f91161021b5780632b3297f9146102e75780632e1a7d4d146102fa5780634032b72b1461030d578063440d72481461032057806348cd2ddd1461034357600080fd5b806304f4efc51461025857806314ae9f2e1461026d57806316f0115b146102805780631848effa146102bd578063201e81a8146102d4575b600080fd5b61026b610266366004613954565b61064a565b005b61026b61027b366004613992565b61079f565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b6040516102b491906139af565b60405180910390f35b6102a76f22d53366457f9d5e68ec105046fc438381565b61026b6102e23660046139d9565b6108b1565b6002546102a7906001600160a01b031681565b61026b610308366004613954565b610935565b61026b61031b366004613992565b610b8c565b61033361032e366004613992565b610c98565b60405190151581526020016102b4565b61036a7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016102b4565b6102a773d061d61a4d941c39e5453435b6345dc261c2fce081565b6102a7734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b81565b6102a773f403c135812408bfbe8713b5a23a04b3d48aae3181565b61036a610d11565b6102a76103df366004613954565b610db5565b6103ec610ddf565b604080519384526020840192909252908201526060016102b4565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b6005546102a7906001600160a01b031681565b610449610e1c565b6040516102b49190613a9e565b61026b610e28565b610466610e64565b6040516102b49190613b17565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b61026b6104a8366004613992565b610ef2565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b6001546102a7906001600160a01b031681565b61036a61101c565b61026b610524366004613992565b61106b565b61026b610537366004613992565b611335565b61026b61054a366004613992565b6114fe565b61036a60075481565b7f00000000000000000000000000000000000000000000000000000000000000006102a7565b61036a6116bb565b61026b610594366004613992565b61176b565b61036a7f000000000000000000000000000000000000000000000000000000000000000081565b61036a611986565b6008546102a7906001600160a01b031681565b6000546102a7906001600160a01b031681565b6000546001600160a01b03166102a7565b6102a77f000000000000000000000000000000000000000000000000000000000000000081565b610466604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a357600080fd5b505afa1580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db9190613b4a565b6001600160a01b0316336001600160a01b0316146107145760405162461bcd60e51b815260040161070b90613b67565b60405180910390fd5b612710811061075e5760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b604482015260640161070b565b60075460408051918252602082018390527f43a94473b3422f31e660358900c02b907f22142a3224beace1f2b9f1fa079a9e910160405180910390a1600755565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190613b4a565b6001600160a01b0316336001600160a01b0316146108605760405162461bcd60e51b815260040161070b90613b67565b61086b600382611a29565b6108ae5760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b604482015260640161070b565b50565b6108be335b600390611a3e565b6108da5760405162461bcd60e51b815260040161070b90613b9e565b6109037f0000000000000000000000000000000000000000000000000000000000000000611a60565b61090b611bd6565b805161091f916009916020909101906138c0565b5061092a6000612090565b6108ae600019612090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461097d5760405162461bcd60e51b815260040161070b90613bce565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906109cc9030906004016139af565b60206040518083038186803b1580156109e457600080fd5b505afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190613c01565b9050818110610a7d57610a796001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846120e1565b5050565b610a8f610a8a8284613c30565b612144565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610adb9030906004016139af565b60206040518083038186803b158015610af357600080fd5b505afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b9190613c01565b9050610a797f0000000000000000000000000000000000000000000000000000000000000000610b5b8484612246565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906120e1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610be557600080fd5b505afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190613b4a565b6001600160a01b0316336001600160a01b031614610c4d5760405162461bcd60e51b815260040161070b90613b67565b610c58600382611a0d565b6108ae5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161070b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610d0b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610d609030906004016139af565b60206040518083038186803b158015610d7857600080fd5b505afa158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190613c01565b905090565b60098181548110610dc557600080fd5b6000918252602090912001546001600160a01b0316905081565b60008080610dec336108b6565b610e085760405162461bcd60e51b815260040161070b90613b9e565b610e1061225c565b9250925092505b909192565b6060610db06003612301565b610e31336108b6565b610e4d5760405162461bcd60e51b815260040161070b90613b9e565b610e576000612090565b610e62600019612090565b565b60068054610e7190613c47565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9d90613c47565b8015610eea5780601f10610ebf57610100808354040283529160200191610eea565b820191906000526020600020905b815481529060010190602001808311610ecd57829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4b57600080fd5b505afa158015610f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f839190613b4a565b6001600160a01b0316336001600160a01b031614610fb35760405162461bcd60e51b815260040161070b90613b67565b600854604080516001600160a01b03928316815291831660208301527fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c910160405180910390a1600880546001600160a01b0319166001600160a01b0392909216919091179055565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610d609030906004016139af565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146110b35760405162461bcd60e51b815260040161070b90613bce565b6001600160a01b0381166111095760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f00000000604482015260640161070b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116c57600080fd5b505afa158015611180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a49190613b4a565b6001600160a01b0316146111f35760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b604482015260640161070b565b6111fc8161230e565b6000546040516370a0823160e01b81526112959183916001600160a01b03909116906370a08231906112329030906004016139af565b60206040518083038186803b15801561124a57600080fd5b505afa15801561125e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112829190613c01565b6000546001600160a01b031691906120e1565b6108ae817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016112e591906139af565b60206040518083038186803b1580156112fd57600080fd5b505afa158015611311573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5b9190613c01565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561138e57600080fd5b505afa1580156113a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c69190613b4a565b6001600160a01b0316336001600160a01b0316146113f65760405162461bcd60e51b815260040161070b90613b67565b6001600160a01b03811661144c5760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f000000604482015260640161070b565b6001546001600160a01b03828116911614156114a25760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b604482015260640161070b565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561155757600080fd5b505afa15801561156b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158f9190613b4a565b6001600160a01b0316336001600160a01b0316146115bf5760405162461bcd60e51b815260040161070b90613b67565b6001600160a01b03811661160f5760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b604482015260640161070b565b6002546001600160a01b038281169116141561165f5760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b604482015260640161070b565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b60006116c561101c565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906117119030906004016139af565b60206040518083038186803b15801561172957600080fd5b505afa15801561173d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117619190613c01565b610db09190613c82565b611774336108b6565b6117905760405162461bcd60e51b815260040161070b90613b9e565b6001546001600160a01b03166117e05760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b604482015260640161070b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156118625760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604482015260640161070b565b61186b81610c98565b156118af5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b604482015260640161070b565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156118ea576001546108ae906001600160a01b0316476124e7565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906119199030906004016139af565b60206040518083038186803b15801561193157600080fd5b505afa158015611945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119699190613c01565b600154909150610a79906001600160a01b038481169116836120e1565b60006119c16119936116bb565b6119bc7f0000000000000000000000000000000000000000000000000000000000000000612600565b61267d565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906117119030906004016139af565b6000611a22836001600160a01b038416612727565b9392505050565b6000611a22836001600160a01b038416612776565b6001600160a01b03811660009081526001830160205260408120541515611a22565b611a68612869565b60095460005b81811015611bd157600060098281548110611a8b57611a8b613c9a565b60009182526020822001546040516370a0823160e01b81526001600160a01b03909116925082906370a0823190611ac69030906004016139af565b60206040518083038186803b158015611ade57600080fd5b505afa158015611af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b169190613c01565b90508015611bbc57600254604051636ccb2b0160e01b81526001600160a01b0384811660048301528781166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b158015611b8157600080fd5b505af1925050508015611bb1575060408051601f3d908101601f19168201909252611bae91810190613c01565b60015b611bba57611bbc565b505b50508080611bc990613cb0565b915050611a6e565b505050565b60606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d55a23f46040518163ffffffff1660e01b815260040160206040518083038186803b158015611c3457600080fd5b505afa158015611c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6c9190613c01565b905060005b81811015611df657604051632061aa2360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c354469060240160206040518083038186803b158015611cdc57600080fd5b505afa158015611cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d149190613b4a565b6001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611d4c57600080fd5b505afa158015611d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d849190613b4a565b90506001600160a01b03811673d533a949740bb3306d119cc777fa900ba034cd5214801590611dd057506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b15611de35783611ddf81613cb0565b9450505b5080611dee81613cb0565b915050611c71565b50611e02826002613c82565b67ffffffffffffffff811115611e1a57611e1a6139c3565b604051908082528060200260200182016040528015611e43578160200160208202803683370190505b50925073d533a949740bb3306d119cc777fa900ba034cd5283600081518110611e6e57611e6e613c9a565b60200260200101906001600160a01b031690816001600160a01b031681525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b83600181518110611eb657611eb6613c9a565b6001600160a01b0390921660209283029190910190910152600260005b8281101561208957604051632061aa2360e11b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c354469060240160206040518083038186803b158015611f3e57600080fd5b505afa158015611f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f769190613b4a565b6001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611fae57600080fd5b505afa158015611fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe69190613b4a565b90506001600160a01b03811673d533a949740bb3306d119cc777fa900ba034cd521480159061203257506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b156120765780868461204381613cb0565b95508151811061205557612055613c9a565b60200260200101906001600160a01b031690816001600160a01b0316815250505b508061208181613cb0565b915050611ed3565b5050505090565b6120d86001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001673f403c135812408bfbe8713b5a23a04b3d48aae318361294b565b6108ae81612a6f565b6040516001600160a01b038316602482015260448101829052611bd190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612bb1565b600061216f7f0000000000000000000000000000000000000000000000000000000000000000612600565b9050600061217b610d11565b9050600061218761101c565b6121919083613c82565b905060006121bc6121a2838661267d565b6121ac8488613ccb565b6121b69190613cea565b83612246565b9050806121ca575050505050565b828111156121e4576121e46121df8483613c30565b612c83565b60006122317f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084612d76565b905061223e828287612e33565b505050505050565b60008183106122555781611a22565b5090919050565b6000806000612269612ec4565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b1580156122e157600080fd5b505af11580156122f5573d6000803e3d6000fd5b50505050610e176132f5565b60606000611a22836133a2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561237157600080fd5b505afa158015612385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a99190613b4a565b6001600160a01b0316146123f85760405162461bcd60e51b81526020600482015260166024820152753bb937b73396b1b7b63630ba32b930b616ba37b5b2b760511b604482015260640161070b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561245b57600080fd5b505afa15801561246f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124939190613b4a565b6001600160a01b0316146124df5760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b604482015260640161070b565b6108ae6133fe565b804710156125375760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161070b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612584576040519150601f19603f3d011682016040523d82523d6000602084013e612589565b606091505b5050905080611bd15760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161070b565b600060016001607f1b0319821215801561261d57506001607f1b82125b6126795760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840161070b565b5090565b60008215610d0b5760405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d79060440160206040518083038186803b1580156126ef57600080fd5b505afa158015612703573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a229190613c01565b600081815260018301602052604081205461276e57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610d0b565b506000610d0b565b6000818152600183016020526040812054801561285f57600061279a600183613c30565b85549091506000906127ae90600190613c30565b90508181146128135760008660000182815481106127ce576127ce613c9a565b90600052602060002001549050808760000184815481106127f1576127f1613c9a565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061282457612824613d0c565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610d0b565b6000915050610d0b565b604051637050ccd960e01b8152306004820152600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637050ccd990604401602060405180830381600087803b1580156128d157600080fd5b505af11580156128e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129099190613d22565b610e625760405162461bcd60e51b81526020600482015260136024820152721c995dd85c990b58db185a5b4b59985a5b1959606a1b604482015260640161070b565b8015806129d45750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561299a57600080fd5b505afa1580156129ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d29190613c01565b155b612a3f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161070b565b6040516001600160a01b038316602482015260448101829052611bd190849063095ea7b360e01b9060640161210d565b612a788161347a565b6002546001600160a01b0390811690612ad4907f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008461294b565b612b086001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016828461294b565b60095460005b81811015612b5c57612b4a838560098481548110612b2e57612b2e613c9a565b6000918252602090912001546001600160a01b0316919061294b565b80612b5481613cb0565b915050612b0e565b50611bd16001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008561294b565b6000612c06826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134ce9092919063ffffffff16565b805190915015611bd15780806020019051810190612c249190613d22565b611bd15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161070b565b80156108ae57604051636197390160e11b815260048101829052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c32e720290604401602060405180830381600087803b158015612cf257600080fd5b505af1158015612d06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2a9190613d22565b6108ae5760405162461bcd60e51b815260206004820152601a60248201527f77697468647261772d616e642d756e777261702d6661696c6564000000000000604482015260640161070b565b6000612710600754612710612d8b9190613c30565b600854604051632d9198e160e21b81526001600160a01b0388811660048301528781166024830152604482018790529091169063b64663849060640160206040518083038186803b158015612ddf57600080fd5b505afa158015612df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e179190613c01565b612e219190613ccb565b612e2b9190613cea565b949350505050565b604051630d2680e960e11b815260048101849052600f82900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d2906064015b600060405180830381600087803b158015612ea757600080fd5b505af1158015612ebb573d6000803e3d6000fd5b50505050505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401612f1691906139af565b60206040518083038186803b158015612f2e57600080fd5b505afa158015612f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f669190613c01565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b8152600401612fb691906139af565b60206040518083038186803b158015612fce57600080fd5b505afa158015612fe2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130069190613c01565b90506130317f0000000000000000000000000000000000000000000000000000000000000000611a60565b600061305c7f0000000000000000000000000000000000000000000000000000000000000000612600565b90506000613068610d11565b9050600061307461101c565b61307e9083613c82565b9050600061308c828561267d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016130dc91906139af565b60206040518083038186803b1580156130f457600080fd5b505afa158015613108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312c9190613c01565b9050600061313a8383613c82565b9050868111156131555761314e8782613c30565b9a50613162565b61315f8188613c30565b99505b600061316e898d613c82565b9050828111156132b857600061318d6131878584613c30565b86612246565b905080156132b65760006131b5866131a58985613ccb565b6131af9190613cea565b88612246565b905080156132b457878111156131d2576131d26121df8983613c30565b60005461321590829061320f906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083612d76565b8b612e33565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906132619030906004016139af565b60206040518083038186803b15801561327957600080fd5b505afa15801561328d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b19190613c01565b94505b505b505b6132c2838a612246565b99508983116132d25760006132e5565b6132e56132df8b85613c30565b8d612246565b9b50505050505050505050909192565b6040516370a0823160e01b815261339a906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906133459030906004016139af565b60206040518083038186803b15801561335d57600080fd5b505afa158015613371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133959190613c01565b6134dd565b610e626135c1565b6060816000018054806020026020016040519081016040528092919081815260200182805480156133f257602002820191906000526020600020905b8154815260200190600101908083116133de575b50505050509050919050565b6040516324f81cd160e11b8152600160048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906349f039a290602401600060405180830381600087803b15801561346057600080fd5b505af1158015613474573d6000803e3d6000fd5b50505050565b6108ae6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000008361294b565b6060612e2b848460008561375f565b80156108ae576134eb613921565b81817f00000000000000000000000000000000000000000000000000000000000000006002811061351e5761351e613c9a565b602002015260006135707f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085612d76565b604051630b4c7e4d60e01b81529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630b4c7e4d90612e8d9085908590600401613d44565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906136109030906004016139af565b60206040518083038186803b15801561362857600080fd5b505afa15801561363c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136609190613c01565b905080156108ae576040516321d0683360e11b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290526001604482015273f403c135812408bfbe8713b5a23a04b3d48aae31906343a0d06690606401602060405180830381600087803b1580156136e257600080fd5b505af11580156136f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371a9190613d22565b6108ae5760405162461bcd60e51b8152602060048201526016602482015275189bdbdcdd195c8b59195c1bdcda5d0b59985a5b195960521b604482015260640161070b565b6060824710156137c05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161070b565b843b61380e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161070b565b600080866001600160a01b0316858760405161382a9190613d7c565b60006040518083038185875af1925050503d8060008114613867576040519150601f19603f3d011682016040523d82523d6000602084013e61386c565b606091505b509150915061387c828286613887565b979650505050505050565b60608315613896575081611a22565b8251156138a65782518084602001fd5b8160405162461bcd60e51b815260040161070b9190613b17565b828054828255906000526020600020908101928215613915579160200282015b8281111561391557825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906138e0565b5061267992915061393f565b60405180604001604052806002906020820280368337509192915050565b5b808211156126795760008155600101613940565b60006020828403121561396657600080fd5b5035919050565b6001600160a01b03811681146108ae57600080fd5b803561398d8161396d565b919050565b6000602082840312156139a457600080fd5b8135611a228161396d565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156139ec57600080fd5b823567ffffffffffffffff80821115613a0457600080fd5b818501915085601f830112613a1857600080fd5b813581811115613a2a57613a2a6139c3565b8060051b604051601f19603f83011681018181108582111715613a4f57613a4f6139c3565b604052918252848201925083810185019188831115613a6d57600080fd5b938501935b82851015613a9257613a8385613982565b84529385019392850192613a72565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613adf5783516001600160a01b031683529284019291840191600101613aba565b50909695505050505050565b60005b83811015613b06578181015183820152602001613aee565b838111156134745750506000910152565b6020815260008251806020840152613b36816040850160208701613aeb565b601f01601f19169190910160400192915050565b600060208284031215613b5c57600080fd5b8151611a228161396d565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600060208284031215613c1357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613c4257613c42613c1a565b500390565b600181811c90821680613c5b57607f821691505b60208210811415613c7c57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115613c9557613c95613c1a565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613cc457613cc4613c1a565b5060010190565b6000816000190483118215151615613ce557613ce5613c1a565b500290565b600082613d0757634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613d3457600080fd5b81518015158114611a2257600080fd5b60608101818460005b6002811015613d6c578151835260209283019290910190600101613d4d565b5050508260408301529392505050565b60008251613d8e818460208701613aeb565b919091019291505056fea26469706673582212209120bdb297341817579e73659cb82099f7b828dd41f725911538d7ddd2a5bb8764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "isReservedToken(address)": {
        "details": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "setRewardTokens(address[])": {
        "details": "convex pool can add new rewards. This method refresh list."
      },
      "sweepERC20(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "This strategy will deposit collateral token in a Curve 2Pool and stake lp token to convex.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "sweepERC20(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns collateral balance + collateral deposited to curve"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11599,
        "contract": "vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol:Convex2PlainPool",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11605,
        "contract": "vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol:Convex2PlainPool",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11608,
        "contract": "vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol:Convex2PlainPool",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)11572"
      },
      {
        "astId": 11621,
        "contract": "vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol:Convex2PlainPool",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3004_storage"
      },
      {
        "astId": 16731,
        "contract": "vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol:Convex2PlainPool",
        "label": "CRV",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 16733,
        "contract": "vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol:Convex2PlainPool",
        "label": "NAME",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 16737,
        "contract": "vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol:Convex2PlainPool",
        "label": "crvSlippage",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 16740,
        "contract": "vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol:Convex2PlainPool",
        "label": "masterOracle",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IMasterOracle)11505"
      },
      {
        "astId": 16743,
        "contract": "vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol:Convex2PlainPool",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMasterOracle)11505": {
        "encoding": "inplace",
        "label": "contract IMasterOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IRoutedSwapper)11572": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3004_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3003,
            "contract": "vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol:Convex2PlainPool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2703_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2703_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2698,
            "contract": "vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol:Convex2PlainPool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2702,
            "contract": "vesper-strategies/contracts/strategies/convex/2Pool/Convex2PlainPool.sol:Convex2PlainPool",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}