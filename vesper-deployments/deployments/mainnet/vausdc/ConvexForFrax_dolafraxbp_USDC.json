{
  "address": "0xba3905a11280c9a00c0FF1a1Ee257aD372bceFA0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "crvPool_",
          "type": "address"
        },
        {
          "internalType": "enum Curve.PoolType",
          "name": "curvePoolType_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "depositZap_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "crvToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "crvSlippage_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "masterOracle_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapper_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralIdx_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "convexPoolId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCrvSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCrvSlippage",
          "type": "uint256"
        }
      ],
      "name": "CrvSlippageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IMasterOracle",
          "name": "oldMasterOracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle",
          "type": "address"
        }
      ],
      "name": "MasterOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldUnlockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newUnlockTime",
          "type": "uint256"
        }
      ],
      "name": "UnlockTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESS_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CRV_MINTER",
      "outputs": [
        {
          "internalType": "contract ITokenMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CVX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FXS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IConvexFraxPoolRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IVaultRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralIdx",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvGauge",
      "outputs": [
        {
          "internalType": "contract ILiquidityGaugeV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvLp",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crvSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curvePoolType",
      "outputs": [
        {
          "internalType": "enum Curve.PoolType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fraxStaking",
      "outputs": [
        {
          "internalType": "contract IFraxFarmERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kekId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceHere",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpHere",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceHereAndStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpHereAndStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpBalanceStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterOracle",
      "outputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "contract IMultiReward",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCrvSlippage_",
          "type": "uint256"
        }
      ],
      "name": "updateCrvSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLockPeriod_",
          "type": "uint256"
        }
      ],
      "name": "updateLockPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterOracle",
          "name": "newMasterOracle_",
          "type": "address"
        }
      ],
      "name": "updateMasterOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IStakingProxyConvex",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ea9a642f39bfe208c32083624862f6f01cd857367204de091433aeae6e8a738",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xba3905a11280c9a00c0FF1a1Ee257aD372bceFA0",
    "transactionIndex": 35,
    "gasUsed": "5208880",
    "logsBloom": "0x00000400040000000000000000000000000000000010000080800000000000000000000400000000000000400000800000000000000000000400200000200000000480000000000000000000000000000000000000000000000000100000000000000800200000000000000000000000020000008000000000000000000000000000000400000000000000000000000000000000000000000000800400000000020000000100000000000002040000000000000000008000000000000000000200000000000000000000000000080000000000000000000000000000000000000010000000000000000000000000000000000200000000010000080000001000",
    "blockHash": "0x1bcde6e88a61bcfb0c673a331d9f77d3b71073bd51b2446e1ad30dd6e62657b2",
    "transactionHash": "0x5ea9a642f39bfe208c32083624862f6f01cd857367204de091433aeae6e8a738",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 16034682,
        "transactionHash": "0x5ea9a642f39bfe208c32083624862f6f01cd857367204de091433aeae6e8a738",
        "address": "0x41a5881c17185383e19Df6FA4EC158a6F4851A69",
        "topics": [
          "0xc3a719ac2c66bb292413ff9bb5cc91f486266e1b70bf1b394f666fc761ec64a3",
          "0x000000000000000000000000ba3905a11280c9a00c0ff1a1ee257ad372bcefa0",
          "0x000000000000000000000000000000000000000000000000000000000000001b"
        ],
        "data": "0x",
        "logIndex": 102,
        "blockHash": "0x1bcde6e88a61bcfb0c673a331d9f77d3b71073bd51b2446e1ad30dd6e62657b2"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 16034682,
        "transactionHash": "0x5ea9a642f39bfe208c32083624862f6f01cd857367204de091433aeae6e8a738",
        "address": "0xF06c8696730cf760619e4fA0eDd0f79ea50531A9",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e8bb82608a389dee9582187d0322817ecf64f20d",
          "0x000000000000000000000000e7211e87d60177575846936f2123b5fa6f0ce8ab"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 103,
        "blockHash": "0x1bcde6e88a61bcfb0c673a331d9f77d3b71073bd51b2446e1ad30dd6e62657b2"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 16034682,
        "transactionHash": "0x5ea9a642f39bfe208c32083624862f6f01cd857367204de091433aeae6e8a738",
        "address": "0xE57180685E3348589E9521aa53Af0BCD497E884d",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e8bb82608a389dee9582187d0322817ecf64f20d",
          "0x000000000000000000000000f06c8696730cf760619e4fa0edd0f79ea50531a9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 104,
        "blockHash": "0x1bcde6e88a61bcfb0c673a331d9f77d3b71073bd51b2446e1ad30dd6e62657b2"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 16034682,
        "transactionHash": "0x5ea9a642f39bfe208c32083624862f6f01cd857367204de091433aeae6e8a738",
        "address": "0xf7eCC27CC9DB5d28110AF2d89b176A6623c7E351",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e8bb82608a389dee9582187d0322817ecf64f20d",
          "0x000000000000000000000000f06c8696730cf760619e4fa0edd0f79ea50531a9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 105,
        "blockHash": "0x1bcde6e88a61bcfb0c673a331d9f77d3b71073bd51b2446e1ad30dd6e62657b2"
      }
    ],
    "blockNumber": 16034682,
    "cumulativeGasUsed": "9334754",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa8b607Aa09B6A2E306F93e74c282Fb13f6A80452",
    "0xE57180685E3348589E9521aa53Af0BCD497E884d",
    6,
    "0x08780fb7e580e492c1935bee4fa5920b94aa95da",
    "0xD533a949740bb3306d119CC777fa900bA034cd52",
    100,
    "0x80704Acdf97723963263c78F861F091ad04F46E2",
    "0x8f156189A3CD28dFc8FB7BbbAce58F98F09c0bB3",
    2,
    27,
    "ConvexForFrax_dolafraxbp_USDC"
  ],
  "numDeployments": 1,
  "solcInputHash": "caf516414c718a7bb5f917e902ec8ca1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvPool_\",\"type\":\"address\"},{\"internalType\":\"enum Curve.PoolType\",\"name\":\"curvePoolType_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"depositZap_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"crvSlippage_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"masterOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralIdx_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"convexPoolId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCrvSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCrvSlippage\",\"type\":\"uint256\"}],\"name\":\"CrvSlippageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IMasterOracle\",\"name\":\"oldMasterOracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle\",\"type\":\"address\"}],\"name\":\"MasterOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldUnlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUnlockTime\",\"type\":\"uint256\"}],\"name\":\"UnlockTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CRV_MINTER\",\"outputs\":[{\"internalType\":\"contract ITokenMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FXS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IConvexFraxPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IVaultRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvGauge\",\"outputs\":[{\"internalType\":\"contract ILiquidityGaugeV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvLp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePoolType\",\"outputs\":[{\"internalType\":\"enum Curve.PoolType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraxStaking\",\"outputs\":[{\"internalType\":\"contract IFraxFarmERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kekId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceHere\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpHere\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceHereAndStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpHereAndStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalanceStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOracle\",\"outputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"contract IMultiReward\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"setRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCrvSlippage_\",\"type\":\"uint256\"}],\"name\":\"updateCrvSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockPeriod_\",\"type\":\"uint256\"}],\"name\":\"updateLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"newMasterOracle_\",\"type\":\"address\"}],\"name\":\"updateMasterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IStakingProxyConvex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This strategy only supports Curve deposits\",\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"isReservedToken(address)\":{\"details\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"setRewardTokens(address[])\":{\"details\":\"convex pool can add new rewards. This method refresh list.\"},\"sweepERC20(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateLockPeriod(uint256)\":{\"details\":\"To be used if the `lock_time_min` value changes or we want to increase it\"},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"stateVariables\":{\"lockPeriod\":{\"details\":\"Uses the `lock_time_min` by default. Use `updateLockPeriod` to update it if needed.\"}},\"title\":\"Convex for Frax strategy\",\"version\":1},\"userdoc\":{\"events\":{\"UnlockTimeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when `unlockTime` is updated\"}},\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"fraxStaking()\":{\"notice\":\"Frax Staking contract\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"kekId()\":{\"notice\":\"Staking position ID\"},\"lockPeriod()\":{\"notice\":\"FRAX staking period\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"rewards()\":{\"notice\":\"Convex Rewards contract\"},\"sweepERC20(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns collateral balance + collateral deposited to curve\"},\"unlockTime()\":{\"notice\":\"Next time where the withdraw will be available\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateLockPeriod(uint256)\":{\"notice\":\"Update `lockPeriod` param\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"vault()\":{\"notice\":\"Convex vault to interact with FRAX staking\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol\":\"ConvexForFrax\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance()\\n        external\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xddea3754059443771113c169ee1647ef9e83ee6ee509a911ceb7729fea62adc0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc37d85b96c2a8d7bc09f25958e0a81394bf5780286444147ddf875fa628d53ce\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x193c2dd96da7b717f15736d5f13ccab8a7b4e90853b6cb922a864f1e8fdd9dc7\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/convex/IConvexForFrax.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable var-name-mixedcase\\n// solhint-disable func-name-mixedcase\\n\\npragma solidity 0.8.9;\\n\\ninterface IConvexFraxPoolRegistry {\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address implementation,\\n            address stakingAddress,\\n            address stakingToken,\\n            address rewardsAddress,\\n            uint8 active\\n        );\\n}\\n\\ninterface IVaultRegistry {\\n    function createVault(uint256 _pid) external returns (address);\\n}\\n\\ninterface IProxyVault {\\n    function initialize(\\n        address _owner,\\n        address _stakingAddress,\\n        address _stakingToken,\\n        address _rewardsAddress\\n    ) external;\\n\\n    function usingProxy() external returns (address);\\n\\n    function owner() external returns (address);\\n\\n    function stakingAddress() external returns (address);\\n\\n    function rewards() external returns (address);\\n\\n    function getReward() external;\\n\\n    function getReward(bool _claim) external;\\n\\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external;\\n\\n    function earned() external view returns (address[] memory token_addresses, uint256[] memory total_earned);\\n}\\n\\ninterface IStakingProxyBase is IProxyVault {\\n    //farming contract\\n    function stakingAddress() external view returns (address);\\n\\n    //farming token\\n    function stakingToken() external view returns (address);\\n\\n    function vaultVersion() external pure returns (uint256);\\n}\\n\\ninterface IStakingProxyConvex is IStakingProxyBase {\\n    function curveLpToken() external view returns (address);\\n\\n    function convexDepositToken() external view returns (address);\\n\\n    //create a new locked state of _secs timelength with a Curve LP token\\n    function stakeLockedCurveLp(uint256 _liquidity, uint256 _secs) external returns (bytes32 kek_id);\\n\\n    //create a new locked state of _secs timelength with a Convex deposit token\\n    function stakeLockedConvexToken(uint256 _liquidity, uint256 _secs) external returns (bytes32 kek_id);\\n\\n    //create a new locked state of _secs timelength\\n    function stakeLocked(uint256 _liquidity, uint256 _secs) external returns (bytes32 kek_id);\\n\\n    //add to a current lock\\n    function lockAdditional(bytes32 _kek_id, uint256 _addl_liq) external;\\n\\n    //add to a current lock\\n    function lockAdditionalCurveLp(bytes32 _kek_id, uint256 _addl_liq) external;\\n\\n    //add to a current lock\\n    function lockAdditionalConvexToken(bytes32 _kek_id, uint256 _addl_liq) external;\\n\\n    // Extends the lock of an existing stake\\n    function lockLonger(bytes32 _kek_id, uint256 new_ending_ts) external;\\n\\n    //withdraw a staked position\\n    //frax farm transfers first before updating farm state so will checkpoint during transfer\\n    function withdrawLocked(bytes32 _kek_id) external;\\n\\n    //withdraw a staked position\\n    //frax farm transfers first before updating farm state so will checkpoint during transfer\\n    function withdrawLockedAndUnwrap(bytes32 _kek_id) external;\\n\\n    //helper function to combine earned tokens on staking contract and any tokens that are on this vault\\n    function earned() external view override returns (address[] memory token_addresses, uint256[] memory total_earned);\\n}\\n\\ninterface IFraxFarmERC20 {\\n    event StakeLocked(address indexed user, uint256 amount, uint256 secs, bytes32 kek_id, address source_address);\\n\\n    struct LockedStake {\\n        bytes32 kek_id;\\n        uint256 start_timestamp;\\n        uint256 liquidity;\\n        uint256 ending_timestamp;\\n        uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\\n    }\\n\\n    function owner() external view returns (address);\\n\\n    function stakingToken() external view returns (address);\\n\\n    function fraxPerLPToken() external view returns (uint256);\\n\\n    function calcCurCombinedWeight(address account)\\n        external\\n        view\\n        returns (\\n            uint256 old_combined_weight,\\n            uint256 new_vefxs_multiplier,\\n            uint256 new_combined_weight\\n        );\\n\\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory);\\n\\n    function lockedStakesOfLength(address account) external view returns (uint256);\\n\\n    function lockAdditional(bytes32 kek_id, uint256 addl_liq) external;\\n\\n    function lockLonger(bytes32 kek_id, uint256 new_ending_ts) external;\\n\\n    function stakeLocked(uint256 liquidity, uint256 secs) external returns (bytes32);\\n\\n    function withdrawLocked(bytes32 kek_id, address destination_address) external returns (uint256);\\n\\n    function periodFinish() external view returns (uint256);\\n\\n    function getAllRewardTokens() external view returns (address[] memory);\\n\\n    function earned(address account) external view returns (uint256[] memory new_earned);\\n\\n    function totalLiquidityLocked() external view returns (uint256);\\n\\n    function lockedLiquidityOf(address account) external view returns (uint256);\\n\\n    function totalCombinedWeight() external view returns (uint256);\\n\\n    function combinedWeightOf(address account) external view returns (uint256);\\n\\n    function lockMultiplier(uint256 secs) external view returns (uint256);\\n\\n    function lock_time_min() external view returns (uint256);\\n\\n    function rewardRates(uint256 token_idx) external view returns (uint256 rwd_rate);\\n\\n    function userStakedFrax(address account) external view returns (uint256);\\n\\n    function proxyStakedFrax(address proxy_address) external view returns (uint256);\\n\\n    function maxLPForMaxBoost(address account) external view returns (uint256);\\n\\n    function minVeFXSForMaxBoost(address account) external view returns (uint256);\\n\\n    function minVeFXSForMaxBoostProxy(address proxy_address) external view returns (uint256);\\n\\n    function veFXSMultiplier(address account) external view returns (uint256 vefxs_multiplier);\\n\\n    function toggleValidVeFXSProxy(address proxy_address) external;\\n\\n    function proxyToggleStaker(address staker_address) external;\\n\\n    function stakerSetVeFXSProxy(address proxy_address) external;\\n\\n    function getReward(address destination_address) external returns (uint256[] memory);\\n\\n    function vefxs_max_multiplier() external view returns (uint256);\\n\\n    function vefxs_boost_scale_factor() external view returns (uint256);\\n\\n    function vefxs_per_frax_for_max_boost() external view returns (uint256);\\n\\n    function getProxyFor(address addr) external view returns (address);\\n\\n    function sync() external;\\n}\\n\\ninterface IMultiReward {\\n    function poolId() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardTokenLength() external view returns (uint256);\\n\\n    function rewardTokens(uint256) external view returns (address);\\n\\n    function rewards(address) external view returns (uint256);\\n\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdf2e3001b1df1eb77a5e84a7bc8a1b7754ddee690c8e523eb65b8306ae896b2e\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 i) external view returns (address);\\n}\\n\",\"keccak256\":\"0x475e55655e2868cd6d31dea7a571bb9c73337937529df19563054d08f8c1f73c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IDeposit2x {\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n}\\n\\ninterface IDeposit3x {\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n}\\n\\ninterface IDeposit4x {\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2d188bb85ee9ccb1a44ec799fcadbf9a8ad2a3c2b9e2f16ca6cf3956dcc1885e\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IDepositZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IDepositZap4x {\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        uint256 _min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity(\\n        address _pool,\\n        uint256 _amount,\\n        uint256[4] memory _min_amounts\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        address _pool,\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(\\n        address _pool,\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcce6e93db5394fea303da16985bfda5bc54ed43b295cd2597c86cc62a4ef3984\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Not a complete interface, but should have what we need\\ninterface ILiquidityGaugeV2 is IERC20 {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address addr) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function claim_rewards(address addr) external;\\n\\n    function claim_rewards() external;\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function claimable_reward(address, address) external returns (uint256);\\n\\n    function integrate_fraction(address addr) external view returns (uint256);\\n\\n    function user_checkpoint(address addr) external returns (bool);\\n\\n    function reward_integral(address) external view returns (uint256);\\n\\n    function reward_integral_for(address, address) external view returns (uint256);\\n\\n    function lp_token() external view returns (address);\\n\\n    function reward_count() external view returns (uint256);\\n\\n    function reward_tokens(uint256 _i) external view returns (address);\\n}\\n\\ninterface ILiquidityGaugeV3 is ILiquidityGaugeV2 {\\n    function claimable_reward(address addr, address token) external view override returns (uint256);\\n\\n    function claimable_reward_write(address addr, address token) external returns (uint256);\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0xde96ff55d81a9f17788ef598dcdf84939c1523e8ffc44768eff52efbb0e2a234\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IMetapoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/* solhint-disable func-name-mixedcase*/\\npragma solidity 0.8.9;\\n\\ninterface IMetapoolFactory {\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_decimals(address pool) external view returns (uint256[8] memory);\\n\\n    function get_coins(address pool) external view returns (address[4] memory);\\n\\n    function get_n_coins(address pool) external view returns (uint256);\\n\\n    function get_meta_n_coins(address pool) external view returns (uint256[2] memory);\\n\\n    function get_decimals(address pool) external view returns (uint256[4] memory);\\n\\n    function get_gauge(address pool) external view returns (address);\\n\\n    function is_meta(address pool) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0b34a43d929c27a7f0fe8cfcda363e5bf02cd08e66a283d402181ef0a072c3f7\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\ninterface IRegistry {\\n    function get_pool_from_lp_token() external view returns (address);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function get_n_coins(address pool) external view returns (uint256[2] memory);\\n\\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\\n\\n    function get_underlying_decimals(address pool) external view returns (uint256[8] memory);\\n\\n    function get_gauges(address pool) external view returns (address[10] memory);\\n}\\n\",\"keccak256\":\"0x2ebd1ea8b845d34dd2a389b994a396a57cc8c423f03272ed51dcea203d3b6288\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\n// Not a complete interface, but should have what we need\\ninterface IStableSwap {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function fee() external view returns (uint256); // fee * 1e10\\n\\n    function lp_token() external view returns (address);\\n\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n}\\n\\ninterface IStableSwapV2 {\\n    function coins(int128 i) external view returns (address);\\n}\\n\\ninterface IStableSwapUnderlying is IStableSwap {\\n    function underlying_coins(uint256 i) external view returns (address);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount,\\n        bool _use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap2x is IStableSwap {\\n    function calc_token_amount(uint256[2] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[2] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap3x is IStableSwap {\\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[3] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap4x is IStableSwap {\\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] memory _amounts, uint256 _max_burn_amount)\\n        external\\n        returns (uint256);\\n}\\n\\ninterface IStableSwap2xUnderlying is IStableSwap2x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[2] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap3xUnderlying is IStableSwap3x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[3] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\ninterface IStableSwap4xUnderlying is IStableSwap4x, IStableSwapUnderlying {\\n    function add_liquidity(\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount,\\n        bool use_underlying\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[4] calldata min_amounts,\\n        bool use_underlying\\n    ) external;\\n}\\n\\n/* solhint-enable */\\n\",\"keccak256\":\"0x366c9af63373252a74c060394ccf4d6b0cf1b83c8499b10df739bf5067bb5b97\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/curve/ITokenMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity 0.8.9;\\n\\n// Not a complete interface, but should have what we need\\ninterface ITokenMinter {\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n\\n    function mint(address gauge_addr) external;\\n}\\n/* solhint-enable */\\n\",\"keccak256\":\"0x4c11e543dddafeaa1f90af55d8aa750d943a050cf7cb1100456832fce39617cf\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/one-oracle/IMasterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\\n\\n    function quote(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut);\\n\\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\\n\\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\\n}\\n\",\"keccak256\":\"0x6bb781352f8af1fce0e5dafc46ac0855ccd923fd76369eecee443556a06fe4fa\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x81fccad24b581704ec06b681d0f75d2af86c461142bf0224e118779783271d10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance()\\n        external\\n        onlyKeeper\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _rebalance()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x947a4185d2e76769bda95e405241a2d8d1b17093955a486265cdf1d92893786b\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/convex/IConvexForFrax.sol\\\";\\nimport \\\"../../strategies/curve/Curve.sol\\\";\\n\\n/**\\n * @title Convex for Frax strategy\\n * @dev This strategy only supports Curve deposits\\n */\\ncontract ConvexForFrax is Curve {\\n    using SafeERC20 for IERC20;\\n\\n    IVaultRegistry public constant VAULT_REGISTRY = IVaultRegistry(0x569f5B842B5006eC17Be02B8b94510BA8e79FbCa);\\n    IConvexFraxPoolRegistry public constant POOL_REGISTRY =\\n        IConvexFraxPoolRegistry(0x41a5881c17185383e19Df6FA4EC158a6F4851A69);\\n    address public constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n    address public constant FXS = 0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0;\\n\\n    /// @notice Frax Staking contract\\n    IFraxFarmERC20 public immutable fraxStaking;\\n\\n    /// @notice Convex vault to interact with FRAX staking\\n    IStakingProxyConvex public immutable vault;\\n\\n    /// @notice Convex Rewards contract\\n    IMultiReward public immutable rewards;\\n\\n    /// @notice FRAX staking period\\n    /// @dev Uses the `lock_time_min` by default. Use `updateLockPeriod` to update it if needed.\\n    uint256 public lockPeriod;\\n\\n    /// @notice Staking position ID\\n    bytes32 public kekId;\\n\\n    /// @notice Next time where the withdraw will be available\\n    uint256 public unlockTime;\\n\\n    /// @notice Emitted when `unlockTime` is updated\\n    event UnlockTimeUpdated(uint256 oldUnlockTime, uint256 newUnlockTime);\\n\\n    constructor(\\n        address pool_,\\n        address crvPool_,\\n        PoolType curvePoolType_,\\n        address depositZap_,\\n        address crvToken_,\\n        uint256 crvSlippage_,\\n        address masterOracle_,\\n        address swapper_,\\n        uint256 collateralIdx_,\\n        uint256 convexPoolId_,\\n        string memory name_\\n    )\\n        Curve(\\n            pool_,\\n            crvPool_,\\n            curvePoolType_,\\n            depositZap_,\\n            crvToken_,\\n            crvSlippage_,\\n            masterOracle_,\\n            swapper_,\\n            collateralIdx_,\\n            name_\\n        )\\n    {\\n        (, address _stakingAddress, , address _reward, ) = POOL_REGISTRY.poolInfo(convexPoolId_);\\n        rewards = IMultiReward(_reward);\\n        vault = IStakingProxyConvex(VAULT_REGISTRY.createVault(convexPoolId_));\\n        require(vault.curveLpToken() == address(crvLp), \\\"incorrect-lp-token\\\");\\n        fraxStaking = IFraxFarmERC20(_stakingAddress);\\n        lockPeriod = fraxStaking.lock_time_min();\\n        rewardTokens = _getRewardTokens();\\n    }\\n\\n    function lpBalanceStaked() public view override returns (uint256 _total) {\\n        // Note: No need to specify which position here because we'll always have one open position at the same time\\n        // because of the open position is deleted when `vault.withdrawLockedAndUnwrap(kekId)` is called\\n        _total = fraxStaking.lockedLiquidityOf(address(vault));\\n    }\\n\\n    function _approveToken(uint256 amount_) internal virtual override {\\n        super._approveToken(amount_);\\n        crvLp.safeApprove(address(vault), amount_);\\n    }\\n\\n    /// @dev\\n    function _claimRewards() internal override {\\n        // `getReward` reverts if there isn't an open position\\n        if (kekId == bytes32(0)) return;\\n\\n        // solhint-disable-next-line no-empty-blocks\\n        try vault.getReward() {} catch {\\n            // It may fail if reward collection is paused on FRAX side\\n            // See more: https://github.com/convex-eth/frax-cvx-platform/blob/01855f4f82729b49cbed0b5fab37bdefe9fdb736/contracts/contracts/StakingProxyConvex.sol#L222-L225\\n            vault.getReward(false);\\n        }\\n    }\\n\\n    /// @notice Get reward tokens\\n    function _getRewardTokens() private view returns (address[] memory _rewardTokens) {\\n        uint256 _extraRewardCount;\\n        uint256 _length = rewards.rewardTokenLength();\\n\\n        for (uint256 i; i < _length; i++) {\\n            address _rewardToken = rewards.rewardTokens(i);\\n            // Some pool has CVX as extra rewards but other do not. CVX still reward token\\n            if (_rewardToken != CRV && _rewardToken != CVX && _rewardToken != FXS) {\\n                _extraRewardCount++;\\n            }\\n        }\\n\\n        _rewardTokens = new address[](_extraRewardCount + 3);\\n        _rewardTokens[0] = CRV;\\n        _rewardTokens[1] = CVX;\\n        _rewardTokens[2] = FXS;\\n        uint256 _nextIdx = 3;\\n\\n        for (uint256 i; i < _length; i++) {\\n            address _rewardToken = rewards.rewardTokens(i);\\n            // CRV and CVX already added in array\\n            if (_rewardToken != CRV && _rewardToken != CVX && _rewardToken != FXS) {\\n                _rewardTokens[_nextIdx++] = _rewardToken;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Stake Curve-LP token\\n     * @dev Stake to the current position if there is any\\n     */\\n    function _stakeAllLp() internal virtual override {\\n        uint256 _balance = crvLp.balanceOf(address(this));\\n        if (_balance > 0) {\\n            if (kekId != bytes32(0)) {\\n                // if there is an active position, lock more\\n                vault.lockAdditionalCurveLp(kekId, _balance);\\n            } else {\\n                // otherwise create a new position\\n                kekId = vault.stakeLockedCurveLp(_balance, lockPeriod);\\n                unlockTime = block.timestamp + lockPeriod;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Unstake all LPs\\n     * @dev This function is called by `_beforeMigration()` hook\\n     * @dev `withdrawLockedAndUnwrap` destroys current position\\n     * Should claim rewards that will be swept later\\n     */\\n    function _unstakeAllLp() internal override {\\n        require(block.timestamp >= unlockTime, \\\"unlock-time-didnt-pass\\\");\\n        vault.withdrawLockedAndUnwrap(kekId);\\n        kekId = 0x0;\\n    }\\n\\n    /**\\n     * @notice Unstake LPs\\n     * @dev Unstake all because Convex-FRAX doesn't support partial unlocks\\n     */\\n    function _unstakeLp(uint256 _amount) internal override {\\n        if (_amount > 0) {\\n            _unstakeAllLp();\\n        }\\n    }\\n\\n    /// @dev convex pool can add new rewards. This method refresh list.\\n    function setRewardTokens(\\n        address[] memory /*_rewardTokens*/\\n    ) external override onlyKeeper {\\n        // Claims all rewards, if any, before updating the reward list\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        rewardTokens = _getRewardTokens();\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    /// @notice Update `lockPeriod` param\\n    /// @dev To be used if the `lock_time_min` value changes or we want to increase it\\n    function updateLockPeriod(uint256 newLockPeriod_) external onlyGovernor {\\n        require(newLockPeriod_ >= fraxStaking.lock_time_min(), \\\"period-lt-min\\\");\\n        emit UnlockTimeUpdated(lockPeriod, newLockPeriod_);\\n        lockPeriod = newLockPeriod_;\\n    }\\n}\\n\",\"keccak256\":\"0x2a1a191501a8b7a7daae6647417b99392c4e6759b458bdcbfc1ecb47b66fd199\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/curve/Curve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../interfaces/curve/IDeposit.sol\\\";\\nimport \\\"../../interfaces/curve/IDepositZap.sol\\\";\\nimport \\\"../../interfaces/curve/IStableSwap.sol\\\";\\nimport \\\"../../interfaces/curve/ILiquidityGauge.sol\\\";\\nimport \\\"../../interfaces/curve/ITokenMinter.sol\\\";\\nimport \\\"../../interfaces/curve/IMetapoolFactory.sol\\\";\\nimport \\\"../../interfaces/curve/IRegistry.sol\\\";\\nimport \\\"../../interfaces/curve/IAddressProvider.sol\\\";\\nimport \\\"../../interfaces/one-oracle/IMasterOracle.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in a Curve Pool and earn interest.\\n// solhint-disable no-empty-blocks\\ncontract Curve is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    enum PoolType {\\n        PLAIN_2_POOL,\\n        PLAIN_3_POOL,\\n        PLAIN_4_POOL,\\n        LENDING_2_POOL,\\n        LENDING_3_POOL,\\n        LENDING_4_POOL,\\n        META_3_POOL,\\n        META_4_POOL\\n    }\\n\\n    string public constant VERSION = \\\"5.0.0\\\";\\n    uint256 internal constant MAX_BPS = 10_000;\\n    ITokenMinter public constant CRV_MINTER = ITokenMinter(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0); // This contract only exists on mainnet\\n    IAddressProvider public constant ADDRESS_PROVIDER = IAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383); // Same address to all chains\\n    uint256 private constant FACTORY_ADDRESS_ID = 3;\\n\\n    address public immutable CRV;\\n    IERC20 public immutable crvLp; // Note: Same as `receiptToken` but using this in order to save gas since it's `immutable` and `receiptToken` isn't\\n    address public immutable crvPool;\\n    ILiquidityGaugeV2 public immutable crvGauge;\\n    uint256 public immutable collateralIdx;\\n    address internal immutable depositZap;\\n    PoolType public immutable curvePoolType;\\n    bool private immutable isFactoryPool;\\n\\n    string public NAME;\\n    uint256 public crvSlippage;\\n    IMasterOracle public masterOracle;\\n    address[] public rewardTokens;\\n\\n    event CrvSlippageUpdated(uint256 oldCrvSlippage, uint256 newCrvSlippage);\\n    event MasterOracleUpdated(IMasterOracle oldMasterOracle, IMasterOracle newMasterOracle);\\n\\n    constructor(\\n        address pool_,\\n        address crvPool_,\\n        PoolType curvePoolType_,\\n        address depositZap_,\\n        address crvToken_,\\n        uint256 crvSlippage_,\\n        address masterOracle_,\\n        address swapper_,\\n        uint256 collateralIdx_,\\n        string memory name_\\n    ) Strategy(pool_, swapper_, address(0)) {\\n        require(crvToken_ != address(0), \\\"crv-token-is-null\\\");\\n\\n        address _crvGauge;\\n        IRegistry _registry = IRegistry(ADDRESS_PROVIDER.get_registry());\\n        address _crvLp = _registry.get_lp_token(crvPool_);\\n\\n        if (_crvLp != address(0)) {\\n            // Get data from Registry contract\\n            require(collateralIdx_ < _registry.get_n_coins(crvPool_)[1], \\\"invalid-collateral\\\");\\n            require(\\n                _registry.get_underlying_coins(crvPool_)[collateralIdx_] == address(collateralToken),\\n                \\\"collateral-mismatch\\\"\\n            );\\n            _crvGauge = _registry.get_gauges(crvPool_)[0];\\n        } else {\\n            // Get data from Factory contract\\n            IMetapoolFactory _factory = IMetapoolFactory(ADDRESS_PROVIDER.get_address(FACTORY_ADDRESS_ID));\\n\\n            if (_factory.is_meta(crvPool_)) {\\n                require(collateralIdx_ < _factory.get_meta_n_coins(crvPool_)[1], \\\"invalid-collateral\\\");\\n                require(\\n                    _factory.get_underlying_coins(crvPool_)[collateralIdx_] == address(collateralToken),\\n                    \\\"collateral-mismatch\\\"\\n                );\\n            } else {\\n                require(collateralIdx_ < _factory.get_n_coins(crvPool_), \\\"invalid-collateral\\\");\\n                require(\\n                    _factory.get_coins(crvPool_)[collateralIdx_] == address(collateralToken),\\n                    \\\"collateral-mismatch\\\"\\n                );\\n            }\\n            _crvLp = crvPool_;\\n            _crvGauge = _factory.get_gauge(crvPool_);\\n        }\\n\\n        require(crvPool_ != address(0), \\\"pool-is-null\\\");\\n        require(_crvLp != address(0), \\\"lp-is-null\\\");\\n        require(_crvGauge != address(0), \\\"gauge-is-null\\\");\\n\\n        CRV = crvToken_;\\n        crvPool = crvPool_;\\n        crvLp = IERC20(_crvLp);\\n        crvGauge = ILiquidityGaugeV2(_crvGauge);\\n        crvSlippage = crvSlippage_;\\n        receiptToken = _crvLp;\\n        collateralIdx = collateralIdx_;\\n        curvePoolType = curvePoolType_;\\n        isFactoryPool = _crvLp == crvPool_;\\n        depositZap = depositZap_;\\n        masterOracle = IMasterOracle(masterOracle_);\\n        rewardTokens.push(crvToken_);\\n        NAME = name_;\\n    }\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address token_) public view override returns (bool) {\\n        return token_ == address(crvLp) || token_ == address(collateralToken);\\n    }\\n\\n    // Gets LP value not staked in gauge\\n    function lpBalanceHere() public view virtual returns (uint256 _lpHere) {\\n        _lpHere = crvLp.balanceOf(address(this));\\n    }\\n\\n    function lpBalanceHereAndStaked() public view virtual returns (uint256 _lpHereAndStaked) {\\n        _lpHereAndStaked = crvLp.balanceOf(address(this)) + lpBalanceStaked();\\n    }\\n\\n    function lpBalanceStaked() public view virtual returns (uint256 _lpStaked) {\\n        _lpStaked = crvGauge.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns collateral balance + collateral deposited to curve\\n    function tvl() external view override returns (uint256) {\\n        return\\n            collateralToken.balanceOf(address(this)) +\\n            _quoteLpToCoin(lpBalanceHereAndStaked(), SafeCast.toInt128(int256(collateralIdx)));\\n    }\\n\\n    function _approveToken(uint256 amount_) internal virtual override {\\n        super._approveToken(amount_);\\n\\n        address _swapper = address(swapper);\\n\\n        collateralToken.safeApprove(crvPool, amount_);\\n        collateralToken.safeApprove(_swapper, amount_);\\n\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; ++i) {\\n            IERC20(rewardTokens[i]).safeApprove(_swapper, amount_);\\n        }\\n        crvLp.safeApprove(address(crvGauge), amount_);\\n\\n        if (depositZap != address(0)) {\\n            collateralToken.safeApprove(depositZap, amount_);\\n            crvLp.safeApprove(depositZap, amount_);\\n        }\\n    }\\n\\n    /// @notice Unstake LP tokens in order to transfer to the new strategy\\n    function _beforeMigration(address newStrategy_) internal override {\\n        require(IStrategy(newStrategy_).collateral() == address(collateralToken), \\\"wrong-collateral-token\\\");\\n        require(IStrategy(newStrategy_).token() == address(crvLp), \\\"wrong-receipt-token\\\");\\n        _unstakeAllLp();\\n    }\\n\\n    function _calculateAmountOutMin(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) private view returns (uint256 _amountOutMin) {\\n        _amountOutMin = (masterOracle.quote(tokenIn_, tokenOut_, amountIn_) * (MAX_BPS - crvSlippage)) / MAX_BPS;\\n    }\\n\\n    function _claimRewards() internal virtual {\\n        if (block.chainid == 1) {\\n            // Side-chains don't have minter contract\\n            CRV_MINTER.mint(address(crvGauge));\\n        }\\n        try crvGauge.claim_rewards() {} catch {\\n            // This call may fail in some scenarios\\n            // e.g. 3Crv gauge doesn't have such function\\n        }\\n    }\\n\\n    /**\\n     * @notice Curve pool may have more than one reward token. Child contract should override _claimRewards\\n     */\\n    function _claimRewardsAndConvertTo(address tokenOut_) internal virtual {\\n        _claimRewards();\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; ++i) {\\n            address _rewardToken = rewardTokens[i];\\n            uint256 _amountIn = IERC20(_rewardToken).balanceOf(address(this));\\n            if (_amountIn > 0) {\\n                try swapper.swapExactInput(_rewardToken, tokenOut_, _amountIn, 1, address(this)) {} catch {\\n                    // Note: It may fail under some conditions\\n                    // For instance: 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT'\\n                }\\n            }\\n        }\\n    }\\n\\n    function _deposit() internal {\\n        _depositToCurve(collateralToken.balanceOf(address(this)));\\n        _stakeAllLp();\\n    }\\n\\n    function _depositTo2PlainPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[2] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        IStableSwap2x(crvPool).add_liquidity(_depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo2LendingPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[2] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: Using use_underlying = true to deposit underlying instead of IB token\\n        IStableSwap2xUnderlying(crvPool).add_liquidity(_depositAmounts, lpAmountOutMin_, true);\\n    }\\n\\n    function _depositTo3PlainPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[3] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        IStableSwap3x(crvPool).add_liquidity(_depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo3LendingPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[3] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: Using use_underlying = true to deposit underlying instead of IB token\\n        IStableSwap3xUnderlying(crvPool).add_liquidity(_depositAmounts, lpAmountOutMin_, true);\\n    }\\n\\n    function _depositTo4PlainOrMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[4] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        IDeposit4x(depositZap).add_liquidity(_depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositTo4FactoryMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_) private {\\n        uint256[4] memory _depositAmounts;\\n        _depositAmounts[collateralIdx] = coinAmountIn_;\\n        // Note: The function below won't return a reason when reverting due to slippage\\n        IDepositZap4x(depositZap).add_liquidity(address(crvPool), _depositAmounts, lpAmountOutMin_);\\n    }\\n\\n    function _depositToCurve(uint256 coinAmountIn_) private {\\n        if (coinAmountIn_ == 0) {\\n            return;\\n        }\\n\\n        uint256 _lpAmountOutMin = _calculateAmountOutMin(address(collateralToken), address(crvLp), coinAmountIn_);\\n\\n        if (curvePoolType == PoolType.PLAIN_2_POOL) {\\n            return _depositTo2PlainPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n        if (curvePoolType == PoolType.LENDING_2_POOL) {\\n            return _depositTo2LendingPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n        if (curvePoolType == PoolType.PLAIN_3_POOL) {\\n            return _depositTo3PlainPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n        if (curvePoolType == PoolType.LENDING_3_POOL) {\\n            return _depositTo3LendingPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n        if (curvePoolType == PoolType.PLAIN_4_POOL) {\\n            return _depositTo4PlainOrMetaPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n        if (curvePoolType == PoolType.META_4_POOL) {\\n            if (isFactoryPool) {\\n                return _depositTo4FactoryMetaPool(coinAmountIn_, _lpAmountOutMin);\\n            }\\n            return _depositTo4PlainOrMetaPool(coinAmountIn_, _lpAmountOutMin);\\n        }\\n\\n        revert(\\\"deposit-to-curve-failed\\\");\\n    }\\n\\n    function _generateReport()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _strategyDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n\\n        int128 _i = SafeCast.toInt128(int256(collateralIdx));\\n        uint256 _lpHere = lpBalanceHere();\\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\\n        uint256 _collateralInCurve = _quoteLpToCoin(_totalLp, _i);\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = _collateralHere + _collateralInCurve;\\n\\n        if (_totalCollateral > _strategyDebt) {\\n            _profit = _totalCollateral - _strategyDebt;\\n        } else {\\n            _loss = _strategyDebt - _totalCollateral;\\n        }\\n\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_profitAndExcessDebt > _collateralHere) {\\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _collateralInCurve);\\n            if (_totalAmountToWithdraw > 0) {\\n                uint256 _lpToBurn = Math.min((_totalAmountToWithdraw * _totalLp) / _collateralInCurve, _totalLp);\\n\\n                if (_lpToBurn > 0) {\\n                    if (_lpToBurn > _lpHere) {\\n                        _unstakeLp(_lpToBurn - _lpHere);\\n                    }\\n\\n                    _withdrawFromCurve(_lpToBurn, _i);\\n\\n                    _collateralHere = collateralToken.balanceOf(address(this));\\n                }\\n            }\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n    }\\n\\n    function _quoteLpToCoin(uint256 amountIn_, int128 toIdx_) private view returns (uint256 _amountOut) {\\n        if (amountIn_ == 0) {\\n            return 0;\\n        }\\n\\n        if (curvePoolType == PoolType.PLAIN_4_POOL) {\\n            return IDeposit4x(depositZap).calc_withdraw_one_coin(amountIn_, toIdx_);\\n        }\\n        if (curvePoolType == PoolType.META_4_POOL) {\\n            if (isFactoryPool) {\\n                return IDepositZap4x(depositZap).calc_withdraw_one_coin(address(crvLp), amountIn_, toIdx_);\\n            }\\n            return IDeposit4x(depositZap).calc_withdraw_one_coin(amountIn_, toIdx_);\\n        }\\n\\n        return IStableSwap(crvPool).calc_withdraw_one_coin(amountIn_, toIdx_);\\n    }\\n\\n    function _rebalance()\\n        internal\\n        virtual\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        (_profit, _loss, _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _deposit();\\n    }\\n\\n    // Requires that gauge has approval for lp token\\n    function _stakeAllLp() internal virtual {\\n        uint256 _balance = crvLp.balanceOf(address(this));\\n        if (_balance > 0) {\\n            crvGauge.deposit(_balance);\\n        }\\n    }\\n\\n    function _unstakeAllLp() internal virtual {\\n        _unstakeLp(crvGauge.balanceOf(address(this)));\\n    }\\n\\n    function _unstakeLp(uint256 amount_) internal virtual {\\n        if (amount_ > 0) {\\n            crvGauge.withdraw(amount_);\\n        }\\n    }\\n\\n    function _withdrawFromPlainPool(\\n        uint256 lpAmount_,\\n        uint256 minAmountOut_,\\n        int128 i_\\n    ) private {\\n        IStableSwap(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_);\\n    }\\n\\n    function _withdrawFrom2LendingPool(\\n        uint256 lpAmount_,\\n        uint256 minAmountOut_,\\n        int128 i_\\n    ) private {\\n        // Note: Using use_underlying = true to withdraw underlying instead of IB token\\n        IStableSwap2xUnderlying(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_, true);\\n    }\\n\\n    function _withdrawFrom3LendingPool(\\n        uint256 lpAmount_,\\n        uint256 minAmountOut_,\\n        int128 i_\\n    ) private {\\n        // Note: Using use_underlying = true to withdraw underlying instead of IB token\\n        IStableSwap3xUnderlying(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_, true);\\n    }\\n\\n    function _withdrawFrom4PlainOrMetaPool(\\n        uint256 lpAmount_,\\n        uint256 minAmountOut_,\\n        int128 i_\\n    ) private {\\n        IDeposit4x(depositZap).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_);\\n    }\\n\\n    function _withdrawFrom4FactoryMetaPool(\\n        uint256 lpAmount_,\\n        uint256 minAmountOut_,\\n        int128 i_\\n    ) private {\\n        // Note: The function below won't return a reason when reverting due to slippage\\n        IDepositZap4x(depositZap).remove_liquidity_one_coin(address(crvLp), lpAmount_, i_, minAmountOut_);\\n    }\\n\\n    function _withdrawFromCurve(uint256 lpToBurn_, int128 coinIdx_) internal {\\n        if (lpToBurn_ == 0) {\\n            return;\\n        }\\n\\n        uint256 _minCoinAmountOut = _calculateAmountOutMin(address(crvLp), address(collateralToken), lpToBurn_);\\n\\n        if (curvePoolType == PoolType.PLAIN_2_POOL || curvePoolType == PoolType.PLAIN_3_POOL) {\\n            return _withdrawFromPlainPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        }\\n        if (curvePoolType == PoolType.LENDING_2_POOL) {\\n            return _withdrawFrom2LendingPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        }\\n        if (curvePoolType == PoolType.LENDING_3_POOL) {\\n            return _withdrawFrom3LendingPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        }\\n        if (curvePoolType == PoolType.PLAIN_4_POOL) {\\n            return _withdrawFrom4PlainOrMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        }\\n        if (curvePoolType == PoolType.META_4_POOL) {\\n            if (isFactoryPool) {\\n                return _withdrawFrom4FactoryMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n            }\\n            return _withdrawFrom4PlainOrMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\\n        }\\n\\n        revert(\\\"withdraw-from-curve-failed\\\");\\n    }\\n\\n    function _withdrawHere(uint256 coinAmountOut_) internal override {\\n        int128 _i = SafeCast.toInt128(int256(collateralIdx));\\n\\n        uint256 _lpHere = lpBalanceHere();\\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\\n        uint256 _lpToBurn = Math.min((coinAmountOut_ * _totalLp) / _quoteLpToCoin(_totalLp, _i), _totalLp);\\n\\n        if (_lpToBurn == 0) return;\\n\\n        if (_lpToBurn > _lpHere) {\\n            _unstakeLp(_lpToBurn - _lpHere);\\n        }\\n\\n        _withdrawFromCurve(_lpToBurn, _i);\\n    }\\n\\n    /// @dev Rewards token in gauge can be updated any time. Governor can set reward tokens\\n    /// Different version of gauge has different method to read reward tokens better governor set it\\n    function setRewardTokens(address[] memory rewardTokens_) external virtual onlyGovernor {\\n        rewardTokens = rewardTokens_;\\n        address _receiptToken = receiptToken;\\n        uint256 _rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < _rewardTokensLength; ++i) {\\n            require(\\n                rewardTokens_[i] != _receiptToken &&\\n                    rewardTokens_[i] != address(collateralToken) &&\\n                    rewardTokens_[i] != pool &&\\n                    rewardTokens_[i] != address(crvLp),\\n                \\\"Invalid reward token\\\"\\n            );\\n        }\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    function updateCrvSlippage(uint256 newCrvSlippage_) external onlyGovernor {\\n        require(newCrvSlippage_ < MAX_BPS, \\\"invalid-slippage-value\\\");\\n        emit CrvSlippageUpdated(crvSlippage, newCrvSlippage_);\\n        crvSlippage = newCrvSlippage_;\\n    }\\n\\n    function updateMasterOracle(IMasterOracle newMasterOracle_) external onlyGovernor {\\n        emit MasterOracleUpdated(masterOracle, newMasterOracle_);\\n        masterOracle = newMasterOracle_;\\n    }\\n}\\n\",\"keccak256\":\"0x3dba990bc361d5598ce526b800ced0752994112f85be8638f84e687972b366a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6102206040523480156200001257600080fd5b5060405162006b8c38038062006b8c833981016040819052620000359162001615565b8a8a8a8a8a8a8a8a8a89898360006001600160a01b0383166200009f5760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000f75760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f000000000000000000604482015260640162000096565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200015557600080fd5b505afa1580156200016a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001909190620016ff565b6001600160a01b03908116608052600080546001600160a01b031916918316919091179055620001d7620001c13390565b600362000f6460201b62001d2a1790919060201c565b620002195760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640162000096565b5050506001600160a01b038616620002685760405162461bcd60e51b815260206004820152601160248201527018dc9d8b5d1bdad95b8b5a5ccb5b9d5b1b607a1b604482015260640162000096565b6000806f22d53366457f9d5e68ec105046fc43836001600160a01b031663a262904b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620002b557600080fd5b505afa158015620002ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002f09190620016ff565b604051633795104960e01b81526001600160a01b038d8116600483015291925060009183169063379510499060240160206040518083038186803b1580156200033857600080fd5b505afa1580156200034d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003739190620016ff565b90506001600160a01b03811615620005bd5760405163940494f160e01b81526001600160a01b038d8116600483015283169063940494f190602401604080518083038186803b158015620003c657600080fd5b505afa158015620003db573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000401919062001726565b6020015185106200044a5760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b604482015260640162000096565b60805160405163a77576ef60e01b81526001600160a01b038e811660048301529182169184169063a77576ef906024016101006040518083038186803b1580156200049457600080fd5b505afa158015620004a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004cf9190620017c3565b8660088110620004e357620004e3620017ad565b60200201516001600160a01b031614620005365760405162461bcd60e51b81526020600482015260136024820152720c6ded8d8c2e8cae4c2d85adad2e6dac2e8c6d606b1b604482015260640162000096565b6040516356059ffb60e01b81526001600160a01b038d811660048301528316906356059ffb906024016101406040518083038186803b1580156200057957600080fd5b505afa1580156200058e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005b4919062001854565b51925062000ab2565b60405163124fd3dd60e21b8152600360048201526000906f22d53366457f9d5e68ec105046fc43839063493f4f749060240160206040518083038186803b1580156200060857600080fd5b505afa1580156200061d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006439190620016ff565b60405163e4d332a960e01b81526001600160a01b038f811660048301529192509082169063e4d332a99060240160206040518083038186803b1580156200068957600080fd5b505afa1580156200069e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c49190620018da565b15620008815760405163eb73f37d60e01b81526001600160a01b038e8116600483015282169063eb73f37d90602401604080518083038186803b1580156200070b57600080fd5b505afa15801562000720573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000746919062001726565b6020015186106200078f5760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b604482015260640162000096565b60805160405163a77576ef60e01b81526001600160a01b038f811660048301529182169183169063a77576ef906024016101006040518083038186803b158015620007d957600080fd5b505afa158015620007ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008149190620017c3565b8760088110620008285762000828620017ad565b60200201516001600160a01b0316146200087b5760405162461bcd60e51b81526020600482015260136024820152720c6ded8d8c2e8cae4c2d85adad2e6dac2e8c6d606b1b604482015260640162000096565b62000a2e565b60405163940494f160e01b81526001600160a01b038e8116600483015282169063940494f19060240160206040518083038186803b158015620008c357600080fd5b505afa158015620008d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008fe9190620018fe565b8610620009435760405162461bcd60e51b81526020600482015260126024820152711a5b9d985b1a590b58dbdb1b185d195c985b60721b604482015260640162000096565b608051604051639ac90d3d60e01b81526001600160a01b038f8116600483015291821691831690639ac90d3d9060240160806040518083038186803b1580156200098c57600080fd5b505afa158015620009a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009c7919062001918565b8760048110620009db57620009db620017ad565b60200201516001600160a01b03161462000a2e5760405162461bcd60e51b81526020600482015260136024820152720c6ded8d8c2e8cae4c2d85adad2e6dac2e8c6d606b1b604482015260640162000096565b60405163daf297b960e01b81526001600160a01b03808f1660048301528e935082169063daf297b99060240160206040518083038186803b15801562000a7357600080fd5b505afa15801562000a88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000aae9190620016ff565b9350505b6001600160a01b038c1662000af95760405162461bcd60e51b815260206004820152600c60248201526b1c1bdbdb0b5a5ccb5b9d5b1b60a21b604482015260640162000096565b6001600160a01b03811662000b3e5760405162461bcd60e51b815260206004820152600a6024820152691b1c0b5a5ccb5b9d5b1b60b21b604482015260640162000096565b6001600160a01b03831662000b865760405162461bcd60e51b815260206004820152600d60248201526c19d85d59d94b5a5ccb5b9d5b1b609a1b604482015260640162000096565b6001600160a01b03808a1660c0528c81166101005281811660e0819052908416610120526006899055600080546001600160a01b03191690911790556101408590528a600781111562000bdd5762000bdd6200199d565b61018081600781111562000bf55762000bf56200199d565b9052506001600160a01b038c8116828216146101a0528a811661016052600780546001600160a01b03199081168a841617909155600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018054909116918b16919091179055835162000c7e906005906020870190620013fe565b5050604051631526fe2760e01b8152600481018f905260009c508c9b507341a5881c17185383e19df6fa4ec158a6f4851a699a50631526fe279950602401975062000ccc9650505050505050565b60a06040518083038186803b15801562000ce557600080fd5b505afa15801562000cfa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d209190620019b3565b506001600160a01b03811661020052604051639abbdf4b60e01b815260048101899052929550935073569f5b842b5006ec17be02b8b94510ba8e79fbca9250639abbdf4b916024019050602060405180830381600087803b15801562000d8557600080fd5b505af115801562000d9a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dc09190620016ff565b6001600160a01b03166101e0816001600160a01b03168152505060e0516001600160a01b03166101e0516001600160a01b031663646780df6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e2357600080fd5b505afa15801562000e38573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e5e9190620016ff565b6001600160a01b03161462000eab5760405162461bcd60e51b815260206004820152601260248201527134b731b7b93932b1ba16b63816ba37b5b2b760711b604482015260640162000096565b6001600160a01b0382166101c081905260408051636e27cef960e01b81529051636e27cef991600480820192602092909190829003018186803b15801562000ef257600080fd5b505afa15801562000f07573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f2d9190620018fe565b60095562000f3a62000f84565b805162000f50916008916020909101906200148d565b505050505050505050505050505062001ac4565b600062000f7b836001600160a01b038416620013ac565b90505b92915050565b6060600080610200516001600160a01b031663857cb94a6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000fc657600080fd5b505afa15801562000fdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010019190620018fe565b905060005b818110156200112b5761020051604051637bb7bed160e01b8152600481018390526000916001600160a01b031690637bb7bed19060240160206040518083038186803b1580156200105657600080fd5b505afa1580156200106b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010919190620016ff565b905060c0516001600160a01b0316816001600160a01b031614158015620010d557506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b8015620010ff57506001600160a01b038116733432b6a60d23ca0dfca7761b7ab56459d9c964d014155b15620011155783620011118162001a4e565b9450505b5080620011228162001a4e565b91505062001006565b506200113982600362001a6c565b6001600160401b0381111562001153576200115362001537565b6040519080825280602002602001820160405280156200117d578160200160208202803683370190505b50925060c05183600081518110620011995762001199620017ad565b60200260200101906001600160a01b031690816001600160a01b031681525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b83600181518110620011e457620011e4620017ad565b60200260200101906001600160a01b031690816001600160a01b031681525050733432b6a60d23ca0dfca7761b7ab56459d9c964d0836002815181106200122f576200122f620017ad565b6001600160a01b0390921660209283029190910190910152600360005b82811015620013a55761020051604051637bb7bed160e01b8152600481018390526000916001600160a01b031690637bb7bed19060240160206040518083038186803b1580156200129c57600080fd5b505afa158015620012b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012d79190620016ff565b905060c0516001600160a01b0316816001600160a01b0316141580156200131b57506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b80156200134557506001600160a01b038116733432b6a60d23ca0dfca7761b7ab56459d9c964d014155b156200138f57808684620013598162001a4e565b9550815181106200136e576200136e620017ad565b60200260200101906001600160a01b031690816001600160a01b0316815250505b50806200139c8162001a4e565b9150506200124c565b5050505090565b6000818152600183016020526040812054620013f55750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000f7e565b50600062000f7e565b8280546200140c9062001a87565b90600052602060002090601f0160209004810192826200143057600085556200147b565b82601f106200144b57805160ff19168380011785556200147b565b828001600101855582156200147b579182015b828111156200147b5782518255916020019190600101906200145e565b5062001489929150620014e5565b5090565b8280548282559060005260206000209081019282156200147b579160200282015b828111156200147b57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620014ae565b5b80821115620014895760008155600101620014e6565b6001600160a01b03811681146200151257600080fd5b50565b80516200152281620014fc565b919050565b8051600881106200152257600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562001578576200157862001537565b604052919050565b600082601f8301126200159257600080fd5b81516001600160401b03811115620015ae57620015ae62001537565b6020620015c4601f8301601f191682016200154d565b8281528582848701011115620015d957600080fd5b60005b83811015620015f9578581018301518282018401528201620015dc565b838111156200160b5760008385840101525b5095945050505050565b60008060008060008060008060008060006101608c8e0312156200163857600080fd5b8b516200164581620014fc565b60208d0151909b506200165881620014fc565b99506200166860408d0162001527565b98506200167860608d0162001515565b97506200168860808d0162001515565b965060a08c015195506200169f60c08d0162001515565b9450620016af60e08d0162001515565b6101008d01516101208e01516101408f015192965090945092506001600160401b03811115620016de57600080fd5b620016ec8e828f0162001580565b9150509295989b509295989b9093969950565b6000602082840312156200171257600080fd5b81516200171f81620014fc565b9392505050565b6000604082840312156200173957600080fd5b82601f8301126200174957600080fd5b604080519081016001600160401b03811182821017156200176e576200176e62001537565b80604052508060408401858111156200178657600080fd5b845b81811015620017a257805183526020928301920162001788565b509195945050505050565b634e487b7160e01b600052603260045260246000fd5b6000610100808385031215620017d857600080fd5b83601f840112620017e857600080fd5b6040518181016001600160401b03811182821017156200180c576200180c62001537565b6040529083019080858311156200182257600080fd5b845b83811015620018495780516200183a81620014fc565b82526020918201910162001824565b509095945050505050565b60006101408083850312156200186957600080fd5b83601f8401126200187957600080fd5b6040518181016001600160401b03811182821017156200189d576200189d62001537565b604052908301908085831115620018b357600080fd5b845b8381101562001849578051620018cb81620014fc565b825260209182019101620018b5565b600060208284031215620018ed57600080fd5b815180151581146200171f57600080fd5b6000602082840312156200191157600080fd5b5051919050565b6000608082840312156200192b57600080fd5b82601f8301126200193b57600080fd5b604051608081016001600160401b038111828210171562001960576200196062001537565b6040528060808401858111156200197657600080fd5b845b81811015620017a25780516200198e81620014fc565b83526020928301920162001978565b634e487b7160e01b600052602160045260246000fd5b600080600080600060a08688031215620019cc57600080fd5b8551620019d981620014fc565b6020870151909550620019ec81620014fc565b6040870151909450620019ff81620014fc565b606087015190935062001a1281620014fc565b608087015190925060ff8116811462001a2a57600080fd5b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b600060001982141562001a655762001a6562001a38565b5060010190565b6000821982111562001a825762001a8262001a38565b500190565b600181811c9082168062001a9c57607f821691505b6020821081141562001abe57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051614d3762001e556000396000818161056701528181611ef801528181611fad01526122310152600081816106f701528181611360015281816123d301528181612d5b01528181612ddf01528181613a28015281816140be01526141380152600081816106d00152818161100a0152611333015260008181612a72015281816134400152613f740152600081816102fb0152818161295601528181612a3a015281816132b8015281816132f3015281816133390152818161337e015281816133c30152818161340801528181613de801528181613e2c01528181613e7001528181613eb401528181613ef80152613f3c0152600081816129ac01528181612ae601528181612b3501528181612f8701528181612fe30152818161303701528181613cd001528181613d5e0152818161459a015261462801526000818161044e01528181611cb5015281816124620152818161363601528181614312015281816143a001528181614431015281816144bf0152818161455001526145dd01526000818161072f0152612f600152600081816105dd01528181612b8c01528181612e8501528181613bda01528181613c720152818161435d015281816143eb0152818161447c0152818161450a01526146550152600081816104e901528181610dc701528181610e56015281816119f9015281816123b1015281816126c001528181612aad01528181612f3e015281816130150152818161326c01528181613d1e01528181613dbd0152614008015260008181610523015281816120330152818161213101526122b701526000818161034201528181610777015281816108cc01528181610a6301528181610b7f01528181610c5d01528181610cb901528181610f49015281816111f10152818161138b01528181611428015281816116540152818161181d0152818161255b015281816134ca0152818161356a0152613ac20152600081816105b60152818161065e01528181610a0a01528181610ac201528181610b5d01528181610bd101528181610c9001528181610e02015281816115b801528181611aff01528181611cf5015281816125d601528181612e6301528181612eb701528181612fc10152818161328d0152818161360b01528181613690015281816137f1015281816138d501528181613aa00152613d9c0152614d376000f3fe608060405234801561001057600080fd5b50600436106102ab5760003560e01c8063945c914211610172578063d3033c39116100d9578063eaada38211610092578063eaada382146106a5578063ec78e832146106b8578063eff40c45146106cb578063fbfa77cf146106f2578063fc0c546a14610719578063fd57a4df1461072a578063ffa1ad741461075157600080fd5b8063d3033c3914610640578063d572fd7f14610653578063d8dfeb451461065c578063de603fdc14610682578063e00af4a71461068a578063e5328e061461069d57600080fd5b8063b2016bd41161012b578063b2016bd4146105b1578063b20fdc0d146105d8578063c415b95c146105ff578063c965fa8a14610612578063ce5494bb1461061a578063d2c35ce81461062d57600080fd5b8063945c91421461051e578063951dc22c1461054557806399b71d5c1461055a5780639ec5a89414610562578063a3f4df7e14610589578063abc9b45e1461059e57600080fd5b80633fd8b02f11610216578063759cb53b116101cf578063759cb53b1461048b578063795dae66146104a65780637bb7bed1146104ae5780637d7c2a1c146104c15780637f44579b146104e457806391db7b0d1461050b57600080fd5b80633fd8b02f146104015780634032b72b1461040a578063440d72481461041d57806345bffdf61461044057806348cd2ddd1461044957806374db9ad41461047057600080fd5b80631cda4a8d116102685780631cda4a8d1461037b578063200ea22214610396578063201e81a8146103b1578063251c1aa3146103c45780632b3297f9146103db5780632e1a7d4d146103ee57600080fd5b806302ace7fe146102b057806304f4efc5146102e157806306beb80a146102f657806314ae9f2e1461032a57806316f0115b1461033d5780631848effa14610364575b600080fd5b6102cb73569f5b842b5006ec17be02b8b94510ba8e79fbca81565b6040516102d8919061478a565b60405180910390f35b6102f46102ef36600461479e565b610775565b005b61031d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516102d891906147cd565b6102f461033836600461481a565b6108ca565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6102cb6f22d53366457f9d5e68ec105046fc438381565b6102cb7341a5881c17185383e19df6fa4ec158a6f4851a6981565b6102cb733432b6a60d23ca0dfca7761b7ab56459d9c964d081565b6102f46103bf36600461484d565b6109dc565b6103cd600b5481565b6040519081526020016102d8565b6002546102cb906001600160a01b031681565b6102f46103fc36600461479e565b610a60565b6103cd60095481565b6102f461041836600461481a565b610cb7565b61043061042b36600461481a565b610dc3565b60405190151581526020016102d8565b6103cd600a5481565b6103cd7f000000000000000000000000000000000000000000000000000000000000000081565b6102cb73d061d61a4d941c39e5453435b6345dc261c2fce081565b6102cb734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b81565b6103cd610e3c565b6102cb6104bc36600461479e565b610ee0565b6104c9610f0a565b604080519384526020840192909252908201526060016102d8565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6102f461051936600461479e565b610f47565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b61054d611119565b6040516102d89190614912565b6102f4611125565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b610591611161565b6040516102d8919061498b565b6102f46105ac36600461481a565b6111ef565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6001546102cb906001600160a01b031681565b6103cd611319565b6102f461062836600461481a565b611388565b6102f461063b36600461481a565b611652565b6102f461064e36600461481a565b61181b565b6103cd60065481565b7f00000000000000000000000000000000000000000000000000000000000000006102cb565b6103cd6119d8565b6102f461069836600461481a565b611a88565b6103cd611ca3565b6007546102cb906001600160a01b031681565b6000546102cb906001600160a01b031681565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03166102cb565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b610591604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080691906149be565b6001600160a01b0316336001600160a01b03161461083f5760405162461bcd60e51b8152600401610836906149db565b60405180910390fd5b61271081106108895760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610836565b60065460408051918252602082018390527f43a94473b3422f31e660358900c02b907f22142a3224beace1f2b9f1fa079a9e910160405180910390a1600655565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561092357600080fd5b505afa158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b91906149be565b6001600160a01b0316336001600160a01b03161461098b5760405162461bcd60e51b8152600401610836906149db565b610996600382611d46565b6109d95760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610836565b50565b6109e9335b600390611d5b565b610a055760405162461bcd60e51b815260040161083690614a12565b610a2e7f0000000000000000000000000000000000000000000000000000000000000000611d7d565b610a36611ef1565b8051610a4a916008916020909101906146ba565b50610a55600061239b565b6109d960001961239b565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610aa85760405162461bcd60e51b815260040161083690614a42565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610af790309060040161478a565b60206040518083038186803b158015610b0f57600080fd5b505afa158015610b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b479190614a75565b9050818110610ba857610ba46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846123f8565b5050565b610bba610bb58284614aa4565b61245b565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610c0690309060040161478a565b60206040518083038186803b158015610c1e57600080fd5b505afa158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c569190614a75565b9050610ba47f0000000000000000000000000000000000000000000000000000000000000000610c86848461250c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906123f8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4891906149be565b6001600160a01b0316336001600160a01b031614610d785760405162461bcd60e51b8152600401610836906149db565b610d83600382611d2a565b6109d95760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610836565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610e3657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610e8b90309060040161478a565b60206040518083038186803b158015610ea357600080fd5b505afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190614a75565b905090565b60088181548110610ef057600080fd5b6000918252602090912001546001600160a01b0316905081565b60008080610f17336109e1565b610f335760405162461bcd60e51b815260040161083690614a12565b610f3b612522565b9250925092505b909192565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa057600080fd5b505afa158015610fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd891906149be565b6001600160a01b0316336001600160a01b0316146110085760405162461bcd60e51b8152600401610836906149db565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e27cef96040518163ffffffff1660e01b815260040160206040518083038186803b15801561106157600080fd5b505afa158015611075573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110999190614a75565b8110156110d85760405162461bcd60e51b815260206004820152600d60248201526c3832b934b7b216b63a16b6b4b760991b6044820152606401610836565b60095460408051918252602082018390527ffe56e44f0698c36962f6cf507a9af4bcb609a7681784d38395451b065bd2ac6d910160405180910390a1600955565b6060610edb60036125c7565b61112e336109e1565b61114a5760405162461bcd60e51b815260040161083690614a12565b611154600061239b565b61115f60001961239b565b565b6005805461116e90614abb565b80601f016020809104026020016040519081016040528092919081815260200182805461119a90614abb565b80156111e75780601f106111bc576101008083540402835291602001916111e7565b820191906000526020600020905b8154815290600101906020018083116111ca57829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561124857600080fd5b505afa15801561125c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128091906149be565b6001600160a01b0316336001600160a01b0316146112b05760405162461bcd60e51b8152600401610836906149db565b600754604080516001600160a01b03928316815291831660208301527fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b60405163d9f96e8d60e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d9f96e8d90610e8b907f00000000000000000000000000000000000000000000000000000000000000009060040161478a565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146113d05760405162461bcd60e51b815260040161083690614a42565b6001600160a01b0381166114265760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610836565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561148957600080fd5b505afa15801561149d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c191906149be565b6001600160a01b0316146115105760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610836565b611519816125d4565b6000546040516370a0823160e01b81526115b29183916001600160a01b03909116906370a082319061154f90309060040161478a565b60206040518083038186803b15801561156757600080fd5b505afa15801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f9190614a75565b6000546001600160a01b031691906123f8565b6109d9817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611602919061478a565b60206040518083038186803b15801561161a57600080fd5b505afa15801561162e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c869190614a75565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ab57600080fd5b505afa1580156116bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e391906149be565b6001600160a01b0316336001600160a01b0316146117135760405162461bcd60e51b8152600401610836906149db565b6001600160a01b0381166117695760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610836565b6001546001600160a01b03828116911614156117bf5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610836565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561187457600080fd5b505afa158015611888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ac91906149be565b6001600160a01b0316336001600160a01b0316146118dc5760405162461bcd60e51b8152600401610836906149db565b6001600160a01b03811661192c5760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b6044820152606401610836565b6002546001600160a01b038281169116141561197c5760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b6044820152606401610836565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b60006119e2611319565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611a2e90309060040161478a565b60206040518083038186803b158015611a4657600080fd5b505afa158015611a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7e9190614a75565b610edb9190614af6565b611a91336109e1565b611aad5760405162461bcd60e51b815260040161083690614a12565b6001546001600160a01b0316611afd5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610836565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611b7f5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610836565b611b8881610dc3565b15611bcc5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610836565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611c07576001546109d9906001600160a01b0316476127ad565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611c3690309060040161478a565b60206040518083038186803b158015611c4e57600080fd5b505afa158015611c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c869190614a75565b600154909150610ba4906001600160a01b038481169116836123f8565b6000611cde611cb06119d8565b611cd97f00000000000000000000000000000000000000000000000000000000000000006128c6565b612943565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611a2e90309060040161478a565b6000611d3f836001600160a01b038416612c0e565b9392505050565b6000611d3f836001600160a01b038416612c5d565b6001600160a01b03811660009081526001830160205260408120541515611d3f565b611d85612d50565b60085460005b81811015611eec57600060088281548110611da857611da8614b0e565b60009182526020822001546040516370a0823160e01b81526001600160a01b03909116925082906370a0823190611de390309060040161478a565b60206040518083038186803b158015611dfb57600080fd5b505afa158015611e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e339190614a75565b90508015611ed957600254604051636ccb2b0160e01b81526001600160a01b0384811660048301528781166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b158015611e9e57600080fd5b505af1925050508015611ece575060408051601f3d908101601f19168201909252611ecb91810190614a75565b60015b611ed757611ed9565b505b505080611ee590614b24565b9050611d8b565b505050565b60606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663857cb94a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4f57600080fd5b505afa158015611f63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f879190614a75565b905060005b818110156120df57604051637bb7bed160e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637bb7bed19060240160206040518083038186803b158015611ff757600080fd5b505afa15801561200b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202f91906149be565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415801561209057506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b80156120b957506001600160a01b038116733432b6a60d23ca0dfca7761b7ab56459d9c964d014155b156120cc57836120c881614b24565b9450505b50806120d781614b24565b915050611f8c565b506120eb826003614af6565b67ffffffffffffffff81111561210357612103614837565b60405190808252806020026020018201604052801561212c578160200160208202803683370190505b5092507f00000000000000000000000000000000000000000000000000000000000000008360008151811061216357612163614b0e565b60200260200101906001600160a01b031690816001600160a01b031681525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b836001815181106121ab576121ab614b0e565b60200260200101906001600160a01b031690816001600160a01b031681525050733432b6a60d23ca0dfca7761b7ab56459d9c964d0836002815181106121f3576121f3614b0e565b6001600160a01b0390921660209283029190910190910152600360005b8281101561239457604051637bb7bed160e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637bb7bed19060240160206040518083038186803b15801561227b57600080fd5b505afa15801561228f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b391906149be565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415801561231457506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b801561233d57506001600160a01b038116733432b6a60d23ca0dfca7761b7ab56459d9c964d014155b156123815780868461234e81614b24565b95508151811061236057612360614b0e565b60200260200101906001600160a01b031690816001600160a01b0316815250505b508061238c81614b24565b915050612210565b5050505090565b6123a481612e45565b6109d96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613058565b6040516001600160a01b038316602482015260448101829052611eec90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261317c565b60006124867f00000000000000000000000000000000000000000000000000000000000000006128c6565b90506000612492610e3c565b9050600061249e611319565b6124a89083614af6565b905060006124d36124b98386612943565b6124c38488614b3f565b6124cd9190614b5e565b8361250c565b9050806124e1575050505050565b828111156124fb576124fb6124f68483614aa4565b61324e565b612505818561325c565b5050505050565b600081831061251b5781611d3f565b5090919050565b600080600061252f6134c2565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b1580156125a757600080fd5b505af11580156125bb573d6000803e3d6000fd5b50505050610f426138ba565b60606000611d3f83613967565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561263757600080fd5b505afa15801561264b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266f91906149be565b6001600160a01b0316146126be5760405162461bcd60e51b81526020600482015260166024820152753bb937b73396b1b7b63630ba32b930b616ba37b5b2b760511b6044820152606401610836565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561272157600080fd5b505afa158015612735573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275991906149be565b6001600160a01b0316146127a55760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b6044820152606401610836565b6109d96139c3565b804710156127fd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610836565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461284a576040519150601f19603f3d011682016040523d82523d6000602084013e61284f565b606091505b5050905080611eec5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610836565b600060016001607f1b031982121580156128e357506001607f1b82125b61293f5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610836565b5090565b60008261295257506000610e36565b60027f00000000000000000000000000000000000000000000000000000000000000006007811115612986576129866147b7565b1415612a365760405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d7906044015b60206040518083038186803b1580156129f757600080fd5b505afa158015612a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2f9190614a75565b9050610e36565b60077f00000000000000000000000000000000000000000000000000000000000000006007811115612a6a57612a6a6147b7565b1415612b6c577f000000000000000000000000000000000000000000000000000000000000000015612b15576040516341b028f360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600f84900b60448301527f000000000000000000000000000000000000000000000000000000000000000016906341b028f3906064016129df565b60405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d7906044016129df565b60405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d79060440160206040518083038186803b158015612bd657600080fd5b505afa158015612bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3f9190614a75565b6000818152600183016020526040812054612c5557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e36565b506000610e36565b60008181526001830160205260408120548015612d46576000612c81600183614aa4565b8554909150600090612c9590600190614aa4565b9050818114612cfa576000866000018281548110612cb557612cb5614b0e565b9060005260206000200154905080876000018481548110612cd857612cd8614b0e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612d0b57612d0b614b80565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e36565b6000915050610e36565b600a54612d5957565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612db457600080fd5b505af1925050508015612dc5575060015b61115f5760405163a4698feb60e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a4698feb90602401600060405180830381600087803b158015612e2b57600080fd5b505af1158015612e3f573d6000803e3d6000fd5b50505050565b612e4e81613a93565b6002546001600160a01b0390811690612eaa907f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084613058565b612ede6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284613058565b60085460005b81811015612f3057612f20838560088481548110612f0457612f04614b0e565b6000918252602090912001546001600160a01b03169190613058565b612f2981614b24565b9050612ee4565b50612f856001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000085613058565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615611eec576130086001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000085613058565b611eec6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000855b8015806130e15750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156130a757600080fd5b505afa1580156130bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130df9190614a75565b155b61314c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610836565b6040516001600160a01b038316602482015260448101829052611eec90849063095ea7b360e01b90606401612424565b60006131d1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ae79092919063ffffffff16565b805190915015611eec57808060200190518101906131ef9190614b96565b611eec5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610836565b80156109d9576109d96139c3565b81613265575050565b60006132b27f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085613afe565b905060007f000000000000000000000000000000000000000000000000000000000000000060078111156132e8576132e86147b7565b1480613325575060017f00000000000000000000000000000000000000000000000000000000000000006007811115613323576133236147b7565b145b1561333557611eec838284613bb3565b60037f00000000000000000000000000000000000000000000000000000000000000006007811115613369576133696147b7565b141561337a57611eec838284613c44565b60047f000000000000000000000000000000000000000000000000000000000000000060078111156133ae576133ae6147b7565b14156133bf57611eec838284613c44565b60027f000000000000000000000000000000000000000000000000000000000000000060078111156133f3576133f36147b7565b141561340457611eec838284613ca9565b60077f00000000000000000000000000000000000000000000000000000000000000006007811115613438576134386147b7565b141561347a577f00000000000000000000000000000000000000000000000000000000000000001561346f57611eec838284613d07565b611eec838284613ca9565b60405162461bcd60e51b815260206004820152601a60248201527f77697468647261772d66726f6d2d63757276652d6661696c65640000000000006044820152606401610836565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401613514919061478a565b60206040518083038186803b15801561352c57600080fd5b505afa158015613540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135649190614a75565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016135b4919061478a565b60206040518083038186803b1580156135cc57600080fd5b505afa1580156135e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136049190614a75565b905061362f7f0000000000000000000000000000000000000000000000000000000000000000611d7d565b600061365a7f00000000000000000000000000000000000000000000000000000000000000006128c6565b90506000613666610e3c565b90506000613672611319565b61367c9083614af6565b9050600061368a8285612943565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016136da919061478a565b60206040518083038186803b1580156136f257600080fd5b505afa158015613706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372a9190614a75565b905060006137388383614af6565b9050868111156137535761374c8782614aa4565b9a50613760565b61375d8188614aa4565b99505b600061376c898d614af6565b90508281111561387d57600061378b6137858584614aa4565b8661250c565b9050801561387b5760006137b3866137a38985614b3f565b6137ad9190614b5e565b8861250c565b9050801561387957878111156137d0576137d06124f68983614aa4565b6137da818a61325c565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061382690309060040161478a565b60206040518083038186803b15801561383e57600080fd5b505afa158015613852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138769190614a75565b94505b505b505b613887838a61250c565b99508983116138975760006138aa565b6138aa6138a48b85614aa4565b8d61250c565b9b50505050505050505050909192565b6040516370a0823160e01b815261395f906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061390a90309060040161478a565b60206040518083038186803b15801561392257600080fd5b505afa158015613936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395a9190614a75565b613d8d565b61115f613fee565b6060816000018054806020026020016040519081016040528092919081815260200182805480156139b757602002820191906000526020600020905b8154815260200190600101908083116139a3575b50505050509050919050565b600b54421015613a0e5760405162461bcd60e51b8152602060048201526016602482015275756e6c6f636b2d74696d652d6469646e742d7061737360501b6044820152606401610836565b600a54604051634ab794a360e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634ab794a390602401600060405180830381600087803b158015613a7457600080fd5b505af1158015613a88573d6000803e3d6000fd5b50506000600a555050565b6109d96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613058565b6060613af684846000856141de565b949350505050565b6000612710600654612710613b139190614aa4565b600754604051632d9198e160e21b81526001600160a01b0388811660048301528781166024830152604482018790529091169063b64663849060640160206040518083038186803b158015613b6757600080fd5b505afa158015613b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b9f9190614a75565b613ba99190614b3f565b613af69190614b5e565b604051630d2680e960e11b815260048101849052600f82900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d2906064015b600060405180830381600087803b158015613c2757600080fd5b505af1158015613c3b573d6000803e3d6000fd5b50505050505050565b60405163517a55a360e01b815260048101849052600f82900b602482015260448101839052600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063517a55a390608401613c0d565b604051630d2680e960e11b815260048101849052600f82900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d290606401613c0d565b6040516314f6943160e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600f83900b6044830152606482018490527f000000000000000000000000000000000000000000000000000000000000000016906329ed286290608401613c0d565b80613d955750565b6000613de27f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084613afe565b905060007f00000000000000000000000000000000000000000000000000000000000000006007811115613e1857613e186147b7565b1415613e2857610ba48282614306565b60037f00000000000000000000000000000000000000000000000000000000000000006007811115613e5c57613e5c6147b7565b1415613e6c57610ba48282614394565b60017f00000000000000000000000000000000000000000000000000000000000000006007811115613ea057613ea06147b7565b1415613eb057610ba48282614425565b60047f00000000000000000000000000000000000000000000000000000000000000006007811115613ee457613ee46147b7565b1415613ef457610ba482826144b3565b60027f00000000000000000000000000000000000000000000000000000000000000006007811115613f2857613f286147b7565b1415613f3857610ba48282614544565b60077f00000000000000000000000000000000000000000000000000000000000000006007811115613f6c57613f6c6147b7565b1415613fac577f000000000000000000000000000000000000000000000000000000000000000015613fa257610ba482826145d1565b610ba48282614544565b60405162461bcd60e51b815260206004820152601760248201527619195c1bdcda5d0b5d1bcb58dd5c9d994b59985a5b1959604a1b6044820152606401610836565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061403d90309060040161478a565b60206040518083038186803b15801561405557600080fd5b505afa158015614069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408d9190614a75565b905080156109d957600a541561411e57600a54604051630687c4bd60e01b81526004810191909152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630687c4bd90604401600060405180830381600087803b15801561410a57600080fd5b505af1158015612505573d6000803e3d6000fd5b60095460405163a41ce7e960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a41ce7e991614176918591600401918252602082015260400190565b602060405180830381600087803b15801561419057600080fd5b505af11580156141a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141c89190614a75565b600a556009546141d89042614af6565b600b5550565b60608247101561423f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610836565b843b61428d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610836565b600080866001600160a01b031685876040516142a99190614bb8565b60006040518083038185875af1925050503d80600081146142e6576040519150601f19603f3d011682016040523d82523d6000602084013e6142eb565b606091505b50915091506142fb828286614681565b979650505050505050565b61430e61471b565b82817f00000000000000000000000000000000000000000000000000000000000000006002811061434157614341614b0e565b6020020152604051630b4c7e4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630b4c7e4d90613c0d9084908690600401614bf7565b61439c61471b565b82817f0000000000000000000000000000000000000000000000000000000000000000600281106143cf576143cf614b0e565b602002015260405163ee22be2360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ee22be2390613c0d9084908690600190600401614c12565b61442d614739565b82817f00000000000000000000000000000000000000000000000000000000000000006003811061446057614460614b0e565b6020020152604051634515cef360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634515cef390613c0d9084908690600401614c59565b6144bb614739565b82817f0000000000000000000000000000000000000000000000000000000000000000600381106144ee576144ee614b0e565b60200201526040516315b74c9d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632b6e993a90613c0d9084908690600190600401614c74565b61454c614757565b82817f00000000000000000000000000000000000000000000000000000000000000006004811061457f5761457f614b0e565b602002015260405162a6cbcd60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063029b2f3490613c0d9084908690600401614cbb565b6145d9614757565b82817f00000000000000000000000000000000000000000000000000000000000000006004811061460c5761460c614b0e565b602002015260405163384e03db60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063384e03db90613c0d907f00000000000000000000000000000000000000000000000000000000000000009085908790600401614cd6565b60608315614690575081611d3f565b8251156146a05782518084602001fd5b8160405162461bcd60e51b8152600401610836919061498b565b82805482825590600052602060002090810192821561470f579160200282015b8281111561470f57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906146da565b5061293f929150614775565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b5b8082111561293f5760008155600101614776565b6001600160a01b0391909116815260200190565b6000602082840312156147b057600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60208101600883106147ef57634e487b7160e01b600052602160045260246000fd5b91905290565b6001600160a01b03811681146109d957600080fd5b8035614815816147f5565b919050565b60006020828403121561482c57600080fd5b8135611d3f816147f5565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561486057600080fd5b823567ffffffffffffffff8082111561487857600080fd5b818501915085601f83011261488c57600080fd5b81358181111561489e5761489e614837565b8060051b604051601f19603f830116810181811085821117156148c3576148c3614837565b6040529182528482019250838101850191888311156148e157600080fd5b938501935b82851015614906576148f78561480a565b845293850193928501926148e6565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156149535783516001600160a01b03168352928401929184019160010161492e565b50909695505050505050565b60005b8381101561497a578181015183820152602001614962565b83811115612e3f5750506000910152565b60208152600082518060208401526149aa81604085016020870161495f565b601f01601f19169190910160400192915050565b6000602082840312156149d057600080fd5b8151611d3f816147f5565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600060208284031215614a8757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015614ab657614ab6614a8e565b500390565b600181811c90821680614acf57607f821691505b60208210811415614af057634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115614b0957614b09614a8e565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614b3857614b38614a8e565b5060010190565b6000816000190483118215151615614b5957614b59614a8e565b500290565b600082614b7b57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fd5b600060208284031215614ba857600080fd5b81518015158114611d3f57600080fd5b60008251614bca81846020870161495f565b9190910192915050565b8060005b6002811015612e3f578151845260209384019390910190600101614bd8565b60608101614c058285614bd4565b8260408301529392505050565b60808101614c208286614bd4565b8360408301528215156060830152949350505050565b8060005b6003811015612e3f578151845260209384019390910190600101614c3a565b60808101614c678285614c36565b8260608301529392505050565b60a08101614c828286614c36565b8360608301528215156080830152949350505050565b8060005b6004811015612e3f578151845260209384019390910190600101614c9c565b60a08101614cc98285614c98565b8260808301529392505050565b6001600160a01b038416815260c08101614cf36020830185614c98565b8260a083015294935050505056fea2646970667358221220f4360d8cf200ea27485ee7713b1c6d0635965b9d3614610748456712bbaa247f64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ab5760003560e01c8063945c914211610172578063d3033c39116100d9578063eaada38211610092578063eaada382146106a5578063ec78e832146106b8578063eff40c45146106cb578063fbfa77cf146106f2578063fc0c546a14610719578063fd57a4df1461072a578063ffa1ad741461075157600080fd5b8063d3033c3914610640578063d572fd7f14610653578063d8dfeb451461065c578063de603fdc14610682578063e00af4a71461068a578063e5328e061461069d57600080fd5b8063b2016bd41161012b578063b2016bd4146105b1578063b20fdc0d146105d8578063c415b95c146105ff578063c965fa8a14610612578063ce5494bb1461061a578063d2c35ce81461062d57600080fd5b8063945c91421461051e578063951dc22c1461054557806399b71d5c1461055a5780639ec5a89414610562578063a3f4df7e14610589578063abc9b45e1461059e57600080fd5b80633fd8b02f11610216578063759cb53b116101cf578063759cb53b1461048b578063795dae66146104a65780637bb7bed1146104ae5780637d7c2a1c146104c15780637f44579b146104e457806391db7b0d1461050b57600080fd5b80633fd8b02f146104015780634032b72b1461040a578063440d72481461041d57806345bffdf61461044057806348cd2ddd1461044957806374db9ad41461047057600080fd5b80631cda4a8d116102685780631cda4a8d1461037b578063200ea22214610396578063201e81a8146103b1578063251c1aa3146103c45780632b3297f9146103db5780632e1a7d4d146103ee57600080fd5b806302ace7fe146102b057806304f4efc5146102e157806306beb80a146102f657806314ae9f2e1461032a57806316f0115b1461033d5780631848effa14610364575b600080fd5b6102cb73569f5b842b5006ec17be02b8b94510ba8e79fbca81565b6040516102d8919061478a565b60405180910390f35b6102f46102ef36600461479e565b610775565b005b61031d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516102d891906147cd565b6102f461033836600461481a565b6108ca565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6102cb6f22d53366457f9d5e68ec105046fc438381565b6102cb7341a5881c17185383e19df6fa4ec158a6f4851a6981565b6102cb733432b6a60d23ca0dfca7761b7ab56459d9c964d081565b6102f46103bf36600461484d565b6109dc565b6103cd600b5481565b6040519081526020016102d8565b6002546102cb906001600160a01b031681565b6102f46103fc36600461479e565b610a60565b6103cd60095481565b6102f461041836600461481a565b610cb7565b61043061042b36600461481a565b610dc3565b60405190151581526020016102d8565b6103cd600a5481565b6103cd7f000000000000000000000000000000000000000000000000000000000000000081565b6102cb73d061d61a4d941c39e5453435b6345dc261c2fce081565b6102cb734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b81565b6103cd610e3c565b6102cb6104bc36600461479e565b610ee0565b6104c9610f0a565b604080519384526020840192909252908201526060016102d8565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6102f461051936600461479e565b610f47565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b61054d611119565b6040516102d89190614912565b6102f4611125565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b610591611161565b6040516102d8919061498b565b6102f46105ac36600461481a565b6111ef565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6001546102cb906001600160a01b031681565b6103cd611319565b6102f461062836600461481a565b611388565b6102f461063b36600461481a565b611652565b6102f461064e36600461481a565b61181b565b6103cd60065481565b7f00000000000000000000000000000000000000000000000000000000000000006102cb565b6103cd6119d8565b6102f461069836600461481a565b611a88565b6103cd611ca3565b6007546102cb906001600160a01b031681565b6000546102cb906001600160a01b031681565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03166102cb565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b610591604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080691906149be565b6001600160a01b0316336001600160a01b03161461083f5760405162461bcd60e51b8152600401610836906149db565b60405180910390fd5b61271081106108895760405162461bcd60e51b8152602060048201526016602482015275696e76616c69642d736c6970706167652d76616c756560501b6044820152606401610836565b60065460408051918252602082018390527f43a94473b3422f31e660358900c02b907f22142a3224beace1f2b9f1fa079a9e910160405180910390a1600655565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561092357600080fd5b505afa158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b91906149be565b6001600160a01b0316336001600160a01b03161461098b5760405162461bcd60e51b8152600401610836906149db565b610996600382611d46565b6109d95760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b6044820152606401610836565b50565b6109e9335b600390611d5b565b610a055760405162461bcd60e51b815260040161083690614a12565b610a2e7f0000000000000000000000000000000000000000000000000000000000000000611d7d565b610a36611ef1565b8051610a4a916008916020909101906146ba565b50610a55600061239b565b6109d960001961239b565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610aa85760405162461bcd60e51b815260040161083690614a42565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610af790309060040161478a565b60206040518083038186803b158015610b0f57600080fd5b505afa158015610b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b479190614a75565b9050818110610ba857610ba46001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846123f8565b5050565b610bba610bb58284614aa4565b61245b565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610c0690309060040161478a565b60206040518083038186803b158015610c1e57600080fd5b505afa158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c569190614a75565b9050610ba47f0000000000000000000000000000000000000000000000000000000000000000610c86848461250c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906123f8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4891906149be565b6001600160a01b0316336001600160a01b031614610d785760405162461bcd60e51b8152600401610836906149db565b610d83600382611d2a565b6109d95760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b6044820152606401610836565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610e3657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610e8b90309060040161478a565b60206040518083038186803b158015610ea357600080fd5b505afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190614a75565b905090565b60088181548110610ef057600080fd5b6000918252602090912001546001600160a01b0316905081565b60008080610f17336109e1565b610f335760405162461bcd60e51b815260040161083690614a12565b610f3b612522565b9250925092505b909192565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa057600080fd5b505afa158015610fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd891906149be565b6001600160a01b0316336001600160a01b0316146110085760405162461bcd60e51b8152600401610836906149db565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636e27cef96040518163ffffffff1660e01b815260040160206040518083038186803b15801561106157600080fd5b505afa158015611075573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110999190614a75565b8110156110d85760405162461bcd60e51b815260206004820152600d60248201526c3832b934b7b216b63a16b6b4b760991b6044820152606401610836565b60095460408051918252602082018390527ffe56e44f0698c36962f6cf507a9af4bcb609a7681784d38395451b065bd2ac6d910160405180910390a1600955565b6060610edb60036125c7565b61112e336109e1565b61114a5760405162461bcd60e51b815260040161083690614a12565b611154600061239b565b61115f60001961239b565b565b6005805461116e90614abb565b80601f016020809104026020016040519081016040528092919081815260200182805461119a90614abb565b80156111e75780601f106111bc576101008083540402835291602001916111e7565b820191906000526020600020905b8154815290600101906020018083116111ca57829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561124857600080fd5b505afa15801561125c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128091906149be565b6001600160a01b0316336001600160a01b0316146112b05760405162461bcd60e51b8152600401610836906149db565b600754604080516001600160a01b03928316815291831660208301527fc96bca3f57d35a1057a3357bced51fac157918147faa56845639671c516ec69c910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b60405163d9f96e8d60e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d9f96e8d90610e8b907f00000000000000000000000000000000000000000000000000000000000000009060040161478a565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146113d05760405162461bcd60e51b815260040161083690614a42565b6001600160a01b0381166114265760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610836565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561148957600080fd5b505afa15801561149d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c191906149be565b6001600160a01b0316146115105760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b6044820152606401610836565b611519816125d4565b6000546040516370a0823160e01b81526115b29183916001600160a01b03909116906370a082319061154f90309060040161478a565b60206040518083038186803b15801561156757600080fd5b505afa15801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f9190614a75565b6000546001600160a01b031691906123f8565b6109d9817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611602919061478a565b60206040518083038186803b15801561161a57600080fd5b505afa15801561162e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c869190614a75565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156116ab57600080fd5b505afa1580156116bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e391906149be565b6001600160a01b0316336001600160a01b0316146117135760405162461bcd60e51b8152600401610836906149db565b6001600160a01b0381166117695760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610836565b6001546001600160a01b03828116911614156117bf5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b6044820152606401610836565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561187457600080fd5b505afa158015611888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ac91906149be565b6001600160a01b0316336001600160a01b0316146118dc5760405162461bcd60e51b8152600401610836906149db565b6001600160a01b03811661192c5760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b6044820152606401610836565b6002546001600160a01b038281169116141561197c5760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b6044820152606401610836565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b60006119e2611319565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611a2e90309060040161478a565b60206040518083038186803b158015611a4657600080fd5b505afa158015611a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7e9190614a75565b610edb9190614af6565b611a91336109e1565b611aad5760405162461bcd60e51b815260040161083690614a12565b6001546001600160a01b0316611afd5760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b6044820152606401610836565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415611b7f5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610836565b611b8881610dc3565b15611bcc5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610836565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611c07576001546109d9906001600160a01b0316476127ad565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611c3690309060040161478a565b60206040518083038186803b158015611c4e57600080fd5b505afa158015611c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c869190614a75565b600154909150610ba4906001600160a01b038481169116836123f8565b6000611cde611cb06119d8565b611cd97f00000000000000000000000000000000000000000000000000000000000000006128c6565b612943565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611a2e90309060040161478a565b6000611d3f836001600160a01b038416612c0e565b9392505050565b6000611d3f836001600160a01b038416612c5d565b6001600160a01b03811660009081526001830160205260408120541515611d3f565b611d85612d50565b60085460005b81811015611eec57600060088281548110611da857611da8614b0e565b60009182526020822001546040516370a0823160e01b81526001600160a01b03909116925082906370a0823190611de390309060040161478a565b60206040518083038186803b158015611dfb57600080fd5b505afa158015611e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e339190614a75565b90508015611ed957600254604051636ccb2b0160e01b81526001600160a01b0384811660048301528781166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b158015611e9e57600080fd5b505af1925050508015611ece575060408051601f3d908101601f19168201909252611ecb91810190614a75565b60015b611ed757611ed9565b505b505080611ee590614b24565b9050611d8b565b505050565b60606000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663857cb94a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4f57600080fd5b505afa158015611f63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f879190614a75565b905060005b818110156120df57604051637bb7bed160e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637bb7bed19060240160206040518083038186803b158015611ff757600080fd5b505afa15801561200b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202f91906149be565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415801561209057506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b80156120b957506001600160a01b038116733432b6a60d23ca0dfca7761b7ab56459d9c964d014155b156120cc57836120c881614b24565b9450505b50806120d781614b24565b915050611f8c565b506120eb826003614af6565b67ffffffffffffffff81111561210357612103614837565b60405190808252806020026020018201604052801561212c578160200160208202803683370190505b5092507f00000000000000000000000000000000000000000000000000000000000000008360008151811061216357612163614b0e565b60200260200101906001600160a01b031690816001600160a01b031681525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b836001815181106121ab576121ab614b0e565b60200260200101906001600160a01b031690816001600160a01b031681525050733432b6a60d23ca0dfca7761b7ab56459d9c964d0836002815181106121f3576121f3614b0e565b6001600160a01b0390921660209283029190910190910152600360005b8281101561239457604051637bb7bed160e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637bb7bed19060240160206040518083038186803b15801561227b57600080fd5b505afa15801561228f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b391906149be565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415801561231457506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14155b801561233d57506001600160a01b038116733432b6a60d23ca0dfca7761b7ab56459d9c964d014155b156123815780868461234e81614b24565b95508151811061236057612360614b0e565b60200260200101906001600160a01b031690816001600160a01b0316815250505b508061238c81614b24565b915050612210565b5050505090565b6123a481612e45565b6109d96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613058565b6040516001600160a01b038316602482015260448101829052611eec90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261317c565b60006124867f00000000000000000000000000000000000000000000000000000000000000006128c6565b90506000612492610e3c565b9050600061249e611319565b6124a89083614af6565b905060006124d36124b98386612943565b6124c38488614b3f565b6124cd9190614b5e565b8361250c565b9050806124e1575050505050565b828111156124fb576124fb6124f68483614aa4565b61324e565b612505818561325c565b5050505050565b600081831061251b5781611d3f565b5090919050565b600080600061252f6134c2565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b1580156125a757600080fd5b505af11580156125bb573d6000803e3d6000fd5b50505050610f426138ba565b60606000611d3f83613967565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561263757600080fd5b505afa15801561264b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266f91906149be565b6001600160a01b0316146126be5760405162461bcd60e51b81526020600482015260166024820152753bb937b73396b1b7b63630ba32b930b616ba37b5b2b760511b6044820152606401610836565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561272157600080fd5b505afa158015612735573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275991906149be565b6001600160a01b0316146127a55760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b6044820152606401610836565b6109d96139c3565b804710156127fd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610836565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461284a576040519150601f19603f3d011682016040523d82523d6000602084013e61284f565b606091505b5050905080611eec5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610836565b600060016001607f1b031982121580156128e357506001607f1b82125b61293f5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608401610836565b5090565b60008261295257506000610e36565b60027f00000000000000000000000000000000000000000000000000000000000000006007811115612986576129866147b7565b1415612a365760405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d7906044015b60206040518083038186803b1580156129f757600080fd5b505afa158015612a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2f9190614a75565b9050610e36565b60077f00000000000000000000000000000000000000000000000000000000000000006007811115612a6a57612a6a6147b7565b1415612b6c577f000000000000000000000000000000000000000000000000000000000000000015612b15576040516341b028f360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600f84900b60448301527f000000000000000000000000000000000000000000000000000000000000000016906341b028f3906064016129df565b60405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d7906044016129df565b60405163cc2b27d760e01b815260048101849052600f83900b60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cc2b27d79060440160206040518083038186803b158015612bd657600080fd5b505afa158015612bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3f9190614a75565b6000818152600183016020526040812054612c5557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e36565b506000610e36565b60008181526001830160205260408120548015612d46576000612c81600183614aa4565b8554909150600090612c9590600190614aa4565b9050818114612cfa576000866000018281548110612cb557612cb5614b0e565b9060005260206000200154905080876000018481548110612cd857612cd8614b0e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612d0b57612d0b614b80565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e36565b6000915050610e36565b600a54612d5957565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612db457600080fd5b505af1925050508015612dc5575060015b61115f5760405163a4698feb60e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a4698feb90602401600060405180830381600087803b158015612e2b57600080fd5b505af1158015612e3f573d6000803e3d6000fd5b50505050565b612e4e81613a93565b6002546001600160a01b0390811690612eaa907f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084613058565b612ede6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284613058565b60085460005b81811015612f3057612f20838560088481548110612f0457612f04614b0e565b6000918252602090912001546001600160a01b03169190613058565b612f2981614b24565b9050612ee4565b50612f856001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000085613058565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615611eec576130086001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000085613058565b611eec6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000855b8015806130e15750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156130a757600080fd5b505afa1580156130bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130df9190614a75565b155b61314c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610836565b6040516001600160a01b038316602482015260448101829052611eec90849063095ea7b360e01b90606401612424565b60006131d1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ae79092919063ffffffff16565b805190915015611eec57808060200190518101906131ef9190614b96565b611eec5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610836565b80156109d9576109d96139c3565b81613265575050565b60006132b27f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085613afe565b905060007f000000000000000000000000000000000000000000000000000000000000000060078111156132e8576132e86147b7565b1480613325575060017f00000000000000000000000000000000000000000000000000000000000000006007811115613323576133236147b7565b145b1561333557611eec838284613bb3565b60037f00000000000000000000000000000000000000000000000000000000000000006007811115613369576133696147b7565b141561337a57611eec838284613c44565b60047f000000000000000000000000000000000000000000000000000000000000000060078111156133ae576133ae6147b7565b14156133bf57611eec838284613c44565b60027f000000000000000000000000000000000000000000000000000000000000000060078111156133f3576133f36147b7565b141561340457611eec838284613ca9565b60077f00000000000000000000000000000000000000000000000000000000000000006007811115613438576134386147b7565b141561347a577f00000000000000000000000000000000000000000000000000000000000000001561346f57611eec838284613d07565b611eec838284613ca9565b60405162461bcd60e51b815260206004820152601a60248201527f77697468647261772d66726f6d2d63757276652d6661696c65640000000000006044820152606401610836565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401613514919061478a565b60206040518083038186803b15801561352c57600080fd5b505afa158015613540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135649190614a75565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016135b4919061478a565b60206040518083038186803b1580156135cc57600080fd5b505afa1580156135e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136049190614a75565b905061362f7f0000000000000000000000000000000000000000000000000000000000000000611d7d565b600061365a7f00000000000000000000000000000000000000000000000000000000000000006128c6565b90506000613666610e3c565b90506000613672611319565b61367c9083614af6565b9050600061368a8285612943565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016136da919061478a565b60206040518083038186803b1580156136f257600080fd5b505afa158015613706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372a9190614a75565b905060006137388383614af6565b9050868111156137535761374c8782614aa4565b9a50613760565b61375d8188614aa4565b99505b600061376c898d614af6565b90508281111561387d57600061378b6137858584614aa4565b8661250c565b9050801561387b5760006137b3866137a38985614b3f565b6137ad9190614b5e565b8861250c565b9050801561387957878111156137d0576137d06124f68983614aa4565b6137da818a61325c565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061382690309060040161478a565b60206040518083038186803b15801561383e57600080fd5b505afa158015613852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138769190614a75565b94505b505b505b613887838a61250c565b99508983116138975760006138aa565b6138aa6138a48b85614aa4565b8d61250c565b9b50505050505050505050909192565b6040516370a0823160e01b815261395f906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061390a90309060040161478a565b60206040518083038186803b15801561392257600080fd5b505afa158015613936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395a9190614a75565b613d8d565b61115f613fee565b6060816000018054806020026020016040519081016040528092919081815260200182805480156139b757602002820191906000526020600020905b8154815260200190600101908083116139a3575b50505050509050919050565b600b54421015613a0e5760405162461bcd60e51b8152602060048201526016602482015275756e6c6f636b2d74696d652d6469646e742d7061737360501b6044820152606401610836565b600a54604051634ab794a360e01b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634ab794a390602401600060405180830381600087803b158015613a7457600080fd5b505af1158015613a88573d6000803e3d6000fd5b50506000600a555050565b6109d96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613058565b6060613af684846000856141de565b949350505050565b6000612710600654612710613b139190614aa4565b600754604051632d9198e160e21b81526001600160a01b0388811660048301528781166024830152604482018790529091169063b64663849060640160206040518083038186803b158015613b6757600080fd5b505afa158015613b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b9f9190614a75565b613ba99190614b3f565b613af69190614b5e565b604051630d2680e960e11b815260048101849052600f82900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d2906064015b600060405180830381600087803b158015613c2757600080fd5b505af1158015613c3b573d6000803e3d6000fd5b50505050505050565b60405163517a55a360e01b815260048101849052600f82900b602482015260448101839052600160648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063517a55a390608401613c0d565b604051630d2680e960e11b815260048101849052600f82900b6024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631a4d01d290606401613c0d565b6040516314f6943160e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600f83900b6044830152606482018490527f000000000000000000000000000000000000000000000000000000000000000016906329ed286290608401613c0d565b80613d955750565b6000613de27f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084613afe565b905060007f00000000000000000000000000000000000000000000000000000000000000006007811115613e1857613e186147b7565b1415613e2857610ba48282614306565b60037f00000000000000000000000000000000000000000000000000000000000000006007811115613e5c57613e5c6147b7565b1415613e6c57610ba48282614394565b60017f00000000000000000000000000000000000000000000000000000000000000006007811115613ea057613ea06147b7565b1415613eb057610ba48282614425565b60047f00000000000000000000000000000000000000000000000000000000000000006007811115613ee457613ee46147b7565b1415613ef457610ba482826144b3565b60027f00000000000000000000000000000000000000000000000000000000000000006007811115613f2857613f286147b7565b1415613f3857610ba48282614544565b60077f00000000000000000000000000000000000000000000000000000000000000006007811115613f6c57613f6c6147b7565b1415613fac577f000000000000000000000000000000000000000000000000000000000000000015613fa257610ba482826145d1565b610ba48282614544565b60405162461bcd60e51b815260206004820152601760248201527619195c1bdcda5d0b5d1bcb58dd5c9d994b59985a5b1959604a1b6044820152606401610836565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061403d90309060040161478a565b60206040518083038186803b15801561405557600080fd5b505afa158015614069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408d9190614a75565b905080156109d957600a541561411e57600a54604051630687c4bd60e01b81526004810191909152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630687c4bd90604401600060405180830381600087803b15801561410a57600080fd5b505af1158015612505573d6000803e3d6000fd5b60095460405163a41ce7e960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a41ce7e991614176918591600401918252602082015260400190565b602060405180830381600087803b15801561419057600080fd5b505af11580156141a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141c89190614a75565b600a556009546141d89042614af6565b600b5550565b60608247101561423f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610836565b843b61428d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610836565b600080866001600160a01b031685876040516142a99190614bb8565b60006040518083038185875af1925050503d80600081146142e6576040519150601f19603f3d011682016040523d82523d6000602084013e6142eb565b606091505b50915091506142fb828286614681565b979650505050505050565b61430e61471b565b82817f00000000000000000000000000000000000000000000000000000000000000006002811061434157614341614b0e565b6020020152604051630b4c7e4d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630b4c7e4d90613c0d9084908690600401614bf7565b61439c61471b565b82817f0000000000000000000000000000000000000000000000000000000000000000600281106143cf576143cf614b0e565b602002015260405163ee22be2360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ee22be2390613c0d9084908690600190600401614c12565b61442d614739565b82817f00000000000000000000000000000000000000000000000000000000000000006003811061446057614460614b0e565b6020020152604051634515cef360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634515cef390613c0d9084908690600401614c59565b6144bb614739565b82817f0000000000000000000000000000000000000000000000000000000000000000600381106144ee576144ee614b0e565b60200201526040516315b74c9d60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632b6e993a90613c0d9084908690600190600401614c74565b61454c614757565b82817f00000000000000000000000000000000000000000000000000000000000000006004811061457f5761457f614b0e565b602002015260405162a6cbcd60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063029b2f3490613c0d9084908690600401614cbb565b6145d9614757565b82817f00000000000000000000000000000000000000000000000000000000000000006004811061460c5761460c614b0e565b602002015260405163384e03db60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063384e03db90613c0d907f00000000000000000000000000000000000000000000000000000000000000009085908790600401614cd6565b60608315614690575081611d3f565b8251156146a05782518084602001fd5b8160405162461bcd60e51b8152600401610836919061498b565b82805482825590600052602060002090810192821561470f579160200282015b8281111561470f57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906146da565b5061293f929150614775565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b5b8082111561293f5760008155600101614776565b6001600160a01b0391909116815260200190565b6000602082840312156147b057600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60208101600883106147ef57634e487b7160e01b600052602160045260246000fd5b91905290565b6001600160a01b03811681146109d957600080fd5b8035614815816147f5565b919050565b60006020828403121561482c57600080fd5b8135611d3f816147f5565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561486057600080fd5b823567ffffffffffffffff8082111561487857600080fd5b818501915085601f83011261488c57600080fd5b81358181111561489e5761489e614837565b8060051b604051601f19603f830116810181811085821117156148c3576148c3614837565b6040529182528482019250838101850191888311156148e157600080fd5b938501935b82851015614906576148f78561480a565b845293850193928501926148e6565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156149535783516001600160a01b03168352928401929184019160010161492e565b50909695505050505050565b60005b8381101561497a578181015183820152602001614962565b83811115612e3f5750506000910152565b60208152600082518060208401526149aa81604085016020870161495f565b601f01601f19169190910160400192915050565b6000602082840312156149d057600080fd5b8151611d3f816147f5565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600060208284031215614a8757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015614ab657614ab6614a8e565b500390565b600181811c90821680614acf57607f821691505b60208210811415614af057634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115614b0957614b09614a8e565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415614b3857614b38614a8e565b5060010190565b6000816000190483118215151615614b5957614b59614a8e565b500290565b600082614b7b57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fd5b600060208284031215614ba857600080fd5b81518015158114611d3f57600080fd5b60008251614bca81846020870161495f565b9190910192915050565b8060005b6002811015612e3f578151845260209384019390910190600101614bd8565b60608101614c058285614bd4565b8260408301529392505050565b60808101614c208286614bd4565b8360408301528215156060830152949350505050565b8060005b6003811015612e3f578151845260209384019390910190600101614c3a565b60808101614c678285614c36565b8260608301529392505050565b60a08101614c828286614c36565b8360608301528215156080830152949350505050565b8060005b6004811015612e3f578151845260209384019390910190600101614c9c565b60a08101614cc98285614c98565b8260808301529392505050565b6001600160a01b038416815260c08101614cf36020830185614c98565b8260a083015294935050505056fea2646970667358221220f4360d8cf200ea27485ee7713b1c6d0635965b9d3614610748456712bbaa247f64736f6c63430008090033",
  "devdoc": {
    "details": "This strategy only supports Curve deposits",
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "isReservedToken(address)": {
        "details": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "setRewardTokens(address[])": {
        "details": "convex pool can add new rewards. This method refresh list."
      },
      "sweepERC20(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateLockPeriod(uint256)": {
        "details": "To be used if the `lock_time_min` value changes or we want to increase it"
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "stateVariables": {
      "lockPeriod": {
        "details": "Uses the `lock_time_min` by default. Use `updateLockPeriod` to update it if needed."
      }
    },
    "title": "Convex for Frax strategy",
    "version": 1
  },
  "userdoc": {
    "events": {
      "UnlockTimeUpdated(uint256,uint256)": {
        "notice": "Emitted when `unlockTime` is updated"
      }
    },
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "fraxStaking()": {
        "notice": "Frax Staking contract"
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "kekId()": {
        "notice": "Staking position ID"
      },
      "lockPeriod()": {
        "notice": "FRAX staking period"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "rewards()": {
        "notice": "Convex Rewards contract"
      },
      "sweepERC20(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns collateral balance + collateral deposited to curve"
      },
      "unlockTime()": {
        "notice": "Next time where the withdraw will be available"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateLockPeriod(uint256)": {
        "notice": "Update `lockPeriod` param"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "vault()": {
        "notice": "Convex vault to interact with FRAX staking"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14272,
        "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14278,
        "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14281,
        "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)13133"
      },
      {
        "astId": 14294,
        "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3020_storage"
      },
      {
        "astId": 22637,
        "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 22639,
        "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
        "label": "crvSlippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 22642,
        "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
        "label": "masterOracle",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IMasterOracle)12817"
      },
      {
        "astId": 22645,
        "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22119,
        "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
        "label": "lockPeriod",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 22122,
        "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
        "label": "kekId",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 22125,
        "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
        "label": "unlockTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMasterOracle)12817": {
        "encoding": "inplace",
        "label": "contract IMasterOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IRoutedSwapper)13133": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3020_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3019,
            "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2719_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2719_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2714,
            "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2718,
            "contract": "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol:ConvexForFrax",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}