{
  "address": "0xE27e8095B33FBCBB480AAC5E6e6dA94FbAf2965B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapper_",
          "type": "address"
        },
        {
          "internalType": "contract IStargateRouter",
          "name": "stargateRouter_",
          "type": "address"
        },
        {
          "internalType": "contract IStargatePool",
          "name": "stargateLp_",
          "type": "address"
        },
        {
          "internalType": "contract IStargateLpStaking",
          "name": "stargateLpStaking_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stargatePoolId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stargateLpStakingPoolId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "claimAndSwapRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpAmountStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_lpAmountStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingStargate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_pendingStargate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateLpStaking",
      "outputs": [
        {
          "internalType": "contract IStargateLpStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateLpStakingPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargatePoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swapToCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "dstChainId_",
          "type": "uint16"
        }
      ],
      "name": "withdrawForRebalance",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d8afe16b47d89f0e34b5815378223eb1c0c0ad94cd3c531a13176274d613d63",
  "receipt": {
    "to": null,
    "from": "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "contractAddress": "0xE27e8095B33FBCBB480AAC5E6e6dA94FbAf2965B",
    "transactionIndex": 103,
    "gasUsed": "3594762",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x967409bae981196ebd043f3ec5efc39f83a39b001f5fc38958924dfc8f7b2ed6",
    "transactionHash": "0x9d8afe16b47d89f0e34b5815378223eb1c0c0ad94cd3c531a13176274d613d63",
    "logs": [],
    "blockNumber": 16878022,
    "cumulativeGasUsed": "10522190",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa8b607Aa09B6A2E306F93e74c282Fb13f6A80452",
    "0x8f156189A3CD28dFc8FB7BbbAce58F98F09c0bB3",
    "0x8731d54E9D02c286767d56ac03e8037C07e01e98",
    "0xdf0770dF86a8034b3EFEf0A1Bb3c889B8332FF56",
    "0xB0D502E938ed5f4df2E681fE6E419ff29631d62b",
    1,
    0,
    "Stargate_USDC"
  ],
  "numDeployments": 2,
  "solcInputHash": "285da4b1b032aeb23657e82b82226339",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper_\",\"type\":\"address\"},{\"internalType\":\"contract IStargateRouter\",\"name\":\"stargateRouter_\",\"type\":\"address\"},{\"internalType\":\"contract IStargatePool\",\"name\":\"stargateLp_\",\"type\":\"address\"},{\"internalType\":\"contract IStargateLpStaking\",\"name\":\"stargateLpStaking_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stargatePoolId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stargateLpStakingPoolId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"claimAndSwapRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmountStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingStargate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingStargate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateLpStaking\",\"outputs\":[{\"internalType\":\"contract IStargateLpStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateLpStakingPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargatePoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapToCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId_\",\"type\":\"uint16\"}],\"name\":\"withdrawForRebalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken(uint256)\":{\"details\":\"Approve all required tokens\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweep(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}},\"withdrawForRebalance(uint16)\":{\"details\":\"Stargate has different chainId than EVM chainId.\",\"params\":{\"dstChainId_\":\"Destination chainId.\"}}},\"stateVariables\":{\"stargateRouter\":{\"details\":\"Router to add/remove liquidity from a STG Pool\"}},\"title\":\"This Strategy will deposit collateral token in a Stargate Pool Stake LP Token and accrue swap rewards\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"claimAndSwapRewards(uint256)\":{\"notice\":\"Claim rewardToken and convert rewardToken into collateral token.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"rewardToken()\":{\"notice\":\"rewardToken, usually STG\"},\"stargateLpStaking()\":{\"notice\":\"Address of Staking contract (MasterChef V2 behavior)\"},\"stargateLpStakingPoolId()\":{\"notice\":\"Reward pool id of the MasterChef\"},\"stargatePoolId()\":{\"notice\":\"Stargate Factory LP Pool Id\"},\"swapToCollateral(address,uint256)\":{\"notice\":\"onlyKeeper:: Swap given token into collateral token.\"},\"sweep(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns total collateral locked in the strategy\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"},\"withdrawForRebalance(uint16)\":{\"notice\":\"OnlyKeeper: This function will withdraw required collateral from given   destination chain to the chain where this contract is deployed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/stargate/Stargate.sol\":\"Stargate\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function sweep(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf7b06736a402e8548dd9cd3752418ab23e44426652f0fee6e0a40e37fbacdcab\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 profit_) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 collateralAmount_) external;\\n\\n    function excessDebt(address strategy_) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(uint256 profit_, uint256 loss_, uint256 payback_) external;\\n\\n    function reportLoss(uint256 loss_) external;\\n\\n    function sweepERC20(address fromToken_) external;\\n\\n    function withdraw(uint256 share_) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address address_) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address address_) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(\\n        address strategy_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address strategy_) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e04db3bafbcc5985db33ae168ada16fed2bbc42a6cd26bbe936a71a4f537e0c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/stargate/IStargateFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IStargateFactory {\\n    function getPool(uint256) external view returns (address);\\n\\n    function allPoolsLength() external view returns (uint256);\\n\\n    function createPool(\\n        uint256 _poolId,\\n        address _token,\\n        uint8 _sharedDecimals,\\n        uint8 _localDecimals,\\n        string memory _name,\\n        string memory _symbol\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x993c51afd04efdf6a5b625cd722145641c4f5bc7803dcf5aff115fc23c361220\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/stargate/IStargateLpStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IStargateLpStaking {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function stargate() external view returns (address);\\n\\n    function pendingStargate(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256 _amount, uint256 _rewardDebt);\\n}\\n\",\"keccak256\":\"0x548baba63fe14565484138e97d450ab10844d4990bfdb9e58d247979cbddf81e\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/stargate/IStargatePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStargatePool is IERC20 {\\n    function totalLiquidity() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function amountLPtoLD(uint256 _amountLP) external view returns (uint256);\\n\\n    function convertRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x77e7d6eef14b0bb8887848f689942548acf5abc6cbe2001d3978a620536a03d3\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/stargate/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IStargateRouter {\\n    // solhint-disable-next-line contract-name-camelcase\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x655f42a0c6e5f1f9798f434c037e10a2694a8d88d53c2f5a7f12665a427b1f19\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(address tokenIn_, address tokenOut_, uint256 amountOut_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(address tokenIn_, address tokenOut_, uint256 amountIn_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x853ff5f9fbdd441f535370e39d43221d72d7a02fd5e48e343bbecb716a633f10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(address _pool, address _swapper, address _receiptToken) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken(uint256 _approvalAmount) external onlyKeeper {\\n        _approveToken(_approvalAmount);\\n    }\\n\\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\\n    function claimAndSwapRewards(uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        _claimAndSwapRewards();\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance() external onlyKeeper returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /// @notice onlyKeeper:: Swap given token into collateral token.\\n    function swapToCollateral(IERC20 _tokenIn, uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        require(address(_tokenIn) != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(address(_tokenIn)), \\\"not-allowed-to-sweep\\\");\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        uint256 _amountIn = _tokenIn.balanceOf(address(this));\\n        if (_amountIn > 0) {\\n            if (_amountIn > _tokenIn.allowance(address(this), address(swapper))) {\\n                _tokenIn.safeApprove(address(swapper), 0);\\n                _tokenIn.safeApprove(address(swapper), MAX_UINT_VALUE);\\n            }\\n            _swapExactInput(address(_tokenIn), address(collateralToken), _amountIn);\\n        }\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweep(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _claimAndSwapRewards() internal virtual {\\n        (address _rewardToken, uint256 _rewardsAmount) = _claimRewards();\\n        if (_rewardsAmount > 0) {\\n            _safeSwapExactInput(_rewardToken, address(collateralToken), _rewardsAmount);\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _claimRewards() internal virtual returns (address, uint256) {}\\n\\n    function _rebalance() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(address _tokenIn, address _tokenOut, uint256 _amountIn) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x58711ce2d409c8069e25980d2df4d09fd73e66c8ed41ba9ade1829bbb4ad6d80\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/stargate/Stargate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/stargate/IStargatePool.sol\\\";\\nimport \\\"../../interfaces/stargate/IStargateRouter.sol\\\";\\nimport \\\"../../interfaces/stargate/IStargateFactory.sol\\\";\\nimport \\\"../../interfaces/stargate/IStargateLpStaking.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\n\\n/// @title This Strategy will deposit collateral token in a Stargate Pool\\n/// Stake LP Token and accrue swap rewards\\ncontract Stargate is Strategy {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IStargatePool;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"5.1.0\\\";\\n\\n    /// @notice Address of Staking contract (MasterChef V2 behavior)\\n    IStargateLpStaking public immutable stargateLpStaking;\\n    /// @notice Reward pool id of the MasterChef\\n    uint256 public immutable stargateLpStakingPoolId;\\n    /// @notice Stargate Factory LP Pool Id\\n    uint256 public immutable stargatePoolId;\\n\\n    /// @notice rewardToken, usually STG\\n    address public immutable rewardToken;\\n\\n    IStargatePool internal immutable stargateLp;\\n\\n    /// @dev Router to add/remove liquidity from a STG Pool\\n    IStargateRouter internal immutable stargateRouter;\\n\\n    constructor(\\n        address pool_,\\n        address swapper_,\\n        IStargateRouter stargateRouter_,\\n        IStargatePool stargateLp_,\\n        IStargateLpStaking stargateLpStaking_,\\n        uint256 stargatePoolId_,\\n        uint256 stargateLpStakingPoolId_,\\n        string memory name_\\n    ) Strategy(pool_, swapper_, address(0)) {\\n        require(address(stargateRouter_) != address(0), \\\"stg-router-is-zero\\\");\\n        require(address(stargateLp_) != address(0), \\\"stg-lp-pool-is-zero\\\");\\n        require(address(stargateLpStaking_) != address(0), \\\"stg-staking-is-zero\\\");\\n        require(stargatePoolId_ > 0, \\\"stg-pool-is-zero\\\");\\n\\n        stargateRouter = stargateRouter_;\\n        stargateLpStaking = IStargateLpStaking(stargateLpStaking_);\\n        receiptToken = address(stargateLp_);\\n        stargateLp = stargateLp_;\\n        stargatePoolId = stargatePoolId_;\\n        stargateLpStakingPoolId = stargateLpStakingPoolId_; // can be 0\\n        rewardToken = stargateLpStaking.stargate();\\n        NAME = name_;\\n    }\\n\\n    function isReservedToken(address token_) public view override returns (bool) {\\n        return token_ == receiptToken;\\n    }\\n\\n    function lpAmountStaked() public view returns (uint256 _lpAmountStaked) {\\n        (_lpAmountStaked, ) = stargateLpStaking.userInfo(stargateLpStakingPoolId, address(this));\\n    }\\n\\n    function pendingStargate() external view returns (uint256 _pendingStargate) {\\n        return stargateLpStaking.pendingStargate(stargateLpStakingPoolId, address(this));\\n    }\\n\\n    function tvl() external view override returns (uint256) {\\n        return _getCollateralInStargate() + collateralToken.balanceOf(address(this));\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        collateralToken.safeApprove(address(stargateRouter), _amount);\\n        stargateLp.safeApprove(address(stargateLpStaking), _amount);\\n        stargateLp.safeApprove(address(stargateRouter), _amount);\\n        IERC20(rewardToken).safeApprove(address(swapper), _amount);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _beforeDeposit(uint256 collateralAmount_) internal virtual {}\\n\\n    /**\\n     * @notice Before migration hook.\\n     */\\n    function _beforeMigration(address newStrategy_) internal override {\\n        require(IStrategy(newStrategy_).token() == receiptToken, \\\"wrong-receipt-token\\\");\\n        stargateLpStaking.withdraw(stargateLpStakingPoolId, lpAmountStaked());\\n    }\\n\\n    /// @notice Claim rewardToken from LPStaking contract\\n    function _claimRewards() internal override returns (address, uint256) {\\n        // 0 withdraw will trigger rewards claim\\n        stargateLpStaking.withdraw(stargateLpStakingPoolId, 0);\\n        return (rewardToken, IERC20(rewardToken).balanceOf(address(this)));\\n    }\\n\\n    /// @dev Converts a collateral amount in its relative shares of STG LP Token\\n    function _convertToLpShares(uint256 collateralAmount_) internal view returns (uint256) {\\n        uint256 _totalLiquidity = stargateLp.totalLiquidity();\\n        // amount SD = _collateralAmount / stargateLp.convertRate()\\n        // amount LP = SD * totalSupply / totalLiquidity\\n        return\\n            (_totalLiquidity > 0)\\n                ? ((collateralAmount_ / stargateLp.convertRate()) * stargateLp.totalSupply()) / _totalLiquidity\\n                : 0;\\n    }\\n\\n    function _deposit(uint256 collateralAmount_) internal {\\n        if (collateralAmount_ > 0) {\\n            _beforeDeposit(collateralAmount_);\\n            stargateRouter.addLiquidity(stargatePoolId, collateralAmount_, address(this));\\n            stargateLpStaking.deposit(stargateLpStakingPoolId, stargateLp.balanceOf(address(this)));\\n        }\\n    }\\n\\n    /// @dev Gets collateral balance deposited into STG Pool\\n    function _getCollateralInStargate() internal view returns (uint256 _collateralStaked) {\\n        return stargateLp.amountLPtoLD(lpAmountStaked() + stargateLp.balanceOf(address(this)));\\n    }\\n\\n    function _getLpForCollateral(uint256 collateralAmount_) internal returns (uint256) {\\n        uint256 _lpRequired = _convertToLpShares(collateralAmount_);\\n        uint256 _lpHere = stargateLp.balanceOf(address(this));\\n        if (_lpRequired > _lpHere) {\\n            uint256 _lpAmountStaked = lpAmountStaked();\\n            uint256 _lpToUnstake = _lpRequired - _lpHere;\\n            if (_lpToUnstake > _lpAmountStaked) {\\n                _lpToUnstake = _lpAmountStaked;\\n            }\\n            stargateLpStaking.withdraw(stargateLpStakingPoolId, _lpToUnstake);\\n            return stargateLp.balanceOf(address(this));\\n        }\\n        return _lpRequired;\\n    }\\n\\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n\\n        uint256 _totalCollateral = _getCollateralInStargate() + _collateralHere;\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_profitAndExcessDebt > _collateralHere) {\\n            _withdrawHere(_profitAndExcessDebt - _collateralHere);\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n\\n        // strategy may get new fund. Deposit and stake it to stargate\\n        _deposit(collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /// @dev Withdraw collateral here.\\n    /// @dev This method may withdraw less than requested amount. Caller may need to check balance before and after\\n    function _withdrawHere(uint256 amount_) internal override {\\n        uint256 _lpToRedeem = _getLpForCollateral(amount_);\\n        if (_lpToRedeem > 0) {\\n            stargateRouter.instantRedeemLocal(uint16(stargatePoolId), _lpToRedeem, address(this));\\n        }\\n    }\\n\\n    /************************************************************************************************\\n     *                                       keeper function                                        *\\n     ***********************************************************************************************/\\n\\n    /**\\n     * @notice OnlyKeeper: This function will withdraw required collateral from given\\n     *   destination chain to the chain where this contract is deployed.\\n     * @param dstChainId_ Destination chainId.\\n     * @dev Stargate has different chainId than EVM chainId.\\n     */\\n    function withdrawForRebalance(uint16 dstChainId_) external payable onlyKeeper {\\n        // amountToWithdraw is excessDebt of strategy\\n        uint256 _amountToWithdraw = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n        uint256 _totalCollateral = _getCollateralInStargate();\\n\\n        if (_totalCollateral > _totalDebt) {\\n            // If we have profit then amountToWithdraw = excessDebt + profit\\n            _amountToWithdraw += (_totalCollateral - _totalDebt);\\n        }\\n\\n        uint256 _lpToRedeem = _getLpForCollateral(_amountToWithdraw);\\n        if (_lpToRedeem > 0) {\\n            // RedeemLocal will redeem asset from dstChain to this chain and at this address.\\n            // Also srcPoolId and dstPoolId will be same in this case\\n            stargateRouter.redeemLocal{value: msg.value}(\\n                dstChainId_,\\n                stargatePoolId,\\n                stargatePoolId,\\n                payable(msg.sender),\\n                _lpToRedeem,\\n                abi.encodePacked(address(this)), // Address which will receive asset\\n                IStargateRouter.lzTxObj(0, 0, \\\"0x\\\") // Basically empty layer zero tx object\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69dcd6522f46a45d2fee08369ef01159db127f21efbe878c25ee55d1b8cd082c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b506040516200468f3803806200468f83398101604081905262000035916200057d565b878760006001600160a01b038316620000955760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000ed5760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f00000000000000000060448201526064016200008c565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200014b57600080fd5b505afa15801562000160573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001869190620006dd565b6001600160a01b03908116608052600080546001600160a01b031916918316919091179055620001cd620001b73390565b60036200043660201b6200216f1790919060201c565b6200020f5760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016200008c565b5050506001600160a01b0386166200025f5760405162461bcd60e51b81526020600482015260126024820152717374672d726f757465722d69732d7a65726f60701b60448201526064016200008c565b6001600160a01b038516620002b75760405162461bcd60e51b815260206004820152601360248201527f7374672d6c702d706f6f6c2d69732d7a65726f0000000000000000000000000060448201526064016200008c565b6001600160a01b0384166200030f5760405162461bcd60e51b815260206004820152601360248201527f7374672d7374616b696e672d69732d7a65726f0000000000000000000000000060448201526064016200008c565b60008311620003545760405162461bcd60e51b815260206004820152601060248201526f7374672d706f6f6c2d69732d7a65726f60801b60448201526064016200008c565b6001600160a01b038681166101605284811660c0819052600080546001600160a01b03191692881692831790556101409190915261010084905260e083905260408051633604cef760e11b81529051636c099dee91600480820192602092909190829003018186803b158015620003ca57600080fd5b505afa158015620003df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004059190620006dd565b6001600160a01b031661012052805162000427906005906020840190620004a8565b50505050505050505062000741565b60006200044d836001600160a01b03841662000456565b90505b92915050565b60008181526001830160205260408120546200049f5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000450565b50600062000450565b828054620004b69062000704565b90600052602060002090601f016020900481019282620004da576000855562000525565b82601f10620004f557805160ff191683800117855562000525565b8280016001018555821562000525579182015b828111156200052557825182559160200191906001019062000508565b506200053392915062000537565b5090565b5b8082111562000533576000815560010162000538565b6001600160a01b03811681146200056457600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600080610100898b0312156200059b57600080fd5b8851620005a8816200054e565b809850506020808a0151620005bd816200054e565b60408b0151909850620005d0816200054e565b60608b0151909750620005e3816200054e565b60808b0151909650620005f6816200054e565b60a08b015160c08c015160e08d015192975090955093506001600160401b03808211156200062357600080fd5b818c0191508c601f8301126200063857600080fd5b8151818111156200064d576200064d62000567565b604051601f8201601f19908116603f0116810190838211818310171562000678576200067862000567565b816040528281528f868487010111156200069157600080fd5b600093505b82841015620006b5578484018601518185018701529285019262000696565b82841115620006c75760008684830101525b8096505050505050509295985092959890939650565b600060208284031215620006f057600080fd5b8151620006fd816200054e565b9392505050565b600181811c908216806200071957607f821691505b602082108114156200073b57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051613d1a6200097560003960008181610db2015281816126e6015281816127b80152818161286001526136e60152600081816123b30152818161249c015281816125f8015281816127ea0152818161283e015281816134690152818161350c0152818161359d01526137b30152600081816105ed0152818161289601526132410152600081816104b101528181610de301528181610e04015281816126b201526136b301526000818161040501528181611311015281816113d00152818161255401528181612e200152818161319801526137910152600081816103d101528181611340015281816113ff015281816125810152818161280c01528181612df1015281816131d2015261376501526000818161026c01528181610aa501528181610c5101528181610cf601528181610eed0152818161103401528181611109015281816111bc01528181611589015281816116560152818161188101528181611a8f015281816128e50152818161298201528181612be9015261367901526000818161047d015281816105620152818161070f01528181610925015281816109c801528181610f7a01528181611012015281816110800152818161113c0152818161180501528181611cb301528181611d9901528181611e860152818161205401528181612092015281816123610152818161279601528181612a1f01528181612b1001528181612c6501526136570152613d1a6000f3fe6080604052600436106101cd5760003560e01c8063951dc22c116100f7578063d3033c3911610095578063ee330ee311610064578063ee330ee3146105bb578063f7c618c1146105db578063fc0c546a1461060f578063ffa1ad741461062d57600080fd5b8063d3033c3914610533578063d8dfeb4514610553578063e5328e0614610586578063ec78e8321461059b57600080fd5b8063b2bc2298116100d1578063b2bc22981461049f578063c415b95c146104d3578063ce5494bb146104f3578063d2c35ce81461051357600080fd5b8063951dc22c14610427578063a3f4df7e14610449578063b2016bd41461046b57600080fd5b80633ac9fc111161016f578063698a0cc31161013e578063698a0cc31461037a5780637d7c2a1c1461038f5780637e2d5759146103bf5780638fe14eec146103f357600080fd5b80633ac9fc11146102e65780634032b72b14610306578063440d7248146103265780634dadd90a1461036557600080fd5b806316251428116101ab578063162514281461024757806316f0115b1461025a5780632b3297f9146102a65780632e1a7d4d146102c657600080fd5b806301681a62146101d25780631026013a146101f457806314ae9f2e14610227575b600080fd5b3480156101de57600080fd5b506101f26101ed3660046139ab565b61065e565b005b34801561020057600080fd5b5061021461020f3660046139c8565b6108bd565b6040519081526020015b60405180910390f35b34801561023357600080fd5b506101f26102423660046139ab565b610aa3565b6101f26102553660046139e1565b610beb565b34801561026657600080fd5b5061028e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161021e565b3480156102b257600080fd5b5060025461028e906001600160a01b031681565b3480156102d257600080fd5b506101f26102e13660046139c8565b610eea565b3480156102f257600080fd5b506101f26103013660046139c8565b611163565b34801561031257600080fd5b506101f26103213660046139ab565b6111ba565b34801561033257600080fd5b506103556103413660046139ab565b6000546001600160a01b0391821691161490565b604051901515815260200161021e565b34801561037157600080fd5b50610214611302565b34801561038657600080fd5b506102146113c1565b34801561039b57600080fd5b506103a4611487565b6040805193845260208401929092529082015260600161021e565b3480156103cb57600080fd5b5061028e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ff57600080fd5b506102147f000000000000000000000000000000000000000000000000000000000000000081565b34801561043357600080fd5b5061043c6114ec565b60405161021e9190613a05565b34801561045557600080fd5b5061045e6114f8565b60405161021e9190613aaa565b34801561047757600080fd5b5061028e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ab57600080fd5b506102147f000000000000000000000000000000000000000000000000000000000000000081565b3480156104df57600080fd5b5060015461028e906001600160a01b031681565b3480156104ff57600080fd5b506101f261050e3660046139ab565b611586565b34801561051f57600080fd5b506101f261052e3660046139ab565b61187f565b34801561053f57600080fd5b506101f261054e3660046139ab565b611a8d565b34801561055f57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061028e565b34801561059257600080fd5b50610214611c9b565b3480156105a757600080fd5b5060005461028e906001600160a01b031681565b3480156105c757600080fd5b506102146105d6366004613abd565b611d47565b3480156105e757600080fd5b5061028e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561061b57600080fd5b506000546001600160a01b031661028e565b34801561063957600080fd5b5061045e604051806040016040528060058152602001640352e312e360dc1b81525081565b61066b335b60039061218d565b6106b55760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064015b60405180910390fd5b6001546001600160a01b031661070d5760405162461bcd60e51b815260206004820152601560248201527f6665652d636f6c6c6563746f722d6e6f742d736574000000000000000000000060448201526064016106ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561078f5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016106ac565b6000546001600160a01b03828116911614156107e45760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016106ac565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156108225760015461081f906001600160a01b0316476121af565b50565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561086457600080fd5b505afa158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190613ae9565b6001549091506108b9906001600160a01b038481169116836122cd565b5050565b60006108c833610663565b61090d5760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106ac565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561096f57600080fd5b505afa158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a79190613ae9565b90506109b1612345565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610a1257600080fd5b505afa158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a9190613ae9565b610a549190613b18565b915082821015610a9d5760405162461bcd60e51b81526020600482015260146024820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b60448201526064016106ac565b50919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610afc57600080fd5b505afa158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190613b2f565b6001600160a01b0316336001600160a01b031614610b945760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f7200000000000060448201526064016106ac565b610b9f600382612386565b61081f5760405162461bcd60e51b815260206004820152601460248201527f72656d6f76652d6b65657065722d6661696c656400000000000000000000000060448201526064016106ac565b610bf433610663565b610c395760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106ac565b604051636a9eee1360e11b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d53ddc269060240160206040518083038186803b158015610c9b57600080fd5b505afa158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd39190613ae9565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b158015610d3857600080fd5b505afa158015610d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d709190613ae9565b90506000610d7c61239b565b905081811115610d9d57610d908282613b18565b610d9a9084613b4c565b92505b6000610da88461246d565b90508015610ee3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638f2e1d1834877f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000338730604051602001610e4e919060609190911b6bffffffffffffffffffffffff1916815260140190565b60408051601f198184030181526060830182526000808452602084810191909152825180840184526002815261060f60f31b918101919091528383015290516001600160e01b031960e08b901b168152610eb097969594939290600401613b64565b6000604051808303818588803b158015610ec957600080fd5b505af1158015610edd573d6000803e3d6000fd5b50505050505b5050505050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610f625760405162461bcd60e51b815260206004820152601960248201527f63616c6c65722d69732d6e6f742d7665737065722d706f6f6c0000000000000060448201526064016106ac565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610fc457600080fd5b505afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc9190613ae9565b9050818110611059576108b96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846122cd565b61106b6110668284613b18565b61268d565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156110ca57600080fd5b505afa1580156110de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111029190613ae9565b90506108b97f0000000000000000000000000000000000000000000000000000000000000000611132848461276a565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906122cd565b61116c33610663565b6111b15760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106ac565b61081f81612780565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561121357600080fd5b505afa158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124b9190613b2f565b6001600160a01b0316336001600160a01b0316146112ab5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f7200000000000060448201526064016106ac565b6112b660038261216f565b61081f5760405162461bcd60e51b815260206004820152601160248201527f6164642d6b65657065722d6661696c656400000000000000000000000000000060448201526064016106ac565b6040516393f1a40b60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906393f1a40b90604401604080518083038186803b15801561138957600080fd5b505afa15801561139d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9d9190613be0565b604051632f607fdd60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632f607fdd906044015b60206040518083038186803b15801561144a57600080fd5b505afa15801561145e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114829190613ae9565b905090565b6000808061149433610663565b6114d95760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106ac565b6114e16128bf565b925092509250909192565b60606114826003612cf7565b6005805461150590613c04565b80601f016020809104026020016040519081016040528092919081815260200182805461153190613c04565b801561157e5780601f106115535761010080835404028352916020019161157e565b820191906000526020600020905b81548152906001019060200180831161156157829003601f168201915b505050505081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146115fe5760405162461bcd60e51b815260206004820152601960248201527f63616c6c65722d69732d6e6f742d7665737065722d706f6f6c0000000000000060448201526064016106ac565b6001600160a01b0381166116545760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016106ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116b757600080fd5b505afa1580156116cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ef9190613b2f565b6001600160a01b0316146117455760405162461bcd60e51b815260206004820152601660248201527f6e6f742d76616c69642d6e65772d73747261746567790000000000000000000060448201526064016106ac565b61174e81612d0b565b6000546040516370a0823160e01b81523060048201526117e29183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561179757600080fd5b505afa1580156117ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cf9190613ae9565b6000546001600160a01b031691906122cd565b6040516370a0823160e01b815230600482015261081f9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561184757600080fd5b505afa15801561185b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111329190613ae9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d857600080fd5b505afa1580156118ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119109190613b2f565b6001600160a01b0316336001600160a01b0316146119705760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f7200000000000060448201526064016106ac565b6001600160a01b0381166119c65760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016106ac565b6001546001600160a01b0382811691161415611a245760405162461bcd60e51b815260206004820152601560248201527f6665652d636f6c6c6563746f722d69732d73616d65000000000000000000000060448201526064016106ac565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a36001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611ae657600080fd5b505afa158015611afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1e9190613b2f565b6001600160a01b0316336001600160a01b031614611b7e5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f7200000000000060448201526064016106ac565b6001600160a01b038116611bd45760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f00000000000000000060448201526064016106ac565b6002546001600160a01b0382811691161415611c325760405162461bcd60e51b815260206004820152600f60248201527f737761707065722d69732d73616d65000000000000000000000000000000000060448201526064016106ac565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611cfd57600080fd5b505afa158015611d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d359190613ae9565b611d3d61239b565b6114829190613b4c565b6000611d5233610663565b611d975760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415611e195760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016106ac565b6000546001600160a01b0384811691161415611e6e5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016106ac565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611ed057600080fd5b505afa158015611ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f089190613ae9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a082319060240160206040518083038186803b158015611f4d57600080fd5b505afa158015611f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f859190613ae9565b9050801561207b57600254604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529086169063dd62ed3e9060440160206040518083038186803b158015611fd857600080fd5b505afa158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190613ae9565b81111561204e57600254612032906001600160a01b0387811691166000612e99565b60025461204e906001600160a01b038781169116600019612e99565b612079857f000000000000000000000000000000000000000000000000000000000000000083612fc4565b505b6040516370a0823160e01b815230600482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156120dc57600080fd5b505afa1580156120f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121149190613ae9565b61211e9190613b18565b9250838310156121675760405162461bcd60e51b81526020600482015260146024820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b60448201526064016106ac565b505092915050565b6000612184836001600160a01b038416613068565b90505b92915050565b6001600160a01b03811660009081526001830160205260408120541515612184565b804710156121ff5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106ac565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461224c576040519150601f19603f3d011682016040523d82523d6000602084013e612251565b606091505b50509050806122c85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106ac565b505050565b6040516001600160a01b0383166024820152604481018290526122c890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091526130b7565b600080612350613189565b909250905080156108b9576108b9827f0000000000000000000000000000000000000000000000000000000000000000836132cf565b6000612184836001600160a01b038416613371565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f6cd35ee9082906370a082319060240160206040518083038186803b15801561240557600080fd5b505afa158015612419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243d9190613ae9565b612445611302565b61244f9190613b4c565b6040518263ffffffff1660e01b815260040161143291815260200190565b60008061247983613464565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156124de57600080fd5b505afa1580156124f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125169190613ae9565b90508082111561268657600061252a611302565b905060006125388385613b18565b9050818111156125455750805b604051630441a3e760e41b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441a3e7090604401600060405180830381600087803b1580156125cd57600080fd5b505af11580156125e1573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a08231915060240160206040518083038186803b15801561264457600080fd5b505afa158015612658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267c9190613ae9565b9695505050505050565b5092915050565b60006126988261246d565b905080156108b95760405163c4de93a560e01b815261ffff7f0000000000000000000000000000000000000000000000000000000000000000166004820152602481018290523060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c4de93a590606401602060405180830381600087803b15801561273257600080fd5b505af1158015612746573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c89190613ae9565b60008183106127795781612184565b5090919050565b6127898161364a565b6127dd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612e99565b6128316001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612e99565b6128856001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612e99565b60025461081f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612e99565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b15801561292757600080fd5b505afa15801561293b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295f9190613ae9565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b1580156129c457600080fd5b505afa1580156129d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fc9190613ae9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612a6157600080fd5b505afa158015612a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a999190613ae9565b9050600081612aa661239b565b612ab09190613b4c565b905082811115612acb57612ac48382613b18565b9650612ad8565b612ad58184613b18565b95505b6000612ae48589613b4c565b905082811115612b9557612afb6110668483613b18565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612b5a57600080fd5b505afa158015612b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b929190613ae9565b92505b612b9f838661276a565b9550858311612baf576000612bc2565b612bc2612bbc8785613b18565b8961276a565b6040516302df682360e11b81526004810182905260248101899052604481018890529098507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b158015612c3557600080fd5b505af1158015612c49573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152612ced92507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015612cb057600080fd5b505afa158015612cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce89190613ae9565b61369e565b5050505050909192565b60606000612d048361382f565b9392505050565b60008054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d6157600080fd5b505afa158015612d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d999190613b2f565b6001600160a01b031614612def5760405162461bcd60e51b815260206004820152601360248201527f77726f6e672d726563656970742d746f6b656e0000000000000000000000000060448201526064016106ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663441a3e707f0000000000000000000000000000000000000000000000000000000000000000612e47611302565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015612e8557600080fd5b505af1158015610ee3573d6000803e3d6000fd5b801580612f225750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612ee857600080fd5b505afa158015612efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f209190613ae9565b155b612f945760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016106ac565b6040516001600160a01b0383166024820152604481018290526122c890849063095ea7b360e01b906064016122f9565b600254604051636ccb2b0160e01b81526001600160a01b038581166004830152848116602483015260448201849052600160648301523060848301526000921690636ccb2b019060a401602060405180830381600087803b15801561302857600080fd5b505af115801561303c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130609190613ae9565b949350505050565b60008181526001830160205260408120546130af57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155612187565b506000612187565b600061310c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661388b9092919063ffffffff16565b8051909150156122c8578080602001905181019061312a9190613c39565b6122c85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106ac565b604051630441a3e760e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000602482018190529081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063441a3e7090604401600060405180830381600087803b15801561321657600080fd5b505af115801561322a573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201527f000000000000000000000000000000000000000000000000000000000000000092506001600160a01b03831691506370a082319060240160206040518083038186803b15801561328f57600080fd5b505afa1580156132a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c79190613ae9565b915091509091565b600254604051636ccb2b0160e01b81526001600160a01b0385811660048301528481166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b15801561333257600080fd5b505af1925050508015613362575060408051601f3d908101601f1916820190925261335f91810190613ae9565b60015b61336b57505050565b50505050565b6000818152600183016020526040812054801561345a576000613395600183613b18565b85549091506000906133a990600190613b18565b905081811461340e5760008660000182815481106133c9576133c9613c5b565b90600052602060002001549050808760000184815481106133ec576133ec613c5b565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061341f5761341f613c71565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612187565b6000915050612187565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166315770f926040518163ffffffff1660e01b815260040160206040518083038186803b1580156134c057600080fd5b505afa1580156134d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f89190613ae9565b905060008111613509576000612d04565b807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561356357600080fd5b505afa158015613577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359b9190613ae9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feb56b156040518163ffffffff1660e01b815260040160206040518083038186803b1580156135f457600080fd5b505afa158015613608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362c9190613ae9565b6136369086613c87565b6136409190613ca9565b612d049190613c87565b61081f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612e99565b801561081f576040516321ec87bf60e21b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290523060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906387b21efc90606401600060405180830381600087803b15801561373257600080fd5b505af1158015613746573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116935063e2bbb15892507f0000000000000000000000000000000000000000000000000000000000000000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a082319060240160206040518083038186803b1580156137f757600080fd5b505afa15801561380b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e479190613ae9565b60608160000180548060200260200160405190810160405280929190818152602001828054801561387f57602002820191906000526020600020905b81548152602001906001019080831161386b575b50505050509050919050565b6060613060848460008585843b6138e45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106ac565b600080866001600160a01b031685876040516139009190613cc8565b60006040518083038185875af1925050503d806000811461393d576040519150601f19603f3d011682016040523d82523d6000602084013e613942565b606091505b509150915061395282828661395d565b979650505050505050565b6060831561396c575081612d04565b82511561397c5782518084602001fd5b8160405162461bcd60e51b81526004016106ac9190613aaa565b6001600160a01b038116811461081f57600080fd5b6000602082840312156139bd57600080fd5b8135612d0481613996565b6000602082840312156139da57600080fd5b5035919050565b6000602082840312156139f357600080fd5b813561ffff81168114612d0457600080fd5b6020808252825182820181905260009190848201906040850190845b81811015613a465783516001600160a01b031683529284019291840191600101613a21565b50909695505050505050565b60005b83811015613a6d578181015183820152602001613a55565b8381111561336b5750506000910152565b60008151808452613a96816020860160208601613a52565b601f01601f19169290920160200192915050565b6020815260006121846020830184613a7e565b60008060408385031215613ad057600080fd5b8235613adb81613996565b946020939093013593505050565b600060208284031215613afb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613b2a57613b2a613b02565b500390565b600060208284031215613b4157600080fd5b8151612d0481613996565b60008219821115613b5f57613b5f613b02565b500190565b61ffff881681528660208201528560408201526001600160a01b038516606082015283608082015260e060a08201526000613ba260e0830185613a7e565b82810360c08401528351815260208401516020820152604084015160606040830152613bd16060830182613a7e565b9b9a5050505050505050505050565b60008060408385031215613bf357600080fd5b505080516020909101519092909150565b600181811c90821680613c1857607f821691505b60208210811415610a9d57634e487b7160e01b600052602260045260246000fd5b600060208284031215613c4b57600080fd5b81518015158114612d0457600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600082613ca457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613cc357613cc3613b02565b500290565b60008251613cda818460208701613a52565b919091019291505056fea26469706673582212207d98456e887731ccbfc57df4f9a7fc6e2cefe5ca42473c424630cc4417dfe25a64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c8063951dc22c116100f7578063d3033c3911610095578063ee330ee311610064578063ee330ee3146105bb578063f7c618c1146105db578063fc0c546a1461060f578063ffa1ad741461062d57600080fd5b8063d3033c3914610533578063d8dfeb4514610553578063e5328e0614610586578063ec78e8321461059b57600080fd5b8063b2bc2298116100d1578063b2bc22981461049f578063c415b95c146104d3578063ce5494bb146104f3578063d2c35ce81461051357600080fd5b8063951dc22c14610427578063a3f4df7e14610449578063b2016bd41461046b57600080fd5b80633ac9fc111161016f578063698a0cc31161013e578063698a0cc31461037a5780637d7c2a1c1461038f5780637e2d5759146103bf5780638fe14eec146103f357600080fd5b80633ac9fc11146102e65780634032b72b14610306578063440d7248146103265780634dadd90a1461036557600080fd5b806316251428116101ab578063162514281461024757806316f0115b1461025a5780632b3297f9146102a65780632e1a7d4d146102c657600080fd5b806301681a62146101d25780631026013a146101f457806314ae9f2e14610227575b600080fd5b3480156101de57600080fd5b506101f26101ed3660046139ab565b61065e565b005b34801561020057600080fd5b5061021461020f3660046139c8565b6108bd565b6040519081526020015b60405180910390f35b34801561023357600080fd5b506101f26102423660046139ab565b610aa3565b6101f26102553660046139e1565b610beb565b34801561026657600080fd5b5061028e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161021e565b3480156102b257600080fd5b5060025461028e906001600160a01b031681565b3480156102d257600080fd5b506101f26102e13660046139c8565b610eea565b3480156102f257600080fd5b506101f26103013660046139c8565b611163565b34801561031257600080fd5b506101f26103213660046139ab565b6111ba565b34801561033257600080fd5b506103556103413660046139ab565b6000546001600160a01b0391821691161490565b604051901515815260200161021e565b34801561037157600080fd5b50610214611302565b34801561038657600080fd5b506102146113c1565b34801561039b57600080fd5b506103a4611487565b6040805193845260208401929092529082015260600161021e565b3480156103cb57600080fd5b5061028e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ff57600080fd5b506102147f000000000000000000000000000000000000000000000000000000000000000081565b34801561043357600080fd5b5061043c6114ec565b60405161021e9190613a05565b34801561045557600080fd5b5061045e6114f8565b60405161021e9190613aaa565b34801561047757600080fd5b5061028e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ab57600080fd5b506102147f000000000000000000000000000000000000000000000000000000000000000081565b3480156104df57600080fd5b5060015461028e906001600160a01b031681565b3480156104ff57600080fd5b506101f261050e3660046139ab565b611586565b34801561051f57600080fd5b506101f261052e3660046139ab565b61187f565b34801561053f57600080fd5b506101f261054e3660046139ab565b611a8d565b34801561055f57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061028e565b34801561059257600080fd5b50610214611c9b565b3480156105a757600080fd5b5060005461028e906001600160a01b031681565b3480156105c757600080fd5b506102146105d6366004613abd565b611d47565b3480156105e757600080fd5b5061028e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561061b57600080fd5b506000546001600160a01b031661028e565b34801561063957600080fd5b5061045e604051806040016040528060058152602001640352e312e360dc1b81525081565b61066b335b60039061218d565b6106b55760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064015b60405180910390fd5b6001546001600160a01b031661070d5760405162461bcd60e51b815260206004820152601560248201527f6665652d636f6c6c6563746f722d6e6f742d736574000000000000000000000060448201526064016106ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561078f5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016106ac565b6000546001600160a01b03828116911614156107e45760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016106ac565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156108225760015461081f906001600160a01b0316476121af565b50565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561086457600080fd5b505afa158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190613ae9565b6001549091506108b9906001600160a01b038481169116836122cd565b5050565b60006108c833610663565b61090d5760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106ac565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561096f57600080fd5b505afa158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a79190613ae9565b90506109b1612345565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610a1257600080fd5b505afa158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a9190613ae9565b610a549190613b18565b915082821015610a9d5760405162461bcd60e51b81526020600482015260146024820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b60448201526064016106ac565b50919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610afc57600080fd5b505afa158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190613b2f565b6001600160a01b0316336001600160a01b031614610b945760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f7200000000000060448201526064016106ac565b610b9f600382612386565b61081f5760405162461bcd60e51b815260206004820152601460248201527f72656d6f76652d6b65657065722d6661696c656400000000000000000000000060448201526064016106ac565b610bf433610663565b610c395760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106ac565b604051636a9eee1360e11b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d53ddc269060240160206040518083038186803b158015610c9b57600080fd5b505afa158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd39190613ae9565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b158015610d3857600080fd5b505afa158015610d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d709190613ae9565b90506000610d7c61239b565b905081811115610d9d57610d908282613b18565b610d9a9084613b4c565b92505b6000610da88461246d565b90508015610ee3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638f2e1d1834877f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000338730604051602001610e4e919060609190911b6bffffffffffffffffffffffff1916815260140190565b60408051601f198184030181526060830182526000808452602084810191909152825180840184526002815261060f60f31b918101919091528383015290516001600160e01b031960e08b901b168152610eb097969594939290600401613b64565b6000604051808303818588803b158015610ec957600080fd5b505af1158015610edd573d6000803e3d6000fd5b50505050505b5050505050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610f625760405162461bcd60e51b815260206004820152601960248201527f63616c6c65722d69732d6e6f742d7665737065722d706f6f6c0000000000000060448201526064016106ac565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610fc457600080fd5b505afa158015610fd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffc9190613ae9565b9050818110611059576108b96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846122cd565b61106b6110668284613b18565b61268d565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156110ca57600080fd5b505afa1580156110de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111029190613ae9565b90506108b97f0000000000000000000000000000000000000000000000000000000000000000611132848461276a565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906122cd565b61116c33610663565b6111b15760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106ac565b61081f81612780565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561121357600080fd5b505afa158015611227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124b9190613b2f565b6001600160a01b0316336001600160a01b0316146112ab5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f7200000000000060448201526064016106ac565b6112b660038261216f565b61081f5760405162461bcd60e51b815260206004820152601160248201527f6164642d6b65657065722d6661696c656400000000000000000000000000000060448201526064016106ac565b6040516393f1a40b60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906393f1a40b90604401604080518083038186803b15801561138957600080fd5b505afa15801561139d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9d9190613be0565b604051632f607fdd60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632f607fdd906044015b60206040518083038186803b15801561144a57600080fd5b505afa15801561145e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114829190613ae9565b905090565b6000808061149433610663565b6114d95760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106ac565b6114e16128bf565b925092509250909192565b60606114826003612cf7565b6005805461150590613c04565b80601f016020809104026020016040519081016040528092919081815260200182805461153190613c04565b801561157e5780601f106115535761010080835404028352916020019161157e565b820191906000526020600020905b81548152906001019060200180831161156157829003601f168201915b505050505081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146115fe5760405162461bcd60e51b815260206004820152601960248201527f63616c6c65722d69732d6e6f742d7665737065722d706f6f6c0000000000000060448201526064016106ac565b6001600160a01b0381166116545760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016106ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116b757600080fd5b505afa1580156116cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ef9190613b2f565b6001600160a01b0316146117455760405162461bcd60e51b815260206004820152601660248201527f6e6f742d76616c69642d6e65772d73747261746567790000000000000000000060448201526064016106ac565b61174e81612d0b565b6000546040516370a0823160e01b81523060048201526117e29183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561179757600080fd5b505afa1580156117ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cf9190613ae9565b6000546001600160a01b031691906122cd565b6040516370a0823160e01b815230600482015261081f9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561184757600080fd5b505afa15801561185b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111329190613ae9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156118d857600080fd5b505afa1580156118ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119109190613b2f565b6001600160a01b0316336001600160a01b0316146119705760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f7200000000000060448201526064016106ac565b6001600160a01b0381166119c65760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016106ac565b6001546001600160a01b0382811691161415611a245760405162461bcd60e51b815260206004820152601560248201527f6665652d636f6c6c6563746f722d69732d73616d65000000000000000000000060448201526064016106ac565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a36001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611ae657600080fd5b505afa158015611afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1e9190613b2f565b6001600160a01b0316336001600160a01b031614611b7e5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f7200000000000060448201526064016106ac565b6001600160a01b038116611bd45760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f00000000000000000060448201526064016106ac565b6002546001600160a01b0382811691161415611c325760405162461bcd60e51b815260206004820152600f60248201527f737761707065722d69732d73616d65000000000000000000000000000000000060448201526064016106ac565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611cfd57600080fd5b505afa158015611d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d359190613ae9565b611d3d61239b565b6114829190613b4c565b6000611d5233610663565b611d975760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064016106ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415611e195760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016106ac565b6000546001600160a01b0384811691161415611e6e5760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016106ac565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611ed057600080fd5b505afa158015611ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f089190613ae9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a082319060240160206040518083038186803b158015611f4d57600080fd5b505afa158015611f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f859190613ae9565b9050801561207b57600254604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529086169063dd62ed3e9060440160206040518083038186803b158015611fd857600080fd5b505afa158015611fec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120109190613ae9565b81111561204e57600254612032906001600160a01b0387811691166000612e99565b60025461204e906001600160a01b038781169116600019612e99565b612079857f000000000000000000000000000000000000000000000000000000000000000083612fc4565b505b6040516370a0823160e01b815230600482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156120dc57600080fd5b505afa1580156120f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121149190613ae9565b61211e9190613b18565b9250838310156121675760405162461bcd60e51b81526020600482015260146024820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b60448201526064016106ac565b505092915050565b6000612184836001600160a01b038416613068565b90505b92915050565b6001600160a01b03811660009081526001830160205260408120541515612184565b804710156121ff5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106ac565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461224c576040519150601f19603f3d011682016040523d82523d6000602084013e612251565b606091505b50509050806122c85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106ac565b505050565b6040516001600160a01b0383166024820152604481018290526122c890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091526130b7565b600080612350613189565b909250905080156108b9576108b9827f0000000000000000000000000000000000000000000000000000000000000000836132cf565b6000612184836001600160a01b038416613371565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f6cd35ee9082906370a082319060240160206040518083038186803b15801561240557600080fd5b505afa158015612419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243d9190613ae9565b612445611302565b61244f9190613b4c565b6040518263ffffffff1660e01b815260040161143291815260200190565b60008061247983613464565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156124de57600080fd5b505afa1580156124f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125169190613ae9565b90508082111561268657600061252a611302565b905060006125388385613b18565b9050818111156125455750805b604051630441a3e760e41b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063441a3e7090604401600060405180830381600087803b1580156125cd57600080fd5b505af11580156125e1573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a08231915060240160206040518083038186803b15801561264457600080fd5b505afa158015612658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267c9190613ae9565b9695505050505050565b5092915050565b60006126988261246d565b905080156108b95760405163c4de93a560e01b815261ffff7f0000000000000000000000000000000000000000000000000000000000000000166004820152602481018290523060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c4de93a590606401602060405180830381600087803b15801561273257600080fd5b505af1158015612746573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c89190613ae9565b60008183106127795781612184565b5090919050565b6127898161364a565b6127dd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612e99565b6128316001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612e99565b6128856001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612e99565b60025461081f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612e99565b604051636a9eee1360e11b81523060048201526000908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d53ddc269060240160206040518083038186803b15801561292757600080fd5b505afa15801561293b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295f9190613ae9565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b1580156129c457600080fd5b505afa1580156129d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fc9190613ae9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612a6157600080fd5b505afa158015612a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a999190613ae9565b9050600081612aa661239b565b612ab09190613b4c565b905082811115612acb57612ac48382613b18565b9650612ad8565b612ad58184613b18565b95505b6000612ae48589613b4c565b905082811115612b9557612afb6110668483613b18565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612b5a57600080fd5b505afa158015612b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b929190613ae9565b92505b612b9f838661276a565b9550858311612baf576000612bc2565b612bc2612bbc8785613b18565b8961276a565b6040516302df682360e11b81526004810182905260248101899052604481018890529098507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b158015612c3557600080fd5b505af1158015612c49573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152612ced92507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691506370a082319060240160206040518083038186803b158015612cb057600080fd5b505afa158015612cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce89190613ae9565b61369e565b5050505050909192565b60606000612d048361382f565b9392505050565b60008054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612d6157600080fd5b505afa158015612d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d999190613b2f565b6001600160a01b031614612def5760405162461bcd60e51b815260206004820152601360248201527f77726f6e672d726563656970742d746f6b656e0000000000000000000000000060448201526064016106ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663441a3e707f0000000000000000000000000000000000000000000000000000000000000000612e47611302565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401600060405180830381600087803b158015612e8557600080fd5b505af1158015610ee3573d6000803e3d6000fd5b801580612f225750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015612ee857600080fd5b505afa158015612efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f209190613ae9565b155b612f945760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016106ac565b6040516001600160a01b0383166024820152604481018290526122c890849063095ea7b360e01b906064016122f9565b600254604051636ccb2b0160e01b81526001600160a01b038581166004830152848116602483015260448201849052600160648301523060848301526000921690636ccb2b019060a401602060405180830381600087803b15801561302857600080fd5b505af115801561303c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130609190613ae9565b949350505050565b60008181526001830160205260408120546130af57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155612187565b506000612187565b600061310c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661388b9092919063ffffffff16565b8051909150156122c8578080602001905181019061312a9190613c39565b6122c85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106ac565b604051630441a3e760e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201526000602482018190529081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063441a3e7090604401600060405180830381600087803b15801561321657600080fd5b505af115801561322a573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201527f000000000000000000000000000000000000000000000000000000000000000092506001600160a01b03831691506370a082319060240160206040518083038186803b15801561328f57600080fd5b505afa1580156132a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c79190613ae9565b915091509091565b600254604051636ccb2b0160e01b81526001600160a01b0385811660048301528481166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b15801561333257600080fd5b505af1925050508015613362575060408051601f3d908101601f1916820190925261335f91810190613ae9565b60015b61336b57505050565b50505050565b6000818152600183016020526040812054801561345a576000613395600183613b18565b85549091506000906133a990600190613b18565b905081811461340e5760008660000182815481106133c9576133c9613c5b565b90600052602060002001549050808760000184815481106133ec576133ec613c5b565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061341f5761341f613c71565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612187565b6000915050612187565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166315770f926040518163ffffffff1660e01b815260040160206040518083038186803b1580156134c057600080fd5b505afa1580156134d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f89190613ae9565b905060008111613509576000612d04565b807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561356357600080fd5b505afa158015613577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359b9190613ae9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feb56b156040518163ffffffff1660e01b815260040160206040518083038186803b1580156135f457600080fd5b505afa158015613608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362c9190613ae9565b6136369086613c87565b6136409190613ca9565b612d049190613c87565b61081f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612e99565b801561081f576040516321ec87bf60e21b81527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290523060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906387b21efc90606401600060405180830381600087803b15801561373257600080fd5b505af1158015613746573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116935063e2bbb15892507f0000000000000000000000000000000000000000000000000000000000000000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a082319060240160206040518083038186803b1580156137f757600080fd5b505afa15801561380b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e479190613ae9565b60608160000180548060200260200160405190810160405280929190818152602001828054801561387f57602002820191906000526020600020905b81548152602001906001019080831161386b575b50505050509050919050565b6060613060848460008585843b6138e45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106ac565b600080866001600160a01b031685876040516139009190613cc8565b60006040518083038185875af1925050503d806000811461393d576040519150601f19603f3d011682016040523d82523d6000602084013e613942565b606091505b509150915061395282828661395d565b979650505050505050565b6060831561396c575081612d04565b82511561397c5782518084602001fd5b8160405162461bcd60e51b81526004016106ac9190613aaa565b6001600160a01b038116811461081f57600080fd5b6000602082840312156139bd57600080fd5b8135612d0481613996565b6000602082840312156139da57600080fd5b5035919050565b6000602082840312156139f357600080fd5b813561ffff81168114612d0457600080fd5b6020808252825182820181905260009190848201906040850190845b81811015613a465783516001600160a01b031683529284019291840191600101613a21565b50909695505050505050565b60005b83811015613a6d578181015183820152602001613a55565b8381111561336b5750506000910152565b60008151808452613a96816020860160208601613a52565b601f01601f19169290920160200192915050565b6020815260006121846020830184613a7e565b60008060408385031215613ad057600080fd5b8235613adb81613996565b946020939093013593505050565b600060208284031215613afb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613b2a57613b2a613b02565b500390565b600060208284031215613b4157600080fd5b8151612d0481613996565b60008219821115613b5f57613b5f613b02565b500190565b61ffff881681528660208201528560408201526001600160a01b038516606082015283608082015260e060a08201526000613ba260e0830185613a7e565b82810360c08401528351815260208401516020820152604084015160606040830152613bd16060830182613a7e565b9b9a5050505050505050505050565b60008060408385031215613bf357600080fd5b505080516020909101519092909150565b600181811c90821680613c1857607f821691505b60208210811415610a9d57634e487b7160e01b600052602260045260246000fd5b600060208284031215613c4b57600080fd5b81518015158114612d0457600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600082613ca457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613cc357613cc3613b02565b500290565b60008251613cda818460208701613a52565b919091019291505056fea26469706673582212207d98456e887731ccbfc57df4f9a7fc6e2cefe5ca42473c424630cc4417dfe25a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken(uint256)": {
        "details": "Approve all required tokens"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweep(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      },
      "withdrawForRebalance(uint16)": {
        "details": "Stargate has different chainId than EVM chainId.",
        "params": {
          "dstChainId_": "Destination chainId."
        }
      }
    },
    "stateVariables": {
      "stargateRouter": {
        "details": "Router to add/remove liquidity from a STG Pool"
      }
    },
    "title": "This Strategy will deposit collateral token in a Stargate Pool Stake LP Token and accrue swap rewards",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "claimAndSwapRewards(uint256)": {
        "notice": "Claim rewardToken and convert rewardToken into collateral token."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "rewardToken()": {
        "notice": "rewardToken, usually STG"
      },
      "stargateLpStaking()": {
        "notice": "Address of Staking contract (MasterChef V2 behavior)"
      },
      "stargateLpStakingPoolId()": {
        "notice": "Reward pool id of the MasterChef"
      },
      "stargatePoolId()": {
        "notice": "Stargate Factory LP Pool Id"
      },
      "swapToCollateral(address,uint256)": {
        "notice": "onlyKeeper:: Swap given token into collateral token."
      },
      "sweep(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns total collateral locked in the strategy"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      },
      "withdrawForRebalance(uint16)": {
        "notice": "OnlyKeeper: This function will withdraw required collateral from given   destination chain to the chain where this contract is deployed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14399,
        "contract": "vesper-strategies/contracts/strategies/stargate/Stargate.sol:Stargate",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14405,
        "contract": "vesper-strategies/contracts/strategies/stargate/Stargate.sol:Stargate",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14408,
        "contract": "vesper-strategies/contracts/strategies/stargate/Stargate.sol:Stargate",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)13247"
      },
      {
        "astId": 14421,
        "contract": "vesper-strategies/contracts/strategies/stargate/Stargate.sol:Stargate",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3025_storage"
      },
      {
        "astId": 32374,
        "contract": "vesper-strategies/contracts/strategies/stargate/Stargate.sol:Stargate",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRoutedSwapper)13247": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3025_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3024,
            "contract": "vesper-strategies/contracts/strategies/stargate/Stargate.sol:Stargate",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2724_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2724_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2719,
            "contract": "vesper-strategies/contracts/strategies/stargate/Stargate.sol:Stargate",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2723,
            "contract": "vesper-strategies/contracts/strategies/stargate/Stargate.sol:Stargate",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}