{
  "address": "0xFd81543db31f59b80Eb7dcE12499431177F1F241",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aaveAddressesProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiptToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMinBorrowRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinBorrowRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMaxBorrowRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBorrowRatio",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBorrowRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            }
          ],
          "internalType": "struct Account.Info",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "callFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract Comptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBorrowRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dyDxMarketId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_borrow",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAaveActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDyDxActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBorrowRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateAaveStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBorrowRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBorrowRatio",
          "type": "uint256"
        }
      ],
      "name": "updateBorrowRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateDyDxStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7dfe792c5d4d2b3a3a7489a79f59952960dc90554320b7bc45ff0ae612b3d651",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xFd81543db31f59b80Eb7dcE12499431177F1F241",
    "transactionIndex": 0,
    "gasUsed": "4580018",
    "logsBloom": "0x
    "blockHash": "0x7a99ff1671ccc774421376d06a35fbf41c6c48c0af69b9fe24f89e38ca2127da",
    "transactionHash": "0x7dfe792c5d4d2b3a3a7489a79f59952960dc90554320b7bc45ff0ae612b3d651",
    "logs": [],
    "blockNumber": 15569569,
    "cumulativeGasUsed": "4580018",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0538C8bAc84E95A9dF8aC10Aad17DbE81b9E36ee",
    "0x8f156189A3CD28dFc8FB7BbbAce58F98F09c0bB3",
    "0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B",
    "0xc00e94Cb662C3520282E6f5717214004A7f26888",
    "0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5",
    "0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643",
    "Compound_Leverage_DAI"
  ],
  "numDeployments": 1,
  "solcInputHash": "68abbcf3bee6889cfcfd9070eda48f2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveAddressesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinBorrowRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinBorrowRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaxBorrowRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBorrowRatio\",\"type\":\"uint256\"}],\"name\":\"UpdatedBorrowRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract Comptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBorrowRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dyDxMarketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAaveActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDyDxActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAaveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowRatio\",\"type\":\"uint256\"}],\"name\":\"updateBorrowRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateDyDxStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"callFunction(address,(address,uint256),bytes)\":{\"details\":\"DyDx calls this function after doing flash loan\"},\"executeOperation(address[],uint256[],uint256[],address,bytes)\":{\"details\":\"Aave will call this function after doing flash loan\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"sweepERC20(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateBorrowRatio(uint256,uint256)\":{\"details\":\"It is possible to set 0 as _minBorrowRatio to not borrow anything\",\"params\":{\"_maxBorrowRatio\":\"Maximum % we want to borrow\",\"_minBorrowRatio\":\"Minimum % we want to borrow\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"This strategy will deposit collateral token in Compound and based on position it will borrow same collateral token. It will use borrowed asset as supply and borrow again.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"currentBorrowRatio()\":{\"notice\":\"Current borrow ratio, calculated as current borrow divide by max allowed borrow Return value is based on basis points, i.e. 7500 = 75% ratio\"},\"getPosition()\":{\"notice\":\"Return supply and borrow position. Position may return few block old value\"},\"isReservedToken(address)\":{\"notice\":\"Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"sweepERC20(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns total collateral locked in the strategy\"},\"updateBorrowRatio(uint256,uint256)\":{\"notice\":\"Update upper and lower borrow ratio\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol\":\"CompoundLeverage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance()\\n        external\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xddea3754059443771113c169ee1647ef9e83ee6ee509a911ceb7729fea62adc0\",\"license\":\"MIT\"},\"vesper-pools/contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title Errors library\\nlibrary Errors {\\n    string public constant INVALID_COLLATERAL_AMOUNT = \\\"1\\\"; // Collateral must be greater than 0 or > defined limit\\n    string public constant INVALID_SHARE_AMOUNT = \\\"2\\\"; // Share must be greater than 0\\n    string public constant INVALID_INPUT_LENGTH = \\\"3\\\"; // Input array length must be greater than 0\\n    string public constant INPUT_LENGTH_MISMATCH = \\\"4\\\"; // Input array length mismatch with another array length\\n    string public constant NOT_WHITELISTED_ADDRESS = \\\"5\\\"; // Caller is not whitelisted to withdraw without fee\\n    string public constant MULTI_TRANSFER_FAILED = \\\"6\\\"; // Multi transfer of tokens has failed\\n    string public constant FEE_COLLECTOR_NOT_SET = \\\"7\\\"; // Fee Collector is not set\\n    string public constant NOT_ALLOWED_TO_SWEEP = \\\"8\\\"; // Token is not allowed to sweep\\n    string public constant INSUFFICIENT_BALANCE = \\\"9\\\"; // Insufficient balance to performs operations to follow\\n    string public constant INPUT_ADDRESS_IS_ZERO = \\\"10\\\"; // Input address is zero\\n    string public constant FEE_LIMIT_REACHED = \\\"11\\\"; // Fee must be less than MAX_BPS\\n    string public constant ALREADY_INITIALIZED = \\\"12\\\"; // Data structure, contract, or logic already initialized and can not be called again\\n    string public constant ADD_IN_LIST_FAILED = \\\"13\\\"; // Cannot add address in address list\\n    string public constant REMOVE_FROM_LIST_FAILED = \\\"14\\\"; // Cannot remove address from address list\\n    string public constant STRATEGY_IS_ACTIVE = \\\"15\\\"; // Strategy is already active, an inactive strategy is required\\n    string public constant STRATEGY_IS_NOT_ACTIVE = \\\"16\\\"; // Strategy is not active, an active strategy is required\\n    string public constant INVALID_STRATEGY = \\\"17\\\"; // Given strategy is not a strategy of this pool\\n    string public constant DEBT_RATIO_LIMIT_REACHED = \\\"18\\\"; // Debt ratio limit reached. It must be less than MAX_BPS\\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \\\"19\\\"; // Strategy total debt must be 0\\n    string public constant LOSS_TOO_HIGH = \\\"20\\\"; // Strategy reported loss must be less than current debt\\n    string public constant INVALID_MAX_BORROW_LIMIT = \\\"21\\\"; // Max borrow limit is beyond range.\\n    string public constant MAX_LIMIT_LESS_THAN_MIN = \\\"22\\\"; // Max limit should be greater than min limit.\\n    string public constant INVALID_SLIPPAGE = \\\"23\\\"; // Slippage should be less than MAX_BPS\\n    string public constant WRONG_RECEIPT_TOKEN = \\\"24\\\"; // Wrong receipt token address\\n    string public constant AAVE_FLASH_LOAN_NOT_ACTIVE = \\\"25\\\"; // aave flash loan is not active\\n    string public constant DYDX_FLASH_LOAN_NOT_ACTIVE = \\\"26\\\"; // DYDX flash loan is not active\\n    string public constant INVALID_FLASH_LOAN = \\\"27\\\"; // invalid-flash-loan\\n    string public constant INVALID_INITIATOR = \\\"28\\\"; // \\\"invalid-initiator\\\"\\n    string public constant INCORRECT_WITHDRAW_AMOUNT = \\\"29\\\"; // withdrawn amount is not correct\\n    string public constant NO_MARKET_ID_FOUND = \\\"30\\\"; // dydx flash loan no marketId found for token\\n    string public constant SAME_AS_PREVIOUS = \\\"31\\\"; // Input should not be same as previous value.\\n    string public constant INVALID_INPUT = \\\"32\\\"; // Generic invalid input error code\\n}\\n\",\"keccak256\":\"0x96be83cb172a1efef0ff9771392f0b1d192a680fb2b36b061efbd49177afb947\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(\\n        uint256 _profit,\\n        uint256 _loss,\\n        uint256 _payback\\n    ) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(address _strategy)\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x193c2dd96da7b717f15736d5f13ccab8a7b4e90853b6cb922a864f1e8fdd9dc7\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/aave/IAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// @dev Interface support both Aave v2 and v3 methods\\ninterface PoolAddressesProvider {\\n    function getPool() external view returns (address);\\n\\n    // Aave v2 method.\\n    function getLendingPool() external view returns (address);\\n\\n    function getPoolDataProvider() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\\ninterface AaveOracle {\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\\n\\ninterface AToken is IERC20 {\\n    /**\\n     * @dev Returns the address of the incentives controller contract\\n     **/\\n    function getIncentivesController() external view returns (address);\\n\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    function burn(\\n        address user,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    //solhint-disable func-name-mixedcase\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\\ninterface AaveIncentivesController {\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function claimAllRewards(address[] calldata assets, address to)\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    function getRewardsList() external view returns (address[] memory);\\n}\\n\\ninterface AaveLendingPool {\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external;\\n\\n    function getUserAccountData(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n}\\n\\ninterface AaveProtocolDataProvider {\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n}\\n\\n//solhint-disable func-name-mixedcase\\ninterface StakedAave is IERC20 {\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function stake(address onBehalfOf, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\\n\\n    function stakersCooldowns(address staker) external view returns (uint256);\\n\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\n\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x142a75fa1d552c9a3046bbd11f69fc23fc365e97856f75f103e8bab0718366f8\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface CToken {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow() external payable; // For ETH\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\\n\\n    function transfer(address user, uint256 amount) external returns (bool);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function transferFrom(\\n        address owner,\\n        address user,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function underlying() external view returns (address);\\n\\n    function comptroller() external view returns (address);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function markets(address market)\\n        external\\n        view\\n        returns (\\n            bool isListed,\\n            uint256 collateralFactorMantissa,\\n            bool isCompted\\n        );\\n\\n    function oracle() external view returns (address);\\n}\\n\\ninterface Oracle {\\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\\n\\n    function price(string memory symbol) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e3911a8bab8ccef410313012145b400c0e7f8bb31c799f4849dc015ba81b98b\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/dydx/ISoloMargin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/** In order to keep code/files short, all libraries and interfaces are trimmed as per Vesper need */\\n\\nlibrary Account {\\n    enum Status {Normal, Liquid, Vapor}\\n    struct Info {\\n        address owner; // The address that owns the account\\n        uint256 number; // A nonce that allows a single address to control many accounts\\n    }\\n}\\n\\nlibrary Actions {\\n    enum ActionType {\\n        Deposit, // supply tokens\\n        Withdraw, // borrow tokens\\n        Transfer, // transfer balance between accounts\\n        Buy, // buy an amount of some token (publicly)\\n        Sell, // sell an amount of some token (publicly)\\n        Trade, // trade tokens against another account\\n        Liquidate, // liquidate an undercollateralized or expiring account\\n        Vaporize, // use excess tokens to zero-out a completely negative account\\n        Call // send arbitrary data to an address\\n    }\\n\\n    struct ActionArgs {\\n        ActionType actionType;\\n        uint256 accountId;\\n        Types.AssetAmount amount;\\n        uint256 primaryMarketId;\\n        uint256 secondaryMarketId;\\n        address otherAddress;\\n        uint256 otherAccountId;\\n        bytes data;\\n    }\\n}\\n\\nlibrary Types {\\n    enum AssetDenomination {\\n        Wei, // the amount is denominated in wei\\n        Par // the amount is denominated in par\\n    }\\n\\n    enum AssetReference {\\n        Delta, // the amount is given as a delta from the current value\\n        Target // the amount is given as an exact number to end up at\\n    }\\n\\n    struct AssetAmount {\\n        bool sign; // true if positive\\n        AssetDenomination denomination;\\n        AssetReference ref;\\n        uint256 value;\\n    }\\n}\\n\\ninterface ISoloMargin {\\n    function getMarketTokenAddress(uint256 marketId) external view returns (address);\\n\\n    function getNumMarkets() external view returns (uint256);\\n\\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\\n}\\n\\n/**\\n * @title ICallee\\n * @author dYdX\\n *\\n * Interface that Callees for Solo must implement in order to ingest data.\\n */\\ninterface ICallee {\\n    // ============ Public Functions ============\\n\\n    /**\\n     * Allows users to send this contract arbitrary data.\\n     *\\n     * @param  sender       The msg.sender to Solo\\n     * @param  accountInfo  The account from which the data is being sent\\n     * @param  data         Arbitrary data given by the sender\\n     */\\n    function callFunction(\\n        address sender,\\n        Account.Info memory accountInfo,\\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1af9b914f1b4835dff9ae76d24bcf7a08692ccbe01d4c90456668e7b9646c5e0\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_\\n    ) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x81fccad24b581704ec06b681d0f75d2af86c461142bf0224e118779783271d10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/FlashLoanHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/Errors.sol\\\";\\nimport \\\"../interfaces/aave/IAave.sol\\\";\\nimport \\\"../interfaces/dydx/ISoloMargin.sol\\\";\\n\\n/**\\n * @title FlashLoanHelper:: This contract does all heavy lifting to get flash loan via Aave and DyDx.\\n * @dev End user has to override _flashLoanLogic() function to perform logic after flash loan is done.\\n *      Also needs to approve token to aave and dydx via _approveToken function.\\n *      2 utility internal functions are also provided to activate/deactivate flash loan providers.\\n *      Utility function are provided as internal so that end user can choose controlled access via public functions.\\n */\\nabstract contract FlashLoanHelper {\\n    using SafeERC20 for IERC20;\\n\\n    PoolAddressesProvider internal poolAddressesProvider;\\n\\n    address internal constant SOLO = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\n    uint256 public dyDxMarketId;\\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\\n    bool public isAaveActive = false;\\n    bool public isDyDxActive = false;\\n\\n    constructor(address _aaveAddressesProvider) {\\n        require(_aaveAddressesProvider != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\\n\\n        poolAddressesProvider = PoolAddressesProvider(_aaveAddressesProvider);\\n    }\\n\\n    function _updateAaveStatus(bool _status) internal {\\n        isAaveActive = _status;\\n    }\\n\\n    function _updateDyDxStatus(bool _status, address _token) internal {\\n        if (_status) {\\n            dyDxMarketId = _getMarketIdFromTokenAddress(SOLO, _token);\\n        }\\n        isDyDxActive = _status;\\n    }\\n\\n    /// @notice Approve all required tokens for flash loan\\n    function _approveToken(address _token, uint256 _amount) internal {\\n        IERC20(_token).safeApprove(SOLO, _amount);\\n        IERC20(_token).safeApprove(poolAddressesProvider.getLendingPool(), _amount);\\n    }\\n\\n    /// @dev Override this function to execute logic which uses flash loan amount\\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal virtual;\\n\\n    /***************************** Aave flash loan functions ***********************************/\\n\\n    bool private awaitingFlash = false;\\n\\n    /**\\n     * @notice This is entry point for Aave flash loan\\n     * @param _token Token for which we are taking flash loan\\n     * @param _amountDesired Flash loan amount\\n     * @param _data This will be passed downstream for processing. It can be empty.\\n     */\\n    function _doAaveFlashLoan(\\n        address _token,\\n        uint256 _amountDesired,\\n        bytes memory _data\\n    ) internal returns (uint256 _amount) {\\n        require(isAaveActive, Errors.AAVE_FLASH_LOAN_NOT_ACTIVE);\\n        AaveLendingPool _aaveLendingPool = AaveLendingPool(poolAddressesProvider.getLendingPool());\\n        AaveProtocolDataProvider _aaveProtocolDataProvider =\\n            AaveProtocolDataProvider(poolAddressesProvider.getAddress(AAVE_PROVIDER_ID));\\n        // Check token liquidity in Aave\\n        (uint256 _availableLiquidity, , , , , , , , , ) = _aaveProtocolDataProvider.getReserveData(_token);\\n        if (_amountDesired > _availableLiquidity) {\\n            _amountDesired = _availableLiquidity;\\n        }\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = _token;\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = _amountDesired;\\n\\n        // 0 = no debt, 1 = stable, 2 = variable\\n        uint256[] memory modes = new uint256[](1);\\n        modes[0] = 0;\\n\\n        // Anyone can call aave flash loan to us, so we need some protection\\n        awaitingFlash = true;\\n\\n        // function params: receiver, assets, amounts, modes, onBehalfOf, data, referralCode\\n        _aaveLendingPool.flashLoan(address(this), assets, amounts, modes, address(this), _data, 0);\\n        _amount = _amountDesired;\\n        awaitingFlash = false;\\n    }\\n\\n    /// @dev Aave will call this function after doing flash loan\\n    function executeOperation(\\n        address[] calldata, /*_assets*/\\n        uint256[] calldata _amounts,\\n        uint256[] calldata _premiums,\\n        address _initiator,\\n        bytes calldata _data\\n    ) external returns (bool) {\\n        require(msg.sender == poolAddressesProvider.getLendingPool(), \\\"!aave-pool\\\");\\n        require(awaitingFlash, Errors.INVALID_FLASH_LOAN);\\n        require(_initiator == address(this), Errors.INVALID_INITIATOR);\\n\\n        // Flash loan amount + flash loan fee\\n        uint256 _repayAmount = _amounts[0] + _premiums[0];\\n        _flashLoanLogic(_data, _repayAmount);\\n        return true;\\n    }\\n\\n    /***************************** Aave flash loan functions ends ***********************************/\\n\\n    /***************************** DyDx flash loan functions ***************************************/\\n\\n    /**\\n     * @notice This is entry point for DyDx flash loan\\n     * @param _token Token for which we are taking flash loan\\n     * @param _amountDesired Flash loan amount\\n     * @param _data This will be passed downstream for processing. It can be empty.\\n     */\\n    function _doDyDxFlashLoan(\\n        address _token,\\n        uint256 _amountDesired,\\n        bytes memory _data\\n    ) internal returns (uint256 _amount) {\\n        require(isDyDxActive, Errors.DYDX_FLASH_LOAN_NOT_ACTIVE);\\n\\n        // Check token liquidity in DyDx\\n        uint256 amountInSolo = IERC20(_token).balanceOf(SOLO);\\n        if (_amountDesired > amountInSolo) {\\n            _amountDesired = amountInSolo;\\n        }\\n        // Repay amount, amount with fee, can be 2 wei higher. Consider 2 wei as fee\\n        uint256 repayAmount = _amountDesired + 2;\\n\\n        // Encode custom data for callFunction\\n        bytes memory _callData = abi.encode(_data, repayAmount);\\n\\n        // 1. Withdraw _token\\n        // 2. Call callFunction(...) which will call loanLogic\\n        // 3. Deposit _token back\\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\\n\\n        operations[0] = _getWithdrawAction(dyDxMarketId, _amountDesired);\\n        operations[1] = _getCallAction(_callData);\\n        operations[2] = _getDepositAction(dyDxMarketId, repayAmount);\\n\\n        Account.Info[] memory accountInfos = new Account.Info[](1);\\n        accountInfos[0] = _getAccountInfo();\\n\\n        ISoloMargin(SOLO).operate(accountInfos, operations);\\n        _amount = _amountDesired;\\n    }\\n\\n    /// @dev DyDx calls this function after doing flash loan\\n    function callFunction(\\n        address _sender,\\n        Account.Info memory, /* _account */\\n        bytes memory _callData\\n    ) external {\\n        (bytes memory _data, uint256 _repayAmount) = abi.decode(_callData, (bytes, uint256));\\n        require(msg.sender == SOLO, \\\"!solo\\\");\\n        require(_sender == address(this), Errors.INVALID_INITIATOR);\\n        _flashLoanLogic(_data, _repayAmount);\\n    }\\n\\n    /********************************* DyDx helper functions *********************************/\\n    function _getAccountInfo() internal view returns (Account.Info memory) {\\n        return Account.Info({owner: address(this), number: 1});\\n    }\\n\\n    function _getMarketIdFromTokenAddress(address _solo, address token) internal view returns (uint256) {\\n        ISoloMargin solo = ISoloMargin(_solo);\\n\\n        uint256 numMarkets = solo.getNumMarkets();\\n\\n        address curToken;\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            curToken = solo.getMarketTokenAddress(i);\\n\\n            if (curToken == token) {\\n                return i;\\n            }\\n        }\\n\\n        revert(Errors.NO_MARKET_ID_FOUND);\\n    }\\n\\n    function _getWithdrawAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Withdraw,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: false,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: amount\\n                }),\\n                primaryMarketId: marketId,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: \\\"\\\"\\n            });\\n    }\\n\\n    function _getCallAction(bytes memory data) internal view returns (Actions.ActionArgs memory) {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Call,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: false,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: 0\\n                }),\\n                primaryMarketId: 0,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: data\\n            });\\n    }\\n\\n    function _getDepositAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Deposit,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: true,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: amount\\n                }),\\n                primaryMarketId: marketId,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: \\\"\\\"\\n            });\\n    }\\n\\n    /***************************** DyDx flash loan functions end *****************************/\\n}\\n\",\"keccak256\":\"0x2e1ea54783cfba3aea665450c3d5d04fea76c856328b08e818aceab8e3cdb8e2\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _receiptToken\\n    ) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyKeeper {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance()\\n        external\\n        onlyKeeper\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _rebalance()\\n        internal\\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        );\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x947a4185d2e76769bda95e405241a2d8d1b17093955a486265cdf1d92893786b\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Heavily inspired from CompoundLeverage strategy of Yearn. https://etherscan.io/address/0x4031afd3B0F71Bace9181E554A9E680Ee4AbE7dF#code\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/compound/ICompound.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../FlashLoanHelper.sol\\\";\\nimport \\\"./CompoundLeverageBase.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\n/// @title This strategy will deposit collateral token in Compound and based on position\\n/// it will borrow same collateral token. It will use borrowed asset as supply and borrow again.\\ncontract CompoundLeverage is CompoundLeverageBase, FlashLoanHelper {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _comptroller,\\n        address _rewardToken,\\n        address _aaveAddressesProvider,\\n        address _receiptToken,\\n        string memory _name\\n    )\\n        CompoundLeverageBase(_pool, _swapper, _comptroller, _rewardToken, _receiptToken, _name)\\n        FlashLoanHelper(_aaveAddressesProvider)\\n    {}\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        FlashLoanHelper._approveToken(address(collateralToken), _amount);\\n    }\\n\\n    /**\\n     * @dev Aave flash is used only for withdrawal due to high fee compare to DyDx\\n     * @param _flashAmount Amount for flash loan\\n     * @param _shouldRepay Flag indicating we want to leverage or deleverage\\n     * @return Total amount we leverage or deleverage using flash loan\\n     */\\n    function _doFlashLoan(uint256 _flashAmount, bool _shouldRepay) internal override returns (uint256) {\\n        uint256 _totalFlashAmount;\\n        // Due to less fee DyDx is our primary flash loan provider\\n        if (isDyDxActive && _flashAmount > 0) {\\n            bytes memory _data = abi.encode(_flashAmount, _shouldRepay);\\n            _totalFlashAmount = _doDyDxFlashLoan(address(collateralToken), _flashAmount, _data);\\n            _flashAmount -= _totalFlashAmount;\\n        }\\n        if (isAaveActive && _shouldRepay && _flashAmount > 0) {\\n            bytes memory _data = abi.encode(_flashAmount, _shouldRepay);\\n            _totalFlashAmount += _doAaveFlashLoan(address(collateralToken), _flashAmount, _data);\\n        }\\n        return _totalFlashAmount;\\n    }\\n\\n    /**\\n     * @notice This function will be called by flash loan\\n     * @dev In case of borrow, DyDx is preferred as fee is so low that it does not effect\\n     * our collateralRatio and liquidation risk.\\n     */\\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal override {\\n        (uint256 _amount, bool _deficit) = abi.decode(_data, (uint256, bool));\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        require(_collateralHere >= _amount, \\\"FLASH_FAILED\\\"); // to stop malicious calls\\n\\n        //if in deficit we repay amount and then withdraw\\n        if (_deficit) {\\n            _repayBorrow(_amount);\\n            //if we are withdrawing we take more to cover fee\\n            _redeemUnderlying(_repayAmount);\\n        } else {\\n            _mint(_collateralHere);\\n            //borrow more to cover fee\\n            _borrowCollateral(_repayAmount);\\n        }\\n    }\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n\\n    function updateAaveStatus(bool _status) external onlyGovernor {\\n        _updateAaveStatus(_status);\\n    }\\n\\n    function updateDyDxStatus(bool _status) external virtual onlyGovernor {\\n        _updateDyDxStatus(_status, address(collateralToken));\\n    }\\n}\\n\",\"keccak256\":\"0xc1b1890763702bc7ca5924ac7f78052a94f1932810db2e905ed3568d22941ca2\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/CompoundLeverageBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Heavily inspired from CompoundLeverage strategy of Yearn. https://etherscan.io/address/0x4031afd3B0F71Bace9181E554A9E680Ee4AbE7dF#code\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/compound/ICompound.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Compound and based on position\\n/// it will borrow same collateral token. It will use borrowed asset as supply and borrow again.\\nabstract contract CompoundLeverageBase is Strategy {\\n    using SafeERC20 for IERC20;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"5.0.0\\\";\\n\\n    uint256 internal constant MAX_BPS = 10_000; //100%\\n    uint256 public minBorrowRatio = 5_000; // 50%\\n    uint256 public maxBorrowRatio = 6_000; // 60%\\n    uint256 internal constant COLLATERAL_FACTOR_LIMIT = 9_500; // 95%\\n    CToken internal cToken;\\n\\n    Comptroller public immutable comptroller;\\n    address public rewardToken;\\n\\n    event UpdatedBorrowRatio(\\n        uint256 previousMinBorrowRatio,\\n        uint256 newMinBorrowRatio,\\n        uint256 previousMaxBorrowRatio,\\n        uint256 newMaxBorrowRatio\\n    );\\n\\n    constructor(\\n        address _pool,\\n        address _swapper,\\n        address _comptroller,\\n        address _rewardToken,\\n        address _receiptToken,\\n        string memory _name\\n    ) Strategy(_pool, _swapper, _receiptToken) {\\n        NAME = _name;\\n        require(_comptroller != address(0), \\\"comptroller-address-is-zero\\\");\\n        comptroller = Comptroller(_comptroller);\\n        rewardToken = _rewardToken;\\n\\n        require(_receiptToken != address(0), \\\"cToken-address-is-zero\\\");\\n        cToken = CToken(_receiptToken);\\n    }\\n\\n    /**\\n     * @notice Current borrow ratio, calculated as current borrow divide by max allowed borrow\\n     * Return value is based on basis points, i.e. 7500 = 75% ratio\\n     */\\n    function currentBorrowRatio() external view returns (uint256) {\\n        (uint256 _supply, uint256 _borrow) = getPosition();\\n        return _borrow == 0 ? 0 : (_borrow * MAX_BPS) / _supply;\\n    }\\n\\n    /// @notice Return supply and borrow position. Position may return few block old value\\n    function getPosition() public view returns (uint256 _supply, uint256 _borrow) {\\n        (, uint256 _cTokenBalance, uint256 _borrowBalance, uint256 _exchangeRate) =\\n            cToken.getAccountSnapshot(address(this));\\n        _supply = (_cTokenBalance * _exchangeRate) / 1e18;\\n        _borrow = _borrowBalance;\\n    }\\n\\n    /// @inheritdoc Strategy\\n    function isReservedToken(address _token) public view virtual override returns (bool) {\\n        return _token == address(cToken) || _token == address(collateralToken);\\n    }\\n\\n    /// @inheritdoc Strategy\\n    function tvl() public view virtual override returns (uint256) {\\n        (uint256 _supply, uint256 _borrow) = getPosition();\\n        return collateralToken.balanceOf(address(this)) + _supply - _borrow;\\n    }\\n\\n    /**\\n     * @dev Adjust position by normal leverage and deleverage.\\n     * @param _adjustBy Amount by which we want to increase or decrease _borrow\\n     * @param _shouldRepay True indicate we want to deleverage\\n     * @return amount Actual adjusted amount\\n     */\\n    function _adjustPosition(uint256 _adjustBy, bool _shouldRepay) internal returns (uint256 amount) {\\n        // We can get position via view function, as this function will be called after _calculateDesiredPosition\\n        (uint256 _supply, uint256 _borrow) = getPosition();\\n\\n        // If no borrow then there is nothing to deleverage\\n        if (_borrow == 0 && _shouldRepay) {\\n            return 0;\\n        }\\n\\n        uint256 collateralFactor = _getCollateralFactor();\\n\\n        if (_shouldRepay) {\\n            amount = _normalDeleverage(_adjustBy, _supply, _borrow, collateralFactor);\\n        } else {\\n            amount = _normalLeverage(_adjustBy, _supply, _borrow, collateralFactor);\\n        }\\n    }\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 _amount) internal virtual override {\\n        super._approveToken(_amount);\\n        collateralToken.safeApprove(address(cToken), _amount);\\n        IERC20(rewardToken).safeApprove(address(swapper), _amount);\\n    }\\n\\n    /**\\n     * @dev Payback borrow before migration\\n     * @param _newStrategy Address of new strategy.\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual override {\\n        require(IStrategy(_newStrategy).token() == address(cToken), \\\"wrong-receipt-token\\\");\\n        minBorrowRatio = 0;\\n        // It will calculate amount to repay based on borrow limit and payback all\\n        _deposit();\\n    }\\n\\n    function _borrowCollateral(uint256 _amount) internal virtual {\\n        require(cToken.borrow(_amount) == 0, \\\"borrow-from-compound-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Calculate borrow position based on borrow ratio, current supply, borrow, amount\\n     * being deposited or withdrawn.\\n     * @param _amount Collateral amount\\n     * @param _isDeposit Flag indicating whether we are depositing _amount or withdrawing\\n     * @return _position Amount of borrow that need to be adjusted\\n     * @return _shouldRepay Flag indicating whether _position is borrow amount or repay amount\\n     */\\n    function _calculateDesiredPosition(uint256 _amount, bool _isDeposit)\\n        internal\\n        returns (uint256 _position, bool _shouldRepay)\\n    {\\n        uint256 _totalSupply = cToken.balanceOfUnderlying(address(this));\\n        uint256 _currentBorrow = cToken.borrowBalanceStored(address(this));\\n        // If minimum borrow limit set to 0 then repay borrow\\n        if (minBorrowRatio == 0) {\\n            return (_currentBorrow, true);\\n        }\\n\\n        uint256 _supply = _totalSupply - _currentBorrow;\\n\\n        // In case of withdraw, _amount can be greater than _supply\\n        uint256 _newSupply = _isDeposit ? _supply + _amount : _supply > _amount ? _supply - _amount : 0;\\n\\n        // (supply * borrowRatio)/(BPS - borrowRatio)\\n        uint256 _borrowUpperBound = (_newSupply * maxBorrowRatio) / (MAX_BPS - maxBorrowRatio);\\n        uint256 _borrowLowerBound = (_newSupply * minBorrowRatio) / (MAX_BPS - minBorrowRatio);\\n\\n        // If our current borrow is greater than max borrow allowed, then we will have to repay\\n        // some to achieve safe position else borrow more.\\n        if (_currentBorrow > _borrowUpperBound) {\\n            _shouldRepay = true;\\n            // If borrow > upperBound then it is greater than lowerBound too.\\n            _position = _currentBorrow - _borrowLowerBound;\\n        } else if (_currentBorrow < _borrowLowerBound) {\\n            _shouldRepay = false;\\n            // We can borrow more.\\n            _position = _borrowLowerBound - _currentBorrow;\\n        }\\n    }\\n\\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual {\\n        address[] memory _markets = new address[](1);\\n        _markets[0] = address(cToken);\\n        comptroller.claimComp(address(this), _markets);\\n        uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n        if (_rewardAmount > 0) {\\n            _safeSwapExactInput(rewardToken, _toToken, _rewardAmount);\\n        }\\n    }\\n\\n    /// @notice Deposit collateral in Compound and adjust borrow position\\n    function _deposit() internal {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        (uint256 _position, bool _shouldRepay) = _calculateDesiredPosition(_collateralBalance, true);\\n        // Supply collateral to compound.\\n        _mint(_collateralBalance);\\n\\n        // During reinvest, _shouldRepay will be false which indicate that we will borrow more.\\n        _position -= _doFlashLoan(_position, _shouldRepay);\\n\\n        uint256 i;\\n        while (_position > 0 && i <= 6) {\\n            unchecked {\\n                _position -= _adjustPosition(_position, _shouldRepay);\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Aave flash is used only for withdrawal due to high fee compare to DyDx\\n     * @param _flashAmount Amount for flash loan\\n     * @param _shouldRepay Flag indicating we want to leverage or deleverage\\n     * @return Total amount we leverage or deleverage using flash loan\\n     */\\n    function _doFlashLoan(uint256 _flashAmount, bool _shouldRepay) internal virtual returns (uint256);\\n\\n    /**\\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\\n     * @dev Claim rewardToken and convert to collateral.\\n     */\\n    function _generateReport()\\n        internal\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        (, , , , uint256 _totalDebt, , , uint256 _debtRatio, ) = IVesperPool(pool).strategy(address(this));\\n\\n        // Claim rewardToken and convert to collateral token\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n        // Invested collateral = supply - borrow\\n        uint256 _investedCollateral =\\n            cToken.balanceOfUnderlying(address(this)) - cToken.borrowBalanceStored(address(this));\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _totalCollateral = _investedCollateral + _collateralHere;\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_collateralHere < _profitAndExcessDebt) {\\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _investedCollateral);\\n            if (_totalAmountToWithdraw > 0) {\\n                _withdrawHere(_totalAmountToWithdraw);\\n                _collateralHere = collateralToken.balanceOf(address(this));\\n            }\\n        }\\n\\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n\\n        // Handle scenario if debtRatio is zero and some supply left.\\n        // Remaining tokens are profit.\\n        if (_debtRatio == 0) {\\n            (uint256 _supply, uint256 _borrow) = getPosition();\\n            if (_supply > 0 && _borrow == 0) {\\n                // This will redeem all cTokens this strategy has\\n                _redeemUnderlying(MAX_UINT_VALUE);\\n                _profit += _supply;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get Collateral Factor\\n     */\\n    function _getCollateralFactor() internal view virtual returns (uint256 _collateralFactor) {\\n        (, _collateralFactor, ) = comptroller.markets(address(cToken));\\n        // Take 95% of collateralFactor to avoid any rounding issue.\\n        _collateralFactor = (_collateralFactor * COLLATERAL_FACTOR_LIMIT) / MAX_BPS;\\n    }\\n\\n    /**\\n     * @dev Compound support ETH as collateral not WETH. So ETH strategy can override\\n     * below functions and handle wrap/unwrap of WETH.\\n     */\\n    function _mint(uint256 _amount) internal virtual {\\n        require(cToken.mint(_amount) == 0, \\\"supply-to-compound-failed\\\");\\n    }\\n\\n    /**\\n     * Deleverage: Reduce borrow to achieve safe position\\n     * @param _maxDeleverage Reduce borrow by this amount\\n     * @return _deleveragedAmount Amount we actually reduced\\n     */\\n    function _normalDeleverage(\\n        uint256 _maxDeleverage,\\n        uint256 _supply,\\n        uint256 _borrow,\\n        uint256 _collateralFactor\\n    ) internal returns (uint256 _deleveragedAmount) {\\n        uint256 _theoreticalSupply;\\n\\n        if (_collateralFactor > 0) {\\n            // Calculate minimum supply required to support _borrow\\n            _theoreticalSupply = (_borrow * 1e18) / _collateralFactor;\\n        }\\n\\n        _deleveragedAmount = _supply - _theoreticalSupply;\\n\\n        if (_deleveragedAmount >= _borrow) {\\n            _deleveragedAmount = _borrow;\\n        }\\n        if (_deleveragedAmount >= _maxDeleverage) {\\n            _deleveragedAmount = _maxDeleverage;\\n        }\\n\\n        _redeemUnderlying(_deleveragedAmount);\\n        _repayBorrow(_deleveragedAmount);\\n    }\\n\\n    /**\\n     * Leverage: Borrow more\\n     * @param _maxLeverage Max amount to borrow\\n     * @return _leveragedAmount Amount we actually borrowed\\n     */\\n    function _normalLeverage(\\n        uint256 _maxLeverage,\\n        uint256 _supply,\\n        uint256 _borrow,\\n        uint256 _collateralFactor\\n    ) internal returns (uint256 _leveragedAmount) {\\n        // Calculate maximum we can borrow at current _supply\\n        uint256 theoreticalBorrow = (_supply * _collateralFactor) / 1e18;\\n\\n        _leveragedAmount = theoreticalBorrow - _borrow;\\n\\n        if (_leveragedAmount >= _maxLeverage) {\\n            _leveragedAmount = _maxLeverage;\\n        }\\n        _borrowCollateral(_leveragedAmount);\\n        _mint(collateralToken.balanceOf(address(this)));\\n    }\\n\\n    function _rebalance()\\n        internal\\n        virtual\\n        override\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _payback\\n        )\\n    {\\n        (_profit, _loss, _payback) = _generateReport();\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _deposit();\\n    }\\n\\n    function _redeemUnderlying(uint256 _amount) internal virtual {\\n        if (_amount == MAX_UINT_VALUE) {\\n            // Withdraw all cTokens\\n            require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \\\"withdraw-from-compound-failed\\\");\\n        } else {\\n            // Withdraw underlying\\n            require(cToken.redeemUnderlying(_amount) == 0, \\\"withdraw-from-compound-failed\\\");\\n        }\\n    }\\n\\n    function _repayBorrow(uint256 _amount) internal virtual {\\n        require(cToken.repayBorrow(_amount) == 0, \\\"repay-to-compound-failed\\\");\\n    }\\n\\n    /// @dev Withdraw collateral here.\\n    function _withdrawHere(uint256 _amount) internal override {\\n        (uint256 _position, bool _shouldRepay) = _calculateDesiredPosition(_amount, false);\\n        if (_shouldRepay) {\\n            // Do deleverage by flash loan\\n            _position -= _doFlashLoan(_position, _shouldRepay);\\n\\n            // If we still have _position to deleverage do it via normal deleverage\\n            uint256 i;\\n            while (_position > 0 && i <= 10) {\\n                unchecked {\\n                    _position -= _adjustPosition(_position, true);\\n                    i++;\\n                }\\n            }\\n\\n            (uint256 _supply, uint256 _borrow) = getPosition();\\n            // If we are not able to deleverage enough\\n            if (_position > 0) {\\n                // Calculate redeemable at current borrow and supply.\\n                uint256 _supplyToSupportBorrow;\\n                if (maxBorrowRatio > 0) {\\n                    _supplyToSupportBorrow = (_borrow * MAX_BPS) / maxBorrowRatio;\\n                }\\n                // Current supply minus supply required to support _borrow at _maxBorrowRatio\\n                uint256 _redeemable = _supply - _supplyToSupportBorrow;\\n                if (_amount > _redeemable) {\\n                    _amount = _redeemable;\\n                }\\n            }\\n            // Position is 0 and amount > supply due to deleverage\\n            else if (_amount > _supply) {\\n                _amount = _supply;\\n            }\\n        }\\n        _redeemUnderlying(_amount);\\n    }\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n\\n    /**\\n     * @notice Update upper and lower borrow ratio\\n     * @dev It is possible to set 0 as _minBorrowRatio to not borrow anything\\n     * @param _minBorrowRatio Minimum % we want to borrow\\n     * @param _maxBorrowRatio Maximum % we want to borrow\\n     */\\n    function updateBorrowRatio(uint256 _minBorrowRatio, uint256 _maxBorrowRatio) external onlyGovernor {\\n        // CollateralFactor is 1e18 based and borrow ratio is 1e4 based. Hence using 1e14 for conversion.\\n        require(_maxBorrowRatio < (_getCollateralFactor() / 1e14), \\\"invalid-max-borrow-limit\\\");\\n        require(_maxBorrowRatio > _minBorrowRatio, \\\"max-should-be-higher-than-min\\\");\\n        emit UpdatedBorrowRatio(minBorrowRatio, _minBorrowRatio, maxBorrowRatio, _maxBorrowRatio);\\n        minBorrowRatio = _minBorrowRatio;\\n        maxBorrowRatio = _maxBorrowRatio;\\n    }\\n}\\n\",\"keccak256\":\"0x2a7b68ede12cfdba123a2a989db8bcc4349f28518f14ec10ef26e5df1b3e97f8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101d15760003560e01c8063a3f4df7e11610105578063e00af4a71161009d578063e00af4a714610437578063e5328e061461044a578063ec78e83214610452578063f23c472214610465578063f7c618c114610477578063f7c99bea1461048a578063fc0c546a14610493578063fef395d3146104a4578063ffa1ad74146104b757600080fd5b8063a3f4df7e1461036d578063b2016bd414610382578063b9098e3c146103a9578063c415b95c146103b2578063ce5494bb146103c5578063d2c35ce8146103d8578063d3033c39146103eb578063d3332539146103fe578063d8dfeb451461041157600080fd5b80635abda028116101785780635abda028146102ae5780635fe3b567146102b65780637398ab18146102dd5780637d7c2a1c146102fa5780638b4187131461031d578063920f5c8414610330578063951dc22c1461034357806399b71d5c146103585780639b7166a91461036057600080fd5b806314ae9f2e146101d657806316f0115b146101eb5780632a049a21146102285780632b3297f91461023f5780632e1a7d4d146102525780634032b72b14610265578063440d724814610278578063599e892a1461029b575b600080fd5b6101e96101e43660046141e2565b6104db565b005b6102127f000000000000000000000000000000000000000000000000000000000000000081565b60405161021f91906141ff565b60405180910390f35b61023160075481565b60405190815260200161021f565b600254610212906001600160a01b031681565b6101e9610260366004614213565b6105f6565b6101e96102733660046141e2565b61084d565b61028b6102863660046141e2565b610959565b604051901515815260200161021f565b6101e96102a936600461423a565b6109af565b610231610a9a565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b6102e5610ad9565b6040805192835260208301919091520161021f565b610302610b93565b6040805193845260208401929092529082015260600161021f565b6101e961032b3660046142ec565b610bd4565b61028b61033e3660046143ff565b610c8f565b61034b610e74565b60405161021f9190614547565b6101e9610e85565b600c5461028b9060ff1681565b610375610ec1565b60405161021f91906145b2565b6102127f000000000000000000000000000000000000000000000000000000000000000081565b61023160065481565b600154610212906001600160a01b031681565b6101e96103d33660046141e2565b610f4f565b6101e96103e63660046141e2565b611219565b6101e96103f93660046141e2565b6113e2565b6101e961040c36600461423a565b61159f565b7f0000000000000000000000000000000000000000000000000000000000000000610212565b6101e96104453660046141e2565b611671565b61023161188c565b600054610212906001600160a01b031681565b600c5461028b90610100900460ff1681565b600954610212906001600160a01b031681565b610231600b5481565b6000546001600160a01b0316610212565b6101e96104b23660046145c5565b61194f565b610375604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561053457600080fd5b505afa158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c91906145e7565b6001600160a01b0316336001600160a01b0316146105a55760405162461bcd60e51b815260040161059c90614604565b60405180910390fd5b6105b0600382611b33565b6105f35760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b604482015260640161059c565b50565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461063e5760405162461bcd60e51b815260040161059c9061463b565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061068d9030906004016141ff565b60206040518083038186803b1580156106a557600080fd5b505afa1580156106b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dd919061466e565b905081811061073e5761073a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611b48565b5050565b61075061074b828461469d565b611bb0565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061079c9030906004016141ff565b60206040518083038186803b1580156107b457600080fd5b505afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec919061466e565b905061073a7f000000000000000000000000000000000000000000000000000000000000000061081c8484611c85565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611b48565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a657600080fd5b505afa1580156108ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de91906145e7565b6001600160a01b0316336001600160a01b03161461090e5760405162461bcd60e51b815260040161059c90614604565b610919600382611b17565b6105f35760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b604482015260640161059c565b6008546000906001600160a01b03838116911614806109a957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0857600080fd5b505afa158015610a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4091906145e7565b6001600160a01b0316336001600160a01b031614610a705760405162461bcd60e51b815260040161059c90614604565b6105f3817f0000000000000000000000000000000000000000000000000000000000000000611c9b565b6000806000610aa7610ad9565b9150915080600014610acf5781610ac0612710836146b4565b610aca91906146d3565b610ad2565b60005b9250505090565b6008546040516361bfb47160e11b815260009182918291829182916001600160a01b03169063c37f68e290610b129030906004016141ff565b60806040518083038186803b158015610b2a57600080fd5b505afa158015610b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6291906146f5565b93509350935050670de0b6b3a76400008184610b7e91906146b4565b610b8891906146d3565b959194509092505050565b60008080610ba4335b600390611cde565b610bc05760405162461bcd60e51b815260040161059c9061472b565b610bc8611d00565b9250925092505b909192565b60008082806020019051810190610beb919061475b565b909250905033731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e14610c3b5760405162461bcd60e51b815260206004820152600560248201526421736f6c6f60d81b604482015260640161059c565b604080518082019091526002815261064760f31b60208201526001600160a01b0386163014610c7d5760405162461bcd60e51b815260040161059c91906145b2565b50610c888282611da5565b5050505050565b600a5460408051630261bf8b60e01b815290516000926001600160a01b031691630261bf8b916004808301926020929190829003018186803b158015610cd457600080fd5b505afa158015610ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c91906145e7565b6001600160a01b0316336001600160a01b031614610d595760405162461bcd60e51b815260206004820152600a6024820152690858585d994b5c1bdbdb60b21b604482015260640161059c565b600c54604080518082019091526002815261323760f01b60208201529062010000900460ff16610d9c5760405162461bcd60e51b815260040161059c91906145b2565b50604080518082019091526002815261064760f31b60208201526001600160a01b0385163014610ddf5760405162461bcd60e51b815260040161059c91906145b2565b50600086866000818110610df557610df56147db565b9050602002013589896000818110610e0f57610e0f6147db565b90506020020135610e2091906147f1565b9050610e6384848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250611da5915050565b5060019a9950505050505050505050565b6060610e806003611ece565b905090565b610e8e33610b9c565b610eaa5760405162461bcd60e51b815260040161059c9061472b565b610eb46000611edb565b610ebf600019611edb565b565b60058054610ece90614809565b80601f0160208091040260200160405190810160405280929190818152602001828054610efa90614809565b8015610f475780601f10610f1c57610100808354040283529160200191610f47565b820191906000526020600020905b815481529060010190602001808311610f2a57829003601f168201915b505050505081565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610f975760405162461bcd60e51b815260040161059c9061463b565b6001600160a01b038116610fed5760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f00000000604482015260640161059c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561105057600080fd5b505afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108891906145e7565b6001600160a01b0316146110d75760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b604482015260640161059c565b6110e081611f0e565b6000546040516370a0823160e01b81526111799183916001600160a01b03909116906370a08231906111169030906004016141ff565b60206040518083038186803b15801561112e57600080fd5b505afa158015611142573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611166919061466e565b6000546001600160a01b03169190611b48565b6105f3817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016111c991906141ff565b60206040518083038186803b1580156111e157600080fd5b505afa1580156111f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c919061466e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561127257600080fd5b505afa158015611286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112aa91906145e7565b6001600160a01b0316336001600160a01b0316146112da5760405162461bcd60e51b815260040161059c90614604565b6001600160a01b0381166113305760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f000000604482015260640161059c565b6001546001600160a01b03828116911614156113865760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b604482015260640161059c565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561143b57600080fd5b505afa15801561144f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147391906145e7565b6001600160a01b0316336001600160a01b0316146114a35760405162461bcd60e51b815260040161059c90614604565b6001600160a01b0381166114f35760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b604482015260640161059c565b6002546001600160a01b03828116911614156115435760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b604482015260640161059c565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156115f857600080fd5b505afa15801561160c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163091906145e7565b6001600160a01b0316336001600160a01b0316146116605760405162461bcd60e51b815260040161059c90614604565b600c805460ff191682151517905550565b61167a33610b9c565b6116965760405162461bcd60e51b815260040161059c9061472b565b6001546001600160a01b03166116e65760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b604482015260640161059c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156117685760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c00604482015260640161059c565b61177181610959565b156117b55760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b604482015260640161059c565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156117f0576001546105f3906001600160a01b031647611fe6565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061181f9030906004016141ff565b60206040518083038186803b15801561183757600080fd5b505afa15801561184b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186f919061466e565b60015490915061073a906001600160a01b03848116911683611b48565b6000806000611899610ad9565b9150915080827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016118eb91906141ff565b60206040518083038186803b15801561190357600080fd5b505afa158015611917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193b919061466e565b61194591906147f1565b610ad2919061469d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156119a857600080fd5b505afa1580156119bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e091906145e7565b6001600160a01b0316336001600160a01b031614611a105760405162461bcd60e51b815260040161059c90614604565b655af3107a4000611a1f6120ff565b611a2991906146d3565b8110611a725760405162461bcd60e51b81526020600482015260186024820152771a5b9d985b1a590b5b585e0b589bdc9c9bddcb5b1a5b5a5d60421b604482015260640161059c565b818111611ac15760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e000000604482015260640161059c565b6006546007546040805192835260208301859052820152606081018290527f0e68fa4c4a80a75427bcce81b711855825bd765ea0e6e15e330653b2437db78e9060800160405180910390a1600691909155600755565b6000611b2c836001600160a01b0384166121c0565b9392505050565b6000611b2c836001600160a01b03841661220f565b6040516001600160a01b038316602482015260448101829052611bab90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612302565b505050565b600080611bbe8360006123d4565b915091508015611c7c57611bd282826125d3565b611bdc908361469d565b915060005b600083118015611bf25750600a8111155b15611c0e57611c028360016126ef565b90920391600101611be1565b600080611c19610ad9565b90925090508415611c6c5760075460009015611c4b57600754611c3e612710846146b4565b611c4891906146d3565b90505b6000611c57828561469d565b905080881115611c65578097505b5050611c78565b81861115611c78578195505b5050505b611bab8361275a565b6000818310611c945781611b2c565b5090919050565b8115611cc357611cbf731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e826128da565b600b555b50600c80549115156101000261ff0019909216919091179055565b6001600160a01b03811660009081526001830160205260408120541515611b2c565b6000806000611d0d612a43565b6040516302df682360e11b815260048101849052602481018390526044810182905292955090935091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906305bed04690606401600060405180830381600087803b158015611d8557600080fd5b505af1158015611d99573d6000803e3d6000fd5b50505050610bcf612ef8565b60008083806020019051810190611dbc9190614844565b9150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611e0e91906141ff565b60206040518083038186803b158015611e2657600080fd5b505afa158015611e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5e919061466e565b905082811015611e9f5760405162461bcd60e51b815260206004820152600c60248201526b11931054d217d1905253115160a21b604482015260640161059c565b8115611ebc57611eae83612fff565b611eb78461275a565b610c88565b611ec5816130c5565b610c888461318c565b60606000611b2c83613257565b611ee4816132b3565b6105f37f000000000000000000000000000000000000000000000000000000000000000082613313565b60085460408051637e062a3560e11b815290516001600160a01b039283169284169163fc0c546a916004808301926020929190829003018186803b158015611f5557600080fd5b505afa158015611f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8d91906145e7565b6001600160a01b031614611fd95760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b604482015260640161059c565b60006006556105f3612ef8565b804710156120365760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161059c565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612083576040519150601f19603f3d011682016040523d82523d6000602084013e612088565b606091505b5050905080611bab5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161059c565b600854604051638e8f294b60e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692638e8f294b926121529216906004016141ff565b60606040518083038186803b15801561216a57600080fd5b505afa15801561217e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a29190614874565b50915061271090506121b661251c836146b4565b610e8091906146d3565b6000818152600183016020526040812054612207575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556109a9565b5060006109a9565b600081815260018301602052604081205480156122f857600061223360018361469d565b85549091506000906122479060019061469d565b90508181146122ac576000866000018281548110612267576122676147db565b906000526020600020015490508087600001848154811061228a5761228a6147db565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806122bd576122bd6148b7565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506109a9565b60009150506109a9565b6000612357826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133ca9092919063ffffffff16565b805190915015611bab578080602001905181019061237591906148cd565b611bab5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161059c565b600854604051633af9e66960e01b8152600091829182916001600160a01b031690633af9e669906124099030906004016141ff565b602060405180830381600087803b15801561242357600080fd5b505af1158015612437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245b919061466e565b6008546040516395dd919360e01b81529192506000916001600160a01b03909116906395dd9193906124919030906004016141ff565b60206040518083038186803b1580156124a957600080fd5b505afa1580156124bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e1919061466e565b9050600654600014156124fb579250600191506125cc9050565b6000612507828461469d565b905060008661252d5787821161251e576000612537565b612528888361469d565b612537565b61253788836147f1565b9050600060075461271061254b919061469d565b60075461255890846146b4565b61256291906146d3565b90506000600654612710612576919061469d565b60065461258390856146b4565b61258d91906146d3565b9050818511156125ac57600196506125a5818661469d565b97506125c5565b808510156125c557600096506125c2858261469d565b97505b5050505050505b9250929050565b600c546000908190610100900460ff1680156125ef5750600084115b1561266057600084846040516020016126149291909182521515602082015260400190565b60405160208183030381529060405290506126507f000000000000000000000000000000000000000000000000000000000000000086836133e1565b915061265c828661469d565b9450505b600c5460ff16801561266f5750825b801561267b5750600084115b15611b2c57600084846040516020016126a09291909182521515602082015260400190565b60405160208183030381529060405290506126dc7f000000000000000000000000000000000000000000000000000000000000000086836136a2565b6126e690836147f1565b95945050505050565b60008060006126fc610ad9565b9150915080600014801561270d5750835b1561271d576000925050506109a9565b60006127276120ff565b905084156127425761273b868484846139f3565b9350612751565b61274e86848484613a59565b93505b50505092915050565b6000198114156128a9576008546040516370a0823160e01b81526001600160a01b039091169063db006a759082906370a082319061279c9030906004016141ff565b60206040518083038186803b1580156127b457600080fd5b505afa1580156127c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ec919061466e565b6040518263ffffffff1660e01b815260040161280a91815260200190565b602060405180830381600087803b15801561282457600080fd5b505af1158015612838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285c919061466e565b156105f35760405162461bcd60e51b815260206004820152601d60248201527f77697468647261772d66726f6d2d636f6d706f756e642d6661696c6564000000604482015260640161059c565b60085460405163852a12e360e01b8152600481018390526001600160a01b039091169063852a12e39060240161280a565b6000808390506000816001600160a01b031663295c39a56040518163ffffffff1660e01b815260040160206040518083038186803b15801561291b57600080fd5b505afa15801561292f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612953919061466e565b90506000805b82811015612a125760405163062bd3e960e01b8152600481018290526001600160a01b0385169063062bd3e99060240160206040518083038186803b1580156129a157600080fd5b505afa1580156129b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d991906145e7565b9150856001600160a01b0316826001600160a01b03161415612a005793506109a992505050565b80612a0a816148ea565b915050612959565b506040805180820182526002815261033360f41b6020820152905162461bcd60e51b815261059c91906004016145b2565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b8152600401612a9591906141ff565b60206040518083038186803b158015612aad57600080fd5b505afa158015612ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae5919061466e565b90506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f306040518263ffffffff1660e01b8152600401612b3691906141ff565b6101206040518083038186803b158015612b4f57600080fd5b505afa158015612b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b879190614905565b5097505050955050505050612bbb7f0000000000000000000000000000000000000000000000000000000000000000613b40565b6008546040516395dd919360e01b81526000916001600160a01b0316906395dd919390612bec9030906004016141ff565b60206040518083038186803b158015612c0457600080fd5b505afa158015612c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3c919061466e565b600854604051633af9e66960e01b81526001600160a01b0390911690633af9e66990612c6c9030906004016141ff565b602060405180830381600087803b158015612c8657600080fd5b505af1158015612c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cbe919061466e565b612cc8919061469d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612d1891906141ff565b60206040518083038186803b158015612d3057600080fd5b505afa158015612d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d68919061466e565b90506000612d7682846147f1565b905084811115612d9157612d8a858261469d565b9850612d9e565b612d9b818661469d565b97505b6000612daa878b6147f1565b905080831015612e7b576000612dc9612dc3858461469d565b86611c85565b90508015612e7957612dda81611bb0565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612e269030906004016141ff565b60206040518083038186803b158015612e3e57600080fd5b505afa158015612e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e76919061466e565b93505b505b612e858388611c85565b9750878311612e95576000612ea8565b612ea8612ea2898561469d565b8b611c85565b995084612eec57600080612eba610ad9565b91509150600082118015612ecc575080155b15612ee957612edc60001961275a565b612ee6828d6147f1565b9b505b50505b50505050505050909192565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612f479030906004016141ff565b60206040518083038186803b158015612f5f57600080fd5b505afa158015612f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f97919061466e565b9050600080612fa78360016123d4565b91509150612fb4836130c5565b612fbe82826125d3565b612fc8908361469d565b915060005b600083118015612fde575060068111155b15612ff957612fed83836126ef565b90920391600101612fcd565b50505050565b60085460405163073a938160e11b8152600481018390526001600160a01b0390911690630e75270290602401602060405180830381600087803b15801561304557600080fd5b505af1158015613059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307d919061466e565b156105f35760405162461bcd60e51b81526020600482015260186024820152771c995c185e4b5d1bcb58dbdb5c1bdd5b990b59985a5b195960421b604482015260640161059c565b60085460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401602060405180830381600087803b15801561310b57600080fd5b505af115801561311f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613143919061466e565b156105f35760405162461bcd60e51b81526020600482015260196024820152781cdd5c1c1b1e4b5d1bcb58dbdb5c1bdd5b990b59985a5b1959603a1b604482015260640161059c565b60085460405163317afabb60e21b8152600481018390526001600160a01b039091169063c5ebeaec90602401602060405180830381600087803b1580156131d257600080fd5b505af11580156131e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061320a919061466e565b156105f35760405162461bcd60e51b815260206004820152601b60248201527f626f72726f772d66726f6d2d636f6d706f756e642d6661696c65640000000000604482015260640161059c565b6060816000018054806020026020016040519081016040528092919081815260200182805480156132a757602002820191906000526020600020905b815481526020019060010190808311613293575b50505050509050919050565b6132bc81613cb3565b6008546132f6906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613d03565b6002546009546105f3916001600160a01b03918216911683613d03565b61333b6001600160a01b038316731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e83613d03565b600a5460408051630261bf8b60e01b8152905161073a926001600160a01b031691630261bf8b916004808301926020929190829003018186803b15801561338157600080fd5b505afa158015613395573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133b991906145e7565b6001600160a01b0384169083613d03565b60606133d98484600085613e27565b949350505050565b600c54604080518082019091526002815261191b60f11b6020820152600091610100900460ff166134255760405162461bcd60e51b815260040161059c91906145b2565b506040516370a0823160e01b81526000906001600160a01b038616906370a082319061346990731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e906004016141ff565b60206040518083038186803b15801561348157600080fd5b505afa158015613495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b9919061466e565b9050808411156134c7578093505b60006134d48560026147f1565b9050600084826040516020016134eb929190614979565b60408051808303601f19018152600380845260808401909252925060009190816020015b613517614157565b81526020019060019003908161350f579050509050613538600b5488613f4f565b8160008151811061354b5761354b6147db565b602002602001018190525061355f82613fd9565b81600181518110613572576135726147db565b6020026020010181905250613589600b5484614047565b8160028151811061359c5761359c6147db565b6020908102919091010152604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816135be575050604080518082018252600080825260209182015281518083019092523082526001908201529091508160008151811061361f5761361f6147db565b602090810291909101015260405163a67a6a4560e01b8152731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e9063a67a6a459061366390849086906004016149f8565b600060405180830381600087803b15801561367d57600080fd5b505af1158015613691573d6000803e3d6000fd5b50999b9a5050505050505050505050565b600c54604080518082019091526002815261323560f01b602082015260009160ff166136e15760405162461bcd60e51b815260040161059c91906145b2565b50600a5460408051630261bf8b60e01b815290516000926001600160a01b031691630261bf8b916004808301926020929190829003018186803b15801561372757600080fd5b505afa15801561373b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061375f91906145e7565b600a546040516321f8a72160e01b8152600160f81b60048201529192506000916001600160a01b03909116906321f8a7219060240160206040518083038186803b1580156137ac57600080fd5b505afa1580156137c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137e491906145e7565b90506000816001600160a01b03166335ea6a75886040518263ffffffff1660e01b815260040161381491906141ff565b6101406040518083038186803b15801561382d57600080fd5b505afa158015613841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138659190614b29565b50505050505050505090508086111561387c578095505b6040805160018082528183019092526000916020808301908036833701905050905087816000815181106138b2576138b26147db565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508781600081518110613903576139036147db565b6020908102919091010152604080516001808252818301909252600091816020016020820280368337019050509050600081600081518110613947576139476147db565b6020026020010181815250506001600c60026101000a81548160ff021916908315150217905550856001600160a01b031663ab9c4b5d30858585308e60006040518863ffffffff1660e01b81526004016139a79796959493929190614be2565b600060405180830381600087803b1580156139c157600080fd5b505af11580156139d5573d6000803e3d6000fd5b5050600c805462ff00001916905550989a9950505050505050505050565b6000808215613a1c5782613a0f85670de0b6b3a76400006146b4565b613a1991906146d3565b90505b613a26818661469d565b9150838210613a33578391505b858210613a3e578591505b613a478261275a565b613a5082612fff565b50949350505050565b600080670de0b6b3a7640000613a6f84876146b4565b613a7991906146d3565b9050613a85848261469d565b9150858210613a92578591505b613a9b8261318c565b6040516370a0823160e01b8152613a50906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613aeb9030906004016141ff565b60206040518083038186803b158015613b0357600080fd5b505afa158015613b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3b919061466e565b6130c5565b60408051600180825281830190925260009160208083019080368337505060085482519293506001600160a01b031691839150600090613b8257613b826147db565b6001600160a01b03928316602091820292909201015260405162e1ed9760e51b81527f000000000000000000000000000000000000000000000000000000000000000090911690631c3db2e090613bdf9030908590600401614c60565b600060405180830381600087803b158015613bf957600080fd5b505af1158015613c0d573d6000803e3d6000fd5b50506009546040516370a0823160e01b8152600093506001600160a01b0390911691506370a0823190613c449030906004016141ff565b60206040518083038186803b158015613c5c57600080fd5b505afa158015613c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c94919061466e565b90508015611bab57600954611bab906001600160a01b03168483614082565b6105f36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000835b801580613d8c5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015613d5257600080fd5b505afa158015613d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d8a919061466e565b155b613df75760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161059c565b6040516001600160a01b038316602482015260448101829052611bab90849063095ea7b360e01b90606401611b74565b606082471015613e885760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161059c565b843b613ed65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161059c565b600080866001600160a01b03168587604051613ef29190614c84565b60006040518083038185875af1925050503d8060008114613f2f576040519150601f19603f3d011682016040523d82523d6000602084013e613f34565b606091505b5091509150613f4482828661411e565b979650505050505050565b613f57614157565b604080516101008101825260018152600060208083018290528351608081018552828152929384019291908201905b81526020016000815260200185815250815260200184815260200160008152602001306001600160a01b031681526020016000815260200160405180602001604052806000815250815250905092915050565b613fe1614157565b6040805161010081018252600881526000602080830182905283516080810185528281529293840192919082019081526020016000815260006020918201819052918352820181905260408201819052306060830152608082015260a001929092525090565b61404f614157565b60408051610100810182526000808252602080830182905283516080810185526001815292938401929190820190613f86565b600254604051636ccb2b0160e01b81526001600160a01b0385811660048301528481166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b1580156140e557600080fd5b505af1925050508015614115575060408051601f3d908101601f191682019092526141129181019061466e565b60015b612ff957505050565b6060831561412d575081611b2c565b82511561413d5782518084602001fd5b8160405162461bcd60e51b815260040161059c91906145b2565b60408051610100810182526000808252602082015290810161419b604080516080810190915260008082526020820190815260200160008152602001600081525090565b8152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001606081525090565b6001600160a01b03811681146105f357600080fd5b6000602082840312156141f457600080fd5b8135611b2c816141cd565b6001600160a01b0391909116815260200190565b60006020828403121561422557600080fd5b5035919050565b80151581146105f357600080fd5b60006020828403121561424c57600080fd5b8135611b2c8161422c565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561428f5761428f614257565b60405290565b604051601f8201601f191681016001600160401b03811182821017156142bd576142bd614257565b604052919050565b60006001600160401b038211156142de576142de614257565b50601f01601f191660200190565b6000806000838503608081121561430257600080fd5b843561430d816141cd565b935060206040601f198301121561432357600080fd5b61432b61426d565b91508086013561433a816141cd565b82526040860135818301529092506060850135906001600160401b0382111561436257600080fd5b818601915086601f83011261437657600080fd5b8135614389614384826142c5565b614295565b818152888383860101111561439d57600080fd5b81838501848301376000838383010152809450505050509250925092565b60008083601f8401126143cd57600080fd5b5081356001600160401b038111156143e457600080fd5b6020830191508360208260051b85010111156125cc57600080fd5b600080600080600080600080600060a08a8c03121561441d57600080fd5b89356001600160401b038082111561443457600080fd5b6144408d838e016143bb565b909b50995060208c013591508082111561445957600080fd5b6144658d838e016143bb565b909950975060408c013591508082111561447e57600080fd5b61448a8d838e016143bb565b909750955060608c0135915061449f826141cd565b90935060808b013590808211156144b557600080fd5b818c0191508c601f8301126144c957600080fd5b8135818111156144d857600080fd5b8d60208285010111156144ea57600080fd5b6020830194508093505050509295985092959850929598565b600081518084526020808501945080840160005b8381101561453c5781516001600160a01b031687529582019590820190600101614517565b509495945050505050565b602081526000611b2c6020830184614503565b60005b8381101561457557818101518382015260200161455d565b83811115612ff95750506000910152565b6000815180845261459e81602086016020860161455a565b601f01601f19169290920160200192915050565b602081526000611b2c6020830184614586565b600080604083850312156145d857600080fd5b50508035926020909101359150565b6000602082840312156145f957600080fd5b8151611b2c816141cd565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b60006020828403121561468057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156146af576146af614687565b500390565b60008160001904831182151516156146ce576146ce614687565b500290565b6000826146f057634e487b7160e01b600052601260045260246000fd5b500490565b6000806000806080858703121561470b57600080fd5b505082516020840151604085015160609095015191969095509092509050565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b6000806040838503121561476e57600080fd5b82516001600160401b0381111561478457600080fd5b8301601f8101851361479557600080fd5b80516147a3614384826142c5565b8181528660208385010111156147b857600080fd5b6147c982602083016020860161455a565b60209590950151949694955050505050565b634e487b7160e01b600052603260045260246000fd5b6000821982111561480457614804614687565b500190565b600181811c9082168061481d57607f821691505b6020821081141561483e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000806040838503121561485757600080fd5b8251915060208301516148698161422c565b809150509250929050565b60008060006060848603121561488957600080fd5b83516148948161422c565b6020850151604086015191945092506148ac8161422c565b809150509250925092565b634e487b7160e01b600052603160045260246000fd5b6000602082840312156148df57600080fd5b8151611b2c8161422c565b60006000198214156148fe576148fe614687565b5060010190565b60008060008060008060008060006101208a8c03121561492457600080fd5b895161492f8161422c565b8099505060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b60408152600061498c6040830185614586565b90508260208301529392505050565b634e487b7160e01b600052602160045260246000fd5b600281106105f3576105f361499b565b80511515825260208101516149d5816149b1565b602083015260408101516149e8816149b1565b6040830152606090810151910152565b6040808252835182820181905260009190606090818501906020808901865b83811015614a4557815180516001600160a01b03168652830151838601529386019390820190600101614a17565b50508683038188015287518084528184019250600581901b8401820189830160005b83811015614b1857601f198784030186528151610160815160098110614a8f57614a8f61499b565b855281870151878601528a820151614aa98c8701826149c1565b508982015160c081818801526080840151915060e0828189015260a08501519250614ae06101008901846001600160a01b03169052565b908401516101208801529092015161014086018290529150614b0481860183614586565b978701979450505090840190600101614a67565b50909b9a5050505050505050505050565b6000806000806000806000806000806101408b8d031215614b4957600080fd5b8a51995060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015164ffffffffff81168114614b9f57600080fd5b809150509295989b9194979a5092959850565b600081518084526020808501945080840160005b8381101561453c57815187529582019590820190600101614bc6565b600060018060a01b03808a16835260e06020840152614c0460e084018a614503565b8381036040850152614c16818a614bb2565b90508381036060850152614c2a8189614bb2565b9050818716608085015283810360a0850152614c468187614586565b9250505061ffff831660c083015298975050505050505050565b6001600160a01b03831681526040602082018190526000906133d990830184614503565b60008251614c9681846020870161455a565b919091019291505056fea2646970667358221220b35998860eda4b7e412b761f4e9993772d93988be237c4c0ea56b196669fce8c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "callFunction(address,(address,uint256),bytes)": {
        "details": "DyDx calls this function after doing flash loan"
      },
      "executeOperation(address[],uint256[],uint256[],address,bytes)": {
        "details": "Aave will call this function after doing flash loan"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "sweepERC20(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateBorrowRatio(uint256,uint256)": {
        "details": "It is possible to set 0 as _minBorrowRatio to not borrow anything",
        "params": {
          "_maxBorrowRatio": "Maximum % we want to borrow",
          "_minBorrowRatio": "Minimum % we want to borrow"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "This strategy will deposit collateral token in Compound and based on position it will borrow same collateral token. It will use borrowed asset as supply and borrow again.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "currentBorrowRatio()": {
        "notice": "Current borrow ratio, calculated as current borrow divide by max allowed borrow Return value is based on basis points, i.e. 7500 = 75% ratio"
      },
      "getPosition()": {
        "notice": "Return supply and borrow position. Position may return few block old value"
      },
      "isReservedToken(address)": {
        "notice": "Check whether given token is reserved or not. Reserved tokens are not allowed to sweep."
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "sweepERC20(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns total collateral locked in the strategy"
      },
      "updateBorrowRatio(uint256,uint256)": {
        "notice": "Update upper and lower borrow ratio"
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12743,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12749,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12752,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)11715"
      },
      {
        "astId": 12765,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3008_storage"
      },
      {
        "astId": 15940,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 15949,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "minBorrowRatio",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15952,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "maxBorrowRatio",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 15958,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "cToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(CToken)10508"
      },
      {
        "astId": 15963,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "rewardToken",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 12052,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "poolAddressesProvider",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(PoolAddressesProvider)10078"
      },
      {
        "astId": 12057,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "dyDxMarketId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 12063,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "isAaveActive",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 12066,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "isDyDxActive",
        "offset": 1,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 12159,
        "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
        "label": "awaitingFlash",
        "offset": 2,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CToken)10508": {
        "encoding": "inplace",
        "label": "contract CToken",
        "numberOfBytes": "20"
      },
      "t_contract(IRoutedSwapper)11715": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_contract(PoolAddressesProvider)10078": {
        "encoding": "inplace",
        "label": "contract PoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3008_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3007,
            "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2707_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2707_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2702,
            "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2706,
            "contract": "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol:CompoundLeverage",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}