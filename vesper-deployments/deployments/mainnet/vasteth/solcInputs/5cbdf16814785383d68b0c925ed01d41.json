{
  "language": "Solidity",
  "sources": {
    "contracts/test/Imports.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n// Import all contracts which are being used in any deployment script from `vesper-pools` and `vesper-strategies` modules.\n// This will ensure contracts are compiled and copied in artifacts folder.\nimport \"vesper-pools/contracts/pool/PoolRewards.sol\";\nimport \"vesper-pools/contracts/pool/PoolAccountant.sol\";\nimport \"vesper-pools/contracts/pool/VPool.sol\";\nimport \"vesper-pools/contracts/pool/VETH.sol\";\nimport \"vesper-pools/contracts/pool/earn/VesperEarnDrip.sol\";\nimport \"vesper-pools/contracts/upgraders/PoolAccountantUpgrader.sol\";\nimport \"vesper-pools/contracts/upgraders/PoolRewardsUpgrader.sol\";\nimport \"vesper-pools/contracts/upgraders/VPoolUpgrader.sol\";\nimport \"vesper-strategies/contracts/strategies/compound/CompoundXYStrategy.sol\";\nimport \"vesper-strategies/contracts/strategies/aave/v2/AaveV2VesperXy.sol\";\n\n// Importer contract to compile the solidity files from dependent `vesper-pools` and `vesper-strategies` modules.\n// solhint-disable-next-line no-empty-blocks\ncontract Imports {\n\n}\n"
    },
    "vesper-pools/contracts/pool/PoolRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/vesper/IPoolRewards.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\n\ncontract PoolRewardsStorage {\n    /// Vesper pool address\n    address public pool;\n\n    /// Array of reward token addresses\n    address[] public rewardTokens;\n\n    /// Reward token to valid/invalid flag mapping\n    mapping(address => bool) public isRewardToken;\n\n    /// Reward token to period ending of current reward\n    mapping(address => uint256) public periodFinish;\n\n    /// Reward token to current reward rate mapping\n    mapping(address => uint256) public rewardRates;\n\n    /// Reward token to Duration of current reward distribution\n    mapping(address => uint256) public rewardDuration;\n\n    /// Reward token to Last reward drip update time stamp mapping\n    mapping(address => uint256) public lastUpdateTime;\n\n    /// Reward token to Reward per token mapping. Calculated and stored at last drip update\n    mapping(address => uint256) public rewardPerTokenStored;\n\n    /// Reward token => User => Reward per token stored at last reward update\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\n\n    /// RewardToken => User => Rewards earned till last reward update\n    mapping(address => mapping(address => uint256)) public rewards;\n}\n\n/// @title Distribute rewards based on vesper pool balance and supply\ncontract PoolRewards is Initializable, IPoolRewards, ReentrancyGuard, PoolRewardsStorage {\n    string public constant VERSION = \"4.0.0\";\n    using SafeERC20 for IERC20;\n\n    /**\n     * @dev Called by proxy to initialize this contract\n     * @param _pool Vesper pool address\n     * @param _rewardTokens Array of reward token addresses\n     */\n    function initialize(address _pool, address[] memory _rewardTokens) public initializer {\n        require(_pool != address(0), \"pool-address-is-zero\");\n        require(_rewardTokens.length != 0, \"invalid-reward-tokens\");\n        pool = _pool;\n        rewardTokens = _rewardTokens;\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\n            isRewardToken[_rewardTokens[i]] = true;\n        }\n    }\n\n    modifier onlyAuthorized() {\n        require(msg.sender == IVesperPool(pool).governor(), \"not-authorized\");\n        _;\n    }\n\n    /**\n     * @notice Notify that reward is added. Only authorized caller can call\n     * @dev Also updates reward rate and reward earning period.\n     * @param _rewardTokens Tokens being rewarded\n     * @param _rewardAmounts Rewards amount for token on same index in rewardTokens array\n     * @param _rewardDurations Duration for which reward will be distributed\n     */\n    function notifyRewardAmount(\n        address[] memory _rewardTokens,\n        uint256[] memory _rewardAmounts,\n        uint256[] memory _rewardDurations\n    ) external virtual override onlyAuthorized {\n        _notifyRewardAmount(_rewardTokens, _rewardAmounts, _rewardDurations, IERC20(pool).totalSupply());\n    }\n\n    function notifyRewardAmount(\n        address _rewardToken,\n        uint256 _rewardAmount,\n        uint256 _rewardDuration\n    ) external virtual override onlyAuthorized {\n        _notifyRewardAmount(_rewardToken, _rewardAmount, _rewardDuration, IERC20(pool).totalSupply());\n    }\n\n    /// @notice Add new reward token in existing rewardsToken array\n    function addRewardToken(address _newRewardToken) external onlyAuthorized {\n        require(_newRewardToken != address(0), \"reward-token-address-zero\");\n        require(!isRewardToken[_newRewardToken], \"reward-token-already-exist\");\n        emit RewardTokenAdded(_newRewardToken, rewardTokens);\n        rewardTokens.push(_newRewardToken);\n        isRewardToken[_newRewardToken] = true;\n    }\n\n    /**\n     * @notice Claim earned rewards.\n     * @dev This function will claim rewards for all tokens being rewarded\n     */\n    function claimReward(address _account) external virtual override nonReentrant {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _balance = IERC20(pool).balanceOf(_account);\n        uint256 _len = rewardTokens.length;\n        for (uint256 i = 0; i < _len; i++) {\n            address _rewardToken = rewardTokens[i];\n            _updateReward(_rewardToken, _account, _totalSupply, _balance);\n\n            // Claim rewards\n            uint256 _reward = rewards[_rewardToken][_account];\n            if (_reward != 0 && _reward <= IERC20(_rewardToken).balanceOf(address(this))) {\n                _claimReward(_rewardToken, _account, _reward);\n                emit RewardPaid(_account, _rewardToken, _reward);\n            }\n        }\n    }\n\n    /**\n     * @notice Updated reward for given account.\n     */\n    function updateReward(address _account) external override {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _balance = IERC20(pool).balanceOf(_account);\n        uint256 _len = rewardTokens.length;\n        for (uint256 i = 0; i < _len; i++) {\n            _updateReward(rewardTokens[i], _account, _totalSupply, _balance);\n        }\n    }\n\n    /**\n     * @notice Returns claimable reward amount.\n     * @return _rewardTokens Array of tokens being rewarded\n     * @return _claimableAmounts Array of claimable for token on same index in rewardTokens\n     */\n    function claimable(address _account)\n        external\n        view\n        virtual\n        override\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts)\n    {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _balance = IERC20(pool).balanceOf(_account);\n        uint256 _len = rewardTokens.length;\n        _claimableAmounts = new uint256[](_len);\n        for (uint256 i = 0; i < _len; i++) {\n            _claimableAmounts[i] = _claimable(rewardTokens[i], _account, _totalSupply, _balance);\n        }\n        _rewardTokens = rewardTokens;\n    }\n\n    /// @notice Provides easy access to all rewardTokens\n    function getRewardTokens() external view returns (address[] memory) {\n        return rewardTokens;\n    }\n\n    /// @notice Returns timestamp of last reward update\n    function lastTimeRewardApplicable(address _rewardToken) public view override returns (uint256) {\n        return block.timestamp < periodFinish[_rewardToken] ? block.timestamp : periodFinish[_rewardToken];\n    }\n\n    function rewardForDuration()\n        external\n        view\n        override\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration)\n    {\n        uint256 _len = rewardTokens.length;\n        _rewardForDuration = new uint256[](_len);\n        for (uint256 i = 0; i < _len; i++) {\n            _rewardForDuration[i] = rewardRates[rewardTokens[i]] * rewardDuration[rewardTokens[i]];\n        }\n        _rewardTokens = rewardTokens;\n    }\n\n    /**\n     * @notice Rewards rate per pool token\n     * @return _rewardTokens Array of tokens being rewarded\n     * @return _rewardPerTokenRate Array of Rewards rate for token on same index in rewardTokens\n     */\n    function rewardPerToken()\n        external\n        view\n        override\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate)\n    {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _len = rewardTokens.length;\n        _rewardPerTokenRate = new uint256[](_len);\n        for (uint256 i = 0; i < _len; i++) {\n            _rewardPerTokenRate[i] = _rewardPerToken(rewardTokens[i], _totalSupply);\n        }\n        _rewardTokens = rewardTokens;\n    }\n\n    function _claimable(\n        address _rewardToken,\n        address _account,\n        uint256 _totalSupply,\n        uint256 _balance\n    ) internal view returns (uint256) {\n        uint256 _rewardPerTokenAvailable =\n            _rewardPerToken(_rewardToken, _totalSupply) - userRewardPerTokenPaid[_rewardToken][_account];\n        uint256 _rewardsEarnedSinceLastUpdate = (_balance * _rewardPerTokenAvailable) / 1e18;\n        return rewards[_rewardToken][_account] + _rewardsEarnedSinceLastUpdate;\n    }\n\n    function _claimReward(\n        address _rewardToken,\n        address _account,\n        uint256 _reward\n    ) internal virtual {\n        // Mark reward as claimed\n        rewards[_rewardToken][_account] = 0;\n        // Transfer reward\n        IERC20(_rewardToken).safeTransfer(_account, _reward);\n    }\n\n    // There are scenarios when extending contract will override external methods and\n    // end up calling internal function. Hence providing internal functions\n    function _notifyRewardAmount(\n        address[] memory _rewardTokens,\n        uint256[] memory _rewardAmounts,\n        uint256[] memory _rewardDurations,\n        uint256 _totalSupply\n    ) internal {\n        uint256 _len = _rewardTokens.length;\n        uint256 _amountsLen = _rewardAmounts.length;\n        uint256 _durationsLen = _rewardDurations.length;\n        require(_len != 0, \"invalid-reward-tokens\");\n        require(_amountsLen != 0, \"invalid-reward-amounts\");\n        require(_durationsLen != 0, \"invalid-reward-durations\");\n        require(_len == _amountsLen && _len == _durationsLen, \"array-length-mismatch\");\n        for (uint256 i = 0; i < _len; i++) {\n            _notifyRewardAmount(_rewardTokens[i], _rewardAmounts[i], _rewardDurations[i], _totalSupply);\n        }\n    }\n\n    function _notifyRewardAmount(\n        address _rewardToken,\n        uint256 _rewardAmount,\n        uint256 _rewardDuration,\n        uint256 _totalSupply\n    ) internal {\n        require(_rewardToken != address(0), \"incorrect-reward-token\");\n        require(_rewardAmount != 0, \"incorrect-reward-amount\");\n        require(_rewardDuration != 0, \"incorrect-reward-duration\");\n        require(isRewardToken[_rewardToken], \"invalid-reward-token\");\n\n        // Update rewards earned so far\n        rewardPerTokenStored[_rewardToken] = _rewardPerToken(_rewardToken, _totalSupply);\n        if (block.timestamp >= periodFinish[_rewardToken]) {\n            rewardRates[_rewardToken] = _rewardAmount / _rewardDuration;\n        } else {\n            uint256 remainingPeriod = periodFinish[_rewardToken] - block.timestamp;\n\n            uint256 leftover = remainingPeriod * rewardRates[_rewardToken];\n            rewardRates[_rewardToken] = (_rewardAmount + leftover) / _rewardDuration;\n        }\n        // Safety check\n        uint256 balance = IERC20(_rewardToken).balanceOf(address(this));\n        require(rewardRates[_rewardToken] <= (balance / _rewardDuration), \"rewards-too-high\");\n        // Start new drip time\n        rewardDuration[_rewardToken] = _rewardDuration;\n        lastUpdateTime[_rewardToken] = block.timestamp;\n        periodFinish[_rewardToken] = block.timestamp + _rewardDuration;\n        emit RewardAdded(_rewardToken, _rewardAmount, _rewardDuration);\n    }\n\n    function _rewardPerToken(address _rewardToken, uint256 _totalSupply) internal view returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored[_rewardToken];\n        }\n\n        uint256 _timeSinceLastUpdate = lastTimeRewardApplicable(_rewardToken) - lastUpdateTime[_rewardToken];\n        uint256 _rewardsSinceLastUpdate = _timeSinceLastUpdate * rewardRates[_rewardToken];\n        uint256 _rewardsPerTokenSinceLastUpdate = (_rewardsSinceLastUpdate * 1e18) / _totalSupply;\n        return rewardPerTokenStored[_rewardToken] + _rewardsPerTokenSinceLastUpdate;\n    }\n\n    function _updateReward(\n        address _rewardToken,\n        address _account,\n        uint256 _totalSupply,\n        uint256 _balance\n    ) internal {\n        uint256 _rewardPerTokenStored = _rewardPerToken(_rewardToken, _totalSupply);\n        rewardPerTokenStored[_rewardToken] = _rewardPerTokenStored;\n        lastUpdateTime[_rewardToken] = lastTimeRewardApplicable(_rewardToken);\n        if (_account != address(0)) {\n            rewards[_rewardToken][_account] = _claimable(_rewardToken, _account, _totalSupply, _balance);\n            userRewardPerTokenPaid[_rewardToken][_account] = _rewardPerTokenStored;\n        }\n    }\n}\n"
    },
    "vesper-pools/contracts/pool/PoolAccountant.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/Context.sol\";\nimport \"../Errors.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\nimport \"./PoolAccountantStorage.sol\";\n\n/// @title Accountant for Vesper pools which keep records of strategies.\ncontract PoolAccountant is Initializable, Context, PoolAccountantStorageV2 {\n    using SafeERC20 for IERC20;\n\n    string public constant VERSION = \"5.0.2\";\n    uint256 public constant MAX_BPS = 10_000;\n\n    event EarningReported(\n        address indexed strategy,\n        uint256 profit,\n        uint256 loss,\n        uint256 payback,\n        uint256 strategyDebt,\n        uint256 poolDebt,\n        uint256 creditLine\n    );\n    event LossReported(address indexed strategy, uint256 loss);\n    event StrategyAdded(address indexed strategy, uint256 debtRatio, uint256 externalDepositFee);\n    event StrategyRemoved(address indexed strategy);\n    event StrategyMigrated(address indexed oldStrategy, address indexed newStrategy);\n    event UpdatedExternalDepositFee(address indexed strategy, uint256 oldFee, uint256 newFee);\n    event UpdatedPoolExternalDepositFee(uint256 oldFee, uint256 newFee);\n    event UpdatedStrategyDebtRatio(address indexed strategy, uint256 oldDebtRatio, uint256 newDebtRatio);\n\n    /**\n     * @dev This init function meant to be called after proxy deployment.\n     * @dev DO NOT CALL it with proxy deploy\n     * @param _pool Address of Vesper pool proxy\n     */\n    function init(address _pool) public initializer {\n        require(_pool != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        pool = _pool;\n    }\n\n    modifier onlyGovernor() {\n        require(IVesperPool(pool).governor() == _msgSender(), \"not-the-governor\");\n        _;\n    }\n\n    modifier onlyKeeper() {\n        require(\n            IVesperPool(pool).governor() == _msgSender() || IVesperPool(pool).isKeeper(_msgSender()),\n            \"not-a-keeper\"\n        );\n        _;\n    }\n\n    modifier onlyMaintainer() {\n        require(\n            IVesperPool(pool).governor() == _msgSender() || IVesperPool(pool).isMaintainer(_msgSender()),\n            \"not-a-maintainer\"\n        );\n        _;\n    }\n\n    modifier onlyPool() {\n        require(pool == _msgSender(), \"not-a-pool\");\n        _;\n    }\n\n    ////////////////////////////// Only Governor //////////////////////////////\n\n    /**\n     * @notice Add strategy. Once strategy is added it can call rebalance and\n     * borrow fund from pool and invest that fund in provider/lender.\n     * @dev Recalculate pool level external deposit fee after all state variables are updated.\n     * @param _strategy Strategy address\n     * @param _debtRatio Pool fund allocation to this strategy\n     * @param _externalDepositFee External deposit fee of strategy\n     */\n    function addStrategy(\n        address _strategy,\n        uint256 _debtRatio,\n        uint256 _externalDepositFee\n    ) public onlyGovernor {\n        require(_strategy != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        require(!strategy[_strategy].active, Errors.STRATEGY_IS_ACTIVE);\n        totalDebtRatio = totalDebtRatio + _debtRatio;\n        require(totalDebtRatio <= MAX_BPS, Errors.DEBT_RATIO_LIMIT_REACHED);\n        require(_externalDepositFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\n        StrategyConfig memory newStrategy =\n            StrategyConfig({\n                active: true,\n                interestFee: 0, // Obsolete\n                debtRate: 0, // Obsolete\n                lastRebalance: block.timestamp,\n                totalDebt: 0,\n                totalLoss: 0,\n                totalProfit: 0,\n                debtRatio: _debtRatio,\n                externalDepositFee: _externalDepositFee\n            });\n        strategy[_strategy] = newStrategy;\n        strategies.push(_strategy);\n        withdrawQueue.push(_strategy);\n        emit StrategyAdded(_strategy, _debtRatio, _externalDepositFee);\n\n        // Recalculate pool level externalDepositFee. This should be called at the end of function\n        _recalculatePoolExternalDepositFee();\n    }\n\n    /**\n     * @notice Remove strategy and recalculate pool level external deposit fee.\n     * @dev Revoke and remove strategy from array. Update withdraw queue.\n     * Withdraw queue order should not change after remove.\n     * Strategy can be removed only after it has paid all debt.\n     * Use migrate strategy if debt is not paid and want to upgrade strategy.\n     */\n    function removeStrategy(uint256 _index) external onlyGovernor {\n        address _strategy = strategies[_index];\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(strategy[_strategy].totalDebt == 0, Errors.TOTAL_DEBT_IS_NOT_ZERO);\n        // Adjust totalDebtRatio\n        totalDebtRatio -= strategy[_strategy].debtRatio;\n        // Remove strategy\n        delete strategy[_strategy];\n        strategies[_index] = strategies[strategies.length - 1];\n        strategies.pop();\n        address[] memory _withdrawQueue = new address[](strategies.length);\n        uint256 j;\n        // After above update, withdrawQueue.length > strategies.length\n        for (uint256 i = 0; i < withdrawQueue.length; i++) {\n            if (withdrawQueue[i] != _strategy) {\n                _withdrawQueue[j] = withdrawQueue[i];\n                j++;\n            }\n        }\n        withdrawQueue = _withdrawQueue;\n        emit StrategyRemoved(_strategy);\n\n        // Recalculate pool level externalDepositFee.\n        _recalculatePoolExternalDepositFee();\n    }\n\n    /**\n     * @notice Update external deposit fee of strategy and recalculate pool level external deposit fee.\n     * @param _strategy Strategy address for which external deposit fee is being updated\n     * @param _externalDepositFee New external deposit fee\n     */\n    function updateExternalDepositFee(address _strategy, uint256 _externalDepositFee) external onlyGovernor {\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(_externalDepositFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\n        uint256 _oldExternalDepositFee = strategy[_strategy].externalDepositFee;\n        // Write to storage\n        strategy[_strategy].externalDepositFee = _externalDepositFee;\n        emit UpdatedExternalDepositFee(_strategy, _oldExternalDepositFee, _externalDepositFee);\n\n        // Recalculate pool level externalDepositFee.\n        _recalculatePoolExternalDepositFee();\n    }\n\n    ///////////////////////////// Only Keeper /////////////////////////////\n\n    /**\n     * @notice Recalculate pool external deposit fee. It is calculated using debtRatio and external deposit fee of each strategy.\n     * @dev Whenever debtRatio changes recalculation is required. DebtRatio changes if strategy reports loss and in that case an\n     * off chain application can watch for it and take action accordingly.\n     * @dev This function is gas heavy hence we do not want to call during reportLoss.\n     */\n    function recalculatePoolExternalDepositFee() external onlyKeeper {\n        _recalculatePoolExternalDepositFee();\n    }\n\n    /**\n     * @dev Transfer given ERC20 token to pool\n     * @param _fromToken Token address to sweep\n     */\n    function sweepERC20(address _fromToken) external virtual onlyKeeper {\n        IERC20(_fromToken).safeTransfer(pool, IERC20(_fromToken).balanceOf(address(this)));\n    }\n\n    ///////////////////////////// Only Maintainer /////////////////////////////\n    /**\n     * @notice Update debt ratio.\n     * @dev A strategy is retired when debtRatio is 0\n     * @dev As debtRatio impacts pool level external deposit fee hence recalculate it after updating debtRatio.\n     * @param _strategy Strategy address for which debt ratio is being updated\n     * @param _debtRatio New debt ratio\n     */\n    function updateDebtRatio(address _strategy, uint256 _debtRatio) external onlyMaintainer {\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        // Update totalDebtRatio\n        totalDebtRatio = (totalDebtRatio - strategy[_strategy].debtRatio) + _debtRatio;\n        require(totalDebtRatio <= MAX_BPS, Errors.DEBT_RATIO_LIMIT_REACHED);\n        emit UpdatedStrategyDebtRatio(_strategy, strategy[_strategy].debtRatio, _debtRatio);\n        // Write to storage\n        strategy[_strategy].debtRatio = _debtRatio;\n        // Recalculate pool level externalDepositFee.\n        _recalculatePoolExternalDepositFee();\n    }\n\n    /**\n     * @notice Update withdraw queue. Withdraw queue is list of strategy in the order in which\n     * funds should be withdrawn.\n     * @dev Pool always keep some buffer amount to satisfy withdrawal request, any withdrawal\n     * request higher than buffer will withdraw from withdraw queue. So withdrawQueue[0] will\n     * be the first strategy where withdrawal request will be send.\n     * @param _withdrawQueue Ordered list of strategy.\n     */\n    function updateWithdrawQueue(address[] memory _withdrawQueue) external onlyMaintainer {\n        uint256 _length = _withdrawQueue.length;\n        require(_length == withdrawQueue.length && _length == strategies.length, Errors.INPUT_LENGTH_MISMATCH);\n        for (uint256 i = 0; i < _length; i++) {\n            require(strategy[_withdrawQueue[i]].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        }\n        withdrawQueue = _withdrawQueue;\n    }\n\n    //////////////////////////////// Only Pool ////////////////////////////////\n\n    /**\n     * @notice Migrate existing strategy to new strategy.\n     * @dev Migrating strategy aka old and new strategy should be of same type.\n     * @dev New strategy will replace old strategy in strategy mapping,\n     * strategies array, withdraw queue.\n     * @param _old Address of strategy being migrated\n     * @param _new Address of new strategy\n     */\n    function migrateStrategy(address _old, address _new) external onlyPool {\n        require(strategy[_old].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(!strategy[_new].active, Errors.STRATEGY_IS_ACTIVE);\n        StrategyConfig memory _newStrategy =\n            StrategyConfig({\n                active: true,\n                interestFee: 0, // Obsolete\n                debtRate: 0, // Obsolete\n                lastRebalance: strategy[_old].lastRebalance,\n                totalDebt: strategy[_old].totalDebt,\n                totalLoss: 0,\n                totalProfit: 0,\n                debtRatio: strategy[_old].debtRatio,\n                externalDepositFee: strategy[_old].externalDepositFee\n            });\n        delete strategy[_old];\n        strategy[_new] = _newStrategy;\n\n        // Strategies and withdrawQueue has same length but we still want\n        // to iterate over them in different loop.\n        for (uint256 i = 0; i < strategies.length; i++) {\n            if (strategies[i] == _old) {\n                strategies[i] = _new;\n                break;\n            }\n        }\n        for (uint256 i = 0; i < withdrawQueue.length; i++) {\n            if (withdrawQueue[i] == _old) {\n                withdrawQueue[i] = _new;\n                break;\n            }\n        }\n        emit StrategyMigrated(_old, _new);\n    }\n\n    /**\n     * @dev Strategy call this in regular interval.\n     * @param _profit yield generated by strategy. Strategy get performance fee on this amount\n     * @param _loss  Reduce debt ,also reduce debtRatio, increase loss in record.\n     * @param _payback strategy willing to payback outstanding above debtLimit. no performance fee on this amount.\n     *  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.\n     */\n    function reportEarning(\n        address _strategy,\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) external onlyPool returns (uint256 _actualPayback, uint256 _creditLine) {\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(IVesperPool(pool).token().balanceOf(_strategy) >= (_profit + _payback), Errors.INSUFFICIENT_BALANCE);\n        if (_loss != 0) {\n            _reportLoss(_strategy, _loss);\n        }\n\n        uint256 _overLimitDebt = _excessDebt(_strategy);\n        _actualPayback = _min(_overLimitDebt, _payback);\n        if (_actualPayback != 0) {\n            strategy[_strategy].totalDebt -= _actualPayback;\n            totalDebt -= _actualPayback;\n        }\n        _creditLine = _availableCreditLimit(_strategy);\n        if (_creditLine != 0) {\n            strategy[_strategy].totalDebt += _creditLine;\n            totalDebt += _creditLine;\n        }\n        if (_profit != 0) {\n            strategy[_strategy].totalProfit += _profit;\n        }\n        strategy[_strategy].lastRebalance = block.timestamp;\n        emit EarningReported(\n            _strategy,\n            _profit,\n            _loss,\n            _actualPayback,\n            strategy[_strategy].totalDebt,\n            totalDebt,\n            _creditLine\n        );\n        return (_actualPayback, _creditLine);\n    }\n\n    /**\n     * @notice Update strategy loss.\n     * @param _strategy Strategy which incur loss\n     * @param _loss Loss of strategy\n     */\n    function reportLoss(address _strategy, uint256 _loss) external onlyPool {\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        _reportLoss(_strategy, _loss);\n        emit LossReported(_strategy, _loss);\n    }\n\n    /**\n     * @notice Decrease debt of strategy, also decrease totalDebt\n     * @dev In case of withdraw from strategy, pool will decrease debt by amount withdrawn\n     * @param _strategy Strategy Address\n     * @param _decreaseBy Amount by which strategy debt will be decreased\n     */\n    function decreaseDebt(address _strategy, uint256 _decreaseBy) external onlyPool {\n        // A strategy may send more than its debt. This should never fail\n        _decreaseBy = _min(strategy[_strategy].totalDebt, _decreaseBy);\n        strategy[_strategy].totalDebt -= _decreaseBy;\n        totalDebt -= _decreaseBy;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice Get available credit limit of strategy. This is the amount strategy can borrow from pool\n     * @dev Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy.\n     * credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance)\n     * when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\n     * @param _strategy Strategy address\n     */\n    function availableCreditLimit(address _strategy) external view returns (uint256) {\n        return _availableCreditLimit(_strategy);\n    }\n\n    /**\n     * @notice Debt above current debt limit\n     * @param _strategy Address of strategy\n     */\n    function excessDebt(address _strategy) external view returns (uint256) {\n        return _excessDebt(_strategy);\n    }\n\n    /// @notice Return strategies array\n    function getStrategies() external view returns (address[] memory) {\n        return strategies;\n    }\n\n    /// @notice Return withdrawQueue\n    function getWithdrawQueue() external view returns (address[] memory) {\n        return withdrawQueue;\n    }\n\n    /**\n     * @notice Get total debt of given strategy\n     * @param _strategy Strategy address\n     */\n    function totalDebtOf(address _strategy) external view returns (uint256) {\n        return strategy[_strategy].totalDebt;\n    }\n\n    /// @notice Recalculate pool external deposit fee.\n    /// @dev As it uses state variables for calculation, make sure to call it only after updating state variables.\n    function _recalculatePoolExternalDepositFee() internal {\n        uint256 _len = strategies.length;\n        uint256 _externalDepositFee;\n\n        // calculate poolExternalDepositFee and weightedFee for each strategy\n        if (totalDebtRatio != 0) {\n            for (uint256 i = 0; i < _len; i++) {\n                _externalDepositFee +=\n                    (strategy[strategies[i]].externalDepositFee * strategy[strategies[i]].debtRatio) /\n                    totalDebtRatio;\n            }\n        }\n\n        // Update externalDepositFee and emit event\n        emit UpdatedPoolExternalDepositFee(externalDepositFee, externalDepositFee = _externalDepositFee);\n    }\n\n    /**\n     * @dev When strategy report loss, its debtRatio decreases to get fund back quickly.\n     * Reduction is debt ratio is reduction in credit limit\n     */\n    function _reportLoss(address _strategy, uint256 _loss) internal {\n        uint256 _currentDebt = strategy[_strategy].totalDebt;\n        require(_currentDebt >= _loss, Errors.LOSS_TOO_HIGH);\n        strategy[_strategy].totalLoss += _loss;\n        strategy[_strategy].totalDebt -= _loss;\n        totalDebt -= _loss;\n        uint256 _deltaDebtRatio =\n            _min((_loss * MAX_BPS) / IVesperPool(pool).totalValue(), strategy[_strategy].debtRatio);\n        strategy[_strategy].debtRatio -= _deltaDebtRatio;\n        totalDebtRatio -= _deltaDebtRatio;\n    }\n\n    function _availableCreditLimit(address _strategy) internal view returns (uint256) {\n        if (IVesperPool(pool).stopEverything()) {\n            return 0;\n        }\n        uint256 _totalValue = IVesperPool(pool).totalValue();\n        uint256 _maxDebt = (strategy[_strategy].debtRatio * _totalValue) / MAX_BPS;\n        uint256 _currentDebt = strategy[_strategy].totalDebt;\n        if (_currentDebt >= _maxDebt) {\n            return 0;\n        }\n        uint256 _poolDebtLimit = (totalDebtRatio * _totalValue) / MAX_BPS;\n        if (totalDebt >= _poolDebtLimit) {\n            return 0;\n        }\n        uint256 _available = _maxDebt - _currentDebt;\n        _available = _min(_min(IVesperPool(pool).tokensHere(), _available), _poolDebtLimit - totalDebt);\n        return _available;\n    }\n\n    function _excessDebt(address _strategy) internal view returns (uint256) {\n        uint256 _currentDebt = strategy[_strategy].totalDebt;\n        if (IVesperPool(pool).stopEverything()) {\n            return _currentDebt;\n        }\n        uint256 _maxDebt = (strategy[_strategy].debtRatio * IVesperPool(pool).totalValue()) / MAX_BPS;\n        return _currentDebt > _maxDebt ? (_currentDebt - _maxDebt) : 0;\n    }\n\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "vesper-pools/contracts/pool/VPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./PoolERC20Permit.sol\";\nimport \"./PoolStorage.sol\";\nimport \"../Errors.sol\";\nimport \"../Governable.sol\";\nimport \"../Pausable.sol\";\nimport \"../interfaces/vesper/IPoolAccountant.sol\";\nimport \"../interfaces/vesper/IPoolRewards.sol\";\nimport \"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\";\n\n/// @title Holding pool share token\n// solhint-disable no-empty-blocks\ncontract VPool is Initializable, PoolERC20Permit, Governable, Pausable, ReentrancyGuard, PoolStorageV3 {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    string public constant VERSION = \"5.0.2\";\n\n    uint256 public constant MAX_BPS = 10_000;\n    // For simplicity we are assuming 365 days as 1 year\n    uint256 public constant ONE_YEAR = 365 days;\n\n    event UpdatedMaximumProfitAsFee(uint256 oldMaxProfitAsFee, uint256 newMaxProfitAsFee);\n    event UpdatedMinimumDepositLimit(uint256 oldDepositLimit, uint256 newDepositLimit);\n    event Deposit(address indexed owner, uint256 shares, uint256 amount);\n    event Withdraw(address indexed owner, uint256 shares, uint256 amount);\n    event UpdatedUniversalFee(uint256 oldUniversalFee, uint256 newUniversalFee);\n    event UpdatedPoolRewards(address indexed previousPoolRewards, address indexed newPoolRewards);\n    event UpdatedWithdrawFee(uint256 previousWithdrawFee, uint256 newWithdrawFee);\n    event UniversalFeePaid(uint256 strategyDebt, uint256 profit, uint256 fee);\n\n    // We are using constructor to initialize implementation with basic details\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _token\n    ) PoolERC20(_name, _symbol) {\n        // 0x0 is acceptable as has no effect on functionality\n        token = IERC20(_token);\n    }\n\n    /// @dev Equivalent to constructor for proxy. It can be called only once per proxy.\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        address _token,\n        address _poolAccountant\n    ) public initializer {\n        require(_token != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        require(_poolAccountant != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        __ERC20_init(_name, _symbol);\n        __ERC20Permit_init(_name);\n        __Governable_init();\n        token = IERC20(_token);\n\n        require(_keepers.add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\n        require(_maintainers.add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\n        poolAccountant = _poolAccountant;\n        universalFee = 200; // 2%\n        maxProfitAsFee = 5_000; // 50%\n        minDepositLimit = 1;\n    }\n\n    modifier onlyKeeper() {\n        require(governor == _msgSender() || _keepers.contains(_msgSender()), \"not-a-keeper\");\n        _;\n    }\n\n    modifier onlyMaintainer() {\n        require(governor == _msgSender() || _maintainers.contains(_msgSender()), \"not-a-maintainer\");\n        _;\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens and receive pool shares depending on the current share price.\n     * @param _amount ERC20 token amount.\n     */\n    function deposit(uint256 _amount) external nonReentrant whenNotPaused {\n        _updateRewards(_msgSender());\n        _deposit(_amount);\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens and claim rewards if any\n     * @param _amount ERC20 token amount.\n     */\n    function depositAndClaim(uint256 _amount) external nonReentrant whenNotPaused {\n        _depositAndClaim(_amount);\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens with permit aka gasless approval.\n     * @param _amount ERC20 token amount.\n     * @param _deadline The time at which signature will expire\n     * @param _v The recovery byte of the signature\n     * @param _r Half of the ECDSA signature pair\n     * @param _s Half of the ECDSA signature pair\n     */\n    function depositWithPermit(\n        uint256 _amount,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external nonReentrant whenNotPaused {\n        IERC20Permit(address(token)).permit(_msgSender(), address(this), _amount, _deadline, _v, _r, _s);\n        _updateRewards(_msgSender());\n        _deposit(_amount);\n    }\n\n    /**\n     * @notice Withdraw collateral based on given shares and the current share price.\n     * Burn remaining shares and return collateral. Claim rewards if there is any\n     * @dev Deprecated method. Keeping this method here for backward compatibility.\n     * @param _shares Pool shares. It will be in 18 decimals.\n     */\n    function whitelistedWithdraw(uint256 _shares) external nonReentrant whenNotShutdown {\n        _claimRewards(_msgSender());\n        _withdraw(_shares);\n    }\n\n    /**\n     * @notice Withdraw collateral based on given shares and the current share price.\n     * Burn remaining shares and return collateral.\n     * @param _shares Pool shares. It will be in 18 decimals.\n     */\n    function withdraw(uint256 _shares) external nonReentrant whenNotShutdown {\n        _updateRewards(_msgSender());\n        _withdraw(_shares);\n    }\n\n    /**\n     * @notice Withdraw collateral and claim rewards if any\n     * @param _shares Pool shares. It will be in 18 decimals.\n     */\n    function withdrawAndClaim(uint256 _shares) external nonReentrant whenNotShutdown {\n        _withdrawAndClaim(_shares);\n    }\n\n    /**\n     * @notice Transfer tokens to multiple recipient\n     * @dev Address array and amount array are 1:1 and are in order.\n     * @param _recipients array of recipient addresses\n     * @param _amounts array of token amounts\n     * @return true/false\n     */\n    function multiTransfer(address[] calldata _recipients, uint256[] calldata _amounts) external returns (bool) {\n        require(_recipients.length == _amounts.length, Errors.INPUT_LENGTH_MISMATCH);\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            require(transfer(_recipients[i], _amounts[i]), Errors.MULTI_TRANSFER_FAILED);\n        }\n        return true;\n    }\n\n    /**\n     * @notice Strategy call this in regular interval. Only strategy function.\n     * @param _profit yield generated by strategy. Strategy get performance fee on this amount\n     * @param _loss  Reduce debt ,also reduce debtRatio, increase loss in record.\n     * @param _payback strategy willing to payback outstanding above debtLimit. no performance fee on this amount.\n     *  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.\n     */\n    function reportEarning(\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) external {\n        address _strategy = _msgSender();\n        // Calculate universal fee\n        if (_profit > 0) {\n            (, , , uint256 _lastRebalanceAt, uint256 _totalDebt, , , , ) =\n                IPoolAccountant(poolAccountant).strategy(_strategy);\n            uint256 _fee = _calculateUniversalFee(_lastRebalanceAt, _totalDebt, _profit);\n            // Mint shares equal to universal fee\n            if (_fee > 0) {\n                _mint(IStrategy(_strategy).feeCollector(), _calculateShares(_fee));\n                emit UniversalFeePaid(_totalDebt, _profit, _fee);\n            }\n        }\n\n        // Report earning in pool accountant\n        (uint256 _actualPayback, uint256 _creditLine) =\n            IPoolAccountant(poolAccountant).reportEarning(_strategy, _profit, _loss, _payback);\n        uint256 _totalPayback = _profit + _actualPayback;\n        // After payback, if strategy has credit line available then send more fund to strategy\n        // If payback is more than available credit line then get fund from strategy\n        if (_totalPayback < _creditLine) {\n            token.safeTransfer(_strategy, _creditLine - _totalPayback);\n        } else if (_totalPayback > _creditLine) {\n            token.safeTransferFrom(_strategy, address(this), _totalPayback - _creditLine);\n        }\n    }\n\n    /**\n     * @notice Report loss outside of rebalance activity.\n     * @dev Some strategies pay deposit fee thus realizing loss at deposit.\n     * For example: Curve's 3pool has some slippage due to deposit of one asset in 3pool.\n     * Strategy may want report this loss instead of waiting for next rebalance.\n     * @param _loss Loss that strategy want to report\n     */\n    function reportLoss(uint256 _loss) external {\n        if (_loss > 0) {\n            IPoolAccountant(poolAccountant).reportLoss(_msgSender(), _loss);\n        }\n    }\n\n    /**\n     * @dev Transfer given ERC20 token to governor\n     * @param _fromToken Token address to sweep\n     */\n    function sweepERC20(address _fromToken) external onlyKeeper {\n        require(_fromToken != address(token), Errors.NOT_ALLOWED_TO_SWEEP);\n        IERC20(_fromToken).safeTransfer(governor, IERC20(_fromToken).balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Get available credit limit of strategy. This is the amount strategy can borrow from pool\n     * @dev Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy.\n     * credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance)\n     * when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\n     * @param _strategy Strategy address\n     */\n    function availableCreditLimit(address _strategy) external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).availableCreditLimit(_strategy);\n    }\n\n    /**\n     * @notice Calculate universal fee for calling strategy. This is only strategy function.\n     * @dev Earn strategies will call this during rebalance.\n     */\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee) {\n        return _calculateUniversalFee(_msgSender(), _profit);\n    }\n\n    /**\n     * @notice Debt above current debt limit\n     * @param _strategy Address of strategy\n     */\n    function excessDebt(address _strategy) external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).excessDebt(_strategy);\n    }\n\n    function getStrategies() external view returns (address[] memory) {\n        return IPoolAccountant(poolAccountant).getStrategies();\n    }\n\n    /// @notice Get total debt of pool\n    function totalDebt() external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebt();\n    }\n\n    /**\n     * @notice Get total debt of given strategy\n     * @param _strategy Strategy address\n     */\n    function totalDebtOf(address _strategy) external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebtOf(_strategy);\n    }\n\n    /// @notice Get total debt ratio. Total debt ratio helps us keep buffer in pool\n    function totalDebtRatio() external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebtRatio();\n    }\n\n    /**\n     * @notice Calculate how much shares user will get for given amount. Also return externalDepositFee if any.\n     * @param _amount Collateral amount\n     * @return _shares Amount of share that user will get\n     * @dev Amount should be >= minimum deposit limit which default to 1\n     */\n    function calculateMintage(uint256 _amount) public view returns (uint256 _shares) {\n        require(_amount >= minDepositLimit, Errors.INVALID_COLLATERAL_AMOUNT);\n        uint256 _externalDepositFee = (_amount * IPoolAccountant(poolAccountant).externalDepositFee()) / MAX_BPS;\n        _shares = _calculateShares(_amount - _externalDepositFee);\n    }\n\n    function getWithdrawQueue() public view returns (address[] memory) {\n        return IPoolAccountant(poolAccountant).getWithdrawQueue();\n    }\n\n    /**\n     * @notice Get price per share\n     * @dev Return value will be in token defined decimals.\n     */\n    function pricePerShare() public view returns (uint256) {\n        if (totalSupply() == 0 || totalValue() == 0) {\n            return 10**IERC20Metadata(address(token)).decimals();\n        }\n        return (totalValue() * 1e18) / totalSupply();\n    }\n\n    function strategy(address _strategy)\n        public\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee, // Obsolete\n            uint256 _debtRate, // Obsolete\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio,\n            uint256 _externalDepositFee\n        )\n    {\n        return IPoolAccountant(poolAccountant).strategy(_strategy);\n    }\n\n    /// @dev Returns the token stored in the pool. It will be in token defined decimals.\n    function tokensHere() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Returns sum of token locked in other contracts and token stored in the pool.\n     * It will be in token defined decimals.\n     */\n    function totalValue() public view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebt() + tokensHere();\n    }\n\n    /**\n     * @dev Hook that is called just after burning tokens.\n     * @param _amount Collateral amount in collateral token defined decimals.\n     */\n    function _afterBurning(uint256 _amount) internal virtual returns (uint256) {\n        token.safeTransfer(_msgSender(), _amount);\n        return _amount;\n    }\n\n    /// @notice claim rewards of account\n    function _claimRewards(address _account) internal {\n        if (poolRewards != address(0)) {\n            IPoolRewards(poolRewards).claimReward(_account);\n        }\n    }\n\n    /// @dev Deposit incoming token and mint pool token i.e. shares.\n    function _deposit(uint256 _amount) internal {\n        uint256 _shares = calculateMintage(_amount);\n        token.safeTransferFrom(_msgSender(), address(this), _amount);\n        _mint(_msgSender(), _shares);\n        emit Deposit(_msgSender(), _shares, _amount);\n    }\n\n    /// @dev Deposit token and claim rewards if any\n    function _depositAndClaim(uint256 _amount) internal {\n        _claimRewards(_msgSender());\n        _deposit(_amount);\n    }\n\n    /// @dev Update pool rewards of sender and receiver during transfer.\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal override {\n        if (poolRewards != address(0)) {\n            IPoolRewards(poolRewards).updateReward(sender);\n            IPoolRewards(poolRewards).updateReward(recipient);\n        }\n        super._transfer(sender, recipient, amount);\n    }\n\n    function _updateRewards(address _account) internal {\n        if (poolRewards != address(0)) {\n            IPoolRewards(poolRewards).updateReward(_account);\n        }\n    }\n\n    /// @dev Burns shares and returns the collateral value, after fee, of those.\n    function _withdraw(uint256 _shares) internal {\n        require(_shares > 0, Errors.INVALID_SHARE_AMOUNT);\n\n        (uint256 _amountWithdrawn, bool _isPartial) = _beforeBurning(_shares);\n        // There may be scenarios when pool is not able to withdraw all of requested amount\n        if (_isPartial) {\n            // Recalculate proportional share on actual amount withdrawn\n            uint256 _proportionalShares = _calculateShares(_amountWithdrawn);\n            if (_proportionalShares < _shares) {\n                _shares = _proportionalShares;\n            }\n        }\n        _burn(_msgSender(), _shares);\n        _afterBurning(_amountWithdrawn);\n        emit Withdraw(_msgSender(), _shares, _amountWithdrawn);\n    }\n\n    /// @dev Withdraw collateral and claim rewards if any\n    function _withdrawAndClaim(uint256 _shares) internal {\n        _claimRewards(_msgSender());\n        _withdraw(_shares);\n    }\n\n    function _withdrawCollateral(uint256 _amount) internal {\n        // Withdraw amount from queue\n        uint256 _debt;\n        uint256 _balanceAfter;\n        uint256 _balanceBefore;\n        uint256 _amountWithdrawn;\n        uint256 _totalAmountWithdrawn;\n        address[] memory _withdrawQueue = getWithdrawQueue();\n        uint256 _len = _withdrawQueue.length;\n        for (uint256 i; i < _len; i++) {\n            uint256 _amountNeeded = _amount - _totalAmountWithdrawn;\n            address _strategy = _withdrawQueue[i];\n            _debt = IPoolAccountant(poolAccountant).totalDebtOf(_strategy);\n            if (_debt == 0) {\n                continue;\n            }\n            if (_amountNeeded > _debt) {\n                // Should not withdraw more than current debt of strategy.\n                _amountNeeded = _debt;\n            }\n            _balanceBefore = tokensHere();\n            //solhint-disable no-empty-blocks\n            try IStrategy(_strategy).withdraw(_amountNeeded) {} catch {\n                continue;\n            }\n            _balanceAfter = tokensHere();\n            _amountWithdrawn = _balanceAfter - _balanceBefore;\n            // Adjusting totalDebt. Assuming that during next reportEarning(), strategy will report loss if amountWithdrawn < _amountNeeded\n            IPoolAccountant(poolAccountant).decreaseDebt(_strategy, _amountWithdrawn);\n            _totalAmountWithdrawn += _amountWithdrawn;\n            if (_totalAmountWithdrawn >= _amount) {\n                // withdraw done\n                break;\n            }\n        }\n    }\n\n    /**\n     * @dev Before burning hook.\n     * withdraw amount from strategies\n     */\n    function _beforeBurning(uint256 _share) private returns (uint256 _actualWithdrawn, bool _isPartial) {\n        uint256 _amount = (_share * pricePerShare()) / 1e18;\n        uint256 _tokensHere = tokensHere();\n        _actualWithdrawn = _amount;\n        // Check for partial withdraw scenario\n        // If we do not have enough tokens then withdraw whats needed from strategy\n        if (_amount > _tokensHere) {\n            // Strategy may withdraw partial\n            _withdrawCollateral(_amount - _tokensHere);\n            _tokensHere = tokensHere();\n            if (_amount > _tokensHere) {\n                _actualWithdrawn = _tokensHere;\n                _isPartial = true;\n            }\n        }\n        require(_actualWithdrawn > 0, Errors.INVALID_COLLATERAL_AMOUNT);\n    }\n\n    /**\n     * @dev Calculate shares to mint/burn based on the current share price and given amount.\n     * @param _amount Collateral amount in collateral token defined decimals.\n     * @return share amount in 18 decimal\n     */\n    function _calculateShares(uint256 _amount) private view returns (uint256) {\n        uint256 _share = ((_amount * 1e18) / pricePerShare());\n        return _amount > ((_share * pricePerShare()) / 1e18) ? _share + 1 : _share;\n    }\n\n    /**\n     * @dev Calculate universal fee based on strategy's TVL, profit earned and duration between rebalance and now.\n     */\n    function _calculateUniversalFee(address _strategy, uint256 _profit) private view returns (uint256 _fee) {\n        // Calculate universal fee\n        (, , , uint256 _lastRebalance, uint256 _totalDebt, , , , ) =\n            IPoolAccountant(poolAccountant).strategy(_strategy);\n        return _calculateUniversalFee(_lastRebalance, _totalDebt, _profit);\n    }\n\n    function _calculateUniversalFee(\n        uint256 _lastRebalance,\n        uint256 _totalDebt,\n        uint256 _profit\n    ) private view returns (uint256 _fee) {\n        _fee = (universalFee * (block.timestamp - _lastRebalance) * _totalDebt) / (MAX_BPS * ONE_YEAR);\n        uint256 _maxFee = (_profit * maxProfitAsFee) / MAX_BPS;\n        if (_fee > _maxFee) {\n            _fee = _maxFee;\n        }\n    }\n\n    ////////////////////////////// Only Governor //////////////////////////////\n\n    /**\n     * @notice Migrate existing strategy to new strategy.\n     * @dev Migrating strategy aka old and new strategy should be of same type.\n     * @param _old Address of strategy being migrated\n     * @param _new Address of new strategy\n     */\n    function migrateStrategy(address _old, address _new) external onlyGovernor {\n        require(\n            IStrategy(_new).pool() == address(this) && IStrategy(_old).pool() == address(this),\n            Errors.INVALID_STRATEGY\n        );\n        IPoolAccountant(poolAccountant).migrateStrategy(_old, _new);\n        IStrategy(_old).migrate(_new);\n    }\n\n    /**\n     * Only Governor:: Update maximum profit that can be used as universal fee\n     * @param _newMaxProfitAsFee New max profit as fee\n     */\n    function updateMaximumProfitAsFee(uint256 _newMaxProfitAsFee) external onlyGovernor {\n        require(_newMaxProfitAsFee != maxProfitAsFee, Errors.SAME_AS_PREVIOUS);\n        emit UpdatedMaximumProfitAsFee(maxProfitAsFee, _newMaxProfitAsFee);\n        maxProfitAsFee = _newMaxProfitAsFee;\n    }\n\n    /**\n     * Only Governor:: Update minimum deposit limit\n     * @param _newLimit New minimum deposit limit\n     */\n    function updateMinimumDepositLimit(uint256 _newLimit) external onlyGovernor {\n        require(_newLimit > 0, Errors.INVALID_INPUT);\n        require(_newLimit != minDepositLimit, Errors.SAME_AS_PREVIOUS);\n        emit UpdatedMinimumDepositLimit(minDepositLimit, _newLimit);\n        minDepositLimit = _newLimit;\n    }\n\n    /**\n     * @notice Update universal fee for this pool\n     * @dev Format: 1500 = 15% fee, 100 = 1%\n     * @param _newUniversalFee new universal fee\n     */\n    function updateUniversalFee(uint256 _newUniversalFee) external onlyGovernor {\n        require(_newUniversalFee <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\n        emit UpdatedUniversalFee(universalFee, _newUniversalFee);\n        universalFee = _newUniversalFee;\n    }\n\n    /**\n     * @notice Update pool rewards address for this pool\n     * @param _newPoolRewards new pool rewards address\n     */\n    function updatePoolRewards(address _newPoolRewards) external onlyGovernor {\n        require(_newPoolRewards != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        emit UpdatedPoolRewards(poolRewards, _newPoolRewards);\n        poolRewards = _newPoolRewards;\n    }\n\n    ///////////////////////////// Only Keeper ///////////////////////////////\n    function pause() external onlyKeeper {\n        _pause();\n    }\n\n    function unpause() external onlyKeeper {\n        _unpause();\n    }\n\n    function shutdown() external onlyKeeper {\n        _shutdown();\n    }\n\n    function open() external onlyKeeper {\n        _open();\n    }\n\n    /// @notice Return list of keepers\n    function keepers() external view returns (address[] memory) {\n        return _keepers.values();\n    }\n\n    function isKeeper(address _address) external view returns (bool) {\n        return _keepers.contains(_address);\n    }\n\n    /**\n     * @notice Add given address in keepers list.\n     * @param _keeperAddress keeper address to add.\n     */\n    function addKeeper(address _keeperAddress) external onlyKeeper {\n        require(_keepers.add(_keeperAddress), Errors.ADD_IN_LIST_FAILED);\n    }\n\n    /**\n     * @notice Remove given address from keepers list.\n     * @param _keeperAddress keeper address to remove.\n     */\n    function removeKeeper(address _keeperAddress) external onlyKeeper {\n        require(_keepers.remove(_keeperAddress), Errors.REMOVE_FROM_LIST_FAILED);\n    }\n\n    /// @notice Return list of maintainers\n    function maintainers() external view returns (address[] memory) {\n        return _maintainers.values();\n    }\n\n    function isMaintainer(address _address) external view returns (bool) {\n        return _maintainers.contains(_address);\n    }\n\n    /**\n     * @notice Add given address in maintainers list.\n     * @param _maintainerAddress maintainer address to add.\n     */\n    function addMaintainer(address _maintainerAddress) external onlyKeeper {\n        require(_maintainers.add(_maintainerAddress), Errors.ADD_IN_LIST_FAILED);\n    }\n\n    /**\n     * @notice Remove given address from maintainers list.\n     * @param _maintainerAddress maintainer address to remove.\n     */\n    function removeMaintainer(address _maintainerAddress) external onlyKeeper {\n        require(_maintainers.remove(_maintainerAddress), Errors.REMOVE_FROM_LIST_FAILED);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n}\n"
    },
    "vesper-pools/contracts/pool/VETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./VPool.sol\";\nimport \"../interfaces/token/IToken.sol\";\n\n//solhint-disable no-empty-blocks\ncontract VETH is VPool {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _token\n    ) VPool(_name, _symbol, _token) {}\n\n    /// @dev Handle incoming ETH to the contract address.\n    receive() external payable {\n        if (msg.sender != address(token)) {\n            deposit();\n        }\n    }\n\n    /// @dev Burns tokens/shares and returns the ETH value, after fee, of those.\n    function withdrawETH(uint256 _shares) external whenNotShutdown nonReentrant {\n        withdrawInETH = true;\n        _updateRewards(_msgSender());\n        _withdraw(_shares);\n        withdrawInETH = false;\n    }\n\n    /// @dev Burns tokens/shares and returns the ETH value and claim rewards if any\n    function withdrawETHAndClaim(uint256 _shares) external whenNotShutdown nonReentrant {\n        withdrawInETH = true;\n        _withdrawAndClaim(_shares);\n        withdrawInETH = false;\n    }\n\n    /**\n     * @dev After burning hook, it will be called during withdrawal process.\n     * It will withdraw collateral from strategy and transfer it to user.\n     */\n    function _afterBurning(uint256 _amount) internal override returns (uint256) {\n        if (withdrawInETH) {\n            TokenLike(address(token)).withdraw(_amount);\n            Address.sendValue(payable(_msgSender()), _amount);\n        } else {\n            super._afterBurning(_amount);\n        }\n        return _amount;\n    }\n\n    /**\n     * @dev Receives ETH and grants new tokens/shares to the sender depending\n     * on the value of pool's share.\n     */\n    function deposit() public payable whenNotPaused nonReentrant {\n        _updateRewards(_msgSender());\n        _depositETH();\n    }\n\n    /// @dev Deposit ETH and claim rewards if any\n    function depositAndClaim() external payable whenNotPaused nonReentrant {\n        _claimRewards(_msgSender());\n        _depositETH();\n    }\n\n    function _depositETH() internal {\n        uint256 _shares = calculateMintage(msg.value);\n        // Wraps ETH in WETH\n        TokenLike(address(token)).deposit{value: msg.value}();\n        _mint(_msgSender(), _shares);\n        emit Deposit(_msgSender(), _shares, msg.value);\n    }\n}\n"
    },
    "vesper-pools/contracts/pool/earn/VesperEarnDrip.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../PoolRewards.sol\";\nimport \"../../interfaces/vesper/IVesperPool.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\ninterface IVesperPoolV2 {\n    function getPricePerShare() external view returns (uint256);\n}\n\ncontract VesperEarnDrip is PoolRewards {\n    TokenLike internal constant WETH = TokenLike(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    using SafeERC20 for IERC20;\n\n    event DripRewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\n    event GrowTokenUpdated(address indexed oldGrowToken, address indexed newGrowToken);\n\n    address public growToken;\n\n    receive() external payable {\n        require(msg.sender == address(WETH), \"deposits-not-allowed\");\n    }\n\n    /**\n     * @notice Returns claimable reward amount.\n     * @dev In case of growToken it will return the actual underlying value\n     * @return _rewardTokens Array of tokens being rewarded\n     * @return _claimableAmounts Array of claimable for token on same index in rewardTokens\n     */\n    function claimable(address _account)\n        external\n        view\n        override\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts)\n    {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _balance = IERC20(pool).balanceOf(_account);\n        uint256 _len = rewardTokens.length;\n        _claimableAmounts = new uint256[](_len);\n        for (uint256 i = 0; i < _len; i++) {\n            uint256 _claimableAmount = _claimable(rewardTokens[i], _account, _totalSupply, _balance);\n            if (rewardTokens[i] == growToken) {\n                _claimableAmount = _calculateRewardInDripToken(growToken, _claimableAmount);\n            }\n            _claimableAmounts[i] = _claimableAmount;\n        }\n        _rewardTokens = rewardTokens;\n    }\n\n    /**\n     * @dev Notify that reward is added.\n     * Also updates reward rate and reward earning period.\n     */\n    function notifyRewardAmount(\n        address _rewardToken,\n        uint256 _rewardAmount,\n        uint256 _rewardDuration\n    ) external override {\n        (bool isStrategy, , , , , , , , ) = IVesperPool(pool).strategy(msg.sender);\n        require(\n            msg.sender == IVesperPool(pool).governor() || (isRewardToken[_rewardToken] && isStrategy),\n            \"not-authorized\"\n        );\n        super._notifyRewardAmount(_rewardToken, _rewardAmount, _rewardDuration, IVesperPool(pool).totalSupply());\n    }\n\n    /**\n     * @notice Defines which rewardToken is a growToken\n     * @dev growToken is used to check whether to call withdraw\n     * from Grow Pool or not\n     */\n    function updateGrowToken(address _newGrowToken) external onlyAuthorized {\n        require(_newGrowToken != address(0), \"grow-token-address-zero\");\n        require(isRewardToken[_newGrowToken], \"grow-token-not-reward-token\");\n        emit GrowTokenUpdated(growToken, _newGrowToken);\n        growToken = _newGrowToken;\n    }\n\n    /**\n     * @notice Claim earned rewards in dripToken.\n     * @dev Withdraws from the Grow Pool and transfers the amount to _account\n     * @dev Claim rewards only if reward in dripToken is non zero\n     */\n    function _claimReward(\n        address _rewardToken,\n        address _account,\n        uint256 _reward\n    ) internal override {\n        if (_rewardToken == growToken) {\n            // Calculate reward in drip token\n            uint256 _rewardInDripToken = _calculateRewardInDripToken(_rewardToken, _reward);\n            // If reward in drip token is non zero\n            if (_rewardInDripToken != 0) {\n                // Mark reward as claimed\n                rewards[_rewardToken][_account] = 0;\n\n                // Automatically unwraps the Grow Pool token AKA _rewardToken into the dripToken\n                IERC20 _dripToken = IVesperPool(_rewardToken).token();\n                uint256 _dripBalanceBefore = _dripToken.balanceOf(address(this));\n                IVesperPool(_rewardToken).withdraw(_reward);\n                uint256 _dripTokenAmount = _dripToken.balanceOf(address(this)) - _dripBalanceBefore;\n                if (address(_dripToken) == address(WETH)) {\n                    WETH.withdraw(_dripTokenAmount);\n                    Address.sendValue(payable(_account), _dripTokenAmount);\n                } else {\n                    _dripToken.safeTransfer(_account, _dripTokenAmount);\n                }\n                emit DripRewardPaid(_account, address(_dripToken), _dripTokenAmount);\n            }\n        } else {\n            // Behave as normal PoolRewards, no unwrap needed\n            super._claimReward(_rewardToken, _account, _reward);\n        }\n    }\n\n    /// @dev Here _rewardToken AKA growToken is Vesper Grow Pool which can be V2 or V3 pool.\n    /// V2 and V3 pool has different signature to read price per share\n    function _calculateRewardInDripToken(address _rewardToken, uint256 _reward) private view returns (uint256) {\n        uint256 _pricePerShare;\n        // Try reading price per share using V3 pool signature, if this fails catch block will execute\n        try IVesperPool(_rewardToken).pricePerShare() returns (uint256 _pricePerShareV3) {\n            _pricePerShare = _pricePerShareV3;\n        } catch {\n            // If try fails, read price per share using V2 pool signature\n            _pricePerShare = IVesperPoolV2(_rewardToken).getPricePerShare();\n        }\n        // Calculate reward in dripToken, as _reward is share of Grow Pool AKA growToken AKA _rewardToken\n        return (_pricePerShare * _reward) / 1e18;\n    }\n}\n"
    },
    "vesper-pools/contracts/upgraders/PoolAccountantUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract PoolAccountantUpgrader is UpgraderBase {\n    constructor(address _multicall)\n        UpgraderBase(_multicall) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](5);\n        calls[0] = abi.encodeWithSignature(\"pool()\");\n        calls[1] = abi.encodeWithSignature(\"totalDebtRatio()\");\n        calls[2] = abi.encodeWithSignature(\"totalDebt()\");\n        calls[3] = abi.encodeWithSignature(\"getStrategies()\");\n        calls[4] = abi.encodeWithSignature(\"getWithdrawQueue()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        address beforePool = abi.decode(_beforeResults[0], (address));\n        uint256 beforeTotalDebtRatio = abi.decode(_beforeResults[1], (uint256));\n        uint256 beforeTotalDebt = abi.decode(_beforeResults[2], (uint256));\n        address[] memory beforeGetStrategies = abi.decode(_beforeResults[3], (address[]));\n        address[] memory beforeGetWithdrawQueue = abi.decode(_beforeResults[4], (address[]));\n\n        address afterPool = abi.decode(_afterResults[0], (address));\n        uint256 afterTotalDebtRatio = abi.decode(_afterResults[1], (uint256));\n        uint256 afterTotalDebt = abi.decode(_afterResults[2], (uint256));\n        address[] memory afterGetStrategies = abi.decode(_afterResults[3], (address[]));\n        address[] memory afterGetWithdrawQueue = abi.decode(_afterResults[4], (address[]));\n\n        require(\n            beforePool == afterPool && beforeTotalDebtRatio == afterTotalDebtRatio && beforeTotalDebt == afterTotalDebt,\n            \"simple-fields-test-failed\"\n        );\n        require(\n            beforeGetStrategies.length == afterGetStrategies.length &&\n                beforeGetWithdrawQueue.length == afterGetWithdrawQueue.length,\n            \"dynamic-fields-test-failed\"\n        );\n    }\n}\n"
    },
    "vesper-pools/contracts/upgraders/PoolRewardsUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract PoolRewardsUpgrader is UpgraderBase {\n    constructor(address _multicall)\n        UpgraderBase(_multicall) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](3);\n        calls[0] = abi.encodeWithSignature(\"pool()\");\n        calls[1] = abi.encodeWithSignature(\"getRewardTokens()\");\n        calls[2] = abi.encodeWithSignature(\"rewardPerToken()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        address beforePool = abi.decode(_beforeResults[0], (address));\n        address[] memory beforeRewardToken = abi.decode(_beforeResults[1], (address[]));\n        (, address[] memory beforeRewardPerToken) = abi.decode(_beforeResults[2], (address[], address[]));\n\n        address afterPool = abi.decode(_afterResults[0], (address));\n        address[] memory afterRewardToken = abi.decode(_afterResults[1], (address[]));\n        (, address[] memory afterRewardPerToken) = abi.decode(_afterResults[2], (address[], address[]));\n\n        require(beforePool == afterPool, \"fields-test-failed\");\n        require(\n            beforeRewardToken.length == afterRewardToken.length &&\n                beforeRewardToken[0] == afterRewardToken[0] &&\n                beforeRewardPerToken[0] == afterRewardPerToken[0],\n            \"methods-test-failed\"\n        );\n    }\n}\n"
    },
    "vesper-pools/contracts/upgraders/VPoolUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract VPoolUpgrader is UpgraderBase {\n    constructor(address _multicall)\n        UpgraderBase(_multicall) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](4);\n        calls[0] = abi.encodeWithSignature(\"token()\");\n        calls[1] = abi.encodeWithSignature(\"poolAccountant()\");\n        calls[2] = abi.encodeWithSignature(\"pricePerShare()\");\n        calls[3] = abi.encodeWithSignature(\"tokensHere()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        address beforeToken = abi.decode(_beforeResults[0], (address));\n        address beforePoolAccountant = abi.decode(_beforeResults[1], (address));\n        uint256 beforePricePerShare = abi.decode(_beforeResults[2], (uint256));\n        uint256 beforeTokensHere = abi.decode(_beforeResults[3], (uint256));\n\n        address afterToken = abi.decode(_afterResults[0], (address));\n        address afterPoolAccountant = abi.decode(_afterResults[1], (address));\n        uint256 afterPricePerShare = abi.decode(_afterResults[2], (uint256));\n        uint256 afterTokensHere = abi.decode(_afterResults[3], (uint256));\n\n        require(beforeToken == afterToken && beforePoolAccountant == afterPoolAccountant, \"fields-test-failed\");\n        require(\n            beforePricePerShare == afterPricePerShare && beforeTokensHere == afterTokensHere,\n            \"methods-test-failed\"\n        );\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/CompoundXYStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/token/IToken.sol\";\nimport \"./CompoundXYCore.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\n\n/// @title This strategy will deposit collateral token in Compound and based on position it will borrow\n/// another token. Supply X borrow Y and keep borrowed amount here. It does handle rewards and handle\n/// wrap/unwrap of WETH as ETH is required to interact with Compound.\ncontract CompoundXYStrategy is CompoundXYCore {\n    using SafeERC20 for IERC20;\n\n    address public immutable rewardToken;\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address private constant CETH = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowCToken,\n        string memory _name\n    ) CompoundXYCore(_pool, _swapper, _comptroller, _receiptToken, _borrowCToken, _name) {\n        require(_rewardToken != address(0), \"rewardToken-address-is-zero\");\n        rewardToken = _rewardToken;\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        IERC20(rewardToken).safeApprove(address(swapper), _amount);\n    }\n\n    /// @dev If borrowToken WETH then wrap borrowed ETH to get WETH\n    function _borrowY(uint256 _amount) internal override {\n        if (_amount > 0) {\n            require(borrowCToken.borrow(_amount) == 0, \"borrow-from-compound-failed\");\n            if (borrowToken == WETH) {\n                TokenLike(WETH).deposit{value: address(this).balance}();\n            }\n            _afterBorrowY(_amount);\n        }\n    }\n\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual override {\n        address[] memory _markets = new address[](2);\n        _markets[0] = address(supplyCToken);\n        _markets[1] = address(borrowCToken);\n        comptroller.claimComp(address(this), _markets);\n        uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n        if (_rewardAmount > 0) {\n            _safeSwapExactInput(rewardToken, _toToken, _rewardAmount);\n        }\n    }\n\n    /// @dev Native Compound cETH doesn't has underlying method\n    function _getUnderlyingToken(address _cToken) internal view virtual override returns (address) {\n        if (_cToken == CETH) {\n            return WETH;\n        }\n        return CToken(_cToken).underlying();\n    }\n\n    /// @dev If borrowToken is WETH then unwrap WETH to get ETH and repay borrow using ETH.\n    function _repayY(uint256 _amount) internal override {\n        _beforeRepayY(_amount);\n        if (borrowToken == WETH) {\n            TokenLike(WETH).withdraw(_amount);\n            borrowCToken.repayBorrow{value: _amount}();\n        } else {\n            require(borrowCToken.repayBorrow(_amount) == 0, \"repay-to-compound-failed\");\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/aave/v2/AaveV2VesperXy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\";\nimport \"./AaveV2Xy.sol\";\n\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\ncontract AaveV2VesperXy is AaveV2Xy {\n    using SafeERC20 for IERC20;\n\n    // Destination Grow Pool for borrowed Token\n    IVesperPool public immutable vPool;\n    // VSP token address\n    address public immutable vsp;\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowToken,\n        address _vPool,\n        address _vspAddress,\n        string memory _name\n    ) AaveV2Xy(_pool, _swapper, _rewardToken, _receiptToken, _borrowToken, _name) {\n        require(_vspAddress != address(0), \"invalid-vsp-address\");\n        require(address(IVesperPool(_vPool).token()) == borrowToken, \"invalid-grow-pool\");\n        vPool = IVesperPool(_vPool);\n        vsp = _vspAddress;\n    }\n\n    /// @notice Claim VSP and convert to collateral token\n    function harvestVSP() external {\n        address _poolRewards = vPool.poolRewards();\n        if (_poolRewards != address(0)) {\n            IPoolRewards(_poolRewards).claimReward(address(this));\n        }\n        uint256 _vspAmount = IERC20(vsp).balanceOf(address(this));\n        if (_vspAmount > 0) {\n            _swapExactInput(vsp, address(collateralToken), _vspAmount);\n        }\n    }\n\n    /// @notice After borrowing Y, deposit to Vesper Pool\n    function _afterBorrowY(uint256 _amount) internal virtual override {\n        vPool.deposit(_amount);\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        IERC20(borrowToken).safeApprove(address(vPool), _amount);\n        IERC20(vsp).safeApprove(address(swapper), _amount);\n    }\n\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\n    function _beforeRepayY(uint256 _amount) internal virtual override {\n        _withdrawFromVesperPool(_amount);\n    }\n\n    /// @notice Borrowed Y balance deposited in Vesper Pool\n    function _getInvestedBorrowBalance() internal view virtual override returns (uint256) {\n        return\n            IERC20(borrowToken).balanceOf(address(this)) +\n            ((vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18);\n    }\n\n    /// @notice Swap excess borrow for more collateral when underlying VSP pool is making profits\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual override {\n        if (_excessBorrow > 0) {\n            _withdrawFromVesperPool(_excessBorrow);\n            uint256 _borrowedHere = IERC20(borrowToken).balanceOf(address(this));\n            if (_borrowedHere > 0) {\n                _safeSwapExactInput(borrowToken, address(collateralToken), _borrowedHere);\n            }\n        }\n    }\n\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\n    function _withdrawFromVesperPool(uint256 _amount) internal {\n        if (_amount > 0) {\n            uint256 _pricePerShare = vPool.pricePerShare();\n            uint256 _shares = (_amount * 1e18) / _pricePerShare;\n            _shares = _amount > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\n            vPool.withdraw(Math.min(_shares, vPool.balanceOf(address(this))));\n        }\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IPoolRewards {\n    /// Emitted after reward added\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\n    /// Emitted whenever any user claim rewards\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\n    /// Emitted after adding new rewards token into rewardTokens array\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\n\n    function claimReward(address) external;\n\n    function notifyRewardAmount(\n        address _rewardToken,\n        uint256 _rewardAmount,\n        uint256 _rewardDuration\n    ) external;\n\n    function notifyRewardAmount(\n        address[] memory _rewardTokens,\n        uint256[] memory _rewardAmounts,\n        uint256[] memory _rewardDurations\n    ) external;\n\n    function updateReward(address) external;\n\n    function claimable(address _account)\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\n\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\n\n    function rewardForDuration()\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\n\n    function rewardPerToken()\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\n}\n"
    },
    "vesper-pools/contracts/interfaces/vesper/IVesperPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./IGovernable.sol\";\nimport \"./IPausable.sol\";\n\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\n\n    function deposit(uint256 _share) external;\n\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\n\n    function excessDebt(address _strategy) external view returns (uint256);\n\n    function poolAccountant() external view returns (address);\n\n    function poolRewards() external view returns (address);\n\n    function reportEarning(\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) external;\n\n    function reportLoss(uint256 _loss) external;\n\n    function sweepERC20(address _fromToken) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function keepers() external view returns (address[] memory);\n\n    function isKeeper(address _address) external view returns (bool);\n\n    function maintainers() external view returns (address[] memory);\n\n    function isMaintainer(address _address) external view returns (bool);\n\n    function pricePerShare() external view returns (uint256);\n\n    function strategy(address _strategy)\n        external\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee, // Obsolete\n            uint256 _debtRate, // Obsolete\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio,\n            uint256 _externalDepositFee\n        );\n\n    function token() external view returns (IERC20);\n\n    function tokensHere() external view returns (uint256);\n\n    function totalDebtOf(address _strategy) external view returns (uint256);\n\n    function totalValue() external view returns (uint256);\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "vesper-pools/contracts/interfaces/vesper/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice Governable interface\n */\ninterface IGovernable {\n    function governor() external view returns (address _governor);\n\n    function transferGovernorship(address _proposedGovernor) external;\n}\n"
    },
    "vesper-pools/contracts/interfaces/vesper/IPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice Pausable interface\n */\ninterface IPausable {\n    function paused() external view returns (bool);\n\n    function stopEverything() external view returns (bool);\n\n    function pause() external;\n\n    function unpause() external;\n\n    function shutdown() external;\n\n    function open() external;\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "vesper-pools/contracts/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @title Errors library\nlibrary Errors {\n    string public constant INVALID_COLLATERAL_AMOUNT = \"1\"; // Collateral must be greater than 0 or > defined limit\n    string public constant INVALID_SHARE_AMOUNT = \"2\"; // Share must be greater than 0\n    string public constant INVALID_INPUT_LENGTH = \"3\"; // Input array length must be greater than 0\n    string public constant INPUT_LENGTH_MISMATCH = \"4\"; // Input array length mismatch with another array length\n    string public constant NOT_WHITELISTED_ADDRESS = \"5\"; // Caller is not whitelisted to withdraw without fee\n    string public constant MULTI_TRANSFER_FAILED = \"6\"; // Multi transfer of tokens has failed\n    string public constant FEE_COLLECTOR_NOT_SET = \"7\"; // Fee Collector is not set\n    string public constant NOT_ALLOWED_TO_SWEEP = \"8\"; // Token is not allowed to sweep\n    string public constant INSUFFICIENT_BALANCE = \"9\"; // Insufficient balance to performs operations to follow\n    string public constant INPUT_ADDRESS_IS_ZERO = \"10\"; // Input address is zero\n    string public constant FEE_LIMIT_REACHED = \"11\"; // Fee must be less than MAX_BPS\n    string public constant ALREADY_INITIALIZED = \"12\"; // Data structure, contract, or logic already initialized and can not be called again\n    string public constant ADD_IN_LIST_FAILED = \"13\"; // Cannot add address in address list\n    string public constant REMOVE_FROM_LIST_FAILED = \"14\"; // Cannot remove address from address list\n    string public constant STRATEGY_IS_ACTIVE = \"15\"; // Strategy is already active, an inactive strategy is required\n    string public constant STRATEGY_IS_NOT_ACTIVE = \"16\"; // Strategy is not active, an active strategy is required\n    string public constant INVALID_STRATEGY = \"17\"; // Given strategy is not a strategy of this pool\n    string public constant DEBT_RATIO_LIMIT_REACHED = \"18\"; // Debt ratio limit reached. It must be less than MAX_BPS\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \"19\"; // Strategy total debt must be 0\n    string public constant LOSS_TOO_HIGH = \"20\"; // Strategy reported loss must be less than current debt\n    string public constant INVALID_MAX_BORROW_LIMIT = \"21\"; // Max borrow limit is beyond range.\n    string public constant MAX_LIMIT_LESS_THAN_MIN = \"22\"; // Max limit should be greater than min limit.\n    string public constant INVALID_SLIPPAGE = \"23\"; // Slippage should be less than MAX_BPS\n    string public constant WRONG_RECEIPT_TOKEN = \"24\"; // Wrong receipt token address\n    string public constant AAVE_FLASH_LOAN_NOT_ACTIVE = \"25\"; // aave flash loan is not active\n    string public constant DYDX_FLASH_LOAN_NOT_ACTIVE = \"26\"; // DYDX flash loan is not active\n    string public constant INVALID_FLASH_LOAN = \"27\"; // invalid-flash-loan\n    string public constant INVALID_INITIATOR = \"28\"; // \"invalid-initiator\"\n    string public constant INCORRECT_WITHDRAW_AMOUNT = \"29\"; // withdrawn amount is not correct\n    string public constant NO_MARKET_ID_FOUND = \"30\"; // dydx flash loan no marketId found for token\n    string public constant SAME_AS_PREVIOUS = \"31\"; // Input should not be same as previous value.\n    string public constant INVALID_INPUT = \"32\"; // Generic invalid input error code\n}\n"
    },
    "vesper-pools/contracts/pool/PoolAccountantStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nabstract contract PoolAccountantStorageV1 {\n    address public pool; // Address of Vesper pool\n    uint256 public totalDebtRatio; // Total debt ratio. This will keep some buffer amount in pool\n    uint256 public totalDebt; // Total debt. Sum of debt of all strategies.\n    address[] public strategies; // Array of strategies\n    address[] public withdrawQueue; // Array of strategy in the order in which funds should be withdrawn.\n}\n\nabstract contract PoolAccountantStorageV2 is PoolAccountantStorageV1 {\n    struct StrategyConfig {\n        bool active;\n        uint256 interestFee; // Obsolete in favor of universal fee\n        uint256 debtRate; // Obsolete\n        uint256 lastRebalance; // Timestamp of last rebalance. It is used in universal fee calculation\n        uint256 totalDebt; // Total outstanding debt strategy has\n        uint256 totalLoss; // Total loss that strategy has realized\n        uint256 totalProfit; // Total gain that strategy has realized\n        uint256 debtRatio; // % of asset allocation\n        uint256 externalDepositFee; // External deposit fee of strategy\n    }\n\n    mapping(address => StrategyConfig) public strategy; // Strategy address to its configuration\n\n    uint256 public externalDepositFee; // External deposit fee of Vesper pool\n}\n"
    },
    "vesper-pools/contracts/pool/PoolERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./PoolERC20.sol\";\n\n///@title Pool ERC20 Permit to use with proxy. Inspired by OpenZeppelin ERC20Permit\n// solhint-disable var-name-mixedcase\nabstract contract PoolERC20Permit is PoolERC20, IERC20Permit {\n    bytes32 private constant _EIP712_VERSION = keccak256(bytes(\"1\"));\n    bytes32 private constant _EIP712_DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    bytes32 private _CACHED_DOMAIN_SEPARATOR;\n    bytes32 private _HASHED_NAME;\n    uint256 private _CACHED_CHAIN_ID;\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    mapping(address => uint256) public override nonces;\n\n    /**\n     * @dev Initializes the domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC20Permit_init(string memory name_) internal {\n        _HASHED_NAME = keccak256(bytes(name_));\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_EIP712_DOMAIN_TYPEHASH, _HASHED_NAME, _EIP712_VERSION);\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n        uint256 _currentNonce = nonces[owner];\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _currentNonce, deadline));\n        bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n        nonces[owner] = _currentNonce + 1;\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() private view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_EIP712_DOMAIN_TYPEHASH, _HASHED_NAME, _EIP712_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 name,\n        bytes32 version\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, name, version, block.chainid, address(this)));\n    }\n}\n"
    },
    "vesper-pools/contracts/pool/PoolStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\n\nabstract contract PoolStorageV1 is IVesperPool {\n    ///@notice Collateral token address\n    IERC20 public token;\n    /// @notice PoolAccountant address\n    address public poolAccountant;\n    /// @notice PoolRewards contract address\n    address public poolRewards;\n    address private feeWhitelistObsolete; // Obsolete in favor of AddressSet of feeWhitelist\n    address private keepersObsolete; // Obsolete in favor of AddressSet of keepers\n    address private maintainersObsolete; // Obsolete in favor of AddressSet of maintainers\n    address private feeCollectorObsolete; // Fee collector address. Obsolete as there is no fee to collect\n    uint256 private withdrawFeeObsolete; // Withdraw fee for this pool. Obsolete in favor of universal fee\n    uint256 private decimalConversionFactorObsolete; // It can be used in converting value to/from 18 decimals\n    bool internal withdrawInETH; // This flag will be used by VETH pool as switch to withdraw ETH or WETH\n}\n\nabstract contract PoolStorageV2 is PoolStorageV1 {\n    EnumerableSet.AddressSet private _feeWhitelistObsolete; // Obsolete in favor of universal fee\n    EnumerableSet.AddressSet internal _keepers; // List of keeper addresses\n    EnumerableSet.AddressSet internal _maintainers; // List of maintainer addresses\n}\n\nabstract contract PoolStorageV3 is PoolStorageV2 {\n    /// @notice Universal fee of this pool. Default to 2%\n    uint256 public universalFee = 200;\n    /// @notice Maximum percentage of profit that can be counted as universal fee. Default to 50%\n    uint256 public maxProfitAsFee = 5_000;\n    /// @notice Minimum deposit limit.\n    /// @dev Do not set it to 0 as deposit() is checking if amount >= limit\n    uint256 public minDepositLimit = 1;\n}\n"
    },
    "vesper-pools/contracts/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"./dependencies/openzeppelin/contracts/utils/Context.sol\";\nimport \"./interfaces/vesper/IGovernable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (governor) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the governor account will be the one that deploys the contract. This\n * can later be changed with {transferGovernorship}.\n *\n */\nabstract contract Governable is IGovernable, Context, Initializable {\n    address public governor;\n    address private proposedGovernor;\n\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial governor.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev If inheriting child is using proxy then child contract can use\n     * __Governable_init() function to initialization this contract\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __Governable_init() internal initializer {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the governor.\n     */\n    modifier onlyGovernor() {\n        require(governor == _msgSender(), \"not-governor\");\n        _;\n    }\n\n    /**\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\n     * Can only be called by the current owner.\n     */\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\n        require(_proposedGovernor != address(0), \"proposed-governor-is-zero\");\n        proposedGovernor = _proposedGovernor;\n    }\n\n    /**\n     * @dev Allows new governor to accept governorship of the contract.\n     */\n    function acceptGovernorship() external {\n        require(proposedGovernor == _msgSender(), \"not-the-proposed-governor\");\n        emit UpdatedGovernor(governor, proposedGovernor);\n        governor = proposedGovernor;\n        proposedGovernor = address(0);\n    }\n}\n"
    },
    "vesper-pools/contracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/contracts/utils/Context.sol\";\nimport \"./interfaces/vesper/IPausable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n */\nabstract contract Pausable is IPausable, Context {\n    event Paused(address account);\n    event Shutdown(address account);\n    event Unpaused(address account);\n    event Open(address account);\n\n    bool public paused;\n    bool public stopEverything;\n\n    modifier whenNotPaused() {\n        require(!paused, \"paused\");\n        _;\n    }\n    modifier whenPaused() {\n        require(paused, \"not-paused\");\n        _;\n    }\n\n    modifier whenNotShutdown() {\n        require(!stopEverything, \"shutdown\");\n        _;\n    }\n\n    modifier whenShutdown() {\n        require(stopEverything, \"not-shutdown\");\n        _;\n    }\n\n    /// @dev Pause contract operations, if contract is not paused.\n    function _pause() internal virtual whenNotPaused {\n        paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\n    function _unpause() internal virtual whenPaused whenNotShutdown {\n        paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /// @dev Shutdown contract operations, if not already shutdown.\n    function _shutdown() internal virtual whenNotShutdown {\n        stopEverything = true;\n        paused = true;\n        emit Shutdown(_msgSender());\n    }\n\n    /// @dev Open contract operations, if contract is in shutdown state\n    function _open() internal virtual whenShutdown {\n        stopEverything = false;\n        emit Open(_msgSender());\n    }\n}\n"
    },
    "vesper-pools/contracts/interfaces/vesper/IPoolAccountant.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IPoolAccountant {\n    function decreaseDebt(address _strategy, uint256 _decreaseBy) external;\n\n    function migrateStrategy(address _old, address _new) external;\n\n    function reportEarning(\n        address _strategy,\n        uint256 _profit,\n        uint256 _loss,\n        uint256 _payback\n    ) external returns (uint256 _actualPayback, uint256 _creditLine);\n\n    function reportLoss(address _strategy, uint256 _loss) external;\n\n    function availableCreditLimit(address _strategy) external view returns (uint256);\n\n    function excessDebt(address _strategy) external view returns (uint256);\n\n    function getStrategies() external view returns (address[] memory);\n\n    function getWithdrawQueue() external view returns (address[] memory);\n\n    function strategy(address _strategy)\n        external\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee, // Obsolete\n            uint256 _debtRate, // Obsolete\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio,\n            uint256 _externalDepositFee\n        );\n\n    function externalDepositFee() external view returns (uint256);\n\n    function totalDebt() external view returns (uint256);\n\n    function totalDebtOf(address _strategy) external view returns (uint256);\n\n    function totalDebtRatio() external view returns (uint256);\n}\n"
    },
    "vesper-commons/contracts/interfaces/vesper/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IStrategy {\n    function rebalance()\n        external\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        );\n\n    function sweepERC20(address _fromToken) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function feeCollector() external view returns (address);\n\n    function isReservedToken(address _token) external view returns (bool);\n\n    function keepers() external view returns (address[] memory);\n\n    function migrate(address _newStrategy) external;\n\n    function token() external view returns (address);\n\n    function pool() external view returns (address);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function VERSION() external view returns (string memory);\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n        } else if (signature.length == 64) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let vs := mload(add(signature, 0x40))\n                r := mload(add(signature, 0x20))\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n                v := add(shr(255, vs), 27)\n            }\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "vesper-pools/contracts/pool/PoolERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/Context.sol\";\n\n// solhint-disable reason-string, no-empty-blocks\n///@title Pool ERC20 to use with proxy. Inspired by OpenZeppelin ERC20\nabstract contract PoolERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol} for proxy\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC20_init(string memory name_, string memory symbol_) internal {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the decimals of the token. default to 18\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev Returns total supply of the token.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev  Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "vesper-pools/contracts/interfaces/token/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface TokenLike is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "vesper-pools/contracts/upgraders/UpgraderBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport \"../dependencies/openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\nimport \"../interfaces/multicall/IMulticall.sol\";\n\nabstract contract UpgraderBase is ProxyAdmin {\n    address public multicall;\n\n    constructor(address _multicall) {\n        multicall = _multicall;\n    }\n\n    function safeUpgrade(address _proxy, address _implementation) public onlyOwner {\n        bytes[] memory calls = _calls();\n        bytes[] memory beforeResults = _aggregate(_proxy, calls);\n\n        TransparentUpgradeableProxy(payable(_proxy)).upgradeTo(_implementation);\n\n        bytes[] memory afterResults = _aggregate(_proxy, calls);\n        _checkResults(beforeResults, afterResults);\n    }\n\n    function safeUpgradeToAndCall(\n        address _proxy,\n        address _implementation,\n        bytes memory _data\n    ) public payable onlyOwner {\n        bytes[] memory calls = _calls();\n        bytes[] memory beforeResults = _aggregate(_proxy, calls);\n\n        TransparentUpgradeableProxy(payable(_proxy)).upgradeToAndCall{value: msg.value}(_implementation, _data);\n\n        bytes[] memory afterResults = _aggregate(_proxy, calls);\n        _checkResults(beforeResults, afterResults);\n    }\n\n    function _aggregate(address _proxy, bytes[] memory _callDatas) internal returns (bytes[] memory results) {\n        IMulticall.Call[] memory calls = new IMulticall.Call[](_callDatas.length);\n        for (uint256 i = 0; i < _callDatas.length; i++) {\n            calls[i].target = _proxy;\n            calls[i].callData = _callDatas[i];\n        }\n        (, results) = IMulticall(multicall).aggregate(calls);\n    }\n\n    function _calls() internal virtual returns (bytes[] memory calls);\n\n    function _checkResults(bytes[] memory _beforeResult, bytes[] memory _afterResults) internal virtual;\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "vesper-pools/contracts/interfaces/multicall/IMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IMulticall {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    function aggregate(Call[] memory calls) external returns (uint256 blockNumber, bytes[] memory returnData);\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\n                    \"upgradeTo(address)\",\n                    oldImplementation\n                )\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _setImplementation(newImplementation);\n            emit Upgraded(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(\n            Address.isContract(newBeacon),\n            \"ERC1967: new beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/CompoundXYCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../Strategy.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\n\n// solhint-disable no-empty-blocks\n\n/// @title This strategy will deposit collateral token in Compound and based on position it will\n/// borrow another token. Supply X borrow Y and keep borrowed amount here.\n/// It does not handle rewards and ETH as collateral\nabstract contract CompoundXYCore is Strategy {\n    using SafeERC20 for IERC20;\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.0.0\";\n\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint32 internal constant TWAP_PERIOD = 3_600;\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\n    address public borrowToken;\n\n    Comptroller public comptroller;\n\n    CToken public immutable supplyCToken;\n    CToken public immutable borrowCToken;\n\n    event UpdatedBorrowLimit(\n        uint256 previousMinBorrowLimit,\n        uint256 newMinBorrowLimit,\n        uint256 previousMaxBorrowLimit,\n        uint256 newMaxBorrowLimit\n    );\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _comptroller,\n        address _receiptToken,\n        address _borrowCToken,\n        string memory _name\n    ) Strategy(_pool, _swapper, _receiptToken) {\n        require(_receiptToken != address(0), \"cToken-address-is-zero\");\n        require(_comptroller != address(0), \"comptroller-address-is-zero\");\n\n        NAME = _name;\n\n        comptroller = Comptroller(_comptroller);\n        supplyCToken = CToken(_receiptToken);\n        borrowCToken = CToken(_borrowCToken);\n        borrowToken = _getUnderlyingToken(_borrowCToken);\n\n        address[] memory _cTokens = new address[](2);\n        _cTokens[0] = _receiptToken;\n        _cTokens[1] = _borrowCToken;\n        comptroller.enterMarkets(_cTokens);\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == address(supplyCToken) || _token == address(collateralToken) || _token == borrowToken;\n    }\n\n    /// @notice Returns total collateral locked in the strategy\n    function tvl() external view override returns (uint256) {\n        uint256 _collateralInCompound =\n            (supplyCToken.balanceOf(address(this)) * supplyCToken.exchangeRateStored()) / 1e18;\n        return _collateralInCompound + collateralToken.balanceOf(address(this));\n    }\n\n    /// @dev Hook that executes after collateral borrow.\n    function _afterBorrowY(uint256 _amount) internal virtual {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        collateralToken.safeApprove(address(supplyCToken), _amount);\n        collateralToken.safeApprove(address(swapper), _amount);\n        IERC20(borrowToken).safeApprove(address(borrowCToken), _amount);\n        IERC20(borrowToken).safeApprove(address(swapper), _amount);\n    }\n\n    /**\n     * @notice Claim rewardToken and transfer to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal override {\n        require(IStrategy(_newStrategy).token() == address(supplyCToken), \"wrong-receipt-token\");\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), false);\n    }\n\n    /// @dev Hook that executes before repaying borrowed collateral\n    function _beforeRepayY(uint256 _amount) internal virtual {}\n\n    /// @dev Borrow Y from Compound. _afterBorrowY hook can be used to do anything with borrowed amount.\n    /// @dev Override to handle ETH\n    function _borrowY(uint256 _amount) internal virtual {\n        if (_amount > 0) {\n            require(borrowCToken.borrow(_amount) == 0, \"borrow-failed\");\n            _afterBorrowY(_amount);\n        }\n    }\n\n    /**\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\n     * @param _depositAmount deposit amount\n     * @param _withdrawAmount withdraw amount\n     * @return _borrowAmount borrow more amount\n     * @return _repayAmount repay amount to keep ltv within limit\n     */\n    function _calculateBorrowPosition(uint256 _depositAmount, uint256 _withdrawAmount)\n        internal\n        returns (uint256 _borrowAmount, uint256 _repayAmount)\n    {\n        require(_depositAmount == 0 || _withdrawAmount == 0, \"all-input-gt-zero\");\n        uint256 _borrowed = borrowCToken.borrowBalanceCurrent(address(this));\n        // If maximum borrow limit set to 0 then repay borrow\n        if (maxBorrowLimit == 0) {\n            return (0, _borrowed);\n        }\n\n        uint256 _collateral = supplyCToken.balanceOfUnderlying(address(this));\n        uint256 _collateralFactor = _getCollateralFactor(address(supplyCToken));\n        // In case of withdraw, _amount can be greater than _supply\n        uint256 _hypotheticalCollateral;\n        if (_depositAmount > 0) {\n            _hypotheticalCollateral = _collateral + _depositAmount;\n        } else if (_collateral > _withdrawAmount) {\n            _hypotheticalCollateral = _collateral - _withdrawAmount;\n        }\n\n        // Calculate max borrow based on collateral factor\n        uint256 _maxCollateralForBorrow = (_hypotheticalCollateral * _collateralFactor) / 1e18;\n        Oracle _oracle = Oracle(comptroller.oracle());\n\n        // Compound \"UnderlyingPrice\" decimal = (30 + 6 - tokenDecimal)\n        // Rari \"UnderlyingPrice\" decimal = (30 + 6 - tokenDecimal)\n        // Iron \"UnderlyingPrice\" decimal = (18 + 8 - tokenDecimal)\n        uint256 _collateralTokenPrice = _oracle.getUnderlyingPrice(address(supplyCToken));\n        uint256 _borrowTokenPrice = _oracle.getUnderlyingPrice(address(borrowCToken));\n        // Max borrow limit in borrow token\n        uint256 _maxBorrowPossible = (_maxCollateralForBorrow * _collateralTokenPrice) / _borrowTokenPrice;\n        // If maxBorrow is zero, we should repay total amount of borrow\n        if (_maxBorrowPossible == 0) {\n            return (0, _borrowed);\n        }\n\n        // Safe buffer to avoid liquidation due to price variations.\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\n\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\n\n        // If current borrow is greater than max borrow, then repay to achieve safe position else borrow more.\n        if (_borrowed > _borrowUpperBound) {\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _repayAmount = _borrowed - _borrowLowerBound;\n        } else if (_borrowLowerBound > _borrowed) {\n            _borrowAmount = _borrowLowerBound - _borrowed;\n        }\n    }\n\n    function _claimRewardsAndConvertTo(address _toToken) internal virtual;\n\n    /// @dev Deposit collateral in Compound and adjust borrow position\n    function _deposit() internal {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance > 0) {\n            (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\n            if (_repayAmount > 0) {\n                // Repay to maintain safe position\n                _repay(_repayAmount, false);\n                _mintX(collateralToken.balanceOf(address(this)));\n            } else {\n                // Happy path, mint more borrow more\n                _mintX(_collateralBalance);\n                _borrowY(_borrowAmount);\n            }\n        }\n    }\n\n    /// @dev Get the borrow balance strategy is holding. Override to handle vToken balance.\n    function _getBorrowBalance() internal view virtual returns (uint256) {\n        return IERC20(borrowToken).balanceOf(address(this));\n    }\n\n    /// @dev TraderJoe Compound fork has different markets API so allow this method to override.\n    function _getCollateralFactor(address _cToken) internal view virtual returns (uint256 _collateralFactor) {\n        (, _collateralFactor, ) = comptroller.markets(_cToken);\n    }\n\n    /// @dev Get underlying token. Compound handle ETH differently hence allow this method to override\n    function _getUnderlyingToken(address _cToken) internal view virtual returns (address) {\n        return CToken(_cToken).underlying();\n    }\n\n    /// @dev Deposit collateral aka X in Compound. Override to handle ETH\n    function _mintX(uint256 _amount) internal virtual {\n        if (_amount > 0) {\n            require(supplyCToken.mint(_amount) == 0, \"supply-failed\");\n        }\n    }\n\n    function _rebalance()\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n        // Claim any reward we have.\n        _claimRewardsAndConvertTo(address(collateralToken));\n        uint256 _borrow = borrowCToken.borrowBalanceCurrent(address(this));\n        uint256 _borrowBalanceHere = _getBorrowBalance();\n        // _borrow increases every block. Convert collateral to borrowToken.\n        if (_borrow > _borrowBalanceHere) {\n            _swapToBorrowToken(_borrow - _borrowBalanceHere);\n        } else {\n            // When _borrowBalanceHere exceeds _borrow balance from Compound\n            // Customize this hook to handle the excess borrowToken profit\n            _rebalanceBorrow(_borrowBalanceHere - _borrow);\n        }\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _collateralInCompound = supplyCToken.balanceOfUnderlying(address(this));\n        uint256 _totalCollateral = _collateralInCompound + _collateralHere;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_collateralHere < _profitAndExcessDebt) {\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _collateralInCompound);\n            if (_totalAmountToWithdraw > 0) {\n                _withdrawHere(_totalAmountToWithdraw);\n                _collateralHere = collateralToken.balanceOf(address(this));\n            }\n        }\n\n        if (_excessDebt > 0) {\n            _payback = Math.min(_collateralHere, _excessDebt);\n        }\n\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _deposit();\n    }\n\n    /// @dev Hook to handle profit scenario i.e. actual borrowed balance > Compound borrow account.\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual {}\n\n    /// @dev Withdraw collateral aka X from Compound. Override to handle ETH\n    function _redeemX(uint256 _amount) internal virtual {\n        require(supplyCToken.redeemUnderlying(_amount) == 0, \"withdraw-failed\");\n    }\n\n    /**\n     * @dev Repay borrow amount\n     * @dev Claim rewardToken and convert to collateral. Swap collateral to borrowToken as needed.\n     * @param _repayAmount BorrowToken amount that we should repay to maintain safe position.\n     * @param _shouldClaimComp Flag indicating should we claim rewardToken and convert to collateral or not.\n     */\n    function _repay(uint256 _repayAmount, bool _shouldClaimComp) internal {\n        if (_repayAmount > 0) {\n            uint256 _borrowBalanceHere = _getBorrowBalance();\n            // Liability is more than what we have.\n            // To repay loan - convert all rewards to collateral, if asked, and redeem collateral(if needed).\n            // This scenario is rare and if system works okay it will/might happen during final repay only.\n            if (_repayAmount > _borrowBalanceHere) {\n                if (_shouldClaimComp) {\n                    // Claim rewardToken and convert those to collateral.\n                    _claimRewardsAndConvertTo(address(collateralToken));\n                }\n\n                uint256 _currentBorrow = borrowCToken.borrowBalanceCurrent(address(this));\n                // For example this is final repay and 100 blocks has passed since last withdraw/rebalance,\n                // _currentBorrow is increasing due to interest. Now if _repayAmount > _borrowBalanceHere is true\n                // _currentBorrow > _borrowBalanceHere is also true.\n                // To maintain safe position we always try to keep _currentBorrow = _borrowBalanceHere\n\n                // Swap collateral to borrowToken to repay borrow and also maintain safe position\n                // Here borrowToken amount needed is (_currentBorrow - _borrowBalanceHere)\n                _swapToBorrowToken(_currentBorrow - _borrowBalanceHere);\n            }\n            _repayY(_repayAmount);\n        }\n    }\n\n    /// @dev Repay Y to Compound. _beforeRepayY hook can be used for pre-repay actions.\n    /// @dev Override this to handle ETH\n    function _repayY(uint256 _amount) internal virtual {\n        _beforeRepayY(_amount);\n        require(borrowCToken.repayBorrow(_amount) == 0, \"repay-failed\");\n    }\n\n    /**\n     * @dev Swap given token to borrowToken\n     * @param _shortOnBorrow Expected output of this swap\n     */\n    function _swapToBorrowToken(uint256 _shortOnBorrow) internal {\n        // Looking for _amountIn using fixed output amount\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, _shortOnBorrow);\n        if (_amountIn > 0) {\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\n            // If we do not have enough _from token to get expected output, either get\n            // some _from token or adjust expected output.\n            if (_amountIn > _collateralHere) {\n                // Redeem some collateral, so that we have enough collateral to get expected output\n                _redeemX(_amountIn - _collateralHere);\n            }\n            swapper.swapExactOutput(address(collateralToken), borrowToken, _shortOnBorrow, _amountIn, address(this));\n        }\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _amount) internal override {\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, _amount);\n        _repay(_repayAmount, true);\n        uint256 _supply = supplyCToken.balanceOfUnderlying(address(this));\n        _redeemX(_supply > _amount ? _amount : _supply);\n    }\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n    /**\n     * @notice Recover extra borrow tokens from strategy\n     * @dev If we get liquidation in Compound, we will have borrowToken sitting in strategy.\n     * This function allows to recover idle borrow token amount.\n     * @param _amountToRecover Amount of borrow token we want to recover in 1 call.\n     *      Set it 0 to recover all available borrow tokens\n     */\n    function recoverBorrowToken(uint256 _amountToRecover) external onlyKeeper {\n        uint256 _borrowBalanceHere = IERC20(borrowToken).balanceOf(address(this));\n        uint256 _borrowInCompound = borrowCToken.borrowBalanceStored(address(this));\n\n        if (_borrowBalanceHere > _borrowInCompound) {\n            uint256 _extraBorrowBalance = _borrowBalanceHere - _borrowInCompound;\n            uint256 _recoveryAmount =\n                (_amountToRecover > 0 && _extraBorrowBalance > _amountToRecover)\n                    ? _amountToRecover\n                    : _extraBorrowBalance;\n            // Do swap and transfer\n            uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n            _safeSwapExactInput(borrowToken, address(collateralToken), _recoveryAmount);\n            collateralToken.transfer(pool, collateralToken.balanceOf(address(this)) - _collateralBefore);\n        }\n    }\n\n    /**\n     * @notice Repay all borrow amount and set min borrow limit to 0.\n     * @dev This action usually done when loss is detected in strategy.\n     * @dev 0 borrow limit make sure that any future rebalance do not borrow again.\n     */\n    function repayAll() external onlyKeeper {\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), true);\n        minBorrowLimit = 0;\n        maxBorrowLimit = 0;\n    }\n\n    /**\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\n     * @dev It is possible to set 0 as _minBorrowLimit to not borrow anything\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\n     */\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\n        require(_maxBorrowLimit < MAX_BPS, \"invalid-max-borrow-limit\");\n        // set _maxBorrowLimit and _minBorrowLimit to zero to disable borrow;\n        require(\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\n            \"max-should-be-higher-than-min\"\n        );\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\n        // To avoid liquidation due to price variations maxBorrowLimit is a collateral factor that is less than actual collateral factor of protocol\n        minBorrowLimit = _minBorrowLimit;\n        maxBorrowLimit = _maxBorrowLimit;\n    }\n}\n"
    },
    "vesper-strategies/contracts/interfaces/compound/ICompound.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface CToken {\n    function accrueInterest() external returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function getAccountSnapshot(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function mint() external payable; // For ETH\n\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function repayBorrow() external payable; // For ETH\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\n\n    function transfer(address user, uint256 amount) external returns (bool);\n\n    function getCash() external view returns (uint256);\n\n    function transferFrom(\n        address owner,\n        address user,\n        uint256 amount\n    ) external returns (bool);\n\n    function underlying() external view returns (address);\n\n    function comptroller() external view returns (address);\n}\n\ninterface Comptroller {\n    function claimComp(address holder, address[] memory) external;\n\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\n\n    function exitMarket(address cToken) external returns (uint256);\n\n    function compAccrued(address holder) external view returns (uint256);\n\n    function getAccountLiquidity(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function markets(address market)\n        external\n        view\n        returns (\n            bool isListed,\n            uint256 collateralFactorMantissa,\n            bool isCompted\n        );\n\n    function oracle() external view returns (address);\n}\n\ninterface Oracle {\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\n\n    function price(string memory symbol) external view returns (uint256);\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/Strategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\";\nimport \"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\";\nimport \"../interfaces/swapper/IRoutedSwapper.sol\";\n\nabstract contract Strategy is IStrategy, Context {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    IERC20 public immutable collateralToken;\n    address public receiptToken;\n    address public immutable override pool;\n    address public override feeCollector;\n    IRoutedSwapper public swapper;\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\n\n    EnumerableSet.AddressSet private _keepers;\n\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _receiptToken\n    ) {\n        require(_pool != address(0), \"pool-address-is-zero\");\n        require(_swapper != address(0), \"swapper-address-is-zero\");\n        swapper = IRoutedSwapper(_swapper);\n        pool = _pool;\n        collateralToken = IVesperPool(_pool).token();\n        receiptToken = _receiptToken;\n        require(_keepers.add(_msgSender()), \"add-keeper-failed\");\n    }\n\n    modifier onlyGovernor() {\n        require(_msgSender() == IVesperPool(pool).governor(), \"caller-is-not-the-governor\");\n        _;\n    }\n\n    modifier onlyKeeper() {\n        require(_keepers.contains(_msgSender()), \"caller-is-not-a-keeper\");\n        _;\n    }\n\n    modifier onlyPool() {\n        require(_msgSender() == pool, \"caller-is-not-vesper-pool\");\n        _;\n    }\n\n    /**\n     * @notice Add given address in keepers list.\n     * @param _keeperAddress keeper address to add.\n     */\n    function addKeeper(address _keeperAddress) external onlyGovernor {\n        require(_keepers.add(_keeperAddress), \"add-keeper-failed\");\n    }\n\n    /// @dev Approve all required tokens\n    function approveToken() external onlyKeeper {\n        _approveToken(0);\n        _approveToken(MAX_UINT_VALUE);\n    }\n\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view virtual override returns (bool);\n\n    /// @notice Return list of keepers\n    function keepers() external view override returns (address[] memory) {\n        return _keepers.values();\n    }\n\n    /**\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\n     * @param _newStrategy Address of new strategy\n     */\n    function migrate(address _newStrategy) external virtual override onlyPool {\n        require(_newStrategy != address(0), \"new-strategy-address-is-zero\");\n        require(IStrategy(_newStrategy).pool() == pool, \"not-valid-new-strategy\");\n        _beforeMigration(_newStrategy);\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\n     *  withdraw fund for payback, if any, and submit this report to pool.\n     * @return _profit Realized profit in collateral.\n     * @return _loss Realized loss, if any, in collateral.\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\n     */\n    function rebalance()\n        external\n        onlyKeeper\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        return _rebalance();\n    }\n\n    /**\n     * @notice Remove given address from keepers list.\n     * @param _keeperAddress keeper address to remove.\n     */\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\n        require(_keepers.remove(_keeperAddress), \"remove-keeper-failed\");\n    }\n\n    /**\n     * @notice sweep given token to feeCollector of strategy\n     * @param _fromToken token address to sweep\n     */\n    function sweepERC20(address _fromToken) external override onlyKeeper {\n        require(feeCollector != address(0), \"fee-collector-not-set\");\n        require(_fromToken != address(collateralToken), \"not-allowed-to-sweep-collateral\");\n        require(!isReservedToken(_fromToken), \"not-allowed-to-sweep\");\n        if (_fromToken == ETH) {\n            Address.sendValue(payable(feeCollector), address(this).balance);\n        } else {\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\n        }\n    }\n\n    /// @notice Returns address of token correspond to collateral token\n    function token() external view override returns (address) {\n        return receiptToken;\n    }\n\n    /// @notice Returns total collateral locked in the strategy\n    function tvl() external view virtual returns (uint256);\n\n    /**\n     * @notice Update fee collector\n     * @param _feeCollector fee collector address\n     */\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\n        require(_feeCollector != address(0), \"fee-collector-address-is-zero\");\n        require(_feeCollector != feeCollector, \"fee-collector-is-same\");\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\n        feeCollector = _feeCollector;\n    }\n\n    /**\n     * @notice Update swapper\n     * @param _swapper swapper address\n     */\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\n        require(address(_swapper) != address(0), \"swapper-address-is-zero\");\n        require(_swapper != swapper, \"swapper-is-same\");\n        emit UpdatedSwapper(swapper, _swapper);\n        swapper = _swapper;\n    }\n\n    /**\n     * @notice Withdraw collateral token from end protocol.\n     * @param _amount Amount of collateral token\n     */\n    function withdraw(uint256 _amount) external override onlyPool {\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        if (_collateralHere >= _amount) {\n            collateralToken.safeTransfer(pool, _amount);\n        } else {\n            _withdrawHere(_amount - _collateralHere);\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\n            _collateralHere = collateralToken.balanceOf(address(this));\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\n        }\n    }\n\n    function _approveToken(uint256 _amount) internal virtual {\n        collateralToken.safeApprove(pool, _amount);\n    }\n\n    /**\n     * @dev some strategy may want to prepare before doing migration.\n     *  Example In Maker old strategy want to give vault ownership to new strategy\n     * @param _newStrategy .\n     */\n    function _beforeMigration(address _newStrategy) internal virtual;\n\n    function _rebalance()\n        internal\n        virtual\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        );\n\n    function _swapExactInput(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) internal {\n        swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\n    }\n\n    function _safeSwapExactInput(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) internal {\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\n    }\n\n    // These methods must be implemented by the inheriting strategy\n    function _withdrawHere(uint256 _amount) internal virtual;\n}\n"
    },
    "vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice Routed Swapper interface\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\n */\ninterface IRoutedSwapper {\n    /**\n     * @notice The list of supported DEXes\n     * @dev This function is gas intensive\n     */\n    function getAllExchanges() external view returns (address[] memory);\n\n    /**\n     * @notice Get *spot* quote\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\n     * @dev It shouldn't be used as oracle!!!\n     */\n    function getAmountIn(\n        address tokenIn_,\n        address tokenOut_,\n        uint256 amountOut_\n    ) external returns (uint256 _amountIn);\n\n    /**\n     * @notice Get *spot* quote\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\n     * @dev It shouldn't be used as oracle!!!\n     */\n    function getAmountOut(\n        address tokenIn_,\n        address tokenOut_,\n        uint256 amountIn_\n    ) external returns (uint256 _amountOut);\n\n    /**\n     * @notice Perform an exact input swap - will revert if there is no default routing\n     */\n    function swapExactInput(\n        address tokenIn_,\n        address tokenOut_,\n        uint256 amountIn_,\n        uint256 amountOutMin_,\n        address _receiver\n    ) external returns (uint256 _amountOut);\n\n    /**\n     * @notice Perform an exact output swap - will revert if there is no default routing\n     */\n    function swapExactOutput(\n        address tokenIn_,\n        address tokenOut_,\n        uint256 amountOut_,\n        uint256 amountInMax_,\n        address receiver_\n    ) external returns (uint256 _amountIn);\n}\n"
    },
    "vesper-strategies/contracts/strategies/aave/v2/AaveV2Xy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\";\nimport \"../../../interfaces/aave/IAave.sol\";\nimport \"../../Strategy.sol\";\nimport \"./AaveV2Core.sol\";\n\n// solhint-disable no-empty-blocks\n\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\ncontract AaveV2Xy is Strategy, AaveV2Core {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.0.0\";\n\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\n\n    uint32 internal constant TWAP_PERIOD = 3600;\n    address public rewardToken;\n    address public borrowToken;\n    AToken public vdToken; // Variable Debt Token\n    address internal aBorrowToken;\n    event UpdatedBorrowLimit(\n        uint256 previousMinBorrowLimit,\n        uint256 newMinBorrowLimit,\n        uint256 previousMaxBorrowLimit,\n        uint256 newMaxBorrowLimit\n    );\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowToken,\n        string memory _name\n    ) Strategy(_pool, _swapper, _receiptToken) AaveV2Core(_receiptToken) {\n        NAME = _name;\n        rewardToken = _rewardToken;\n        (address _aBorrowToken, , address _vdToken) = aaveProtocolDataProvider.getReserveTokensAddresses(_borrowToken);\n        vdToken = AToken(_vdToken);\n        borrowToken = _borrowToken;\n        aBorrowToken = _aBorrowToken;\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == address(aToken) || address(vdToken) == _token || borrowToken == _token;\n    }\n\n    /// @notice Returns total collateral locked in the strategy\n    function tvl() external view override returns (uint256) {\n        return aToken.balanceOf(address(this)) + collateralToken.balanceOf(address(this));\n    }\n\n    /// @notice After borrowing Y Hook\n    function _afterBorrowY(uint256 _amount) internal virtual {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        collateralToken.safeApprove(address(aToken), _amount);\n        collateralToken.safeApprove(address(aaveLendingPool), _amount);\n        IERC20(borrowToken).safeApprove(address(aaveLendingPool), _amount);\n        IERC20(collateralToken).safeApprove(address(swapper), _amount);\n        IERC20(rewardToken).safeApprove(address(swapper), _amount);\n        IERC20(borrowToken).safeApprove(address(swapper), _amount);\n    }\n\n    /**\n     * @notice Claim rewardToken and transfer to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal virtual override {\n        require(IStrategy(_newStrategy).token() == address(aToken), \"wrong-receipt-token\");\n        _repayY(vdToken.balanceOf(address(this)));\n    }\n\n    /// @notice Before repaying Y Hook\n    function _beforeRepayY(uint256 _amount) internal virtual {}\n\n    function _borrowY(uint256 _amount) internal virtual {\n        if (_amount > 0) {\n            // 2 for variable rate borrow, 0 for referralCode\n            aaveLendingPool.borrow(borrowToken, _amount, 2, 0, address(this));\n            _afterBorrowY(_amount);\n        }\n    }\n\n    /**\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\n     * @param _depositAmount deposit amount\n     * @param _withdrawAmount withdraw amount\n     * @return _borrowAmount borrow more amount\n     * @return _repayAmount repay amount to keep ltv within limit\n     */\n    function _calculateBorrowPosition(uint256 _depositAmount, uint256 _withdrawAmount)\n        internal\n        view\n        returns (uint256 _borrowAmount, uint256 _repayAmount)\n    {\n        require(_depositAmount == 0 || _withdrawAmount == 0, \"all-input-gt-zero\");\n        uint256 _borrowed = vdToken.balanceOf(address(this));\n        // If maximum borrow limit set to 0 then repay borrow\n        if (maxBorrowLimit == 0) {\n            return (0, _borrowed);\n        }\n        uint256 _collateral = aToken.balanceOf(address(this));\n        // In case of withdraw, _amount can be greater than _supply\n        uint256 _hypotheticalCollateral =\n            _depositAmount > 0 ? _collateral + _depositAmount : _collateral > _withdrawAmount\n                ? _collateral - _withdrawAmount\n                : 0;\n        if (_hypotheticalCollateral == 0) {\n            return (0, _borrowed);\n        }\n        AaveOracle _aaveOracle = AaveOracle(aaveAddressesProvider_.getPriceOracle());\n        // Oracle prices are in 18 decimal\n        uint256 _borrowTokenPrice = _aaveOracle.getAssetPrice(borrowToken);\n        uint256 _collateralTokenPrice = _aaveOracle.getAssetPrice(address(collateralToken));\n        if (_borrowTokenPrice == 0 || _collateralTokenPrice == 0) {\n            // Oracle problem. Lets payback all\n            return (0, _borrowed);\n        }\n        // _collateralFactor in 4 decimal. 10_000 = 100%\n        (, uint256 _collateralFactor, , , , , , , , ) =\n            aaveProtocolDataProvider.getReserveConfigurationData(address(collateralToken));\n\n        // Collateral in base currency based on oracle price and cf;\n        uint256 _actualCollateralForBorrow =\n            (_hypotheticalCollateral * _collateralFactor * _collateralTokenPrice) /\n                (MAX_BPS * (10**IERC20Metadata(address(collateralToken)).decimals()));\n        // Calculate max borrow possible in borrow token number\n        uint256 _maxBorrowPossible =\n            (_actualCollateralForBorrow * (10**IERC20Metadata(address(borrowToken)).decimals())) / _borrowTokenPrice;\n        if (_maxBorrowPossible == 0) {\n            return (0, _borrowed);\n        }\n        // Safe buffer to avoid liquidation due to price variations.\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\n\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\n\n        // If current borrow is greater than max borrow, then repay to achieve safe position.\n        if (_borrowed > _borrowUpperBound) {\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _repayAmount = _borrowed - _borrowLowerBound;\n        } else if (_borrowLowerBound > _borrowed) {\n            _borrowAmount = _borrowLowerBound - _borrowed;\n            uint256 _availableLiquidity = IERC20(borrowToken).balanceOf(aBorrowToken);\n            if (_borrowAmount > _availableLiquidity) {\n                _borrowAmount = _availableLiquidity;\n            }\n        }\n    }\n\n    /// @notice Deposit collateral in Aave and adjust borrow position\n    function _deposit() internal {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\n\n        if (_repayAmount > 0) {\n            // Repay _borrowAmount to maintain safe position\n            _repayY(_repayAmount);\n            _mint(_collateralBalance);\n        } else {\n            // Happy path, mint more borrow more\n            _mint(_collateralBalance);\n            _borrowY(_borrowAmount);\n        }\n    }\n\n    /// @notice Borrowed Y balance deposited here or elsewhere hook\n    function _getInvestedBorrowBalance() internal view virtual returns (uint256) {\n        return IERC20(borrowToken).balanceOf(address(this));\n    }\n\n    /**\n     * @dev Aave support WETH as collateral.\n     */\n    function _mint(uint256 _amount) internal virtual {\n        _deposit(address(collateralToken), _amount);\n    }\n\n    /**\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\n     * @dev Claim rewardToken and convert to collateral.\n     */\n    function _rebalance()\n        internal\n        override\n        returns (\n            uint256 _profit,\n            uint256 _loss,\n            uint256 _payback\n        )\n    {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        // Claim rewards and convert to collateral token\n        uint256 _aaveAmount = _claimAave();\n        if (_aaveAmount > 0) {\n            _safeSwapExactInput(rewardToken, address(collateralToken), _aaveAmount);\n        }\n\n        uint256 _supply = aToken.balanceOf(address(this));\n        uint256 _borrow = vdToken.balanceOf(address(this));\n\n        uint256 _investedBorrowBalance = _getInvestedBorrowBalance();\n\n        // _borrow increases every block. Convert collateral to borrowToken.\n        if (_borrow > _investedBorrowBalance) {\n            _swapToBorrowToken(_borrow - _investedBorrowBalance);\n        } else {\n            // When _investedBorrowBalance exceeds _borrow balance from Aave\n            // Customize this hook to handle the excess borrowToken for profit\n            _rebalanceBorrow(_investedBorrowBalance - _borrow);\n        }\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _totalCollateral = _supply + _collateralHere;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_collateralHere < _profitAndExcessDebt) {\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _supply);\n            if (_totalAmountToWithdraw > 0) {\n                _withdrawHere(_totalAmountToWithdraw);\n                _collateralHere = collateralToken.balanceOf(address(this));\n            }\n        }\n\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _deposit();\n    }\n\n    /// @notice Swap excess borrow for more collateral hook\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual {}\n\n    function _redeemX(uint256 _amount) internal virtual {\n        _withdraw(address(collateralToken), address(this), _amount);\n    }\n\n    function _repayY(uint256 _amount) internal virtual {\n        _beforeRepayY(_amount);\n        aaveLendingPool.repay(borrowToken, _amount, 2, address(this));\n    }\n\n    /**\n     * @notice Swap given token to borrowToken\n     * @param _shortOnBorrow Expected output of this swap\n     */\n    function _swapToBorrowToken(uint256 _shortOnBorrow) internal {\n        // Looking for _amountIn using fixed output amount\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, _shortOnBorrow);\n        if (_amountIn > 0) {\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\n            // If we do not have enough _from token to get expected output, either get\n            // some _from token or adjust expected output.\n            if (_amountIn > _collateralHere) {\n                // Redeem some collateral, so that we have enough collateral to get expected output\n                _redeemX(_amountIn - _collateralHere);\n            }\n            swapper.swapExactOutput(address(collateralToken), borrowToken, _shortOnBorrow, _amountIn, address(this));\n        }\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _requireAmount) internal override {\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, _requireAmount);\n        if (_repayAmount > 0) {\n            _repayY(_repayAmount);\n        }\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\n        // _requireAmount against available liquidity.\n        uint256 _possibleWithdraw =\n            Math.min(\n                _requireAmount,\n                Math.min(IERC20(receiptToken).balanceOf(address(this)), collateralToken.balanceOf(receiptToken))\n            );\n        _redeemX(_possibleWithdraw);\n    }\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n    /**\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\n     * @dev It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\n     */\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\n        require(_maxBorrowLimit < MAX_BPS, \"invalid-max-borrow-limit\");\n        // set _maxBorrowLimit and _minBorrowLimit to disable borrow;\n        require(\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\n            \"max-should-be-higher-than-min\"\n        );\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\n        minBorrowLimit = _minBorrowLimit;\n        maxBorrowLimit = _maxBorrowLimit;\n    }\n}\n"
    },
    "vesper-strategies/contracts/interfaces/aave/IAave.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// @dev Interface support both Aave v2 and v3 methods\ninterface PoolAddressesProvider {\n    function getPool() external view returns (address);\n\n    // Aave v2 method.\n    function getLendingPool() external view returns (address);\n\n    function getPoolDataProvider() external view returns (address);\n\n    function getAddress(bytes32 id) external view returns (address);\n\n    function getPriceOracle() external view returns (address);\n}\n\ninterface AaveOracle {\n    function getAssetPrice(address _asset) external view returns (uint256);\n}\n\ninterface AToken is IERC20 {\n    /**\n     * @dev Returns the address of the incentives controller contract\n     **/\n    function getIncentivesController() external view returns (address);\n\n    function mint(\n        address user,\n        uint256 amount,\n        uint256 index\n    ) external returns (bool);\n\n    function burn(\n        address user,\n        address receiverOfUnderlying,\n        uint256 amount,\n        uint256 index\n    ) external;\n\n    //solhint-disable func-name-mixedcase\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n}\n\ninterface AaveIncentivesController {\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\n\n    function claimRewards(\n        address[] calldata assets,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    function claimAllRewards(address[] calldata assets, address to)\n        external\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n\n    function getRewardsList() external view returns (address[] memory);\n}\n\ninterface AaveLendingPool {\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    function supply(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata interestRateModes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        address onBehalfOf\n    ) external;\n\n    function getUserAccountData(address _user)\n        external\n        view\n        returns (\n            uint256 totalCollateralETH,\n            uint256 totalDebtETH,\n            uint256 availableBorrowsETH,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n}\n\ninterface AaveProtocolDataProvider {\n    function getReserveTokensAddresses(address asset)\n        external\n        view\n        returns (\n            address aTokenAddress,\n            address stableDebtTokenAddress,\n            address variableDebtTokenAddress\n        );\n\n    function getReserveData(address asset)\n        external\n        view\n        returns (\n            uint256 availableLiquidity,\n            uint256 totalStableDebt,\n            uint256 totalVariableDebt,\n            uint256 liquidityRate,\n            uint256 variableBorrowRate,\n            uint256 stableBorrowRate,\n            uint256 averageStableBorrowRate,\n            uint256 liquidityIndex,\n            uint256 variableBorrowIndex,\n            uint40 lastUpdateTimestamp\n        );\n\n    function getReserveConfigurationData(address asset)\n        external\n        view\n        returns (\n            uint256 decimals,\n            uint256 ltv,\n            uint256 liquidationThreshold,\n            uint256 liquidationBonus,\n            uint256 reserveFactor,\n            bool usageAsCollateralEnabled,\n            bool borrowingEnabled,\n            bool stableBorrowRateEnabled,\n            bool isActive,\n            bool isFrozen\n        );\n}\n\n//solhint-disable func-name-mixedcase\ninterface StakedAave is IERC20 {\n    function claimRewards(address to, uint256 amount) external;\n\n    function cooldown() external;\n\n    function stake(address onBehalfOf, uint256 amount) external;\n\n    function redeem(address to, uint256 amount) external;\n\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\n\n    function stakersCooldowns(address staker) external view returns (uint256);\n\n    function COOLDOWN_SECONDS() external view returns (uint256);\n\n    function UNSTAKE_WINDOW() external view returns (uint256);\n}\n"
    },
    "vesper-strategies/contracts/strategies/aave/v2/AaveV2Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\";\nimport \"vesper-pools/contracts/Errors.sol\";\nimport \"../../../interfaces/aave/IAave.sol\";\n\n/// @title This contract provide core operations for Aave\nabstract contract AaveV2Core {\n    //solhint-disable-next-line const-name-snakecase\n    StakedAave public constant stkAAVE = StakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\n    address public constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\n\n    AaveLendingPool public immutable aaveLendingPool;\n    AaveProtocolDataProvider public aaveProtocolDataProvider;\n    AaveIncentivesController public immutable aaveIncentivesController;\n    PoolAddressesProvider internal immutable aaveAddressesProvider_;\n\n    AToken internal immutable aToken;\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\n\n    constructor(address _receiptToken) {\n        require(_receiptToken != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        aToken = AToken(_receiptToken);\n        // If there is no AAVE incentive then below call will fail\n        try AToken(_receiptToken).getIncentivesController() returns (address _aaveIncentivesController) {\n            aaveIncentivesController = AaveIncentivesController(_aaveIncentivesController);\n        } catch {} //solhint-disable no-empty-blocks\n        aaveAddressesProvider_ = PoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider_.getLendingPool());\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider_.getAddress(AAVE_PROVIDER_ID));\n    }\n\n    ///////////////////////// External access functions /////////////////////////\n\n    /**\n     * @notice Initiate cooldown to unstake aave.\n     * @dev We only want to call this function when cooldown is expired and\n     * that's the reason we have 'if' condition.\n     * @dev Child contract should expose this function as external and onlyKeeper\n     */\n    function _startCooldown() internal returns (bool) {\n        if (canStartCooldown()) {\n            stkAAVE.cooldown();\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Unstake Aave from stakedAave contract\n     * @dev We want to unstake as soon as favorable condition exit\n     * @dev No guarding condition thus this call can fail, if we can't unstake.\n     * @dev Child contract should expose this function as external and onlyKeeper\n     */\n    function _unstakeAave() internal {\n        stkAAVE.redeem(address(this), type(uint256).max);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /// @notice Returns true if Aave can be unstaked\n    function canUnstake() external view returns (bool) {\n        (, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\n        return _canUnstake(_cooldownEnd, _unstakeEnd);\n    }\n\n    /// @notice Returns true if we should start cooldown\n    function canStartCooldown() public view returns (bool) {\n        (uint256 _cooldownStart, , uint256 _unstakeEnd) = cooldownData();\n        return _canStartCooldown(_cooldownStart, _unstakeEnd);\n    }\n\n    /// @notice Return cooldown related timestamps\n    function cooldownData()\n        public\n        view\n        returns (\n            uint256 _cooldownStart,\n            uint256 _cooldownEnd,\n            uint256 _unstakeEnd\n        )\n    {\n        _cooldownStart = stkAAVE.stakersCooldowns(address(this));\n        _cooldownEnd = _cooldownStart + stkAAVE.COOLDOWN_SECONDS();\n        _unstakeEnd = _cooldownEnd + stkAAVE.UNSTAKE_WINDOW();\n    }\n\n    /**\n     * @notice Claim Aave. Also unstake all Aave if favorable condition exits or start cooldown.\n     * @dev If we unstake all Aave, we can't start cooldown because it requires StakedAave balance.\n     * @dev DO NOT convert 'if else' to 2 'if's as we are reading cooldown state once to save gas.\n     * @dev Not all collateral token has aave incentive\n     */\n    function _claimAave() internal returns (uint256) {\n        if (address(aaveIncentivesController) == address(0)) {\n            return 0;\n        }\n        (uint256 _cooldownStart, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\n        if (_cooldownStart == 0 || block.timestamp > _unstakeEnd) {\n            // claim stkAave when its first rebalance or unstake period passed.\n            aaveIncentivesController.claimRewards(getAssets(), type(uint256).max, address(this));\n        }\n        // Fetch and check again for next action.\n        (_cooldownStart, _cooldownEnd, _unstakeEnd) = cooldownData();\n        if (_canUnstake(_cooldownEnd, _unstakeEnd)) {\n            stkAAVE.redeem(address(this), type(uint256).max);\n        } else if (_canStartCooldown(_cooldownStart, _unstakeEnd)) {\n            stkAAVE.cooldown();\n        }\n\n        stkAAVE.claimRewards(address(this), type(uint256).max);\n        return IERC20(AAVE).balanceOf(address(this));\n    }\n\n    /// @notice Deposit asset into Aave\n    function _deposit(address _asset, uint256 _amount) internal {\n        if (_amount > 0) {\n            try aaveLendingPool.deposit(_asset, _amount, address(this), 0) {} catch Error(string memory _reason) {\n                // Aave uses liquidityIndex and some other indexes as needed to normalize input.\n                // If normalized input equals to 0 then error will be thrown with '56' error code.\n                // CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\n                // Hence discard error where error code is '56'\n                require(bytes32(bytes(_reason)) == \"56\", \"deposit failed\");\n            }\n        }\n    }\n\n    function getAssets() internal view returns (address[] memory) {\n        address[] memory _assets = new address[](1);\n        _assets[0] = address(aToken);\n        return _assets;\n    }\n\n    /**\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\n     * @dev Check we have enough aToken and liquidity to support this withdraw\n     * @param _asset Address of asset to withdraw\n     * @param _to Address that will receive collateral token.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _safeWithdraw(\n        address _asset,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\n        // In this case we might have more aToken compare to available liquidity in Aave and any\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\n        // _amount against available liquidity.\n        uint256 _availableLiquidity = IERC20(_asset).balanceOf(address(aToken));\n\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\n        return _withdraw(_asset, _to, Math.min(_amount, Math.min(_aTokenBalance, _availableLiquidity)));\n    }\n\n    /**\n     * @notice Withdraw given amount of collateral from Aave to given address\n     * @param _asset Address of asset to withdraw\n     * @param _to Address that will receive collateral token.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _withdraw(\n        address _asset,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        if (_amount > 0) {\n            require(aaveLendingPool.withdraw(_asset, _amount, _to) == _amount, Errors.INCORRECT_WITHDRAW_AMOUNT);\n        }\n        return _amount;\n    }\n\n    /**\n     * @dev Return true, only if we have StakedAave balance and either cooldown expired or cooldown is zero\n     * @dev If we are in cooldown period we cannot unstake Aave. But our cooldown is still valid so we do\n     * not want to reset/start cooldown.\n     */\n    function _canStartCooldown(uint256 _cooldownStart, uint256 _unstakeEnd) internal view returns (bool) {\n        return stkAAVE.balanceOf(address(this)) > 0 && (_cooldownStart == 0 || block.timestamp > _unstakeEnd);\n    }\n\n    /// @dev Return true, if cooldown is over and we are in unstake window.\n    function _canUnstake(uint256 _cooldownEnd, uint256 _unstakeEnd) internal view returns (bool) {\n        return block.timestamp > _cooldownEnd && block.timestamp <= _unstakeEnd;\n    }\n\n    /**\n     * @notice Return total AAVE incentive allocated to this address\n     * @dev Aave and StakedAave are 1:1\n     * @dev Not all collateral token has aave incentive\n     */\n    function _totalAave() internal view returns (uint256) {\n        if (address(aaveIncentivesController) == address(0)) {\n            return 0;\n        }\n        // TotalAave = Get current StakedAave rewards from controller +\n        //             StakedAave balance here +\n        //             Aave rewards by staking Aave in StakedAave contract\n        return\n            aaveIncentivesController.getRewardsBalance(getAssets(), address(this)) +\n            stkAAVE.balanceOf(address(this)) +\n            stkAAVE.getTotalRewardsBalance(address(this));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}