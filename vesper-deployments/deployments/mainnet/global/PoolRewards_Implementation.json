{
  "address": "0x90bb3E3AA5Fa88f0a83Dcb9485f65D2592f4307E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "existingRewardTokens",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRewardToken_",
          "type": "address"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_claimableAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "rewardTokens_",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRewardToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDuration_",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "rewardTokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewardAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewardDurations_",
          "type": "uint256[]"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardForDuration",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardForDuration",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardPerTokenRate",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x535925107a31c66c51e5b2597e3712331ec49c7bb931131ac30fe2874b85fbfa",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0x90bb3E3AA5Fa88f0a83Dcb9485f65D2592f4307E",
    "transactionIndex": 6,
    "gasUsed": "2059027",
    "logsBloom": "0x
    "blockHash": "0xda34f047baf47951bdbebc4dd9bfffa3376e79dea0c931ad5e209c908eda2327",
    "transactionHash": "0x535925107a31c66c51e5b2597e3712331ec49c7bb931131ac30fe2874b85fbfa",
    "logs": [],
    "blockNumber": 16633801,
    "cumulativeGasUsed": "2732387",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "78b3517d113ba4b7a0a098caaf7b9ceb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardDuration\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"existingRewardTokens\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardToken_\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimableAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens_\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDuration_\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardTokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardDurations_\",\"type\":\"uint256[]\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardForDuration\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardForDuration\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerTokenRate\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimReward(address)\":{\"details\":\"This function will claim rewards for all tokens being rewarded\"},\"claimable(address)\":{\"returns\":{\"_claimableAmounts\":\"Array of claimable for token on same index in rewardTokens\",\"_rewardTokens\":\"Array of tokens being rewarded\"}},\"initialize(address,address[])\":{\"details\":\"Called by proxy to initialize this contract\",\"params\":{\"pool_\":\"Vesper pool address\",\"rewardTokens_\":\"Array of reward token addresses\"}},\"notifyRewardAmount(address[],uint256[],uint256[])\":{\"details\":\"Also updates reward rate and reward earning period.\",\"params\":{\"rewardAmounts_\":\"Rewards amount for token on same index in rewardTokens array\",\"rewardDurations_\":\"Duration for which reward will be distributed\",\"rewardTokens_\":\"Tokens being rewarded\"}},\"rewardPerToken()\":{\"returns\":{\"_rewardPerTokenRate\":\"Array of Rewards rate for token on same index in rewardTokens\",\"_rewardTokens\":\"Array of tokens being rewarded\"}}},\"title\":\"Distribute rewards based on vesper pool balance and supply\",\"version\":1},\"userdoc\":{\"events\":{\"RewardAdded(address,uint256,uint256)\":{\"notice\":\"Emitted after reward added\"},\"RewardPaid(address,address,uint256)\":{\"notice\":\"Emitted whenever any user claim rewards\"},\"RewardTokenAdded(address,address[])\":{\"notice\":\"Emitted after adding new rewards token into rewardTokens array\"}},\"kind\":\"user\",\"methods\":{\"addRewardToken(address)\":{\"notice\":\"Add new reward token in existing rewardsToken array\"},\"claimReward(address)\":{\"notice\":\"Claim earned rewards.\"},\"claimable(address)\":{\"notice\":\"Returns claimable reward amount.\"},\"getRewardTokens()\":{\"notice\":\"Provides easy access to all rewardTokens\"},\"isRewardToken(address)\":{\"notice\":\"Reward token to valid/invalid flag mapping\"},\"lastTimeRewardApplicable(address)\":{\"notice\":\"Returns timestamp of last reward update\"},\"lastUpdateTime(address)\":{\"notice\":\"Reward token to Last reward drip update time stamp mapping\"},\"notifyRewardAmount(address[],uint256[],uint256[])\":{\"notice\":\"Notify that reward is added. Only authorized caller can call\"},\"periodFinish(address)\":{\"notice\":\"Reward token to period ending of current reward\"},\"pool()\":{\"notice\":\"Vesper pool address\"},\"rewardDuration(address)\":{\"notice\":\"Reward token to Duration of current reward distribution\"},\"rewardPerToken()\":{\"notice\":\"Rewards rate per pool token\"},\"rewardPerTokenStored(address)\":{\"notice\":\"Reward token to Reward per token mapping. Calculated and stored at last drip update\"},\"rewardRates(address)\":{\"notice\":\"Reward token to current reward rate mapping\"},\"rewardTokens(uint256)\":{\"notice\":\"Array of reward token addresses\"},\"rewards(address,address)\":{\"notice\":\"RewardToken => User => Rewards earned till last reward update\"},\"updateReward(address)\":{\"notice\":\"Updated reward for given account.\"},\"userRewardPerTokenPaid(address,address)\":{\"notice\":\"Reward token => User => Reward per token stored at last reward update\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-pools/contracts/pool/PoolRewards.sol\":\"PoolRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(address rewardToken_, uint256 _rewardAmount, uint256 _rewardDuration) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory rewardTokens_,\\n        uint256[] memory rewardAmounts_,\\n        uint256[] memory rewardDurations_\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(\\n        address account_\\n    ) external view returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address rewardToken_) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n}\\n\",\"keccak256\":\"0x81cd98745690e091c346a5657a7f05cad9e1b2aa11841d0b089b11dde99ad0f0\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 profit_) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 collateralAmount_) external;\\n\\n    function excessDebt(address strategy_) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(uint256 profit_, uint256 loss_, uint256 payback_) external;\\n\\n    function reportLoss(uint256 loss_) external;\\n\\n    function sweepERC20(address fromToken_) external;\\n\\n    function withdraw(uint256 share_) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address address_) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address address_) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(\\n        address strategy_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address strategy_) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e04db3bafbcc5985db33ae168ada16fed2bbc42a6cd26bbe936a71a4f537e0c\",\"license\":\"MIT\"},\"vesper-pools/contracts/pool/PoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"../dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\ncontract PoolRewardsStorage {\\n    /// Vesper pool address\\n    address public pool;\\n\\n    /// Array of reward token addresses\\n    address[] public rewardTokens;\\n\\n    /// Reward token to valid/invalid flag mapping\\n    mapping(address => bool) public isRewardToken;\\n\\n    /// Reward token to period ending of current reward\\n    mapping(address => uint256) public periodFinish;\\n\\n    /// Reward token to current reward rate mapping\\n    mapping(address => uint256) public rewardRates;\\n\\n    /// Reward token to Duration of current reward distribution\\n    mapping(address => uint256) public rewardDuration;\\n\\n    /// Reward token to Last reward drip update time stamp mapping\\n    mapping(address => uint256) public lastUpdateTime;\\n\\n    /// Reward token to Reward per token mapping. Calculated and stored at last drip update\\n    mapping(address => uint256) public rewardPerTokenStored;\\n\\n    /// Reward token => User => Reward per token stored at last reward update\\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\\n\\n    /// RewardToken => User => Rewards earned till last reward update\\n    mapping(address => mapping(address => uint256)) public rewards;\\n}\\n\\n/// @title Distribute rewards based on vesper pool balance and supply\\ncontract PoolRewards is Initializable, IPoolRewards, ReentrancyGuard, PoolRewardsStorage {\\n    string public constant VERSION = \\\"5.1.0\\\";\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Called by proxy to initialize this contract\\n     * @param pool_ Vesper pool address\\n     * @param rewardTokens_ Array of reward token addresses\\n     */\\n    function initialize(address pool_, address[] memory rewardTokens_) public initializer {\\n        require(pool_ != address(0), \\\"pool-address-is-zero\\\");\\n        uint256 _len = rewardTokens_.length;\\n        require(_len > 0, \\\"invalid-reward-tokens\\\");\\n        pool = pool_;\\n        rewardTokens = rewardTokens_;\\n        for (uint256 i; i < _len; i++) {\\n            isRewardToken[rewardTokens_[i]] = true;\\n        }\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(msg.sender == IVesperPool(pool).governor(), \\\"not-authorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns claimable reward amount.\\n     * @return _rewardTokens Array of tokens being rewarded\\n     * @return _claimableAmounts Array of claimable for token on same index in rewardTokens\\n     */\\n    function claimable(\\n        address account_\\n    ) external view virtual override returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts) {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        uint256 _balance = IERC20(pool).balanceOf(account_);\\n        _rewardTokens = rewardTokens;\\n        uint256 _len = _rewardTokens.length;\\n        _claimableAmounts = new uint256[](_len);\\n        for (uint256 i; i < _len; i++) {\\n            _claimableAmounts[i] = _claimable(_rewardTokens[i], account_, _totalSupply, _balance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim earned rewards.\\n     * @dev This function will claim rewards for all tokens being rewarded\\n     */\\n    function claimReward(address account_) external virtual override nonReentrant {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        uint256 _balance = IERC20(pool).balanceOf(account_);\\n        uint256 _len = rewardTokens.length;\\n        for (uint256 i; i < _len; i++) {\\n            address _rewardToken = rewardTokens[i];\\n            _updateReward(_rewardToken, account_, _totalSupply, _balance);\\n\\n            // Claim rewards\\n            uint256 _reward = rewards[_rewardToken][account_];\\n            if (_reward > 0 && _reward <= IERC20(_rewardToken).balanceOf(address(this))) {\\n                _claimReward(_rewardToken, account_, _reward);\\n                emit RewardPaid(account_, _rewardToken, _reward);\\n            }\\n        }\\n    }\\n\\n    /// @notice Provides easy access to all rewardTokens\\n    function getRewardTokens() external view returns (address[] memory) {\\n        return rewardTokens;\\n    }\\n\\n    /// @notice Returns timestamp of last reward update\\n    function lastTimeRewardApplicable(address rewardToken_) public view override returns (uint256) {\\n        return block.timestamp < periodFinish[rewardToken_] ? block.timestamp : periodFinish[rewardToken_];\\n    }\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        override\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration)\\n    {\\n        _rewardTokens = rewardTokens;\\n        uint256 _len = _rewardTokens.length;\\n        _rewardForDuration = new uint256[](_len);\\n        for (uint256 i; i < _len; i++) {\\n            _rewardForDuration[i] = rewardRates[_rewardTokens[i]] * rewardDuration[_rewardTokens[i]];\\n        }\\n    }\\n\\n    /**\\n     * @notice Rewards rate per pool token\\n     * @return _rewardTokens Array of tokens being rewarded\\n     * @return _rewardPerTokenRate Array of Rewards rate for token on same index in rewardTokens\\n     */\\n    function rewardPerToken()\\n        external\\n        view\\n        override\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate)\\n    {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        _rewardTokens = rewardTokens;\\n        uint256 _len = _rewardTokens.length;\\n        _rewardPerTokenRate = new uint256[](_len);\\n        for (uint256 i; i < _len; i++) {\\n            _rewardPerTokenRate[i] = _rewardPerToken(_rewardTokens[i], _totalSupply);\\n        }\\n    }\\n\\n    /**\\n     * @notice Updated reward for given account.\\n     */\\n    function updateReward(address account_) external override {\\n        uint256 _totalSupply = IERC20(pool).totalSupply();\\n        uint256 _balance = IERC20(pool).balanceOf(account_);\\n        uint256 _len = rewardTokens.length;\\n        for (uint256 i; i < _len; i++) {\\n            _updateReward(rewardTokens[i], account_, _totalSupply, _balance);\\n        }\\n    }\\n\\n    function _claimable(\\n        address rewardToken_,\\n        address account_,\\n        uint256 totalSupply_,\\n        uint256 balance_\\n    ) internal view returns (uint256) {\\n        uint256 _rewardPerTokenAvailable = _rewardPerToken(rewardToken_, totalSupply_) -\\n            userRewardPerTokenPaid[rewardToken_][account_];\\n        // claimable = rewards + rewards earned since last update\\n        return rewards[rewardToken_][account_] + ((balance_ * _rewardPerTokenAvailable) / 1e18);\\n    }\\n\\n    function _claimReward(address rewardToken_, address account_, uint256 reward_) internal virtual {\\n        // Mark reward as claimed\\n        rewards[rewardToken_][account_] = 0;\\n        // Transfer reward\\n        IERC20(rewardToken_).safeTransfer(account_, reward_);\\n    }\\n\\n    // There are scenarios when extending contract will override external methods and\\n    // end up calling internal function. Hence providing internal functions\\n    function _notifyRewardAmount(\\n        address[] memory rewardTokens_,\\n        uint256[] memory rewardAmounts_,\\n        uint256[] memory rewardDurations_,\\n        uint256 totalSupply_\\n    ) internal {\\n        uint256 _len = rewardTokens_.length;\\n        require(_len > 0, \\\"invalid-reward-tokens\\\");\\n        require(_len == rewardAmounts_.length && _len == rewardDurations_.length, \\\"array-length-mismatch\\\");\\n        for (uint256 i; i < _len; i++) {\\n            _notifyRewardAmount(rewardTokens_[i], rewardAmounts_[i], rewardDurations_[i], totalSupply_);\\n        }\\n    }\\n\\n    function _notifyRewardAmount(\\n        address rewardToken_,\\n        uint256 rewardAmount_,\\n        uint256 rewardDuration_,\\n        uint256 totalSupply_\\n    ) internal {\\n        require(rewardToken_ != address(0), \\\"incorrect-reward-token\\\");\\n        require(rewardAmount_ > 0, \\\"incorrect-reward-amount\\\");\\n        require(rewardDuration_ > 0, \\\"incorrect-reward-duration\\\");\\n        require(isRewardToken[rewardToken_], \\\"invalid-reward-token\\\");\\n\\n        // Update rewards earned so far\\n        rewardPerTokenStored[rewardToken_] = _rewardPerToken(rewardToken_, totalSupply_);\\n        if (block.timestamp >= periodFinish[rewardToken_]) {\\n            rewardRates[rewardToken_] = rewardAmount_ / rewardDuration_;\\n        } else {\\n            uint256 remainingPeriod = periodFinish[rewardToken_] - block.timestamp;\\n\\n            uint256 leftover = remainingPeriod * rewardRates[rewardToken_];\\n            rewardRates[rewardToken_] = (rewardAmount_ + leftover) / rewardDuration_;\\n        }\\n        // Safety check\\n        require(\\n            rewardRates[rewardToken_] <= (IERC20(rewardToken_).balanceOf(address(this)) / rewardDuration_),\\n            \\\"rewards-too-high\\\"\\n        );\\n        // Start new drip time\\n        rewardDuration[rewardToken_] = rewardDuration_;\\n        lastUpdateTime[rewardToken_] = block.timestamp;\\n        periodFinish[rewardToken_] = block.timestamp + rewardDuration_;\\n        emit RewardAdded(rewardToken_, rewardAmount_, rewardDuration_);\\n    }\\n\\n    function _rewardPerToken(address rewardToken_, uint256 totalSupply_) internal view returns (uint256) {\\n        if (totalSupply_ == 0) {\\n            return rewardPerTokenStored[rewardToken_];\\n        }\\n\\n        uint256 _timeSinceLastUpdate = lastTimeRewardApplicable(rewardToken_) - lastUpdateTime[rewardToken_];\\n        // reward per token = rewardPerTokenStored + rewardPerToken since last update\\n        return\\n            rewardPerTokenStored[rewardToken_] +\\n            ((_timeSinceLastUpdate * rewardRates[rewardToken_] * 1e18) / totalSupply_);\\n    }\\n\\n    function _updateReward(address rewardToken_, address account_, uint256 totalSupply_, uint256 balance_) internal {\\n        uint256 _rewardPerTokenStored = _rewardPerToken(rewardToken_, totalSupply_);\\n        rewardPerTokenStored[rewardToken_] = _rewardPerTokenStored;\\n        lastUpdateTime[rewardToken_] = lastTimeRewardApplicable(rewardToken_);\\n        if (account_ != address(0)) {\\n            rewards[rewardToken_][account_] = _claimable(rewardToken_, account_, totalSupply_, balance_);\\n            userRewardPerTokenPaid[rewardToken_][account_] = _rewardPerTokenStored;\\n        }\\n    }\\n\\n    /************************************************************************************************\\n     *                                     Authorized function                                      *\\n     ***********************************************************************************************/\\n\\n    /// @notice Add new reward token in existing rewardsToken array\\n    function addRewardToken(address newRewardToken_) external onlyAuthorized {\\n        require(newRewardToken_ != address(0), \\\"reward-token-address-zero\\\");\\n        require(!isRewardToken[newRewardToken_], \\\"reward-token-already-exist\\\");\\n        emit RewardTokenAdded(newRewardToken_, rewardTokens);\\n        rewardTokens.push(newRewardToken_);\\n        isRewardToken[newRewardToken_] = true;\\n    }\\n\\n    /**\\n     * @notice Notify that reward is added. Only authorized caller can call\\n     * @dev Also updates reward rate and reward earning period.\\n     * @param rewardTokens_ Tokens being rewarded\\n     * @param rewardAmounts_ Rewards amount for token on same index in rewardTokens array\\n     * @param rewardDurations_ Duration for which reward will be distributed\\n     */\\n    function notifyRewardAmount(\\n        address[] memory rewardTokens_,\\n        uint256[] memory rewardAmounts_,\\n        uint256[] memory rewardDurations_\\n    ) external virtual override onlyAuthorized {\\n        _notifyRewardAmount(rewardTokens_, rewardAmounts_, rewardDurations_, IERC20(pool).totalSupply());\\n    }\\n\\n    function notifyRewardAmount(\\n        address rewardToken_,\\n        uint256 rewardAmount_,\\n        uint256 rewardDuration_\\n    ) external virtual override onlyAuthorized {\\n        _notifyRewardAmount(rewardToken_, rewardAmount_, rewardDuration_, IERC20(pool).totalSupply());\\n    }\\n}\\n\",\"keccak256\":\"0x59ef58f092114ff2173de01da6ec2f29344bcd80708c3e36b2330fda9acbd3af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600180556123e2806100246000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80639ce43f90116100b8578063cd3daf9d1161007c578063cd3daf9d14610301578063d279c19114610309578063da09d19d1461031c578063e70b9e271461033c578063e9c5448814610367578063ffa1ad741461038757600080fd5b80639ce43f9014610273578063a3cd8ac414610293578063b5fd73f8146102a6578063bcd68eb6146102d9578063c4f59f9b146102ec57600080fd5b8063632447c91161010a578063632447c9146101f4578063638634ee146102075780636946a2351461021a5780637035ab98146102225780637bb7bed11461024d578063946d92041461026057600080fd5b806316f0115b146101475780631c03e6cc146101705780632ce9aead146101855780633d3b2603146101b3578063402914f5146101d3575b600080fd5b60025461015a906001600160a01b031681565b6040516101679190611deb565b60405180910390f35b61018361017e366004611e17565b6103b8565b005b6101a5610193366004611e17565b60086020526000908152604090205481565b604051908152602001610167565b6101a56101c1366004611e17565b60066020526000908152604090205481565b6101e66101e1366004611e17565b6105db565b604051610167929190611e78565b610183610202366004611e17565b6107f6565b6101a5610215366004611e17565b610956565b6101e661099b565b6101a5610230366004611ecf565b600a60209081526000928352604080842090915290825290205481565b61015a61025b366004611f08565b610b0b565b61018361026e366004611ffe565b610b35565b6101a5610281366004611e17565b60096020526000908152604090205481565b6101836102a136600461204d565b610cee565b6102c96102b4366004611e17565b60046020526000908152604090205460ff1681565b6040519015158152602001610167565b6101836102e73660046120dd565b610e35565b6102f4610f7c565b6040516101679190612164565b6101e6610fde565b610183610317366004611e17565b61116f565b6101a561032a366004611e17565b60056020526000908152604090205481565b6101a561034a366004611ecf565b600b60209081526000928352604080842090915290825290205481565b6101a5610375366004611e17565b60076020526000908152604090205481565b6103ab604051806040016040528060058152602001640352e312e360dc1b81525081565b60405161016791906121a7565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561040657600080fd5b505afa15801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e91906121da565b6001600160a01b0316336001600160a01b0316146104775760405162461bcd60e51b815260040161046e906121f7565b60405180910390fd5b6001600160a01b0381166104c95760405162461bcd60e51b81526020600482015260196024820152787265776172642d746f6b656e2d616464726573732d7a65726f60381b604482015260640161046e565b6001600160a01b03811660009081526004602052604090205460ff16156105325760405162461bcd60e51b815260206004820152601a60248201527f7265776172642d746f6b656e2d616c72656164792d6578697374000000000000604482015260640161046e565b806001600160a01b03167f438dc3ee1ea07ec168befb145c10eb363aad7cbec063f8a006b032031582ac2b600360405161056c919061221f565b60405180910390a26003805460018181019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b039093166001600160a01b031990931683179055600091825260046020526040909120805460ff19169091179055565b6060806000600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561062e57600080fd5b505afa158015610642573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610666919061226f565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061069c908890600401611deb565b60206040518083038186803b1580156106b457600080fd5b505afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec919061226f565b600380546040805160208084028201810190925282815293945083018282801561073f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610721575b5050835193975083925050506001600160401b0381111561076257610762611f21565b60405190808252806020026020018201604052801561078b578160200160208202803683370190505b50935060005b818110156107ed576107be8682815181106107ae576107ae612288565b6020026020010151888686611441565b8582815181106107d0576107d0612288565b6020908102919091010152806107e5816122b4565b915050610791565b50505050915091565b600254604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561083b57600080fd5b505afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610873919061226f565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a08231906108a9908690600401611deb565b60206040518083038186803b1580156108c157600080fd5b505afa1580156108d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f9919061226f565b60035490915060005b8181101561094f5761093d6003828154811061092057610920612288565b6000918252602090912001546001600160a01b03168686866114d8565b80610947816122b4565b915050610902565b5050505050565b6001600160a01b0381166000908152600560205260408120544210610993576001600160a01b038216600090815260056020526040902054610995565b425b92915050565b60608060038054806020026020016040519081016040528092919081815260200182805480156109f457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109d6575b5050835193955083925050506001600160401b03811115610a1757610a17611f21565b604051908082528060200260200182016040528015610a40578160200160208202803683370190505b50915060005b81811015610b055760076000858381518110610a6457610a64612288565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205460066000868481518110610aa357610aa3612288565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054610ad691906122cf565b838281518110610ae857610ae8612288565b602090810291909101015280610afd816122b4565b915050610a46565b50509091565b60038181548110610b1b57600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff1680610b4e575060005460ff16155b610bb15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161046e565b600054610100900460ff16158015610bd3576000805461ffff19166101011790555b6001600160a01b038316610c205760405162461bcd60e51b8152602060048201526014602482015273706f6f6c2d616464726573732d69732d7a65726f60601b604482015260640161046e565b815180610c3f5760405162461bcd60e51b815260040161046e906122ee565b600280546001600160a01b0319166001600160a01b0386161790558251610c6d906003906020860190611d71565b5060005b81811015610cd557600160046000868481518110610c9157610c91612288565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610ccd816122b4565b915050610c71565b50508015610ce9576000805461ff00191690555b505050565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3c57600080fd5b505afa158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7491906121da565b6001600160a01b0316336001600160a01b031614610da45760405162461bcd60e51b815260040161046e906121f7565b610ce9838383600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610df857600080fd5b505afa158015610e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e30919061226f565b611581565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8357600080fd5b505afa158015610e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebb91906121da565b6001600160a01b0316336001600160a01b031614610eeb5760405162461bcd60e51b815260040161046e906121f7565b610ce9838383600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3f57600080fd5b505afa158015610f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f77919061226f565b611915565b60606003805480602002602001604051908101604052809291908181526020018280548015610fd457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fb6575b5050505050905090565b6060806000600260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561103157600080fd5b505afa158015611045573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611069919061226f565b60038054604080516020808402820181019092528281529394508301828280156110bc57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161109e575b5050835193965083925050506001600160401b038111156110df576110df611f21565b604051908082528060200260200182016040528015611108578160200160208202803683370190505b50925060005b818110156111685761113985828151811061112b5761112b612288565b602002602001015184611a04565b84828151811061114b5761114b612288565b602090810291909101015280611160816122b4565b91505061110e565b5050509091565b600260015414156111c25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161046e565b6002600181905554604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561120c57600080fd5b505afa158015611220573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611244919061226f565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061127a908690600401611deb565b60206040518083038186803b15801561129257600080fd5b505afa1580156112a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ca919061226f565b60035490915060005b81811015611436576000600382815481106112f0576112f0612288565b6000918252602090912001546001600160a01b03169050611313818787876114d8565b6001600160a01b038082166000908152600b60209081526040808320938a168352929052205480158015906113c357506040516370a0823160e01b81526001600160a01b038316906370a082319061136f903090600401611deb565b60206040518083038186803b15801561138757600080fd5b505afa15801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf919061226f565b8111155b15611421576113d3828883611ac5565b816001600160a01b0316876001600160a01b03167f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e8360405161141891815260200190565b60405180910390a35b5050808061142e906122b4565b9150506112d3565b505060018055505050565b6001600160a01b038085166000908152600a6020908152604080832093871683529290529081205481906114758786611a04565b61147f919061231d565b9050670de0b6b3a764000061149482856122cf565b61149e9190612334565b6001600160a01b038088166000908152600b60209081526040808320938a16835292905220546114ce9190612356565b9695505050505050565b60006114e48584611a04565b6001600160a01b0386166000908152600960205260409020819055905061150a85610956565b6001600160a01b0380871660009081526008602052604090209190915584161561094f5761153a85858585611441565b6001600160a01b038087166000818152600b60209081526040808320948a1680845294825280832095909555918152600a8252838120928152919052208190555050505050565b6001600160a01b0384166115d05760405162461bcd60e51b815260206004820152601660248201527534b731b7b93932b1ba16b932bbb0b93216ba37b5b2b760511b604482015260640161046e565b6000831161161a5760405162461bcd60e51b81526020600482015260176024820152761a5b98dbdc9c9958dd0b5c995dd85c990b585b5bdd5b9d604a1b604482015260640161046e565b600082116116665760405162461bcd60e51b815260206004820152601960248201527834b731b7b93932b1ba16b932bbb0b93216b23ab930ba34b7b760391b604482015260640161046e565b6001600160a01b03841660009081526004602052604090205460ff166116c55760405162461bcd60e51b815260206004820152601460248201527334b73b30b634b216b932bbb0b93216ba37b5b2b760611b604482015260640161046e565b6116cf8482611a04565b6001600160a01b0385166000908152600960209081526040808320939093556005905220544210611722576117048284612334565b6001600160a01b0385166000908152600660205260409020556117a0565b6001600160a01b03841660009081526005602052604081205461174690429061231d565b6001600160a01b0386166000908152600660205260408120549192509061176d90836122cf565b90508361177a8287612356565b6117849190612334565b6001600160a01b03871660009081526006602052604090205550505b6040516370a0823160e01b815282906001600160a01b038616906370a08231906117ce903090600401611deb565b60206040518083038186803b1580156117e657600080fd5b505afa1580156117fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181e919061226f565b6118289190612334565b6001600160a01b03851660009081526006602052604090205411156118825760405162461bcd60e51b815260206004820152601060248201526f0e4caeec2e4c8e65ae8dede5ad0d2ced60831b604482015260640161046e565b6001600160a01b03841660009081526007602090815260408083208590556008909152902042908190556118b7908390612356565b6001600160a01b03851660008181526005602090815260409182902093909355805186815292830185905290917f6a6f77044107a33658235d41bedbbaf2fe9ccdceb313143c947a5e76e1ec8474910160405180910390a250505050565b8351806119345760405162461bcd60e51b815260040161046e906122ee565b8351811480156119445750825181145b6119885760405162461bcd60e51b81526020600482015260156024820152740c2e4e4c2f25ad8cadccee8d05adad2e6dac2e8c6d605b1b604482015260640161046e565b60005b818110156119fc576119ea8682815181106119a8576119a8612288565b60200260200101518683815181106119c2576119c2612288565b60200260200101518684815181106119dc576119dc612288565b602002602001015186611581565b806119f4816122b4565b91505061198b565b505050505050565b600081611a2a57506001600160a01b038216600090815260096020526040902054610995565b6001600160a01b038316600090815260086020526040812054611a4c85610956565b611a56919061231d565b6001600160a01b0385166000908152600660205260409020549091508390611a7e90836122cf565b611a9090670de0b6b3a76400006122cf565b611a9a9190612334565b6001600160a01b038516600090815260096020526040902054611abd9190612356565b949350505050565b6001600160a01b038381166000818152600b60209081526040808320948716808452948252808320839055805160248101959095526044808601879052815180870390910181526064909501815284820180516001600160e01b031663a9059cbb60e01b17905280518082019091528181527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656491810191909152610ce99386928692869286929091611b7a9084908490611bf7565b805190915015610ce95780806020019051810190611b98919061236e565b610ce95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161046e565b6060611c068484600085611c10565b90505b9392505050565b606082471015611c715760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161046e565b843b611cbf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161046e565b600080866001600160a01b03168587604051611cdb9190612390565b60006040518083038185875af1925050503d8060008114611d18576040519150601f19603f3d011682016040523d82523d6000602084013e611d1d565b606091505b5091509150611d2d828286611d38565b979650505050505050565b60608315611d47575081611c09565b825115611d575782518084602001fd5b8160405162461bcd60e51b815260040161046e91906121a7565b828054828255906000526020600020908101928215611dc6579160200282015b82811115611dc657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611d91565b50611dd2929150611dd6565b5090565b5b80821115611dd25760008155600101611dd7565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114611e1457600080fd5b50565b600060208284031215611e2957600080fd5b8135611c0981611dff565b600081518084526020808501945080840160005b83811015611e6d5781516001600160a01b031687529582019590820190600101611e48565b509495945050505050565b604081526000611e8b6040830185611e34565b82810360208481019190915284518083528582019282019060005b81811015611ec257845183529383019391830191600101611ea6565b5090979650505050505050565b60008060408385031215611ee257600080fd5b8235611eed81611dff565b91506020830135611efd81611dff565b809150509250929050565b600060208284031215611f1a57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611f5f57611f5f611f21565b604052919050565b60006001600160401b03821115611f8057611f80611f21565b5060051b60200190565b600082601f830112611f9b57600080fd5b81356020611fb0611fab83611f67565b611f37565b82815260059290921b84018101918181019086841115611fcf57600080fd5b8286015b84811015611ff3578035611fe681611dff565b8352918301918301611fd3565b509695505050505050565b6000806040838503121561201157600080fd5b823561201c81611dff565b915060208301356001600160401b0381111561203757600080fd5b61204385828601611f8a565b9150509250929050565b60008060006060848603121561206257600080fd5b833561206d81611dff565b95602085013595506040909401359392505050565b600082601f83011261209357600080fd5b813560206120a3611fab83611f67565b82815260059290921b840181019181810190868411156120c257600080fd5b8286015b84811015611ff357803583529183019183016120c6565b6000806000606084860312156120f257600080fd5b83356001600160401b038082111561210957600080fd5b61211587838801611f8a565b9450602086013591508082111561212b57600080fd5b61213787838801612082565b9350604086013591508082111561214d57600080fd5b5061215a86828701612082565b9150509250925092565b602081526000611c096020830184611e34565b60005b8381101561219257818101518382015260200161217a565b838111156121a1576000848401525b50505050565b60208152600082518060208401526121c6816040850160208701612177565b601f01601f19169190910160400192915050565b6000602082840312156121ec57600080fd5b8151611c0981611dff565b6020808252600e908201526d1b9bdd0b585d5d1a1bdc9a5e995960921b604082015260600190565b6020808252825482820181905260008481528281209092916040850190845b818110156122635783546001600160a01b03168352600193840193928501920161223e565b50909695505050505050565b60006020828403121561228157600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156122c8576122c861229e565b5060010190565b60008160001904831182151516156122e9576122e961229e565b500290565b602080825260159082015274696e76616c69642d7265776172642d746f6b656e7360581b604082015260600190565b60008282101561232f5761232f61229e565b500390565b60008261235157634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156123695761236961229e565b500190565b60006020828403121561238057600080fd5b81518015158114611c0957600080fd5b600082516123a2818460208701612177565b919091019291505056fea2646970667358221220ed28cefd49a15e45fa44f52b34afe03ddca4e087edaa42e8142754ba7e563efc64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimReward(address)": {
        "details": "This function will claim rewards for all tokens being rewarded"
      },
      "claimable(address)": {
        "returns": {
          "_claimableAmounts": "Array of claimable for token on same index in rewardTokens",
          "_rewardTokens": "Array of tokens being rewarded"
        }
      },
      "initialize(address,address[])": {
        "details": "Called by proxy to initialize this contract",
        "params": {
          "pool_": "Vesper pool address",
          "rewardTokens_": "Array of reward token addresses"
        }
      },
      "notifyRewardAmount(address[],uint256[],uint256[])": {
        "details": "Also updates reward rate and reward earning period.",
        "params": {
          "rewardAmounts_": "Rewards amount for token on same index in rewardTokens array",
          "rewardDurations_": "Duration for which reward will be distributed",
          "rewardTokens_": "Tokens being rewarded"
        }
      },
      "rewardPerToken()": {
        "returns": {
          "_rewardPerTokenRate": "Array of Rewards rate for token on same index in rewardTokens",
          "_rewardTokens": "Array of tokens being rewarded"
        }
      }
    },
    "title": "Distribute rewards based on vesper pool balance and supply",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RewardAdded(address,uint256,uint256)": {
        "notice": "Emitted after reward added"
      },
      "RewardPaid(address,address,uint256)": {
        "notice": "Emitted whenever any user claim rewards"
      },
      "RewardTokenAdded(address,address[])": {
        "notice": "Emitted after adding new rewards token into rewardTokens array"
      }
    },
    "kind": "user",
    "methods": {
      "addRewardToken(address)": {
        "notice": "Add new reward token in existing rewardsToken array"
      },
      "claimReward(address)": {
        "notice": "Claim earned rewards."
      },
      "claimable(address)": {
        "notice": "Returns claimable reward amount."
      },
      "getRewardTokens()": {
        "notice": "Provides easy access to all rewardTokens"
      },
      "isRewardToken(address)": {
        "notice": "Reward token to valid/invalid flag mapping"
      },
      "lastTimeRewardApplicable(address)": {
        "notice": "Returns timestamp of last reward update"
      },
      "lastUpdateTime(address)": {
        "notice": "Reward token to Last reward drip update time stamp mapping"
      },
      "notifyRewardAmount(address[],uint256[],uint256[])": {
        "notice": "Notify that reward is added. Only authorized caller can call"
      },
      "periodFinish(address)": {
        "notice": "Reward token to period ending of current reward"
      },
      "pool()": {
        "notice": "Vesper pool address"
      },
      "rewardDuration(address)": {
        "notice": "Reward token to Duration of current reward distribution"
      },
      "rewardPerToken()": {
        "notice": "Rewards rate per pool token"
      },
      "rewardPerTokenStored(address)": {
        "notice": "Reward token to Reward per token mapping. Calculated and stored at last drip update"
      },
      "rewardRates(address)": {
        "notice": "Reward token to current reward rate mapping"
      },
      "rewardTokens(uint256)": {
        "notice": "Array of reward token addresses"
      },
      "rewards(address,address)": {
        "notice": "RewardToken => User => Rewards earned till last reward update"
      },
      "updateReward(address)": {
        "notice": "Updated reward for given account."
      },
      "userRewardPerTokenPaid(address,address)": {
        "notice": "Reward token => User => Reward per token stored at last reward update"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1360,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1363,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1411,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5770,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "pool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5774,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5779,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "isRewardToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5784,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "periodFinish",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5789,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardRates",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5794,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardDuration",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5799,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5804,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5811,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5818,
        "contract": "vesper-pools/contracts/pool/PoolRewards.sol:PoolRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}