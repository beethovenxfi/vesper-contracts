{
  "address": "0xC8Ba54eA8cDE1726c5D7363eC318C51b897B2F1a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapper_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "compRewards_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "comet_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrowToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vPool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vsp_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMaxBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBorrowLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comet",
      "outputs": [
        {
          "internalType": "contract IComet",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compRewards",
      "outputs": [
        {
          "internalType": "contract IRewards",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestVSP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToRecover",
          "type": "uint256"
        }
      ],
      "name": "recoverBorrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBorrowLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "updateBorrowLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vPool",
      "outputs": [
        {
          "internalType": "contract IVesperPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vsp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x19bd8c97d25bd7695053c5fa70dd780f9d52c139afb9b137661661154dcc7f11",
  "receipt": {
    "to": null,
    "from": "0x76d266DFD3754f090488ae12F6Bd115cD7E77eBD",
    "contractAddress": "0xC8Ba54eA8cDE1726c5D7363eC318C51b897B2F1a",
    "transactionIndex": 10,
    "gasUsed": "4694241",
    "logsBloom": "0x
    "blockHash": "0x431b4fbffeea190ef1b00aadb7cd698130ffe93fc215b8462323147b4f020dd2",
    "transactionHash": "0x19bd8c97d25bd7695053c5fa70dd780f9d52c139afb9b137661661154dcc7f11",
    "logs": [],
    "blockNumber": 16285578,
    "cumulativeGasUsed": "5241588",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xef4F4604106de23CDadfEAE08fcC34602cB475C1",
    "0x8f156189A3CD28dFc8FB7BbbAce58F98F09c0bB3",
    "0x1B0e765F6224C21223AeA2af16c1C46E38885a40",
    "0xc00e94Cb662C3520282E6f5717214004A7f26888",
    "0xc3d688B66703497DAA19211EEdff47f25384cdc3",
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "0xa8b607Aa09B6A2E306F93e74c282Fb13f6A80452",
    "0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421",
    "CompoundV3_Vesper_Xy_LINK_USDC"
  ],
  "numDeployments": 1,
  "solcInputHash": "a2a668b1e7f33f49a90ab5710d971d2a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compRewards_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vsp_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaxBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"UpdatedBorrowLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comet\",\"outputs\":[{\"internalType\":\"contract IComet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compRewards\",\"outputs\":[{\"internalType\":\"contract IRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestVSP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToRecover\",\"type\":\"uint256\"}],\"name\":\"recoverBorrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"updateBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vPool\",\"outputs\":[{\"internalType\":\"contract IVesperPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vsp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken(uint256)\":{\"details\":\"Approve all required tokens\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"recoverBorrowToken(uint256)\":{\"details\":\"If we get liquidation in Compound, we will have borrowToken sitting in strategy. This function allows to recover idle borrow token amount.\",\"params\":{\"_amountToRecover\":\"Amount of borrow token we want to recover in 1 call.      Set it 0 to recover all available borrow tokens\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"repayAll()\":{\"details\":\"This action usually done when loss is detected in strategy.0 borrow limit make sure that any future rebalance do not borrow again.\"},\"sweepERC20(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateBorrowLimit(uint256,uint256)\":{\"details\":\"It is possible to set 0 as _minBorrowLimit to not borrow anything\",\"params\":{\"_maxBorrowLimit\":\"It is % of actual collateral factor of protocol\",\"_minBorrowLimit\":\"It is % of actual collateral factor of protocol\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"Deposit Collateral in Compound and earn interest by depositing borrowed token in a Vesper Pool.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"borrowBalance()\":{\"notice\":\"Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"harvestVSP()\":{\"notice\":\"Claim VSP and convert to collateral token\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"recoverBorrowToken(uint256)\":{\"notice\":\"Recover extra borrow tokens from strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"repayAll()\":{\"notice\":\"Repay all borrow amount and set min borrow limit to 0.\"},\"sweepERC20(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns total collateral locked in the strategy\"},\"updateBorrowLimit(uint256,uint256)\":{\"notice\":\"Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol\":\"CompoundV3VesperXy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xba0130149442ec454dbf8b583e80ea623138a764d52a5193d64df7143c07e3d2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(address _rewardToken, uint256 _rewardAmount, uint256 _rewardDuration) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory _rewardTokens,\\n        uint256[] memory _rewardAmounts,\\n        uint256[] memory _rewardDurations\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(\\n        address _account\\n    ) external view returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address _rewardToken) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n}\\n\",\"keccak256\":\"0x5a7ed8ab606f30f37c78e48206faf59f07cfdf9141a4a64376174b9775633430\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 _profit) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 _share) external;\\n\\n    function multiTransfer(address[] memory _recipients, uint256[] memory _amounts) external returns (bool);\\n\\n    function excessDebt(address _strategy) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(uint256 _profit, uint256 _loss, uint256 _payback) external;\\n\\n    function reportLoss(uint256 _loss) external;\\n\\n    function sweepERC20(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address _address) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address _address) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(\\n        address _strategy\\n    )\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address _strategy) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf01e75effe99d22a092f144e597f47d4bb71a652e4784410010b7e527862406b\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/compound/ICompoundV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IComet is IERC20 {\\n    struct AssetInfo {\\n        uint8 offset;\\n        address asset;\\n        address priceFeed;\\n        uint64 scale;\\n        uint64 borrowCollateralFactor;\\n        uint64 liquidateCollateralFactor;\\n        uint64 liquidationFactor;\\n        uint128 supplyCap;\\n    }\\n\\n    struct TotalsCollateral {\\n        uint128 totalSupplyAsset;\\n        uint128 _reserved;\\n    }\\n\\n    /// @notice The address of the base token contract\\n    function baseToken() external view returns (address);\\n\\n    /// @notice The address of the price feed for the base token\\n    function baseTokenPriceFeed() external view returns (address);\\n\\n    /**\\n     * @notice Query the current negative base balance of an account or zero\\n     * @dev Note: uses updated interest indices to calculate\\n     * @param account The account whose balance to query\\n     * @return The present day base balance magnitude of the account, if negative\\n     */\\n    function borrowBalanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Query the current collateral balance of an account\\n     * @param account The account whose balance to query\\n     * @param asset The collateral asset to check the balance for\\n     * @return The collateral balance of the account\\n     */\\n    function collateralBalanceOf(address account, address asset) external view returns (uint128);\\n\\n    /**\\n     * @dev Determine index of asset that matches given address and return assetInfo\\n     */\\n    function getAssetInfoByAddress(address asset) external view returns (AssetInfo memory);\\n\\n    /**\\n     * @notice Get the current price from a feed\\n     * @param priceFeed The address of a price feed\\n     * @return The price, scaled by `PRICE_SCALE`\\n     */\\n    function getPrice(address priceFeed) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total amount of debt\\n     * @dev Note: uses updated interest indices to calculate\\n     * @return The amount of debt\\n     **/\\n    function totalBorrow() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total amount of given token\\n     * @param asset The collateral asset to check the total for\\n     * @return The total collateral balance\\n     */\\n    function totalsCollateral(address asset) external view returns (TotalsCollateral memory);\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @dev Note: uses updated interest indices to calculate\\n     * @return The supply of tokens\\n     **/\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Supply an amount of asset to the protocol\\n     * @param asset The asset to supply\\n     * @param amount The quantity to supply\\n     */\\n    function supply(address asset, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraw an amount of asset from the protocol\\n     * @param asset The asset to withdraw\\n     * @param amount The quantity to withdraw\\n     */\\n    function withdraw(address asset, uint256 amount) external;\\n}\\n\\ninterface IRewards {\\n    struct RewardOwed {\\n        address token;\\n        uint256 owed;\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of a reward token owed to an account\\n     * @param comet The protocol instance\\n     * @param account The account to check rewards for\\n     */\\n    function getRewardOwed(address comet, address account) external returns (RewardOwed memory);\\n\\n    /**\\n     * @notice Claim rewards of token type from a comet instance to owner address\\n     * @param comet The protocol instance\\n     * @param src The owner to claim for\\n     * @param shouldAccrue Whether or not to call accrue first\\n     */\\n    function claim(address comet, address src, bool shouldAccrue) external;\\n}\\n\",\"keccak256\":\"0x2d626b684bde523d40dd114f56c9c1483c9f42a689a583a91f7e3abab70eebab\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(address tokenIn_, address tokenOut_, uint256 amountOut_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(address tokenIn_, address tokenOut_, uint256 amountIn_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x853ff5f9fbdd441f535370e39d43221d72d7a02fd5e48e343bbecb716a633f10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(address _pool, address _swapper, address _receiptToken) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken(uint256 _approvalAmount) external onlyKeeper {\\n        _approveToken(_approvalAmount);\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance() external onlyKeeper returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepERC20(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _rebalance() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(address _tokenIn, address _tokenOut, uint256 _amountIn) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0xb220b02e37b806862026e1719b1ce5a10af83219a8e7f3604a487cad1e06f64a\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"./CompoundV3Xy.sol\\\";\\n\\n/// @title Deposit Collateral in Compound and earn interest by depositing borrowed token in a Vesper Pool.\\ncontract CompoundV3VesperXy is CompoundV3Xy {\\n    using SafeERC20 for IERC20;\\n\\n    // Destination Grow Pool for borrowed Token\\n    IVesperPool public immutable vPool;\\n    // VSP token address\\n    address public immutable vsp;\\n\\n    constructor(\\n        address pool_,\\n        address swapper_,\\n        address compRewards_,\\n        address rewardToken_,\\n        address comet_,\\n        address borrowToken_,\\n        address vPool_,\\n        address vsp_,\\n        string memory name_\\n    ) CompoundV3Xy(pool_, swapper_, compRewards_, rewardToken_, comet_, borrowToken_, name_) {\\n        require(vsp_ != address(0), \\\"vsp-address-is-zero\\\");\\n        require(address(IVesperPool(vPool_).token()) == borrowToken, \\\"invalid-grow-pool\\\");\\n        vPool = IVesperPool(vPool_);\\n        vsp = vsp_;\\n    }\\n\\n    /// @notice Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool\\n    function borrowBalance() external view returns (uint256) {\\n        return IERC20(borrowToken).balanceOf(address(this)) + _getYTokensInProtocol();\\n    }\\n\\n    /// @notice Claim VSP and convert to collateral token\\n    function harvestVSP() external {\\n        address _poolRewards = vPool.poolRewards();\\n        if (_poolRewards != address(0)) {\\n            IPoolRewards(_poolRewards).claimReward(address(this));\\n        }\\n        uint256 _vspAmount = IERC20(vsp).balanceOf(address(this));\\n        if (_vspAmount > 0) {\\n            _swapExactInput(vsp, address(collateralToken), _vspAmount);\\n        }\\n    }\\n\\n    function isReservedToken(address token_) public view virtual override returns (bool) {\\n        return super.isReservedToken(token_) || token_ == address(vPool);\\n    }\\n\\n    /// @notice After borrowing Y, deposit to Vesper Pool\\n    function _afterBorrowY(uint256 amount_) internal override {\\n        vPool.deposit(amount_);\\n    }\\n\\n    function _approveToken(uint256 amount_) internal override {\\n        super._approveToken(amount_);\\n        IERC20(borrowToken).safeApprove(address(vPool), amount_);\\n        IERC20(vsp).safeApprove(address(swapper), amount_);\\n    }\\n\\n    function _getYTokensInProtocol() internal view override returns (uint256) {\\n        return (vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18;\\n    }\\n\\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\\n    function _withdrawY(uint256 amount_) internal override {\\n        uint256 _pricePerShare = vPool.pricePerShare();\\n        uint256 _shares = (amount_ * 1e18) / _pricePerShare;\\n        _shares = amount_ > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\\n        uint256 _maxShares = vPool.balanceOf(address(this));\\n        _shares = _shares > _maxShares ? _maxShares : _shares;\\n        if (_shares > 0) {\\n            vPool.withdraw(_shares);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb9c7010844c95e510cc008cd2aaefc10c80e8662a4d48cbe6e8a0c351bd8fae1\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/compound/v3/CompoundV3Xy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../Strategy.sol\\\";\\nimport \\\"../../../interfaces/compound/ICompoundV3.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\n/// @title This strategy will deposit collateral token in Compound V3 and based on position it will\\n/// borrow based token. Supply X borrow Y and keep borrowed amount here.\\n/// It does not handle ETH as collateral\\ncontract CompoundV3Xy is Strategy {\\n    using SafeERC20 for IERC20;\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"5.0.0\\\";\\n\\n    uint256 internal constant MAX_BPS = 10_000; //100%\\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\\n\\n    IRewards public immutable compRewards;\\n    address public immutable rewardToken;\\n    IComet public immutable comet;\\n    address public immutable borrowToken;\\n\\n    event UpdatedBorrowLimit(\\n        uint256 previousMinBorrowLimit,\\n        uint256 newMinBorrowLimit,\\n        uint256 previousMaxBorrowLimit,\\n        uint256 newMaxBorrowLimit\\n    );\\n\\n    constructor(\\n        address pool_,\\n        address swapper_,\\n        address compRewards_,\\n        address rewardToken_,\\n        address comet_,\\n        address borrowToken_,\\n        string memory name_\\n    ) Strategy(pool_, swapper_, comet_) {\\n        require(compRewards_ != address(0), \\\"rewards-address-is-zero\\\");\\n        require(comet_ != address(0), \\\"comet-address-is-zero\\\");\\n        require(rewardToken_ != address(0), \\\"reward-token-address-is-zero\\\");\\n\\n        compRewards = IRewards(compRewards_);\\n        rewardToken = rewardToken_;\\n        comet = IComet(comet_);\\n        borrowToken = borrowToken_;\\n        NAME = name_;\\n    }\\n\\n    function isReservedToken(address token_) public view virtual override returns (bool) {\\n        return token_ == address(comet) || token_ == address(collateralToken) || token_ == borrowToken;\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view override returns (uint256) {\\n        return\\n            comet.collateralBalanceOf(address(this), address(collateralToken)) +\\n            collateralToken.balanceOf(address(this));\\n    }\\n\\n    /// @dev Hook that executes after collateral borrow.\\n    function _afterBorrowY(uint256 amount_) internal virtual {}\\n\\n    /// @notice Approve all required tokens\\n    function _approveToken(uint256 amount_) internal virtual override {\\n        super._approveToken(amount_);\\n        address _swapper = address(swapper);\\n        collateralToken.safeApprove(address(comet), amount_);\\n        collateralToken.safeApprove(_swapper, amount_);\\n        IERC20(borrowToken).safeApprove(address(comet), amount_);\\n        IERC20(borrowToken).safeApprove(_swapper, amount_);\\n        IERC20(rewardToken).safeApprove(_swapper, amount_);\\n    }\\n\\n    /**\\n     * @notice Claim rewardToken and transfer to new strategy\\n     * @param newStrategy_ Address of new strategy.\\n     */\\n    function _beforeMigration(address newStrategy_) internal override {\\n        require(IStrategy(newStrategy_).token() == address(comet), \\\"wrong-receipt-token\\\");\\n        _repay(comet.borrowBalanceOf(address(this)), false);\\n        _withdrawHere(comet.collateralBalanceOf(address(this), address(collateralToken)));\\n    }\\n\\n    /// @dev Borrow Y from Compound. _afterBorrowY hook can be used to do anything with borrowed amount.\\n    /// @dev Override to handle ETH\\n    function _borrowY(uint256 amount_) internal virtual {\\n        if (amount_ > 0) {\\n            comet.withdraw(borrowToken, amount_);\\n            _afterBorrowY(amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\\n     * @param depositAmount_ deposit amount\\n     * @param withdrawAmount_ withdraw amount\\n     * @return _borrowAmount borrow more amount\\n     * @return _repayAmount repay amount to keep ltv within limits\\n     */\\n    function _calculateBorrowPosition(\\n        uint256 depositAmount_,\\n        uint256 withdrawAmount_\\n    ) internal view returns (uint256 _borrowAmount, uint256 _repayAmount) {\\n        require(depositAmount_ == 0 || withdrawAmount_ == 0, \\\"all-input-gt-zero\\\");\\n        uint256 _borrowed = comet.borrowBalanceOf(address(this));\\n        // If maximum borrow limit set to 0 then repay borrow\\n        if (maxBorrowLimit == 0) {\\n            return (0, _borrowed);\\n        }\\n\\n        uint256 _collateralSupplied = comet.collateralBalanceOf(address(this), address(collateralToken));\\n\\n        // In case of withdraw, withdrawAmount_ may be greater than _collateralSupplied\\n        uint256 _hypotheticalCollateral;\\n        if (depositAmount_ > 0) {\\n            _hypotheticalCollateral = _collateralSupplied + depositAmount_;\\n        } else if (_collateralSupplied > withdrawAmount_) {\\n            _hypotheticalCollateral = _collateralSupplied - withdrawAmount_;\\n        }\\n\\n        IComet.AssetInfo memory _collateralInfo = comet.getAssetInfoByAddress(address(collateralToken));\\n\\n        // Compound V3 is using chainlink for price feed. Feed has 8 decimals\\n        uint256 _collateralTokenPrice = comet.getPrice(_collateralInfo.priceFeed);\\n        uint256 _borrowTokenPrice = comet.getPrice(comet.baseTokenPriceFeed());\\n\\n        // Calculate max borrow based on collateral factor. CF is 18 decimal based\\n        uint256 _collateralForBorrowInUSD = (_hypotheticalCollateral *\\n            _collateralTokenPrice *\\n            _collateralInfo.borrowCollateralFactor) /\\n            (1e18 * 10 ** IERC20Metadata(address(collateralToken)).decimals());\\n\\n        // Max borrow limit in borrow token\\n        uint256 _maxBorrowPossible = (_collateralForBorrowInUSD * 10 ** IERC20Metadata(borrowToken).decimals()) /\\n            _borrowTokenPrice;\\n        // If maxBorrow is zero, we should repay total amount of borrow\\n        if (_maxBorrowPossible == 0) {\\n            return (0, _borrowed);\\n        }\\n\\n        // Safe buffer to avoid liquidation due to price variations.\\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\\n\\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\\n\\n        // If current borrow is greater than max borrow, then repay to achieve safe position else borrow more.\\n        if (_borrowed > _borrowUpperBound) {\\n            // If borrow > upperBound then it is greater than lowerBound too.\\n            _repayAmount = _borrowed - _borrowLowerBound;\\n        } else if (_borrowLowerBound > _borrowed) {\\n            _borrowAmount = _borrowLowerBound - _borrowed;\\n            uint256 _availableLiquidity = _getAvailableLiquidity();\\n            if (_borrowAmount > _availableLiquidity) {\\n                _borrowAmount = _availableLiquidity;\\n            }\\n        }\\n    }\\n\\n    /// @dev Claim COMP and convert COMP into given token.\\n    function _claimRewardsAndConvertTo(address toToken_) internal virtual {\\n        if (rewardToken != address(0)) {\\n            compRewards.claim(address(comet), address(this), true);\\n            uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n            if (_rewardAmount > 0) {\\n                _safeSwapExactInput(rewardToken, toToken_, _rewardAmount);\\n            }\\n        }\\n    }\\n\\n    /// @dev Deposit collateral in Compound V3 and adjust borrow position\\n    function _deposit() internal {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\\n        if (_repayAmount > 0) {\\n            // Repay to maintain safe position\\n            _repay(_repayAmount, false);\\n            _mintX(collateralToken.balanceOf(address(this)));\\n        } else {\\n            // Happy path, mint more borrow more\\n            _mintX(_collateralBalance);\\n            _borrowY(_borrowAmount);\\n        }\\n    }\\n\\n    function _getAvailableLiquidity() internal view virtual returns (uint256) {\\n        uint256 _totalSupply = comet.totalSupply();\\n        uint256 _totalBorrow = comet.totalBorrow();\\n        return _totalSupply > _totalBorrow ? _totalSupply - _totalBorrow : 0;\\n    }\\n\\n    function _getYTokensInProtocol() internal view virtual returns (uint256) {}\\n\\n    /// @dev Deposit collateral aka X in Compound. Override to handle ETH\\n    function _mintX(uint256 _amount) internal virtual {\\n        if (_amount > 0) {\\n            comet.supply(address(collateralToken), _amount);\\n        }\\n    }\\n\\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        // Claim any reward we have.\\n        _claimRewardsAndConvertTo(address(collateralToken));\\n\\n        uint256 _yTokensBorrowed = comet.borrowBalanceOf(address(this));\\n        uint256 _yTokensHere = IERC20(borrowToken).balanceOf(address(this));\\n        uint256 _yTokensInProtocol = _getYTokensInProtocol();\\n        uint256 _totalYTokens = _yTokensHere + _yTokensInProtocol;\\n\\n        // _borrow increases every block. Convert collateral to borrowToken.\\n        if (_yTokensBorrowed > _totalYTokens) {\\n            _swapToBorrowToken(_yTokensBorrowed - _totalYTokens);\\n        } else {\\n            // When _yTokensInProtocol exceeds _yTokensBorrowed from Compound\\n            // then we have profit from investing borrow tokens. _yTokensHere is profit.\\n            if (_yTokensInProtocol > _yTokensBorrowed) {\\n                _withdrawY(_yTokensInProtocol - _yTokensBorrowed);\\n                _yTokensHere = IERC20(borrowToken).balanceOf(address(this));\\n            }\\n            if (_yTokensHere > 0) {\\n                _safeSwapExactInput(borrowToken, address(collateralToken), _yTokensHere);\\n            }\\n        }\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _collateralInCompound = comet.collateralBalanceOf(address(this), address(collateralToken));\\n        uint256 _totalCollateral = _collateralInCompound + _collateralHere;\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_collateralHere < _profitAndExcessDebt) {\\n            uint256 _totalAmountToWithdraw = _profitAndExcessDebt - _collateralHere;\\n            if (_totalAmountToWithdraw > 0) {\\n                _withdrawHere(_totalAmountToWithdraw);\\n                _collateralHere = collateralToken.balanceOf(address(this));\\n            }\\n        }\\n\\n        // Set actual payback first and then profit. Make sure _collateralHere >= _payback + profit.\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _deposit();\\n    }\\n\\n    /**\\n     * @dev Repay borrow amount\\n     * @dev Claim rewardToken and convert to collateral. Swap collateral to borrowToken as needed.\\n     * @param _repayAmount BorrowToken amount that we should repay to maintain safe position.\\n     * @param _shouldClaimComp Flag indicating should we claim rewardToken and convert to collateral or not.\\n     */\\n    function _repay(uint256 _repayAmount, bool _shouldClaimComp) internal {\\n        if (_repayAmount > 0) {\\n            uint256 _totalYTokens = IERC20(borrowToken).balanceOf(address(this)) + _getYTokensInProtocol();\\n            // Liability is more than what we have.\\n            // To repay loan - convert all rewards to collateral, if asked, and redeem collateral(if needed).\\n            // This scenario is rare and if system works okay it will/might happen during final repay only.\\n            if (_repayAmount > _totalYTokens) {\\n                if (_shouldClaimComp) {\\n                    // Claim rewardToken and convert those to collateral.\\n                    _claimRewardsAndConvertTo(address(collateralToken));\\n                }\\n\\n                uint256 _yTokensBorrowed = comet.borrowBalanceOf(address(this));\\n                // For example this is final repay and 100 blocks has passed since last withdraw/rebalance,\\n                // _yTokensBorrowed is increasing due to interest. Now if _repayAmount > _borrowBalanceHere is true\\n                // _yTokensBorrowed > _borrowBalanceHere is also true.\\n                // To maintain safe position we always try to keep _yTokensBorrowed = _borrowBalanceHere\\n\\n                // Swap collateral to borrowToken to repay borrow and also maintain safe position\\n                // Here borrowToken amount needed is (_yTokensBorrowed - _borrowBalanceHere)\\n                _swapToBorrowToken(_yTokensBorrowed - _totalYTokens);\\n            }\\n            _repayY(_repayAmount);\\n        }\\n    }\\n\\n    /// @dev Repay Y to Compound V3. Withdraw Y from end protocol if applicable.\\n    /// @dev Override this to handle ETH\\n    function _repayY(uint256 amount_) internal virtual {\\n        _withdrawY(amount_);\\n        comet.supply(borrowToken, amount_);\\n    }\\n\\n    /**\\n     * @dev Swap given token to borrowToken\\n     * @param shortOnBorrow_ Expected output of this swap\\n     */\\n    function _swapToBorrowToken(uint256 shortOnBorrow_) internal {\\n        // Looking for _amountIn using fixed output amount\\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, shortOnBorrow_);\\n        if (_amountIn > 0) {\\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n            // If we do not have enough _from token to get expected output, either get\\n            // some _from token or adjust expected output.\\n            if (_amountIn > _collateralHere) {\\n                // Redeem some collateral, so that we have enough collateral to get expected output\\n                comet.withdraw(address(collateralToken), _amountIn - _collateralHere);\\n            }\\n            swapper.swapExactOutput(address(collateralToken), borrowToken, shortOnBorrow_, _amountIn, address(this));\\n        }\\n    }\\n\\n    /// @dev Withdraw collateral here. Do not transfer to pool\\n    function _withdrawHere(uint256 amount_) internal override {\\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, amount_);\\n        _repay(_repayAmount, true);\\n\\n        // Get minimum of amount_ and collateral supplied and _availableLiquidity of collateral\\n        uint256 _withdrawAmount = Math.min(\\n            amount_,\\n            Math.min(\\n                comet.collateralBalanceOf(address(this), address(collateralToken)),\\n                comet.totalsCollateral(address(collateralToken)).totalSupplyAsset\\n            )\\n        );\\n        comet.withdraw(address(collateralToken), _withdrawAmount);\\n    }\\n\\n    function _withdrawY(uint256 _amount) internal virtual {}\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n    /**\\n     * @notice Recover extra borrow tokens from strategy\\n     * @dev If we get liquidation in Compound, we will have borrowToken sitting in strategy.\\n     * This function allows to recover idle borrow token amount.\\n     * @param _amountToRecover Amount of borrow token we want to recover in 1 call.\\n     *      Set it 0 to recover all available borrow tokens\\n     */\\n    function recoverBorrowToken(uint256 _amountToRecover) external onlyKeeper {\\n        uint256 _borrowBalanceHere = IERC20(borrowToken).balanceOf(address(this));\\n        uint256 _borrowInCompound = comet.borrowBalanceOf(address(this));\\n\\n        if (_borrowBalanceHere > _borrowInCompound) {\\n            uint256 _extraBorrowBalance = _borrowBalanceHere - _borrowInCompound;\\n            uint256 _recoveryAmount = (_amountToRecover > 0 && _extraBorrowBalance > _amountToRecover)\\n                ? _amountToRecover\\n                : _extraBorrowBalance;\\n            // Do swap and transfer\\n            uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n            _safeSwapExactInput(borrowToken, address(collateralToken), _recoveryAmount);\\n            collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)) - _collateralBefore);\\n        }\\n    }\\n\\n    /**\\n     * @notice Repay all borrow amount and set min borrow limit to 0.\\n     * @dev This action usually done when loss is detected in strategy.\\n     * @dev 0 borrow limit make sure that any future rebalance do not borrow again.\\n     */\\n    function repayAll() external onlyKeeper {\\n        _repay(comet.borrowBalanceOf(address(this)), true);\\n        minBorrowLimit = 0;\\n        maxBorrowLimit = 0;\\n    }\\n\\n    /**\\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\\n     * @dev It is possible to set 0 as _minBorrowLimit to not borrow anything\\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\\n     */\\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\\n        require(_maxBorrowLimit < MAX_BPS, \\\"invalid-max-borrow-limit\\\");\\n        // set _maxBorrowLimit and _minBorrowLimit to zero to disable borrow;\\n        require(\\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\\n            \\\"max-should-be-higher-than-min\\\"\\n        );\\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\\n        // To avoid liquidation due to price variations maxBorrowLimit is a collateral factor that is less than actual collateral factor of protocol\\n        minBorrowLimit = _minBorrowLimit;\\n        maxBorrowLimit = _maxBorrowLimit;\\n    }\\n}\\n\",\"keccak256\":\"0x76f50ad4939bee8ecae761aeb7af627b5e9589945d80de078eb4703e871f5050\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610180604052611b586006556121346007553480156200001e57600080fd5b5060405162005bb938038062005bb98339810160408190526200004191620006b4565b888888888888868686846001600160a01b038316620000a75760405162461bcd60e51b815260206004820152601460248201527f706f6f6c2d616464726573732d69732d7a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000ff5760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f00000000000000000060448201526064016200009e565b600280546001600160a01b0319166001600160a01b0384811691909117909155831660a081905260408051637e062a3560e11b8152905163fc0c546a91600480820192602092909190829003018186803b1580156200015d57600080fd5b505afa15801562000172573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001989190620007a2565b6001600160a01b03908116608052600080546001600160a01b031916918316919091179055620001df620001c93390565b6003620004b660201b62001d6b1790919060201c565b620002215760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016200009e565b5050506001600160a01b0385166200027c5760405162461bcd60e51b815260206004820152601760248201527f726577617264732d616464726573732d69732d7a65726f00000000000000000060448201526064016200009e565b6001600160a01b038316620002d45760405162461bcd60e51b815260206004820152601560248201527f636f6d65742d616464726573732d69732d7a65726f000000000000000000000060448201526064016200009e565b6001600160a01b0384166200032c5760405162461bcd60e51b815260206004820152601c60248201527f7265776172642d746f6b656e2d616464726573732d69732d7a65726f0000000060448201526064016200009e565b6001600160a01b0380861660c05284811660e0528381166101005282166101205280516200036290600590602084019062000528565b50505050506001600160a01b03851615159250620003c69150505760405162461bcd60e51b815260206004820152601360248201527f7673702d616464726573732d69732d7a65726f0000000000000000000000000060448201526064016200009e565b610120516001600160a01b0316836001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200040d57600080fd5b505afa15801562000422573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004489190620007a2565b6001600160a01b031614620004945760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a590b59dc9bddcb5c1bdbdb607a1b60448201526064016200009e565b506001600160a01b039182166101405216610160525062000806945050505050565b6000620004cd836001600160a01b038416620004d6565b90505b92915050565b60008181526001830160205260408120546200051f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620004d0565b506000620004d0565b8280546200053690620007c9565b90600052602060002090601f0160209004810192826200055a5760008555620005a5565b82601f106200057557805160ff1916838001178555620005a5565b82800160010185558215620005a5579182015b82811115620005a557825182559160200191906001019062000588565b50620005b3929150620005b7565b5090565b5b80821115620005b35760008155600101620005b8565b6001600160a01b0381168114620005e457600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200060f57600080fd5b81516001600160401b03808211156200062c576200062c620005e7565b604051601f8301601f19908116603f01168101908282118183101715620006575762000657620005e7565b816040528381526020925086838588010111156200067457600080fd5b600091505b8382101562000698578582018301518183018401529082019062000679565b83821115620006aa5760008385830101525b9695505050505050565b60008060008060008060008060006101208a8c031215620006d457600080fd5b8951620006e181620005ce565b60208b0151909950620006f481620005ce565b60408b01519098506200070781620005ce565b60608b01519097506200071a81620005ce565b60808b01519096506200072d81620005ce565b60a08b01519095506200074081620005ce565b60c08b01519094506200075381620005ce565b60e08b01519093506200076681620005ce565b6101008b01519092506001600160401b038111156200078457600080fd5b620007928c828d01620005fd565b9150509295985092959850929598565b600060208284031215620007b557600080fd5b8151620007c281620005ce565b9392505050565b600181811c90821680620007de57607f821691505b602082108114156200080057634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051610140516101605161503662000b836000396000818161023d01528181610be801528181610c7a015261224601526000818161032901528181610a9101528181610acf01528181611da901528181611e45015281816122100152818161409a015281816141860152818161424f015261494b0152600081816102fa0152818161065501528181610dda01528181610fda015281816121ee015281816122ea015281816125c9015281816126cf0152818161276201528181612f280152818161383601528181613a3c01528181613a9001528181613de401528181614016015281816144de01526147a80152600081816103c401528181610e6501528181611a1401528181611b0e01528181611f640152818161202b01528181612112015281816122730152818161253e0152818161284d01528181612b8c01528181612c8c01528181612d330152818161300a01528181613325015281816133dc015281816134d6015281816135820152818161362601528181613655015281816139d601528181613a5e01528181613c3f01528181613f2c015281816144b101528181614551015281816145e601528181614707015261477b0152600081816104a701528181613ac401528181613bfb01528181613ce90152613d7c01526000818161028a0152613c740152600081816102010152818161051b015281816106ec01528181610808015281816108e60152818161097401528181611025015281816110f601528181611193015281816113bf0152818161158801528181611ba8015281816123bf0152818161245f01528181612a7801526146c501526000818161039d015281816104470152818161074b015281816107e60152818161085a0152818161091901528181610c9b01528181610f3901528181610ffb0152818161104701528181611323015281816117ba0152818161197801528181611a4301528181611f940152818161205a0152818161213f015281816122ae0152818161250001528181612783015281816127c20152818161287d0152818161299201528181612d6201528181612fcc0152818161340b0152818161350301528181613756015281816139b401528181613a0801528181613dbc01528181613e9301528181613f5301528181613ff4015281816142d301528181614399015281816146a3015261473401526150366000f3fe608060405234801561001057600080fd5b50600436106101c65760003560e01c8063b2016bd4116100fa578063e00af4a71161009d578063e00af4a71461046b578063e260d7471461047e578063e5328e0614610487578063ec78e8321461048f578063f7c618c1146104a2578063fa3ae6dc146104c9578063fb7ee102146104d1578063fc0c546a146104e4578063ffa1ad74146104f557600080fd5b8063b2016bd414610398578063ba3e9c12146103bf578063c415b95c146103e6578063c7ad2748146103f9578063ce5494bb1461040c578063d2c35ce81461041f578063d3033c3914610432578063d8dfeb451461044557600080fd5b80633ac9fc111161016d5780633ac9fc11146102ac5780634032b72b146102bf578063440d7248146102d2578063456dc17a146102f55780634fc90c2c1461031c5780636719578c146103245780637d7c2a1c1461034b578063951dc22c1461036e578063a3f4df7e1461038357600080fd5b80630181686c146101cb57806314ae9f2e146101e757806316f0115b146101fc578063243cd14e1461023057806329ba73ed146102385780632b3297f91461025f5780632e1a7d4d146102725780632f9cb53e14610285575b600080fd5b6101d460075481565b6040519081526020015b60405180910390f35b6101fa6101f53660046149d0565b610519565b005b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6040516101de91906149ed565b6101d4610634565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b600254610223906001600160a01b031681565b6101fa610280366004614a01565b6106e9565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6101fa6102ba366004614a01565b610940565b6101fa6102cd3660046149d0565b610972565b6102e56102e03660046149d0565b610a7e565b60405190151581526020016101de565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6101fa610acb565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b610353610cc5565b604080519384526020840192909252908201526060016101de565b610376610d01565b6040516101de9190614a1a565b61038b610d0d565b6040516101de9190614a93565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b600154610223906001600160a01b031681565b6101fa610407366004614a01565b610d9b565b6101fa61041a3660046149d0565b6110f3565b6101fa61042d3660046149d0565b6113bd565b6101fa6104403660046149d0565b611586565b7f0000000000000000000000000000000000000000000000000000000000000000610223565b6101fa6104793660046149d0565b611743565b6101d460065481565b6101d461195e565b600054610223906001600160a01b031681565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6101fa611ace565b6101fa6104df366004614ac6565b611ba6565b6000546001600160a01b0316610223565b61038b604051806040016040528060058152602001640352e302e360dc1b81525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561057257600080fd5b505afa158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa9190614af8565b6001600160a01b0316336001600160a01b0316146105e35760405162461bcd60e51b81526004016105da90614b15565b60405180910390fd5b6105ee600382611d87565b6106315760405162461bcd60e51b81526020600482015260146024820152731c995b5bdd994b5ad9595c195c8b59985a5b195960621b60448201526064016105da565b50565b600061063e611d9c565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061068a9030906004016149ed565b60206040518083038186803b1580156106a257600080fd5b505afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190614b4c565b6106e49190614b7b565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146107315760405162461bcd60e51b81526004016105da90614b93565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906107809030906004016149ed565b60206040518083038186803b15801561079857600080fd5b505afa1580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d09190614b4c565b90508181106108315761082d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084611ee8565b5050565b61084361083e8284614bc6565b611f3e565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061088f9030906004016149ed565b60206040518083038186803b1580156108a757600080fd5b505afa1580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108df9190614b4c565b905061082d7f000000000000000000000000000000000000000000000000000000000000000061090f84846121a0565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190611ee8565b61094d335b6003906121b6565b6109695760405162461bcd60e51b81526004016105da90614bdd565b610631816121d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156109cb57600080fd5b505afa1580156109df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a039190614af8565b6001600160a01b0316336001600160a01b031614610a335760405162461bcd60e51b81526004016105da90614b15565b610a3e600382611d6b565b6106315760405162461bcd60e51b81526020600482015260116024820152701859190b5ad9595c195c8b59985a5b1959607a1b60448201526064016105da565b6000610a898261226f565b80610ac557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2657600080fd5b505afa158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190614af8565b90506001600160a01b03811615610bce5760405163d279c19160e01b81526001600160a01b0382169063d279c19190610b9b9030906004016149ed565b600060405180830381600087803b158015610bb557600080fd5b505af1158015610bc9573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610c1d9030906004016149ed565b60206040518083038186803b158015610c3557600080fd5b505afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d9190614b4c565b9050801561082d57610cc07f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083612323565b505050565b60008080610cd233610945565b610cee5760405162461bcd60e51b81526004016105da90614bdd565b610cf66123b7565b925092509250909192565b60606106e46003612aeb565b60058054610d1a90614c0d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4690614c0d565b8015610d935780601f10610d6857610100808354040283529160200191610d93565b820191906000526020600020905b815481529060010190602001808311610d7657829003601f168201915b505050505081565b610da433610945565b610dc05760405162461bcd60e51b81526004016105da90614bdd565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610e0f9030906004016149ed565b60206040518083038186803b158015610e2757600080fd5b505afa158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f9190614b4c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663374c49b4306040518263ffffffff1660e01b8152600401610eaf91906149ed565b60206040518083038186803b158015610ec757600080fd5b505afa158015610edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eff9190614b4c565b905080821115610cc0576000610f158284614bc6565b905060008085118015610f2757508482115b610f315781610f33565b845b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610f8391906149ed565b60206040518083038186803b158015610f9b57600080fd5b505afa158015610faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd39190614b4c565b90506110207f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084612af8565b6110eb7f0000000000000000000000000000000000000000000000000000000000000000827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161109191906149ed565b60206040518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190614b4c565b61090f9190614bc6565b505050505050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161461113b5760405162461bcd60e51b81526004016105da90614b93565b6001600160a01b0381166111915760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f0000000060448201526064016105da565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f457600080fd5b505afa158015611208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122c9190614af8565b6001600160a01b03161461127b5760405162461bcd60e51b81526020600482015260166024820152756e6f742d76616c69642d6e65772d737472617465677960501b60448201526064016105da565b61128481612b8a565b6000546040516370a0823160e01b815261131d9183916001600160a01b03909116906370a08231906112ba9030906004016149ed565b60206040518083038186803b1580156112d257600080fd5b505afa1580156112e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130a9190614b4c565b6000546001600160a01b03169190611ee8565b610631817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161136d91906149ed565b60206040518083038186803b15801561138557600080fd5b505afa158015611399573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f9190614b4c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561141657600080fd5b505afa15801561142a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144e9190614af8565b6001600160a01b0316336001600160a01b03161461147e5760405162461bcd60e51b81526004016105da90614b15565b6001600160a01b0381166114d45760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f00000060448201526064016105da565b6001546001600160a01b038281169116141561152a5760405162461bcd60e51b81526020600482015260156024820152746665652d636f6c6c6563746f722d69732d73616d6560581b60448201526064016105da565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156115df57600080fd5b505afa1580156115f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116179190614af8565b6001600160a01b0316336001600160a01b0316146116475760405162461bcd60e51b81526004016105da90614b15565b6001600160a01b0381166116975760405162461bcd60e51b8152602060048201526017602482015276737761707065722d616464726573732d69732d7a65726f60481b60448201526064016105da565b6002546001600160a01b03828116911614156116e75760405162461bcd60e51b815260206004820152600f60248201526e737761707065722d69732d73616d6560881b60448201526064016105da565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b61174c33610945565b6117685760405162461bcd60e51b81526004016105da90614bdd565b6001546001600160a01b03166117b85760405162461bcd60e51b81526020600482015260156024820152741999594b58dbdb1b1958dd1bdc8b5b9bdd0b5cd95d605a1b60448201526064016105da565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316141561183a5760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c0060448201526064016105da565b61184381610a7e565b156118875760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b60448201526064016105da565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156118c257600154610631906001600160a01b031647612de8565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906118f19030906004016149ed565b60206040518083038186803b15801561190957600080fd5b505afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119419190614b4c565b60015490915061082d906001600160a01b03848116911683611ee8565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906119ad9030906004016149ed565b60206040518083038186803b1580156119c557600080fd5b505afa1580156119d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fd9190614b4c565b604051632e12a4f760e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635c2549ee90611a6b9030907f000000000000000000000000000000000000000000000000000000000000000090600401614c48565b60206040518083038186803b158015611a8357600080fd5b505afa158015611a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abb9190614c79565b6001600160801b03166106e49190614b7b565b611ad733610945565b611af35760405162461bcd60e51b81526004016105da90614bdd565b604051630dd3126d60e21b8152611b9a906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063374c49b490611b439030906004016149ed565b60206040518083038186803b158015611b5b57600080fd5b505afa158015611b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b939190614b4c565b6001612f01565b60006006819055600755565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015611bff57600080fd5b505afa158015611c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c379190614af8565b6001600160a01b0316336001600160a01b031614611c675760405162461bcd60e51b81526004016105da90614b15565b6127108110611cb35760405162461bcd60e51b81526020600482015260186024820152771a5b9d985b1a590b5b585e0b589bdc9c9bddcb5b1a5b5a5d60421b60448201526064016105da565b80158015611cbf575081155b80611cc957508181115b611d155760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e00000060448201526064016105da565b6006546007546040805192835260208301859052820152606081018290527fedd77444afdf63401315e81ffe86d08f7865796e8ad2e11acf1d56a1393f07d59060800160405180910390a1600691909155600755565b6000611d80836001600160a01b0384166130a9565b9392505050565b6000611d80836001600160a01b0384166130f8565b6000670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611df391906149ed565b60206040518083038186803b158015611e0b57600080fd5b505afa158015611e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e439190614b4c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9c57600080fd5b505afa158015611eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed49190614b4c565b611ede9190614c94565b6106e49190614cb3565b610cc08363a9059cbb60e01b8484604051602401611f07929190614cd5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526131eb565b6000611f4b6000836132bd565b915050611f59816001612f01565b60006120f8836120f37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c2549ee307f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401611fd0929190614c48565b60206040518083038186803b158015611fe857600080fd5b505afa158015611ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120209190614c79565b6001600160801b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166359e017bd7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161209591906149ed565b604080518083038186803b1580156120ac57600080fd5b505afa1580156120c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e49190614cee565b516001600160801b03166121a0565b6121a0565b60405163f3fef3a360e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f3fef3a390612169907f0000000000000000000000000000000000000000000000000000000000000000908590600401614cd5565b600060405180830381600087803b15801561218357600080fd5b505af1158015612197573d6000803e3d6000fd5b50505050505050565b60008183106121af5781611d80565b5090919050565b6001600160a01b03811660009081526001830160205260408120541515611d80565b6121e181613996565b6122356001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613ae7565b600254610631906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613ae7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614806122e257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b80610ac557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161492915050565b600254604051636ccb2b0160e01b81526000916001600160a01b031690636ccb2b019061235d908790879087906001903090600401614d57565b602060405180830381600087803b15801561237757600080fd5b505af115801561238b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123af9190614b4c565b949350505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d53ddc26306040518263ffffffff1660e01b815260040161240991906149ed565b60206040518083038186803b15801561242157600080fd5b505afa158015612435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124599190614b4c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639f2b2833306040518263ffffffff1660e01b81526004016124a991906149ed565b60206040518083038186803b1580156124c157600080fd5b505afa1580156124d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f99190614b4c565b90506125247f0000000000000000000000000000000000000000000000000000000000000000613bf9565b604051630dd3126d60e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063374c49b4906125739030906004016149ed565b60206040518083038186803b15801561258b57600080fd5b505afa15801561259f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c39190614b4c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161261391906149ed565b60206040518083038186803b15801561262b57600080fd5b505afa15801561263f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126639190614b4c565b9050600061266f611d9c565b9050600061267d8284614b7b565b90508084111561269e576126996126948286614bc6565b613da2565b6127a8565b83821115612757576126b86126b38584614bc6565b614096565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906127049030906004016149ed565b60206040518083038186803b15801561271c57600080fd5b505afa158015612730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127549190614b4c565b92505b82156127a8576127a87f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085612af8565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906127f79030906004016149ed565b60206040518083038186803b15801561280f57600080fd5b505afa158015612823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128479190614b4c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c2549ee307f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016128b9929190614c48565b60206040518083038186803b1580156128d157600080fd5b505afa1580156128e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129099190614c79565b6001600160801b0316905060006129208383614b7b565b90508781111561293b576129348882614bc6565b9b50612948565b6129458189614bc6565b9a505b60006129548a8e614b7b565b905080841015612a1c57600061296a8583614bc6565b90508015612a1a5761297b81611f3e565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906129c79030906004016149ed565b60206040518083038186803b1580156129df57600080fd5b505afa1580156129f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a179190614b4c565b94505b505b612a26848b6121a0565b9a508a8411612a36576000612a49565b612a49612a438c86614bc6565b8e6121a0565b6040516302df682360e11b815260048101829052602481018e9052604481018d9052909d506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b158015612abc57600080fd5b505af1158015612ad0573d6000803e3d6000fd5b50505050612adc6142b9565b50505050505050505050909192565b60606000611d8083614435565b600254604051636ccb2b0160e01b81526001600160a01b0390911690636ccb2b0190612b31908690869086906001903090600401614d57565b602060405180830381600087803b158015612b4b57600080fd5b505af1925050508015612b7b575060408051601f3d908101601f19168201909252612b7891810190614b4c565b60015b612b8457505050565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bed57600080fd5b505afa158015612c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c259190614af8565b6001600160a01b031614612c715760405162461bcd60e51b81526020600482015260136024820152723bb937b73396b932b1b2b4b83a16ba37b5b2b760691b60448201526064016105da565b604051630dd3126d60e21b8152612d18906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063374c49b490612cc19030906004016149ed565b60206040518083038186803b158015612cd957600080fd5b505afa158015612ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d119190614b4c565b6000612f01565b604051632e12a4f760e11b8152610631906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635c2549ee90612d8a9030907f000000000000000000000000000000000000000000000000000000000000000090600401614c48565b60206040518083038186803b158015612da257600080fd5b505afa158015612db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dda9190614c79565b6001600160801b0316611f3e565b80471015612e385760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016105da565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e85576040519150601f19603f3d011682016040523d82523d6000602084013e612e8a565b606091505b5050905080610cc05760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016105da565b811561082d576000612f11611d9c565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612f5d9030906004016149ed565b60206040518083038186803b158015612f7557600080fd5b505afa158015612f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fad9190614b4c565b612fb79190614b7b565b9050808311156130a0578115612ff057612ff07f0000000000000000000000000000000000000000000000000000000000000000613bf9565b604051630dd3126d60e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063374c49b49061303f9030906004016149ed565b60206040518083038186803b15801561305757600080fd5b505afa15801561306b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308f9190614b4c565b905061309e6126948383614bc6565b505b610cc083614491565b60008181526001830160205260408120546130f057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ac5565b506000610ac5565b600081815260018301602052604081205480156131e157600061311c600183614bc6565b855490915060009061313090600190614bc6565b905081811461319557600086600001828154811061315057613150614d87565b906000526020600020015490508087600001848154811061317357613173614d87565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806131a6576131a6614d9d565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610ac5565b6000915050610ac5565b6000613240826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661453d9092919063ffffffff16565b805190915015610cc0578080602001905181019061325e9190614db3565b610cc05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105da565b6000808315806132cb575082155b61330b5760405162461bcd60e51b8152602060048201526011602482015270616c6c2d696e7075742d67742d7a65726f60781b60448201526064016105da565b604051630dd3126d60e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063374c49b49061335a9030906004016149ed565b60206040518083038186803b15801561337257600080fd5b505afa158015613386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133aa9190614b4c565b9050600754600014156133c25760009250905061398f565b604051632e12a4f760e11b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635c2549ee906134339030907f000000000000000000000000000000000000000000000000000000000000000090600401614c48565b60206040518083038186803b15801561344b57600080fd5b505afa15801561345f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134839190614c79565b6001600160801b03169050600086156134a7576134a08783614b7b565b90506134bc565b858211156134bc576134b98683614bc6565b90505b604051631d9df61760e11b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633b3bec2e9061352b907f0000000000000000000000000000000000000000000000000000000000000000906004016149ed565b6101006040518083038186803b15801561354457600080fd5b505afa158015613558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061357c9190614dfe565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341976e0983604001516040518263ffffffff1660e01b81526004016135d091906149ed565b60206040518083038186803b1580156135e857600080fd5b505afa1580156135fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136209190614b4c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166341976e097f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e7dad6bd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136ac57600080fd5b505afa1580156136c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136e49190614af8565b6040518263ffffffff1660e01b815260040161370091906149ed565b60206040518083038186803b15801561371857600080fd5b505afa15801561372c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137509190614b4c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156137ad57600080fd5b505afa1580156137c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137e59190614ed6565b6137f090600a614fd5565b61380290670de0b6b3a7640000614c94565b608085015167ffffffffffffffff1661381b8588614c94565b6138259190614c94565b61382f9190614cb3565b90506000827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561388d57600080fd5b505afa1580156138a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c59190614ed6565b6138d090600a614fd5565b6138da9084614c94565b6138e49190614cb3565b9050806138ff5760008899509950505050505050505061398f565b6000612710600754836139129190614c94565b61391c9190614cb3565b90506000612710600654846139319190614c94565b61393b9190614cb3565b9050818a11156139565761394f818b614bc6565b9a50613984565b89811115613984576139688a82614bc6565b9b50600061397461454c565b9050808d111561398257809c505b505b505050505050505050505b9250929050565b61399f81614696565b6002546001600160a01b03908116906139fb907f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084613ae7565b613a2f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284613ae7565b613a836001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084613ae7565b613ab76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168284613ae7565b61082d6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682845b801580613b6f5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90613b1d9030908690600401614c48565b60206040518083038186803b158015613b3557600080fd5b505afa158015613b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b6d9190614b4c565b155b613bda5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016105da565b610cc08363095ea7b360e01b8484604051602401611f07929190614cd5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161561063157604051635b81a7bf60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152306024830152600160448301527f0000000000000000000000000000000000000000000000000000000000000000169063b7034f7e90606401600060405180830381600087803b158015613cb857600080fd5b505af1158015613ccc573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a0823190613d1f9030906004016149ed565b60206040518083038186803b158015613d3757600080fd5b505afa158015613d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d6f9190614b4c565b9050801561082d5761082d7f00000000000000000000000000000000000000000000000000000000000000008383612af8565b6002546040516353b609b560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905260009216906353b609b590606401602060405180830381600087803b158015613e3957600080fd5b505af1158015613e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e719190614b4c565b9050801561082d576040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613ec89030906004016149ed565b60206040518083038186803b158015613ee057600080fd5b505afa158015613ef4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f189190614b4c565b905080821115613fcc576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f3fef3a37f0000000000000000000000000000000000000000000000000000000000000000613f7c8486614bc6565b6040518363ffffffff1660e01b8152600401613f99929190614cd5565b600060405180830381600087803b158015613fb357600080fd5b505af1158015613fc7573d6000803e3d6000fd5b505050505b6002546040516381cc619b60e01b81526001600160a01b03909116906381cc619b90614044907f0000000000000000000000000000000000000000000000000000000000000000907f000000000000000000000000000000000000000000000000000000000000000090889088903090600401614d57565b602060405180830381600087803b15801561405e57600080fd5b505af1158015614072573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b849190614b4c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156140f157600080fd5b505afa158015614105573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141299190614b4c565b905060008161414084670de0b6b3a7640000614c94565b61414a9190614cb3565b9050670de0b6b3a764000061415f8383614c94565b6141699190614cb3565b83116141755780614180565b614180816001614b7b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016141d091906149ed565b60206040518083038186803b1580156141e857600080fd5b505afa1580156141fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142209190614b4c565b905080821161422f5781614231565b805b91508115612b8457604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561429b57600080fd5b505af11580156142af573d6000803e3d6000fd5b5050505050505050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906143089030906004016149ed565b60206040518083038186803b15801561432057600080fd5b505afa158015614334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143589190614b4c565b90506000806143688360006132bd565b909250905080156144235761437e816000612f01565b6040516370a0823160e01b8152610cc0906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906143ce9030906004016149ed565b60206040518083038186803b1580156143e657600080fd5b505afa1580156143fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061441e9190614b4c565b6146ea565b61442c836146ea565b610cc08261475e565b60608160000180548060200260200160405190810160405280929190818152602001828054801561448557602002820191906000526020600020905b815481526020019060010190808311614471575b50505050509050919050565b61449a81614096565b604051631e573fb760e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f2b9fdb890614508907f0000000000000000000000000000000000000000000000000000000000000000908590600401614cd5565b600060405180830381600087803b15801561452257600080fd5b505af1158015614536573d6000803e3d6000fd5b5050505050565b60606123af848460008561480d565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156145a857600080fd5b505afa1580156145bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145e09190614b4c565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638285ef406040518163ffffffff1660e01b815260040160206040518083038186803b15801561463d57600080fd5b505afa158015614651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146759190614b4c565b905080821161468557600061468f565b61468f8183614bc6565b9250505090565b6106316001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083613ae7565b801561063157604051631e573fb760e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f2b9fdb890614508907f0000000000000000000000000000000000000000000000000000000000000000908590600401614cd5565b80156106315760405163f3fef3a360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f3fef3a3906147d2907f0000000000000000000000000000000000000000000000000000000000000000908590600401614cd5565b600060405180830381600087803b1580156147ec57600080fd5b505af1158015614800573d6000803e3d6000fd5b5050505061063181614935565b60608247101561486e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105da565b843b6148bc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105da565b600080866001600160a01b031685876040516148d89190614fe4565b60006040518083038185875af1925050503d8060008114614915576040519150601f19603f3d011682016040523d82523d6000602084013e61491a565b606091505b509150915061492a828286614982565b979650505050505050565b60405163b6b55f2560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b6b55f2590602401614508565b60608315614991575081611d80565b8251156149a15782518084602001fd5b8160405162461bcd60e51b81526004016105da9190614a93565b6001600160a01b038116811461063157600080fd5b6000602082840312156149e257600080fd5b8135611d80816149bb565b6001600160a01b0391909116815260200190565b600060208284031215614a1357600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015614a5b5783516001600160a01b031683529284019291840191600101614a36565b50909695505050505050565b60005b83811015614a82578181015183820152602001614a6a565b83811115612b845750506000910152565b6020815260008251806020840152614ab2816040850160208701614a67565b601f01601f19169190910160400192915050565b60008060408385031215614ad957600080fd5b50508035926020909101359150565b8051614af3816149bb565b919050565b600060208284031215614b0a57600080fd5b8151611d80816149bb565b6020808252601a908201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f72000000000000604082015260600190565b600060208284031215614b5e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115614b8e57614b8e614b65565b500190565b60208082526019908201527818d85b1b195c8b5a5ccb5b9bdd0b5d995cdc195c8b5c1bdbdb603a1b604082015260600190565b600082821015614bd857614bd8614b65565b500390565b60208082526016908201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b604082015260600190565b600181811c90821680614c2157607f821691505b60208210811415614c4257634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b0392831681529116602082015260400190565b80516001600160801b0381168114614af357600080fd5b600060208284031215614c8b57600080fd5b611d8082614c62565b6000816000190483118215151615614cae57614cae614b65565b500290565b600082614cd057634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03929092168252602082015260400190565b600060408284031215614d0057600080fd5b6040516040810181811067ffffffffffffffff82111715614d3157634e487b7160e01b600052604160045260246000fd5b604052614d3d83614c62565b8152614d4b60208401614c62565b60208201529392505050565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600060208284031215614dc557600080fd5b81518015158114611d8057600080fd5b805160ff81168114614af357600080fd5b805167ffffffffffffffff81168114614af357600080fd5b6000610100808385031215614e1257600080fd5b6040519081019067ffffffffffffffff82118183101715614e4357634e487b7160e01b600052604160045260246000fd5b81604052614e5084614dd5565b815260208401519150614e62826149bb565b816020820152614e7460408501614ae8565b6040820152614e8560608501614de6565b6060820152614e9660808501614de6565b6080820152614ea760a08501614de6565b60a0820152614eb860c08501614de6565b60c0820152614ec960e08501614c62565b60e0820152949350505050565b600060208284031215614ee857600080fd5b611d8082614dd5565b600181815b80851115614f2c578160001904821115614f1257614f12614b65565b80851615614f1f57918102915b93841c9390800290614ef6565b509250929050565b600082614f4357506001610ac5565b81614f5057506000610ac5565b8160018114614f665760028114614f7057614f8c565b6001915050610ac5565b60ff841115614f8157614f81614b65565b50506001821b610ac5565b5060208310610133831016604e8410600b8410161715614faf575081810a610ac5565b614fb98383614ef1565b8060001904821115614fcd57614fcd614b65565b029392505050565b6000611d8060ff841683614f34565b60008251614ff6818460208701614a67565b919091019291505056fea2646970667358221220720bab71c92cbf4a2b4d91af798b3d15d00c36928b250a6cffbd635d77c99a6e64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken(uint256)": {
        "details": "Approve all required tokens"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "recoverBorrowToken(uint256)": {
        "details": "If we get liquidation in Compound, we will have borrowToken sitting in strategy. This function allows to recover idle borrow token amount.",
        "params": {
          "_amountToRecover": "Amount of borrow token we want to recover in 1 call.      Set it 0 to recover all available borrow tokens"
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "repayAll()": {
        "details": "This action usually done when loss is detected in strategy.0 borrow limit make sure that any future rebalance do not borrow again."
      },
      "sweepERC20(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateBorrowLimit(uint256,uint256)": {
        "details": "It is possible to set 0 as _minBorrowLimit to not borrow anything",
        "params": {
          "_maxBorrowLimit": "It is % of actual collateral factor of protocol",
          "_minBorrowLimit": "It is % of actual collateral factor of protocol"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "Deposit Collateral in Compound and earn interest by depositing borrowed token in a Vesper Pool.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "borrowBalance()": {
        "notice": "Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool"
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "harvestVSP()": {
        "notice": "Claim VSP and convert to collateral token"
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "recoverBorrowToken(uint256)": {
        "notice": "Recover extra borrow tokens from strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "repayAll()": {
        "notice": "Repay all borrow amount and set min borrow limit to 0."
      },
      "sweepERC20(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns total collateral locked in the strategy"
      },
      "updateBorrowLimit(uint256,uint256)": {
        "notice": "Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol."
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14517,
        "contract": "vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol:CompoundV3VesperXy",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14523,
        "contract": "vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol:CompoundV3VesperXy",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14526,
        "contract": "vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol:CompoundV3VesperXy",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)13378"
      },
      {
        "astId": 14539,
        "contract": "vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol:CompoundV3VesperXy",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3023_storage"
      },
      {
        "astId": 22828,
        "contract": "vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol:CompoundV3VesperXy",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 22837,
        "contract": "vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol:CompoundV3VesperXy",
        "label": "minBorrowLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 22840,
        "contract": "vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol:CompoundV3VesperXy",
        "label": "maxBorrowLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRoutedSwapper)13378": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3023_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3022,
            "contract": "vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol:CompoundV3VesperXy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2722_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2722_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2717,
            "contract": "vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol:CompoundV3VesperXy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2721,
            "contract": "vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol:CompoundV3VesperXy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}