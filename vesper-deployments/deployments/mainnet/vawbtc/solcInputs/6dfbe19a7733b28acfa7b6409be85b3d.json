{
  "language": "Solidity",
  "sources": {
    "contracts/test/Imports.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n// Import all contracts which are being used in any deployment script from `vesper-pools` and `vesper-strategies` modules.\n// This will ensure contracts are compiled and copied in artifacts folder.\nimport \"vesper-pools/contracts/pool/PoolRewards.sol\";\nimport \"vesper-pools/contracts/pool/PoolAccountant.sol\";\nimport \"vesper-pools/contracts/pool/VPool.sol\";\nimport \"vesper-pools/contracts/pool/VETH.sol\";\nimport \"vesper-pools/contracts/pool/earn/VesperEarnDrip.sol\";\nimport \"vesper-pools/contracts/upgraders/PoolAccountantUpgrader.sol\";\nimport \"vesper-pools/contracts/upgraders/PoolRewardsUpgrader.sol\";\nimport \"vesper-pools/contracts/upgraders/VPoolUpgrader.sol\";\nimport \"vesper-strategies/contracts/strategies/compound/CompoundXy.sol\";\nimport \"vesper-strategies/contracts/strategies/aave/v2/AaveV2VesperXy.sol\";\nimport \"vesper-strategies/contracts/strategies/compound/CompoundXyETH.sol\";\nimport \"vesper-strategies/contracts/strategies/compound/CompoundVesperXyETH.sol\";\nimport \"vesper-strategies/contracts/strategies/aave/v2/AaveV2VesperXy.sol\";\nimport \"vesper-strategies/contracts/strategies/convex/Convex.sol\";\nimport \"vesper-strategies/contracts/strategies/vesper/earn/VesperEarnSaddleLp.sol\";\nimport \"vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol\";\nimport \"vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol\";\nimport \"vesper-strategies/contracts/strategies/stargate/Stargate.sol\";\nimport \"vesper-strategies/contracts/strategies/maker/MakerVesperStETH.sol\";\nimport \"vesper-strategies/contracts/interfaces/maker/IMakerDAO.sol\";\nimport \"vesper-strategies/contracts/strategies/convex/Convex.sol\";\nimport \"vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol\";\nimport \"vesper-strategies/contracts/strategies/curve/Curve.sol\";\nimport \"vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol\";\nimport \"vesper-strategies/contracts/strategies/euler/Euler.sol\";\nimport \"vesper-strategies/contracts/strategies/euler/EulerVesperXy.sol\";\nimport \"vesper-strategies/contracts/strategies/compound/CompoundVesperXy.sol\";\nimport \"vesper-strategies/contracts/strategies/compound/avalanche/BenqiAVAX.sol\";\nimport \"vesper-strategies/contracts/strategies/stargate/StargateETH.sol\";\nimport \"vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol\";\nimport \"vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol\";\nimport \"vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol\";\nimport \"vesper-strategies/contracts/strategies/curve/CurveETH.sol\";\nimport \"vesper-strategies/contracts/strategies/compound/optimism/Sonne.sol\";\nimport \"vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol\";\nimport \"vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol\";\nimport \"vesper-strategies/contracts/strategies/frax-lend/FraxLend.sol\";\nimport \"vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol\";\nimport \"vesper-strategies/contracts/strategies/yearn/YearnStaking.sol\";\n\n// Importer contract to compile the solidity files from dependent `vesper-pools` and `vesper-strategies` modules.\n// solhint-disable-next-line no-empty-blocks\ncontract Imports {\n\n}\n"
    },
    "vesper-commons/contracts/interfaces/vesper/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IStrategy {\n    function rebalance() external returns (uint256 _profit, uint256 _loss, uint256 _payback);\n\n    function sweep(address _fromToken) external;\n\n    function withdraw(uint256 _amount) external;\n\n    function feeCollector() external view returns (address);\n\n    function isReservedToken(address _token) external view returns (bool);\n\n    function keepers() external view returns (address[] memory);\n\n    function migrate(address _newStrategy) external;\n\n    function token() external view returns (address);\n\n    function pool() external view returns (address);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function VERSION() external view returns (string memory);\n\n    function collateral() external view returns (address);\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\n                    \"upgradeTo(address)\",\n                    oldImplementation\n                )\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _setImplementation(newImplementation);\n            emit Upgraded(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(\n            Address.isContract(newBeacon),\n            \"ERC1967: new beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n        } else if (signature.length == 64) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let vs := mload(add(signature, 0x40))\n                r := mload(add(signature, 0x20))\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n                v := add(shr(255, vs), 27)\n            }\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "vesper-pools/contracts/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @title Errors library\nlibrary Errors {\n    string public constant INVALID_COLLATERAL_AMOUNT = \"1\"; // Collateral must be greater than 0 or > defined limit\n    string public constant INVALID_SHARE_AMOUNT = \"2\"; // Share must be greater than 0\n    string public constant INVALID_INPUT_LENGTH = \"3\"; // Input array length must be greater than 0\n    string public constant INPUT_LENGTH_MISMATCH = \"4\"; // Input array length mismatch with another array length\n    string public constant NOT_WHITELISTED_ADDRESS = \"5\"; // Caller is not whitelisted to withdraw without fee\n    string public constant MULTI_TRANSFER_FAILED = \"6\"; // Multi transfer of tokens has failed\n    string public constant FEE_COLLECTOR_NOT_SET = \"7\"; // Fee Collector is not set\n    string public constant NOT_ALLOWED_TO_SWEEP = \"8\"; // Token is not allowed to sweep\n    string public constant INSUFFICIENT_BALANCE = \"9\"; // Insufficient balance to performs operations to follow\n    string public constant INPUT_ADDRESS_IS_ZERO = \"10\"; // Input address is zero\n    string public constant FEE_LIMIT_REACHED = \"11\"; // Fee must be less than MAX_BPS\n    string public constant ALREADY_INITIALIZED = \"12\"; // Data structure, contract, or logic already initialized and can not be called again\n    string public constant ADD_IN_LIST_FAILED = \"13\"; // Cannot add address in address list\n    string public constant REMOVE_FROM_LIST_FAILED = \"14\"; // Cannot remove address from address list\n    string public constant STRATEGY_IS_ACTIVE = \"15\"; // Strategy is already active, an inactive strategy is required\n    string public constant STRATEGY_IS_NOT_ACTIVE = \"16\"; // Strategy is not active, an active strategy is required\n    string public constant INVALID_STRATEGY = \"17\"; // Given strategy is not a strategy of this pool\n    string public constant DEBT_RATIO_LIMIT_REACHED = \"18\"; // Debt ratio limit reached. It must be less than MAX_BPS\n    string public constant TOTAL_DEBT_IS_NOT_ZERO = \"19\"; // Strategy total debt must be 0\n    string public constant LOSS_TOO_HIGH = \"20\"; // Strategy reported loss must be less than current debt\n    string public constant INVALID_MAX_BORROW_LIMIT = \"21\"; // Max borrow limit is beyond range.\n    string public constant MAX_LIMIT_LESS_THAN_MIN = \"22\"; // Max limit should be greater than min limit.\n    string public constant INVALID_SLIPPAGE = \"23\"; // Slippage should be less than MAX_BPS\n    string public constant WRONG_RECEIPT_TOKEN = \"24\"; // Wrong receipt token address\n    string public constant AAVE_FLASH_LOAN_NOT_ACTIVE = \"25\"; // aave flash loan is not active\n    string public constant DYDX_FLASH_LOAN_NOT_ACTIVE = \"26\"; // DYDX flash loan is not active\n    string public constant INVALID_FLASH_LOAN = \"27\"; // invalid-flash-loan\n    string public constant INVALID_INITIATOR = \"28\"; // \"invalid-initiator\"\n    string public constant INCORRECT_WITHDRAW_AMOUNT = \"29\"; // withdrawn amount is not correct\n    string public constant NO_MARKET_ID_FOUND = \"30\"; // dydx flash loan no marketId found for token\n    string public constant SAME_AS_PREVIOUS = \"31\"; // Input should not be same as previous value.\n    string public constant INVALID_INPUT = \"32\"; // Generic invalid input error code\n}\n"
    },
    "vesper-pools/contracts/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"./dependencies/openzeppelin/contracts/utils/Context.sol\";\nimport \"./interfaces/vesper/IGovernable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (governor) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the governor account will be the one that deploys the contract. This\n * can later be changed with {transferGovernorship}.\n *\n */\nabstract contract Governable is IGovernable, Context, Initializable {\n    address public governor;\n    address private proposedGovernor;\n\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial governor.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev If inheriting child is using proxy then child contract can use\n     * __Governable_init() function to initialization this contract\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __Governable_init() internal initializer {\n        address msgSender = _msgSender();\n        governor = msgSender;\n        emit UpdatedGovernor(address(0), msgSender);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the governor.\n     */\n    modifier onlyGovernor() {\n        require(governor == _msgSender(), \"not-governor\");\n        _;\n    }\n\n    /**\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\n     * Can only be called by the current owner.\n     */\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\n        require(_proposedGovernor != address(0), \"proposed-governor-is-zero\");\n        proposedGovernor = _proposedGovernor;\n    }\n\n    /**\n     * @dev Allows new governor to accept governorship of the contract.\n     */\n    function acceptGovernorship() external {\n        require(proposedGovernor == _msgSender(), \"not-the-proposed-governor\");\n        emit UpdatedGovernor(governor, proposedGovernor);\n        governor = proposedGovernor;\n        proposedGovernor = address(0);\n    }\n}\n"
    },
    "vesper-pools/contracts/interfaces/multicall/IMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IMulticall {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    function aggregate(Call[] memory calls) external returns (uint256 blockNumber, bytes[] memory returnData);\n}\n"
    },
    "vesper-pools/contracts/interfaces/token/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface TokenLike is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "vesper-pools/contracts/interfaces/vesper/IEarnDrip.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./IPoolRewards.sol\";\n\ninterface IEarnDrip is IPoolRewards {\n    function rewardTokens(uint256 index_) external view returns (address);\n\n    function growToken() external view returns (address);\n}\n"
    },
    "vesper-pools/contracts/interfaces/vesper/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice Governable interface\n */\ninterface IGovernable {\n    function governor() external view returns (address _governor);\n\n    function transferGovernorship(address _proposedGovernor) external;\n}\n"
    },
    "vesper-pools/contracts/interfaces/vesper/IPausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice Pausable interface\n */\ninterface IPausable {\n    function paused() external view returns (bool);\n\n    function stopEverything() external view returns (bool);\n\n    function pause() external;\n\n    function unpause() external;\n\n    function shutdown() external;\n\n    function open() external;\n}\n"
    },
    "vesper-pools/contracts/interfaces/vesper/IPoolAccountant.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IPoolAccountant {\n    function decreaseDebt(address strategy_, uint256 decreaseBy_) external;\n\n    function migrateStrategy(address old_, address new_) external;\n\n    function reportEarning(\n        address strategy_,\n        uint256 profit_,\n        uint256 loss_,\n        uint256 payback_\n    ) external returns (uint256 _actualPayback, uint256 _creditLine);\n\n    function reportLoss(address strategy_, uint256 loss_) external;\n\n    function availableCreditLimit(address strategy_) external view returns (uint256);\n\n    function excessDebt(address strategy_) external view returns (uint256);\n\n    function getStrategies() external view returns (address[] memory);\n\n    function getWithdrawQueue() external view returns (address[] memory);\n\n    function strategy(\n        address strategy_\n    )\n        external\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee, // Obsolete\n            uint256 _debtRate, // Obsolete\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio,\n            uint256 _externalDepositFee\n        );\n\n    function externalDepositFee() external view returns (uint256);\n\n    function totalDebt() external view returns (uint256);\n\n    function totalDebtOf(address strategy_) external view returns (uint256);\n\n    function totalDebtRatio() external view returns (uint256);\n}\n"
    },
    "vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IPoolRewards {\n    /// Emitted after reward added\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\n    /// Emitted whenever any user claim rewards\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\n    /// Emitted after adding new rewards token into rewardTokens array\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\n\n    function claimReward(address) external;\n\n    function notifyRewardAmount(address rewardToken_, uint256 _rewardAmount, uint256 _rewardDuration) external;\n\n    function notifyRewardAmount(\n        address[] memory rewardTokens_,\n        uint256[] memory rewardAmounts_,\n        uint256[] memory rewardDurations_\n    ) external;\n\n    function updateReward(address) external;\n\n    function claimable(\n        address account_\n    ) external view returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\n\n    function lastTimeRewardApplicable(address rewardToken_) external view returns (uint256);\n\n    function rewardForDuration()\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\n\n    function rewardPerToken()\n        external\n        view\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\n\n    function getRewardTokens() external view returns (address[] memory);\n\n    function isRewardToken(address) external view returns (bool);\n\n    function addRewardToken(address newRewardToken_) external;\n\n    function periodFinish(address) external view returns (uint256);\n}\n"
    },
    "vesper-pools/contracts/interfaces/vesper/IVesperPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./IGovernable.sol\";\nimport \"./IPausable.sol\";\n\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\n    function calculateUniversalFee(uint256 profit_) external view returns (uint256 _fee);\n\n    function deposit(uint256 collateralAmount_) external;\n\n    function excessDebt(address strategy_) external view returns (uint256);\n\n    function poolAccountant() external view returns (address);\n\n    function poolRewards() external view returns (address);\n\n    function reportEarning(uint256 profit_, uint256 loss_, uint256 payback_) external;\n\n    function reportLoss(uint256 loss_) external;\n\n    function sweepERC20(address fromToken_) external;\n\n    function withdraw(uint256 share_) external;\n\n    function keepers() external view returns (address[] memory);\n\n    function isKeeper(address address_) external view returns (bool);\n\n    function maintainers() external view returns (address[] memory);\n\n    function isMaintainer(address address_) external view returns (bool);\n\n    function pricePerShare() external view returns (uint256);\n\n    function strategy(\n        address strategy_\n    )\n        external\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee, // Obsolete\n            uint256 _debtRate, // Obsolete\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio,\n            uint256 _externalDepositFee\n        );\n\n    function token() external view returns (IERC20);\n\n    function tokensHere() external view returns (uint256);\n\n    function totalDebtOf(address strategy_) external view returns (uint256);\n\n    function totalValue() external view returns (uint256);\n\n    function totalDebt() external view returns (uint256);\n}\n"
    },
    "vesper-pools/contracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./dependencies/openzeppelin/contracts/utils/Context.sol\";\nimport \"./interfaces/vesper/IPausable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n */\nabstract contract Pausable is IPausable, Context {\n    event Paused(address account);\n    event Shutdown(address account);\n    event Unpaused(address account);\n    event Open(address account);\n\n    bool public paused;\n    bool public stopEverything;\n\n    modifier whenNotPaused() {\n        require(!paused, \"paused\");\n        _;\n    }\n    modifier whenPaused() {\n        require(paused, \"not-paused\");\n        _;\n    }\n\n    modifier whenNotShutdown() {\n        require(!stopEverything, \"shutdown\");\n        _;\n    }\n\n    modifier whenShutdown() {\n        require(stopEverything, \"not-shutdown\");\n        _;\n    }\n\n    /// @dev Pause contract operations, if contract is not paused.\n    function _pause() internal virtual whenNotPaused {\n        paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\n    function _unpause() internal virtual whenPaused whenNotShutdown {\n        paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /// @dev Shutdown contract operations, if not already shutdown.\n    function _shutdown() internal virtual whenNotShutdown {\n        stopEverything = true;\n        paused = true;\n        emit Shutdown(_msgSender());\n    }\n\n    /// @dev Open contract operations, if contract is in shutdown state\n    function _open() internal virtual whenShutdown {\n        stopEverything = false;\n        emit Open(_msgSender());\n    }\n}\n"
    },
    "vesper-pools/contracts/pool/earn/VesperEarnDrip.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../PoolRewards.sol\";\nimport \"../../interfaces/vesper/IVesperPool.sol\";\nimport \"../../interfaces/token/IToken.sol\";\n\ninterface IVesperPoolV2 {\n    function getPricePerShare() external view returns (uint256);\n}\n\ncontract VesperEarnDrip is PoolRewards {\n    TokenLike internal constant WETH = TokenLike(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    using SafeERC20 for IERC20;\n\n    event DripRewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\n    event GrowTokenUpdated(address indexed oldGrowToken, address indexed newGrowToken);\n\n    address public growToken;\n\n    receive() external payable {\n        require(msg.sender == address(WETH), \"deposits-not-allowed\");\n    }\n\n    /**\n     * @notice Returns claimable reward amount.\n     * @dev In case of growToken it will return the actual underlying value\n     * @return _rewardTokens Array of tokens being rewarded\n     * @return _claimableAmounts Array of claimable for token on same index in rewardTokens\n     */\n    function claimable(\n        address account_\n    ) external view override returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts) {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _balance = IERC20(pool).balanceOf(account_);\n        _rewardTokens = rewardTokens;\n        uint256 _len = _rewardTokens.length;\n        _claimableAmounts = new uint256[](_len);\n        for (uint256 i; i < _len; i++) {\n            uint256 _claimableAmount = _claimable(_rewardTokens[i], account_, _totalSupply, _balance);\n            if (_rewardTokens[i] == growToken) {\n                _claimableAmount = _calculateRewardInDripToken(growToken, _claimableAmount);\n            }\n            _claimableAmounts[i] = _claimableAmount;\n        }\n    }\n\n    /// @dev Here _rewardToken AKA growToken is Vesper Grow Pool which can be V2 or V3 pool.\n    /// V2 and V3 pool has different signature to read price per share\n    function _calculateRewardInDripToken(address rewardToken_, uint256 reward_) private view returns (uint256) {\n        uint256 _pricePerShare;\n        // Try reading price per share using V3 pool signature, if this fails catch block will execute\n        try IVesperPool(rewardToken_).pricePerShare() returns (uint256 _pricePerShareV3) {\n            _pricePerShare = _pricePerShareV3;\n        } catch {\n            // If try fails, read price per share using V2 pool signature\n            _pricePerShare = IVesperPoolV2(rewardToken_).getPricePerShare();\n        }\n        // Calculate reward in dripToken, as _reward is share of Grow Pool AKA growToken AKA _rewardToken\n        return (_pricePerShare * reward_) / 1e18;\n    }\n\n    /**\n     * @notice Claim earned rewards in dripToken.\n     * @dev Withdraws from the Grow Pool and transfers the amount to _account\n     * @dev Claim rewards only if reward in dripToken is non zero\n     */\n    function _claimReward(address rewardToken_, address account_, uint256 reward_) internal override {\n        if (rewardToken_ == growToken) {\n            // Calculate reward in drip token\n            uint256 _rewardInDripToken = _calculateRewardInDripToken(rewardToken_, reward_);\n            // If reward in drip token is non zero\n            if (_rewardInDripToken > 0) {\n                // Mark reward as claimed\n                rewards[rewardToken_][account_] = 0;\n\n                // Automatically unwraps the Grow Pool token AKA _rewardToken into the dripToken\n                IERC20 _dripToken = IVesperPool(rewardToken_).token();\n                uint256 _dripBalanceBefore = _dripToken.balanceOf(address(this));\n                IVesperPool(rewardToken_).withdraw(reward_);\n                uint256 _dripTokenAmount = _dripToken.balanceOf(address(this)) - _dripBalanceBefore;\n                if (address(_dripToken) == address(WETH)) {\n                    WETH.withdraw(_dripTokenAmount);\n                    Address.sendValue(payable(account_), _dripTokenAmount);\n                } else {\n                    _dripToken.safeTransfer(account_, _dripTokenAmount);\n                }\n                emit DripRewardPaid(account_, address(_dripToken), _dripTokenAmount);\n            }\n        } else {\n            // Behave as normal PoolRewards, no unwrap needed\n            super._claimReward(rewardToken_, account_, reward_);\n        }\n    }\n\n    /************************************************************************************************\n     *                                     Authorized function                                      *\n     ***********************************************************************************************/\n\n    /**\n     * @notice Notify that reward is added.\n     * Also updates reward rate and reward earning period.\n     */\n    function notifyRewardAmount(\n        address rewardToken_,\n        uint256 rewardAmount_,\n        uint256 rewardDuration_\n    ) external override {\n        (bool isStrategy, , , , , , , , ) = IVesperPool(pool).strategy(msg.sender);\n        require(\n            msg.sender == IVesperPool(pool).governor() || (isRewardToken[rewardToken_] && isStrategy),\n            \"not-authorized\"\n        );\n        super._notifyRewardAmount(rewardToken_, rewardAmount_, rewardDuration_, IVesperPool(pool).totalSupply());\n    }\n\n    /**\n     * @notice Defines which rewardToken is a growToken\n     * @dev growToken is used to check whether to call withdraw\n     * from Grow Pool or not\n     */\n    function updateGrowToken(address newGrowToken_) external onlyAuthorized {\n        require(newGrowToken_ != address(0), \"grow-token-address-zero\");\n        require(isRewardToken[newGrowToken_], \"grow-token-not-reward-token\");\n        emit GrowTokenUpdated(growToken, newGrowToken_);\n        growToken = newGrowToken_;\n    }\n}\n"
    },
    "vesper-pools/contracts/pool/PoolAccountant.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/Context.sol\";\nimport \"../Errors.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\nimport \"./PoolAccountantStorage.sol\";\n\n/// @title Accountant for Vesper pools which keep records of strategies.\ncontract PoolAccountant is Initializable, Context, PoolAccountantStorageV2 {\n    using SafeERC20 for IERC20;\n\n    string public constant VERSION = \"5.1.0\";\n    uint256 public constant MAX_BPS = 10_000;\n\n    event EarningReported(\n        address indexed strategy,\n        uint256 profit,\n        uint256 loss,\n        uint256 payback,\n        uint256 strategyDebt,\n        uint256 poolDebt,\n        uint256 creditLine\n    );\n    event LossReported(address indexed strategy, uint256 loss);\n    event StrategyAdded(address indexed strategy, uint256 debtRatio, uint256 externalDepositFee);\n    event StrategyRemoved(address indexed strategy);\n    event StrategyMigrated(address indexed oldStrategy, address indexed newStrategy);\n    event UpdatedExternalDepositFee(address indexed strategy, uint256 oldFee, uint256 newFee);\n    event UpdatedPoolExternalDepositFee(uint256 oldFee, uint256 newFee);\n    event UpdatedStrategyDebtRatio(address indexed strategy, uint256 oldDebtRatio, uint256 newDebtRatio);\n\n    /**\n     * @dev This init function meant to be called after proxy deployment.\n     * @dev DO NOT CALL it with proxy deploy\n     * @param pool_ Address of Vesper pool proxy\n     */\n    function init(address pool_) public initializer {\n        require(pool_ != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        pool = pool_;\n    }\n\n    modifier onlyGovernor() {\n        require(IVesperPool(pool).governor() == _msgSender(), \"not-the-governor\");\n        _;\n    }\n\n    modifier onlyKeeper() {\n        require(\n            IVesperPool(pool).governor() == _msgSender() || IVesperPool(pool).isKeeper(_msgSender()),\n            \"not-a-keeper\"\n        );\n        _;\n    }\n\n    modifier onlyMaintainer() {\n        require(\n            IVesperPool(pool).governor() == _msgSender() || IVesperPool(pool).isMaintainer(_msgSender()),\n            \"not-a-maintainer\"\n        );\n        _;\n    }\n\n    modifier onlyPool() {\n        require(pool == _msgSender(), \"not-a-pool\");\n        _;\n    }\n\n    /**\n     * @notice Get available credit limit of strategy. This is the amount strategy can borrow from pool\n     * @dev Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy.\n     * credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance)\n     * when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\n     * @param strategy_ Strategy address\n     */\n    function availableCreditLimit(address strategy_) external view returns (uint256) {\n        return _availableCreditLimit(strategy_);\n    }\n\n    /**\n     * @notice Debt above current debt limit\n     * @param strategy_ Address of strategy\n     */\n    function excessDebt(address strategy_) external view returns (uint256) {\n        return _excessDebt(strategy_);\n    }\n\n    /// @notice Return strategies array\n    function getStrategies() external view returns (address[] memory) {\n        return strategies;\n    }\n\n    /// @notice Return withdrawQueue\n    function getWithdrawQueue() external view returns (address[] memory) {\n        return withdrawQueue;\n    }\n\n    /**\n     * @notice Get total debt of given strategy\n     * @param strategy_ Strategy address\n     */\n    function totalDebtOf(address strategy_) external view returns (uint256) {\n        return strategy[strategy_].totalDebt;\n    }\n\n    function _availableCreditLimit(address strategy_) internal view returns (uint256) {\n        if (IVesperPool(pool).stopEverything()) {\n            return 0;\n        }\n        uint256 _totalValue = IVesperPool(pool).totalValue();\n        uint256 _maxDebt = (strategy[strategy_].debtRatio * _totalValue) / MAX_BPS;\n        uint256 _currentDebt = strategy[strategy_].totalDebt;\n        if (_currentDebt >= _maxDebt) {\n            return 0;\n        }\n        uint256 _poolDebtLimit = (totalDebtRatio * _totalValue) / MAX_BPS;\n        if (totalDebt >= _poolDebtLimit) {\n            return 0;\n        }\n        uint256 _available = _maxDebt - _currentDebt;\n        _available = _min(_min(IVesperPool(pool).tokensHere(), _available), _poolDebtLimit - totalDebt);\n        return _available;\n    }\n\n    function _excessDebt(address strategy_) internal view returns (uint256) {\n        uint256 _currentDebt = strategy[strategy_].totalDebt;\n        if (IVesperPool(pool).stopEverything()) {\n            return _currentDebt;\n        }\n        uint256 _maxDebt = (strategy[strategy_].debtRatio * IVesperPool(pool).totalValue()) / MAX_BPS;\n        return _currentDebt > _maxDebt ? (_currentDebt - _maxDebt) : 0;\n    }\n\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /// @notice Recalculate pool external deposit fee.\n    /// @dev As it uses state variables for calculation, make sure to call it only after updating state variables.\n    function _recalculatePoolExternalDepositFee() internal {\n        uint256 _len = strategies.length;\n        uint256 _externalDepositFee;\n\n        // calculate poolExternalDepositFee and weightedFee for each strategy\n        if (totalDebtRatio > 0) {\n            for (uint256 i; i < _len; i++) {\n                _externalDepositFee +=\n                    (strategy[strategies[i]].externalDepositFee * strategy[strategies[i]].debtRatio) /\n                    totalDebtRatio;\n            }\n        }\n\n        // Update externalDepositFee and emit event\n        emit UpdatedPoolExternalDepositFee(externalDepositFee, externalDepositFee = _externalDepositFee);\n    }\n\n    /**\n     * @dev When strategy report loss, its debtRatio decreases to get fund back quickly.\n     * Reduction is debt ratio is reduction in credit limit\n     */\n    function _reportLoss(address strategy_, uint256 loss_) internal {\n        require(strategy[strategy_].totalDebt >= loss_, Errors.LOSS_TOO_HIGH);\n        strategy[strategy_].totalLoss += loss_;\n        strategy[strategy_].totalDebt -= loss_;\n        totalDebt -= loss_;\n        uint256 _deltaDebtRatio = _min(\n            (loss_ * MAX_BPS) / IVesperPool(pool).totalValue(),\n            strategy[strategy_].debtRatio\n        );\n        strategy[strategy_].debtRatio -= _deltaDebtRatio;\n        totalDebtRatio -= _deltaDebtRatio;\n    }\n\n    /************************************************************************************************\n     *                                     Authorized function                                      *\n     ***********************************************************************************************/\n\n    ////////////////////////////// Only Governor //////////////////////////////\n\n    /**\n     * @notice Add strategy. Once strategy is added it can call rebalance and\n     * borrow fund from pool and invest that fund in provider/lender.\n     * @dev Recalculate pool level external deposit fee after all state variables are updated.\n     * @param strategy_ Strategy address\n     * @param debtRatio_ Pool fund allocation to this strategy\n     * @param externalDepositFee_ External deposit fee of strategy\n     */\n    function addStrategy(address strategy_, uint256 debtRatio_, uint256 externalDepositFee_) public onlyGovernor {\n        require(strategy_ != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        require(!strategy[strategy_].active, Errors.STRATEGY_IS_ACTIVE);\n        totalDebtRatio = totalDebtRatio + debtRatio_;\n        require(totalDebtRatio <= MAX_BPS, Errors.DEBT_RATIO_LIMIT_REACHED);\n        require(externalDepositFee_ <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\n        StrategyConfig memory newStrategy = StrategyConfig({\n            active: true,\n            interestFee: 0, // Obsolete\n            debtRate: 0, // Obsolete\n            lastRebalance: block.timestamp,\n            totalDebt: 0,\n            totalLoss: 0,\n            totalProfit: 0,\n            debtRatio: debtRatio_,\n            externalDepositFee: externalDepositFee_\n        });\n        strategy[strategy_] = newStrategy;\n        strategies.push(strategy_);\n        withdrawQueue.push(strategy_);\n        emit StrategyAdded(strategy_, debtRatio_, externalDepositFee_);\n\n        // Recalculate pool level externalDepositFee. This should be called at the end of function\n        _recalculatePoolExternalDepositFee();\n    }\n\n    /**\n     * @notice Remove strategy and recalculate pool level external deposit fee.\n     * @dev Revoke and remove strategy from array. Update withdraw queue.\n     * Withdraw queue order should not change after remove.\n     * Strategy can be removed only after it has paid all debt.\n     * Use migrate strategy if debt is not paid and want to upgrade strategy.\n     */\n    function removeStrategy(uint256 index_) external onlyGovernor {\n        address _strategy = strategies[index_];\n        require(strategy[_strategy].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(strategy[_strategy].totalDebt == 0, Errors.TOTAL_DEBT_IS_NOT_ZERO);\n        // Adjust totalDebtRatio\n        totalDebtRatio -= strategy[_strategy].debtRatio;\n        // Remove strategy\n        delete strategy[_strategy];\n        strategies[index_] = strategies[strategies.length - 1];\n        strategies.pop();\n        address[] memory _withdrawQueue = new address[](strategies.length);\n        uint256 j;\n        // After above update, withdrawQueue.length > strategies.length\n        for (uint256 i; i < withdrawQueue.length; i++) {\n            if (withdrawQueue[i] != _strategy) {\n                _withdrawQueue[j] = withdrawQueue[i];\n                j++;\n            }\n        }\n        withdrawQueue = _withdrawQueue;\n        emit StrategyRemoved(_strategy);\n\n        // Recalculate pool level externalDepositFee.\n        _recalculatePoolExternalDepositFee();\n    }\n\n    /**\n     * @notice Update external deposit fee of strategy and recalculate pool level external deposit fee.\n     * @param strategy_ Strategy address for which external deposit fee is being updated\n     * @param externalDepositFee_ New external deposit fee\n     */\n    function updateExternalDepositFee(address strategy_, uint256 externalDepositFee_) external onlyGovernor {\n        require(strategy[strategy_].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(externalDepositFee_ <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\n        uint256 _oldExternalDepositFee = strategy[strategy_].externalDepositFee;\n        // Write to storage\n        strategy[strategy_].externalDepositFee = externalDepositFee_;\n        emit UpdatedExternalDepositFee(strategy_, _oldExternalDepositFee, externalDepositFee_);\n\n        // Recalculate pool level externalDepositFee.\n        _recalculatePoolExternalDepositFee();\n    }\n\n    ///////////////////////////// Only Keeper /////////////////////////////\n\n    /**\n     * @notice Recalculate pool external deposit fee. It is calculated using debtRatio and external deposit fee of each strategy.\n     * @dev Whenever debtRatio changes recalculation is required. DebtRatio changes if strategy reports loss and in that case an\n     * off chain application can watch for it and take action accordingly.\n     * @dev This function is gas heavy hence we do not want to call during reportLoss.\n     */\n    function recalculatePoolExternalDepositFee() external onlyKeeper {\n        _recalculatePoolExternalDepositFee();\n    }\n\n    /**\n     * @dev Transfer given ERC20 token to pool\n     * @param fromToken_ Token address to sweep\n     */\n    function sweep(address fromToken_) external virtual onlyKeeper {\n        IERC20(fromToken_).safeTransfer(pool, IERC20(fromToken_).balanceOf(address(this)));\n    }\n\n    ///////////////////////////// Only Maintainer /////////////////////////////\n    /**\n     * @notice Update debt ratio.\n     * @dev A strategy is retired when debtRatio is 0\n     * @dev As debtRatio impacts pool level external deposit fee hence recalculate it after updating debtRatio.\n     * @param strategy_ Strategy address for which debt ratio is being updated\n     * @param debtRatio_ New debt ratio\n     */\n    function updateDebtRatio(address strategy_, uint256 debtRatio_) external onlyMaintainer {\n        require(strategy[strategy_].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        // Update totalDebtRatio\n        totalDebtRatio = (totalDebtRatio - strategy[strategy_].debtRatio) + debtRatio_;\n        require(totalDebtRatio <= MAX_BPS, Errors.DEBT_RATIO_LIMIT_REACHED);\n        emit UpdatedStrategyDebtRatio(strategy_, strategy[strategy_].debtRatio, debtRatio_);\n        // Write to storage\n        strategy[strategy_].debtRatio = debtRatio_;\n        // Recalculate pool level externalDepositFee.\n        _recalculatePoolExternalDepositFee();\n    }\n\n    /**\n     * @notice Update withdraw queue. Withdraw queue is list of strategy in the order in which\n     * funds should be withdrawn.\n     * @dev Pool always keep some buffer amount to satisfy withdrawal request, any withdrawal\n     * request higher than buffer will withdraw from withdraw queue. So withdrawQueue[0] will\n     * be the first strategy where withdrawal request will be send.\n     * @param withdrawQueue_ Ordered list of strategy.\n     */\n    function updateWithdrawQueue(address[] memory withdrawQueue_) external onlyMaintainer {\n        uint256 _length = withdrawQueue_.length;\n        require(_length == withdrawQueue.length && _length == strategies.length, Errors.INPUT_LENGTH_MISMATCH);\n        for (uint256 i; i < _length; i++) {\n            require(strategy[withdrawQueue_[i]].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        }\n        withdrawQueue = withdrawQueue_;\n    }\n\n    //////////////////////////////// Only Pool ////////////////////////////////\n\n    /**\n     * @notice Decrease debt of strategy, also decrease totalDebt\n     * @dev In case of withdraw from strategy, pool will decrease debt by amount withdrawn\n     * @param strategy_ Strategy Address\n     * @param decreaseBy_ Amount by which strategy debt will be decreased\n     */\n    function decreaseDebt(address strategy_, uint256 decreaseBy_) external onlyPool {\n        // A strategy may send more than its debt. This should never fail\n        decreaseBy_ = _min(strategy[strategy_].totalDebt, decreaseBy_);\n        strategy[strategy_].totalDebt -= decreaseBy_;\n        totalDebt -= decreaseBy_;\n    }\n\n    /**\n     * @notice Migrate existing strategy to new strategy.\n     * @dev Migrating strategy aka old and new strategy should be of same type.\n     * @dev New strategy will replace old strategy in strategy mapping,\n     * strategies array, withdraw queue.\n     * @param old_ Address of strategy being migrated\n     * @param new_ Address of new strategy\n     */\n    function migrateStrategy(address old_, address new_) external onlyPool {\n        require(strategy[old_].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(!strategy[new_].active, Errors.STRATEGY_IS_ACTIVE);\n        StrategyConfig memory _newStrategy = StrategyConfig({\n            active: true,\n            interestFee: 0, // Obsolete\n            debtRate: 0, // Obsolete\n            lastRebalance: strategy[old_].lastRebalance,\n            totalDebt: strategy[old_].totalDebt,\n            totalLoss: 0,\n            totalProfit: 0,\n            debtRatio: strategy[old_].debtRatio,\n            externalDepositFee: strategy[old_].externalDepositFee\n        });\n        delete strategy[old_];\n        strategy[new_] = _newStrategy;\n\n        // Strategies and withdrawQueue has same length but we still want\n        // to iterate over them in different loop.\n        for (uint256 i; i < strategies.length; i++) {\n            if (strategies[i] == old_) {\n                strategies[i] = new_;\n                break;\n            }\n        }\n        for (uint256 i; i < withdrawQueue.length; i++) {\n            if (withdrawQueue[i] == old_) {\n                withdrawQueue[i] = new_;\n                break;\n            }\n        }\n        emit StrategyMigrated(old_, new_);\n    }\n\n    /**\n     * @dev Strategy call this in regular interval.\n     * @param profit_ yield generated by strategy. Strategy get performance fee on this amount\n     * @param loss_  Reduce debt ,also reduce debtRatio, increase loss in record.\n     * @param payback_ strategy willing to payback outstanding above debtLimit. no performance fee on this amount.\n     *  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.\n     */\n    function reportEarning(\n        address strategy_,\n        uint256 profit_,\n        uint256 loss_,\n        uint256 payback_\n    ) external onlyPool returns (uint256 _actualPayback, uint256 _creditLine) {\n        require(strategy[strategy_].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        require(IVesperPool(pool).token().balanceOf(strategy_) >= (profit_ + payback_), Errors.INSUFFICIENT_BALANCE);\n        if (loss_ > 0) {\n            _reportLoss(strategy_, loss_);\n        }\n\n        uint256 _overLimitDebt = _excessDebt(strategy_);\n        _actualPayback = _min(_overLimitDebt, payback_);\n        if (_actualPayback > 0) {\n            strategy[strategy_].totalDebt -= _actualPayback;\n            totalDebt -= _actualPayback;\n        }\n        _creditLine = _availableCreditLimit(strategy_);\n        if (_creditLine > 0) {\n            strategy[strategy_].totalDebt += _creditLine;\n            totalDebt += _creditLine;\n        }\n        if (profit_ > 0) {\n            strategy[strategy_].totalProfit += profit_;\n        }\n        strategy[strategy_].lastRebalance = block.timestamp;\n        emit EarningReported(\n            strategy_,\n            profit_,\n            loss_,\n            _actualPayback,\n            strategy[strategy_].totalDebt,\n            totalDebt,\n            _creditLine\n        );\n        return (_actualPayback, _creditLine);\n    }\n\n    /**\n     * @notice Update strategy loss.\n     * @param strategy_ Strategy which incur loss\n     * @param loss_ Loss of strategy\n     */\n    function reportLoss(address strategy_, uint256 loss_) external onlyPool {\n        require(strategy[strategy_].active, Errors.STRATEGY_IS_NOT_ACTIVE);\n        _reportLoss(strategy_, loss_);\n        emit LossReported(strategy_, loss_);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n}\n"
    },
    "vesper-pools/contracts/pool/PoolAccountantStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nabstract contract PoolAccountantStorageV1 {\n    address public pool; // Address of Vesper pool\n    uint256 public totalDebtRatio; // Total debt ratio. This will keep some buffer amount in pool\n    uint256 public totalDebt; // Total debt. Sum of debt of all strategies.\n    address[] public strategies; // Array of strategies\n    address[] public withdrawQueue; // Array of strategy in the order in which funds should be withdrawn.\n}\n\nabstract contract PoolAccountantStorageV2 is PoolAccountantStorageV1 {\n    struct StrategyConfig {\n        bool active;\n        uint256 interestFee; // Obsolete in favor of universal fee\n        uint256 debtRate; // Obsolete\n        uint256 lastRebalance; // Timestamp of last rebalance. It is used in universal fee calculation\n        uint256 totalDebt; // Total outstanding debt strategy has\n        uint256 totalLoss; // Total loss that strategy has realized\n        uint256 totalProfit; // Total gain that strategy has realized\n        uint256 debtRatio; // % of asset allocation\n        uint256 externalDepositFee; // External deposit fee of strategy\n    }\n\n    mapping(address => StrategyConfig) public strategy; // Strategy address to its configuration\n\n    uint256 public externalDepositFee; // External deposit fee of Vesper pool\n}\n"
    },
    "vesper-pools/contracts/pool/PoolERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/Context.sol\";\n\n// solhint-disable reason-string, no-empty-blocks\n///@title Pool ERC20 to use with proxy. Inspired by OpenZeppelin ERC20\nabstract contract PoolERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol} for proxy\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC20_init(string memory name_, string memory symbol_) internal {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the decimals of the token. default to 18\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev Returns total supply of the token.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev  Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "vesper-pools/contracts/pool/PoolERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./PoolERC20.sol\";\n\n///@title Pool ERC20 Permit to use with proxy. Inspired by OpenZeppelin ERC20Permit\n// solhint-disable var-name-mixedcase\nabstract contract PoolERC20Permit is PoolERC20, IERC20Permit {\n    bytes32 private constant _EIP712_VERSION = keccak256(bytes(\"1\"));\n    bytes32 private constant _EIP712_DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    bytes32 private _CACHED_DOMAIN_SEPARATOR;\n    bytes32 private _HASHED_NAME;\n    uint256 private _CACHED_CHAIN_ID;\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    mapping(address => uint256) public override nonces;\n\n    /**\n     * @dev Initializes the domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC20Permit_init(string memory name_) internal {\n        _HASHED_NAME = keccak256(bytes(name_));\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_EIP712_DOMAIN_TYPEHASH, _HASHED_NAME, _EIP712_VERSION);\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n        uint256 _currentNonce = nonces[owner];\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _currentNonce, deadline));\n        bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n        nonces[owner] = _currentNonce + 1;\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() private view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_EIP712_DOMAIN_TYPEHASH, _HASHED_NAME, _EIP712_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, name, version, block.chainid, address(this)));\n    }\n}\n"
    },
    "vesper-pools/contracts/pool/PoolRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/vesper/IPoolRewards.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\n\nabstract contract PoolRewardsStorage is IPoolRewards {\n    /// Vesper pool address\n    address public pool;\n\n    /// Array of reward token addresses\n    address[] public rewardTokens;\n\n    /// Reward token to valid/invalid flag mapping\n    mapping(address => bool) public isRewardToken;\n\n    /// Reward token to period ending of current reward\n    mapping(address => uint256) public periodFinish;\n\n    /// Reward token to current reward rate mapping\n    mapping(address => uint256) public rewardRates;\n\n    /// Reward token to Duration of current reward distribution\n    mapping(address => uint256) public rewardDuration;\n\n    /// Reward token to Last reward drip update time stamp mapping\n    mapping(address => uint256) public lastUpdateTime;\n\n    /// Reward token to Reward per token mapping. Calculated and stored at last drip update\n    mapping(address => uint256) public rewardPerTokenStored;\n\n    /// Reward token => User => Reward per token stored at last reward update\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\n\n    /// RewardToken => User => Rewards earned till last reward update\n    mapping(address => mapping(address => uint256)) public rewards;\n}\n\n/// @title Distribute rewards based on vesper pool balance and supply\ncontract PoolRewards is Initializable, ReentrancyGuard, PoolRewardsStorage {\n    string public constant VERSION = \"5.1.0\";\n    using SafeERC20 for IERC20;\n\n    /**\n     * @dev Called by proxy to initialize this contract\n     * @param pool_ Vesper pool address\n     * @param rewardTokens_ Array of reward token addresses\n     */\n    function initialize(address pool_, address[] memory rewardTokens_) public initializer {\n        require(pool_ != address(0), \"pool-address-is-zero\");\n        uint256 _len = rewardTokens_.length;\n        require(_len > 0, \"invalid-reward-tokens\");\n        pool = pool_;\n        rewardTokens = rewardTokens_;\n        for (uint256 i; i < _len; i++) {\n            isRewardToken[rewardTokens_[i]] = true;\n        }\n    }\n\n    modifier onlyAuthorized() virtual {\n        require(msg.sender == IVesperPool(pool).governor(), \"not-authorized\");\n        _;\n    }\n\n    /**\n     * @notice Returns claimable reward amount.\n     * @return _rewardTokens Array of tokens being rewarded\n     * @return _claimableAmounts Array of claimable for token on same index in rewardTokens\n     */\n    function claimable(\n        address account_\n    ) external view virtual override returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts) {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _balance = IERC20(pool).balanceOf(account_);\n        _rewardTokens = rewardTokens;\n        uint256 _len = _rewardTokens.length;\n        _claimableAmounts = new uint256[](_len);\n        for (uint256 i; i < _len; i++) {\n            _claimableAmounts[i] = _claimable(_rewardTokens[i], account_, _totalSupply, _balance);\n        }\n    }\n\n    /**\n     * @notice Claim earned rewards.\n     * @dev This function will claim rewards for all tokens being rewarded\n     */\n    function claimReward(address account_) external virtual override nonReentrant {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _balance = IERC20(pool).balanceOf(account_);\n        uint256 _len = rewardTokens.length;\n        for (uint256 i; i < _len; i++) {\n            address _rewardToken = rewardTokens[i];\n            _updateReward(_rewardToken, account_, _totalSupply, _balance);\n\n            // Claim rewards\n            uint256 _reward = rewards[_rewardToken][account_];\n            if (_reward > 0 && _reward <= IERC20(_rewardToken).balanceOf(address(this))) {\n                _claimReward(_rewardToken, account_, _reward);\n                emit RewardPaid(account_, _rewardToken, _reward);\n            }\n        }\n    }\n\n    /// @notice Provides easy access to all rewardTokens\n    function getRewardTokens() external view returns (address[] memory) {\n        return rewardTokens;\n    }\n\n    /// @notice Returns timestamp of last reward update\n    function lastTimeRewardApplicable(address rewardToken_) public view override returns (uint256) {\n        return block.timestamp < periodFinish[rewardToken_] ? block.timestamp : periodFinish[rewardToken_];\n    }\n\n    function rewardForDuration()\n        external\n        view\n        override\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration)\n    {\n        _rewardTokens = rewardTokens;\n        uint256 _len = _rewardTokens.length;\n        _rewardForDuration = new uint256[](_len);\n        for (uint256 i; i < _len; i++) {\n            _rewardForDuration[i] = rewardRates[_rewardTokens[i]] * rewardDuration[_rewardTokens[i]];\n        }\n    }\n\n    /**\n     * @notice Rewards rate per pool token\n     * @return _rewardTokens Array of tokens being rewarded\n     * @return _rewardPerTokenRate Array of Rewards rate for token on same index in rewardTokens\n     */\n    function rewardPerToken()\n        external\n        view\n        override\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate)\n    {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        _rewardTokens = rewardTokens;\n        uint256 _len = _rewardTokens.length;\n        _rewardPerTokenRate = new uint256[](_len);\n        for (uint256 i; i < _len; i++) {\n            _rewardPerTokenRate[i] = _rewardPerToken(_rewardTokens[i], _totalSupply);\n        }\n    }\n\n    /**\n     * @notice Updated reward for given account.\n     */\n    function updateReward(address account_) external override {\n        uint256 _totalSupply = IERC20(pool).totalSupply();\n        uint256 _balance = IERC20(pool).balanceOf(account_);\n        uint256 _len = rewardTokens.length;\n        for (uint256 i; i < _len; i++) {\n            _updateReward(rewardTokens[i], account_, _totalSupply, _balance);\n        }\n    }\n\n    function _claimable(\n        address rewardToken_,\n        address account_,\n        uint256 totalSupply_,\n        uint256 balance_\n    ) internal view returns (uint256) {\n        uint256 _rewardPerTokenAvailable = _rewardPerToken(rewardToken_, totalSupply_) -\n            userRewardPerTokenPaid[rewardToken_][account_];\n        // claimable = rewards + rewards earned since last update\n        return rewards[rewardToken_][account_] + ((balance_ * _rewardPerTokenAvailable) / 1e18);\n    }\n\n    function _claimReward(address rewardToken_, address account_, uint256 reward_) internal virtual {\n        // Mark reward as claimed\n        rewards[rewardToken_][account_] = 0;\n        // Transfer reward\n        IERC20(rewardToken_).safeTransfer(account_, reward_);\n    }\n\n    // There are scenarios when extending contract will override external methods and\n    // end up calling internal function. Hence providing internal functions\n    function _notifyRewardAmount(\n        address[] memory rewardTokens_,\n        uint256[] memory rewardAmounts_,\n        uint256[] memory rewardDurations_,\n        uint256 totalSupply_\n    ) internal {\n        uint256 _len = rewardTokens_.length;\n        require(_len > 0, \"invalid-reward-tokens\");\n        require(_len == rewardAmounts_.length && _len == rewardDurations_.length, \"array-length-mismatch\");\n        for (uint256 i; i < _len; i++) {\n            _notifyRewardAmount(rewardTokens_[i], rewardAmounts_[i], rewardDurations_[i], totalSupply_);\n        }\n    }\n\n    function _notifyRewardAmount(\n        address rewardToken_,\n        uint256 rewardAmount_,\n        uint256 rewardDuration_,\n        uint256 totalSupply_\n    ) internal {\n        require(rewardToken_ != address(0), \"incorrect-reward-token\");\n        require(rewardAmount_ > 0, \"incorrect-reward-amount\");\n        require(rewardDuration_ > 0, \"incorrect-reward-duration\");\n        require(isRewardToken[rewardToken_], \"invalid-reward-token\");\n\n        // Update rewards earned so far\n        rewardPerTokenStored[rewardToken_] = _rewardPerToken(rewardToken_, totalSupply_);\n        if (block.timestamp >= periodFinish[rewardToken_]) {\n            rewardRates[rewardToken_] = rewardAmount_ / rewardDuration_;\n        } else {\n            uint256 remainingPeriod = periodFinish[rewardToken_] - block.timestamp;\n\n            uint256 leftover = remainingPeriod * rewardRates[rewardToken_];\n            rewardRates[rewardToken_] = (rewardAmount_ + leftover) / rewardDuration_;\n        }\n        // Safety check\n        require(\n            rewardRates[rewardToken_] <= (IERC20(rewardToken_).balanceOf(address(this)) / rewardDuration_),\n            \"rewards-too-high\"\n        );\n        // Start new drip time\n        rewardDuration[rewardToken_] = rewardDuration_;\n        lastUpdateTime[rewardToken_] = block.timestamp;\n        periodFinish[rewardToken_] = block.timestamp + rewardDuration_;\n        emit RewardAdded(rewardToken_, rewardAmount_, rewardDuration_);\n    }\n\n    function _rewardPerToken(address rewardToken_, uint256 totalSupply_) internal view returns (uint256) {\n        if (totalSupply_ == 0) {\n            return rewardPerTokenStored[rewardToken_];\n        }\n\n        uint256 _timeSinceLastUpdate = lastTimeRewardApplicable(rewardToken_) - lastUpdateTime[rewardToken_];\n        // reward per token = rewardPerTokenStored + rewardPerToken since last update\n        return\n            rewardPerTokenStored[rewardToken_] +\n            ((_timeSinceLastUpdate * rewardRates[rewardToken_] * 1e18) / totalSupply_);\n    }\n\n    function _updateReward(address rewardToken_, address account_, uint256 totalSupply_, uint256 balance_) internal {\n        uint256 _rewardPerTokenStored = _rewardPerToken(rewardToken_, totalSupply_);\n        rewardPerTokenStored[rewardToken_] = _rewardPerTokenStored;\n        lastUpdateTime[rewardToken_] = lastTimeRewardApplicable(rewardToken_);\n        if (account_ != address(0)) {\n            rewards[rewardToken_][account_] = _claimable(rewardToken_, account_, totalSupply_, balance_);\n            userRewardPerTokenPaid[rewardToken_][account_] = _rewardPerTokenStored;\n        }\n    }\n\n    /************************************************************************************************\n     *                                     Authorized function                                      *\n     ***********************************************************************************************/\n\n    /// @notice Add new reward token in existing rewardsToken array\n    function addRewardToken(address newRewardToken_) external onlyAuthorized {\n        require(newRewardToken_ != address(0), \"reward-token-address-zero\");\n        require(!isRewardToken[newRewardToken_], \"reward-token-already-exist\");\n        emit RewardTokenAdded(newRewardToken_, rewardTokens);\n        rewardTokens.push(newRewardToken_);\n        isRewardToken[newRewardToken_] = true;\n    }\n\n    /**\n     * @notice Notify that reward is added. Only authorized caller can call\n     * @dev Also updates reward rate and reward earning period.\n     * @param rewardTokens_ Tokens being rewarded\n     * @param rewardAmounts_ Rewards amount for token on same index in rewardTokens array\n     * @param rewardDurations_ Duration for which reward will be distributed\n     */\n    function notifyRewardAmount(\n        address[] memory rewardTokens_,\n        uint256[] memory rewardAmounts_,\n        uint256[] memory rewardDurations_\n    ) external virtual override onlyAuthorized {\n        _notifyRewardAmount(rewardTokens_, rewardAmounts_, rewardDurations_, IERC20(pool).totalSupply());\n    }\n\n    function notifyRewardAmount(\n        address rewardToken_,\n        uint256 rewardAmount_,\n        uint256 rewardDuration_\n    ) external virtual override onlyAuthorized {\n        _notifyRewardAmount(rewardToken_, rewardAmount_, rewardDuration_, IERC20(pool).totalSupply());\n    }\n}\n"
    },
    "vesper-pools/contracts/pool/PoolStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/vesper/IVesperPool.sol\";\n\nabstract contract PoolStorageV1 is IVesperPool {\n    ///@notice Collateral token address\n    IERC20 public token;\n    /// @notice PoolAccountant address\n    address public poolAccountant;\n    /// @notice PoolRewards contract address\n    address public poolRewards;\n    address private feeWhitelistObsolete; // Obsolete in favor of AddressSet of feeWhitelist\n    address private keepersObsolete; // Obsolete in favor of AddressSet of keepers\n    address private maintainersObsolete; // Obsolete in favor of AddressSet of maintainers\n    address private feeCollectorObsolete; // Fee collector address. Obsolete as there is no fee to collect\n    uint256 private withdrawFeeObsolete; // Withdraw fee for this pool. Obsolete in favor of universal fee\n    uint256 private decimalConversionFactorObsolete; // It can be used in converting value to/from 18 decimals\n    bool internal withdrawInETH; // This flag will be used by VETH pool as switch to withdraw ETH or WETH\n}\n\nabstract contract PoolStorageV2 is PoolStorageV1 {\n    EnumerableSet.AddressSet private _feeWhitelistObsolete; // Obsolete in favor of universal fee\n    EnumerableSet.AddressSet internal _keepers; // List of keeper addresses\n    EnumerableSet.AddressSet internal _maintainers; // List of maintainer addresses\n}\n\nabstract contract PoolStorageV3 is PoolStorageV2 {\n    /// @notice Universal fee of this pool. Default to 2%\n    uint256 public universalFee = 200;\n    /// @notice Maximum percentage of profit that can be counted as universal fee. Default to 50%\n    uint256 public maxProfitAsFee = 5_000;\n    /// @notice Minimum deposit limit.\n    /// @dev Do not set it to 0 as deposit() is checking if amount >= limit\n    uint256 public minDepositLimit = 1;\n}\n"
    },
    "vesper-pools/contracts/pool/VETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./VPool.sol\";\nimport \"../interfaces/token/IToken.sol\";\n\n//solhint-disable no-empty-blocks\ncontract VETH is VPool {\n    constructor(string memory name_, string memory symbol_, address token_) VPool(name_, symbol_, token_) {}\n\n    /// @dev Handle incoming ETH to the contract address.\n    receive() external payable {\n        if (msg.sender != address(token)) {\n            deposit();\n        }\n    }\n\n    /**\n     * @dev Receives ETH and grants new tokens/shares to the sender depending\n     * on the value of pool's share.\n     */\n    function deposit() public payable whenNotPaused nonReentrant {\n        _updateRewards(_msgSender());\n        _depositETH();\n    }\n\n    /// @dev Deposit ETH and claim rewards if any\n    function depositAndClaim() external payable whenNotPaused nonReentrant {\n        _claimRewards(_msgSender());\n        _depositETH();\n    }\n\n    /// @dev Burns tokens/shares and returns the ETH value, after fee, of those.\n    function withdrawETH(uint256 shares_) external whenNotShutdown nonReentrant {\n        withdrawInETH = true;\n        _updateRewards(_msgSender());\n        _withdraw(shares_);\n        withdrawInETH = false;\n    }\n\n    /// @dev Burns tokens/shares and returns the ETH value and claim rewards if any\n    function withdrawETHAndClaim(uint256 shares_) external whenNotShutdown nonReentrant {\n        withdrawInETH = true;\n        _claimRewards(_msgSender());\n        _withdraw(shares_);\n        withdrawInETH = false;\n    }\n\n    /**\n     * @dev After burning hook, it will be called during withdrawal process.\n     * It will withdraw collateral from strategy and transfer it to user.\n     */\n    function _afterBurning(uint256 amount_) internal override returns (uint256) {\n        if (withdrawInETH) {\n            TokenLike(address(token)).withdraw(amount_);\n            Address.sendValue(payable(_msgSender()), amount_);\n        } else {\n            super._afterBurning(amount_);\n        }\n        return amount_;\n    }\n\n    function _depositETH() internal {\n        uint256 _shares = calculateMintage(msg.value);\n        // Wraps ETH in WETH\n        TokenLike(address(token)).deposit{value: msg.value}();\n        _mint(_msgSender(), _shares);\n        emit Deposit(_msgSender(), _shares, msg.value);\n    }\n}\n"
    },
    "vesper-pools/contracts/pool/VPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"../dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../dependencies/openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./PoolERC20Permit.sol\";\nimport \"./PoolStorage.sol\";\nimport \"../Errors.sol\";\nimport \"../Governable.sol\";\nimport \"../Pausable.sol\";\nimport \"../interfaces/vesper/IPoolAccountant.sol\";\nimport \"../interfaces/vesper/IPoolRewards.sol\";\nimport \"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\";\n\n/// @title Holding pool share token\n// solhint-disable no-empty-blocks\ncontract VPool is Initializable, PoolERC20Permit, Governable, Pausable, ReentrancyGuard, PoolStorageV3 {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    string public constant VERSION = \"5.1.0\";\n\n    uint256 public constant MAX_BPS = 10_000;\n    // For simplicity we are assuming 365 days as 1 year\n    uint256 public constant ONE_YEAR = 365 days;\n\n    event UpdatedMaximumProfitAsFee(uint256 oldMaxProfitAsFee, uint256 newMaxProfitAsFee);\n    event UpdatedMinimumDepositLimit(uint256 oldDepositLimit, uint256 newDepositLimit);\n    event Deposit(address indexed owner, uint256 shares, uint256 amount);\n    event Withdraw(address indexed owner, uint256 shares, uint256 amount);\n    event UpdatedUniversalFee(uint256 oldUniversalFee, uint256 newUniversalFee);\n    event UpdatedPoolRewards(address indexed previousPoolRewards, address indexed newPoolRewards);\n    event UpdatedWithdrawFee(uint256 previousWithdrawFee, uint256 newWithdrawFee);\n    event UniversalFeePaid(uint256 strategyDebt, uint256 profit, uint256 fee);\n\n    // We are using constructor to initialize implementation with basic details\n    constructor(string memory name_, string memory symbol_, address token_) PoolERC20(name_, symbol_) {\n        // 0x0 is acceptable as has no effect on functionality\n        token = IERC20(token_);\n    }\n\n    /// @dev Equivalent to constructor for proxy. It can be called only once per proxy.\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        address token_,\n        address poolAccountant_\n    ) public initializer {\n        require(token_ != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        require(poolAccountant_ != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        __ERC20_init(name_, symbol_);\n        __ERC20Permit_init(name_);\n        __Governable_init();\n        token = IERC20(token_);\n\n        require(_keepers.add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\n        require(_maintainers.add(_msgSender()), Errors.ADD_IN_LIST_FAILED);\n        poolAccountant = poolAccountant_;\n        universalFee = 200; // 2%\n        maxProfitAsFee = 5_000; // 50%\n        minDepositLimit = 1;\n    }\n\n    modifier onlyKeeper() {\n        require(governor == _msgSender() || _keepers.contains(_msgSender()), \"not-a-keeper\");\n        _;\n    }\n\n    modifier onlyMaintainer() {\n        require(governor == _msgSender() || _maintainers.contains(_msgSender()), \"not-a-maintainer\");\n        _;\n    }\n\n    /**\n     * @notice Get available credit limit of strategy. This is the amount strategy can borrow from pool\n     * @dev Available credit limit is calculated based on current debt of pool and strategy, current debt limit of pool and strategy.\n     * credit available = min(pool's debt limit, strategy's debt limit, max debt per rebalance)\n     * when some strategy do not pay back outstanding debt, this impact credit line of other strategy if totalDebt of pool >= debtLimit of pool\n     * @param strategy_ Strategy address\n     */\n    function availableCreditLimit(address strategy_) external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).availableCreditLimit(strategy_);\n    }\n\n    /**\n     * @notice Calculate how much shares user will get for given amount. Also return externalDepositFee if any.\n     * @param amount_ Collateral amount\n     * @return _shares Amount of share that user will get\n     * @dev Amount should be >= minimum deposit limit which default to 1\n     */\n    function calculateMintage(uint256 amount_) public view returns (uint256 _shares) {\n        require(amount_ >= minDepositLimit, Errors.INVALID_COLLATERAL_AMOUNT);\n        uint256 _externalDepositFee = (amount_ * IPoolAccountant(poolAccountant).externalDepositFee()) / MAX_BPS;\n        _shares = _calculateShares(amount_ - _externalDepositFee);\n    }\n\n    /**\n     * @notice Calculate universal fee for calling strategy. This is only strategy function.\n     * @dev Earn strategies will call this during rebalance.\n     */\n    function calculateUniversalFee(uint256 profit_) external view returns (uint256 _fee) {\n        return _calculateUniversalFee(_msgSender(), profit_);\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens and receive pool shares depending on the current share price.\n     * @param amount_ ERC20 token amount.\n     */\n    function deposit(uint256 amount_) external nonReentrant whenNotPaused {\n        _updateRewards(_msgSender());\n        _deposit(amount_);\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens and claim rewards if any\n     * @param amount_ ERC20 token amount.\n     */\n    function depositAndClaim(uint256 amount_) external nonReentrant whenNotPaused {\n        _claimRewards(_msgSender());\n        _deposit(amount_);\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens with permit aka gasless approval.\n     * @param amount_ ERC20 token amount.\n     * @param deadline_ The time at which signature will expire\n     * @param v_ The recovery byte of the signature\n     * @param r_ Half of the ECDSA signature pair\n     * @param s_ Half of the ECDSA signature pair\n     */\n    function depositWithPermit(\n        uint256 amount_,\n        uint256 deadline_,\n        uint8 v_,\n        bytes32 r_,\n        bytes32 s_\n    ) external nonReentrant whenNotPaused {\n        IERC20Permit(address(token)).permit(_msgSender(), address(this), amount_, deadline_, v_, r_, s_);\n        _updateRewards(_msgSender());\n        _deposit(amount_);\n    }\n\n    /**\n     * @notice Debt above current debt limit\n     * @param strategy_ Address of strategy\n     */\n    function excessDebt(address strategy_) external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).excessDebt(strategy_);\n    }\n\n    function getStrategies() external view returns (address[] memory) {\n        return IPoolAccountant(poolAccountant).getStrategies();\n    }\n\n    function getWithdrawQueue() public view returns (address[] memory) {\n        return IPoolAccountant(poolAccountant).getWithdrawQueue();\n    }\n\n    /**\n     * @notice Get price per share\n     * @dev Return value will be in token defined decimals.\n     */\n    function pricePerShare() public view returns (uint256) {\n        if (totalSupply() == 0 || totalValue() == 0) {\n            return 10 ** IERC20Metadata(address(token)).decimals();\n        }\n        return (totalValue() * 1e18) / totalSupply();\n    }\n\n    /**\n     * @notice Strategy call this in regular interval. Only strategy function.\n     * @param profit_ yield generated by strategy. Strategy get performance fee on this amount\n     * @param loss_  Reduce debt ,also reduce debtRatio, increase loss in record.\n     * @param payback_ strategy willing to payback outstanding above debtLimit. no performance fee on this amount.\n     *  when governance has reduced debtRatio of strategy, strategy will report profit and payback amount separately.\n     */\n    function reportEarning(uint256 profit_, uint256 loss_, uint256 payback_) external {\n        address _strategy = _msgSender();\n        // Calculate universal fee\n        if (profit_ > 0) {\n            (, , , uint256 _lastRebalanceAt, uint256 _totalDebt, , , , ) = IPoolAccountant(poolAccountant).strategy(\n                _strategy\n            );\n            uint256 _fee = _calculateUniversalFee(_lastRebalanceAt, _totalDebt, profit_);\n            // Mint shares equal to universal fee\n            if (_fee > 0) {\n                _mint(IStrategy(_strategy).feeCollector(), _calculateShares(_fee));\n                emit UniversalFeePaid(_totalDebt, profit_, _fee);\n            }\n        }\n\n        // Report earning in pool accountant\n        (uint256 _actualPayback, uint256 _creditLine) = IPoolAccountant(poolAccountant).reportEarning(\n            _strategy,\n            profit_,\n            loss_,\n            payback_\n        );\n        uint256 _totalPayback = profit_ + _actualPayback;\n        // After payback, if strategy has credit line available then send more fund to strategy\n        // If payback is more than available credit line then get fund from strategy\n        if (_totalPayback < _creditLine) {\n            token.safeTransfer(_strategy, _creditLine - _totalPayback);\n        } else if (_totalPayback > _creditLine) {\n            token.safeTransferFrom(_strategy, address(this), _totalPayback - _creditLine);\n        }\n    }\n\n    /**\n     * @notice Report loss outside of rebalance activity.\n     * @dev Some strategies pay deposit fee thus realizing loss at deposit.\n     * For example: Curve's 3pool has some slippage due to deposit of one asset in 3pool.\n     * Strategy may want report this loss instead of waiting for next rebalance.\n     * @param loss_ Loss that strategy want to report\n     */\n    function reportLoss(uint256 loss_) external {\n        if (loss_ > 0) {\n            IPoolAccountant(poolAccountant).reportLoss(_msgSender(), loss_);\n        }\n    }\n\n    function strategy(\n        address strategy_\n    )\n        public\n        view\n        returns (\n            bool _active,\n            uint256 _interestFee, // Obsolete\n            uint256 _debtRate, // Obsolete\n            uint256 _lastRebalance,\n            uint256 _totalDebt,\n            uint256 _totalLoss,\n            uint256 _totalProfit,\n            uint256 _debtRatio,\n            uint256 _externalDepositFee\n        )\n    {\n        return IPoolAccountant(poolAccountant).strategy(strategy_);\n    }\n\n    /// @dev Returns the token stored in the pool. It will be in token defined decimals.\n    function tokensHere() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    /// @notice Get total debt of pool\n    function totalDebt() external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebt();\n    }\n\n    /**\n     * @notice Get total debt of given strategy\n     * @param strategy_ Strategy address\n     */\n    function totalDebtOf(address strategy_) external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebtOf(strategy_);\n    }\n\n    /// @notice Get total debt ratio. Total debt ratio helps us keep buffer in pool\n    function totalDebtRatio() external view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebtRatio();\n    }\n\n    /**\n     * @notice Returns sum of token locked in other contracts and token stored in the pool.\n     * It will be in token defined decimals.\n     */\n    function totalValue() public view returns (uint256) {\n        return IPoolAccountant(poolAccountant).totalDebt() + tokensHere();\n    }\n\n    /**\n     * @notice Withdraw collateral based on given shares and the current share price.\n     * Burn remaining shares and return collateral.\n     * @param shares_ Pool shares. It will be in 18 decimals.\n     */\n    function withdraw(uint256 shares_) external nonReentrant whenNotShutdown {\n        _updateRewards(_msgSender());\n        _withdraw(shares_);\n    }\n\n    /**\n     * @notice Withdraw collateral and claim rewards if any\n     * @param shares_ Pool shares. It will be in 18 decimals.\n     */\n    function withdrawAndClaim(uint256 shares_) external nonReentrant whenNotShutdown {\n        _claimRewards(_msgSender());\n        _withdraw(shares_);\n    }\n\n    /**\n     * @dev Hook that is called just after burning tokens.\n     * @param amount_ Collateral amount in collateral token defined decimals.\n     */\n    function _afterBurning(uint256 amount_) internal virtual returns (uint256) {\n        token.safeTransfer(_msgSender(), amount_);\n        return amount_;\n    }\n\n    /**\n     * @dev Before burning hook.\n     * withdraw amount from strategies\n     */\n    function _beforeBurning(uint256 share_) private returns (uint256 _amount, bool _isPartial) {\n        _amount = (share_ * pricePerShare()) / 1e18;\n        uint256 _tokensHere = tokensHere();\n        // Check for partial withdraw scenario\n        // If we do not have enough tokens then withdraw whats needed from strategy\n        if (_amount > _tokensHere) {\n            // Strategy may withdraw partial\n            _withdrawCollateral(_amount - _tokensHere);\n            _tokensHere = tokensHere();\n            if (_amount > _tokensHere) {\n                _amount = _tokensHere;\n                _isPartial = true;\n            }\n        }\n        require(_amount > 0, Errors.INVALID_COLLATERAL_AMOUNT);\n    }\n\n    /**\n     * @dev Calculate shares to mint/burn based on the current share price and given amount.\n     * @param amount_ Collateral amount in collateral token defined decimals.\n     * @return share amount in 18 decimal\n     */\n    function _calculateShares(uint256 amount_) private view returns (uint256) {\n        uint256 _share = ((amount_ * 1e18) / pricePerShare());\n        return amount_ > ((_share * pricePerShare()) / 1e18) ? _share + 1 : _share;\n    }\n\n    /**\n     * @dev Calculate universal fee based on strategy's TVL, profit earned and duration between rebalance and now.\n     */\n    function _calculateUniversalFee(address strategy_, uint256 profit_) private view returns (uint256 _fee) {\n        // Calculate universal fee\n        (, , , uint256 _lastRebalance, uint256 _totalDebt, , , , ) = IPoolAccountant(poolAccountant).strategy(\n            strategy_\n        );\n        return _calculateUniversalFee(_lastRebalance, _totalDebt, profit_);\n    }\n\n    function _calculateUniversalFee(\n        uint256 lastRebalance_,\n        uint256 totalDebt_,\n        uint256 profit_\n    ) private view returns (uint256 _fee) {\n        _fee = (universalFee * (block.timestamp - lastRebalance_) * totalDebt_) / (MAX_BPS * ONE_YEAR);\n        uint256 _maxFee = (profit_ * maxProfitAsFee) / MAX_BPS;\n        if (_fee > _maxFee) {\n            _fee = _maxFee;\n        }\n    }\n\n    /// @notice claim rewards of account\n    function _claimRewards(address account_) internal {\n        if (poolRewards != address(0)) {\n            IPoolRewards(poolRewards).claimReward(account_);\n        }\n    }\n\n    /// @dev Deposit incoming token and mint pool token i.e. shares.\n    function _deposit(uint256 amount_) internal {\n        uint256 _shares = calculateMintage(amount_);\n        token.safeTransferFrom(_msgSender(), address(this), amount_);\n        _mint(_msgSender(), _shares);\n        emit Deposit(_msgSender(), _shares, amount_);\n    }\n\n    /// @dev Update pool rewards of sender and receiver during transfer.\n    /// @dev _beforeTokenTransfer can be used to replace _transfer and _updateRewards but that\n    /// will increase gas cost of deposit, withdraw and transfer.\n    function _transfer(address sender_, address recipient_, uint256 amount_) internal override {\n        if (poolRewards != address(0)) {\n            IPoolRewards(poolRewards).updateReward(sender_);\n            IPoolRewards(poolRewards).updateReward(recipient_);\n        }\n        super._transfer(sender_, recipient_, amount_);\n    }\n\n    function _updateRewards(address account_) internal {\n        if (poolRewards != address(0)) {\n            IPoolRewards(poolRewards).updateReward(account_);\n        }\n    }\n\n    /// @dev Burns shares and returns the collateral value, after fee, of those.\n    function _withdraw(uint256 shares_) internal {\n        require(shares_ > 0, Errors.INVALID_SHARE_AMOUNT);\n\n        (uint256 _amountWithdrawn, bool _isPartial) = _beforeBurning(shares_);\n        // There may be scenarios when pool is not able to withdraw all of requested amount\n        if (_isPartial) {\n            // Recalculate proportional share on actual amount withdrawn\n            uint256 _proportionalShares = _calculateShares(_amountWithdrawn);\n            if (_proportionalShares < shares_) {\n                shares_ = _proportionalShares;\n            }\n        }\n        _burn(_msgSender(), shares_);\n        _afterBurning(_amountWithdrawn);\n        emit Withdraw(_msgSender(), shares_, _amountWithdrawn);\n    }\n\n    function _withdrawCollateral(uint256 amount_) internal {\n        // Withdraw amount from queue\n        uint256 _debt;\n        uint256 _balanceBefore;\n        uint256 _amountWithdrawn;\n        uint256 _totalAmountWithdrawn;\n        address[] memory _withdrawQueue = getWithdrawQueue();\n        uint256 _len = _withdrawQueue.length;\n        for (uint256 i; i < _len; i++) {\n            uint256 _amountNeeded = amount_ - _totalAmountWithdrawn;\n            address _strategy = _withdrawQueue[i];\n            _debt = IPoolAccountant(poolAccountant).totalDebtOf(_strategy);\n            if (_debt == 0) {\n                continue;\n            }\n            if (_amountNeeded > _debt) {\n                // Should not withdraw more than current debt of strategy.\n                _amountNeeded = _debt;\n            }\n            _balanceBefore = tokensHere();\n            //solhint-disable no-empty-blocks\n            try IStrategy(_strategy).withdraw(_amountNeeded) {} catch {\n                continue;\n            }\n            _amountWithdrawn = tokensHere() - _balanceBefore;\n            // Adjusting totalDebt. Assuming that during next reportEarning(), strategy will report loss if amountWithdrawn < _amountNeeded\n            IPoolAccountant(poolAccountant).decreaseDebt(_strategy, _amountWithdrawn);\n            _totalAmountWithdrawn += _amountWithdrawn;\n            if (_totalAmountWithdrawn >= amount_) {\n                // withdraw done\n                break;\n            }\n        }\n    }\n\n    /************************************************************************************************\n     *                                     Authorized function                                      *\n     ***********************************************************************************************/\n\n    ////////////////////////////// Only Governor //////////////////////////////\n\n    /**\n     * @notice Migrate existing strategy to new strategy.\n     * @dev Migrating strategy aka old and new strategy should be of same type.\n     * @param old_ Address of strategy being migrated\n     * @param new_ Address of new strategy\n     */\n    function migrateStrategy(address old_, address new_) external onlyGovernor {\n        require(\n            IStrategy(new_).pool() == address(this) && IStrategy(old_).pool() == address(this),\n            Errors.INVALID_STRATEGY\n        );\n        IPoolAccountant(poolAccountant).migrateStrategy(old_, new_);\n        IStrategy(old_).migrate(new_);\n    }\n\n    /**\n     * Only Governor:: Update maximum profit that can be used as universal fee\n     * @param newMaxProfitAsFee_ New max profit as fee\n     */\n    function updateMaximumProfitAsFee(uint256 newMaxProfitAsFee_) external onlyGovernor {\n        require(newMaxProfitAsFee_ != maxProfitAsFee, Errors.SAME_AS_PREVIOUS);\n        emit UpdatedMaximumProfitAsFee(maxProfitAsFee, newMaxProfitAsFee_);\n        maxProfitAsFee = newMaxProfitAsFee_;\n    }\n\n    /**\n     * Only Governor:: Update minimum deposit limit\n     * @param newLimit_ New minimum deposit limit\n     */\n    function updateMinimumDepositLimit(uint256 newLimit_) external onlyGovernor {\n        require(newLimit_ > 0, Errors.INVALID_INPUT);\n        require(newLimit_ != minDepositLimit, Errors.SAME_AS_PREVIOUS);\n        emit UpdatedMinimumDepositLimit(minDepositLimit, newLimit_);\n        minDepositLimit = newLimit_;\n    }\n\n    /**\n     * @notice Update pool rewards address for this pool\n     * @param newPoolRewards_ new pool rewards address\n     */\n    function updatePoolRewards(address newPoolRewards_) external onlyGovernor {\n        require(newPoolRewards_ != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        emit UpdatedPoolRewards(poolRewards, newPoolRewards_);\n        poolRewards = newPoolRewards_;\n    }\n\n    /**\n     * @notice Update universal fee for this pool\n     * @dev Format: 1500 = 15% fee, 100 = 1%\n     * @param newUniversalFee_ new universal fee\n     */\n    function updateUniversalFee(uint256 newUniversalFee_) external onlyGovernor {\n        require(newUniversalFee_ <= MAX_BPS, Errors.FEE_LIMIT_REACHED);\n        emit UpdatedUniversalFee(universalFee, newUniversalFee_);\n        universalFee = newUniversalFee_;\n    }\n\n    ///////////////////////////// Only Keeper ///////////////////////////////\n    /**\n     * @dev Transfer given ERC20 token to governor\n     * @param fromToken_ Token address to sweep\n     */\n    function sweepERC20(address fromToken_) external onlyKeeper {\n        require(fromToken_ != address(token), Errors.NOT_ALLOWED_TO_SWEEP);\n        IERC20(fromToken_).safeTransfer(governor, IERC20(fromToken_).balanceOf(address(this)));\n    }\n\n    function pause() external onlyKeeper {\n        _pause();\n    }\n\n    function unpause() external onlyKeeper {\n        _unpause();\n    }\n\n    function shutdown() external onlyKeeper {\n        _shutdown();\n    }\n\n    function open() external onlyKeeper {\n        _open();\n    }\n\n    /// @notice Return list of keepers\n    function keepers() external view returns (address[] memory) {\n        return _keepers.values();\n    }\n\n    function isKeeper(address address_) external view returns (bool) {\n        return _keepers.contains(address_);\n    }\n\n    /**\n     * @notice Add given address in keepers list.\n     * @param keeperAddress_ keeper address to add.\n     */\n    function addKeeper(address keeperAddress_) external onlyKeeper {\n        require(_keepers.add(keeperAddress_), Errors.ADD_IN_LIST_FAILED);\n    }\n\n    /**\n     * @notice Remove given address from keepers list.\n     * @param keeperAddress_ keeper address to remove.\n     */\n    function removeKeeper(address keeperAddress_) external onlyKeeper {\n        require(_keepers.remove(keeperAddress_), Errors.REMOVE_FROM_LIST_FAILED);\n    }\n\n    /// @notice Return list of maintainers\n    function maintainers() external view returns (address[] memory) {\n        return _maintainers.values();\n    }\n\n    function isMaintainer(address address_) external view returns (bool) {\n        return _maintainers.contains(address_);\n    }\n\n    /**\n     * @notice Add given address in maintainers list.\n     * @param maintainerAddress_ maintainer address to add.\n     */\n    function addMaintainer(address maintainerAddress_) external onlyKeeper {\n        require(_maintainers.add(maintainerAddress_), Errors.ADD_IN_LIST_FAILED);\n    }\n\n    /**\n     * @notice Remove given address from maintainers list.\n     * @param maintainerAddress_ maintainer address to remove.\n     */\n    function removeMaintainer(address maintainerAddress_) external onlyKeeper {\n        require(_maintainers.remove(maintainerAddress_), Errors.REMOVE_FROM_LIST_FAILED);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n}\n"
    },
    "vesper-pools/contracts/upgraders/PoolAccountantUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract PoolAccountantUpgrader is UpgraderBase {\n    constructor(\n        address _multicall\n    )\n        UpgraderBase(_multicall) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](5);\n        calls[0] = abi.encodeWithSignature(\"pool()\");\n        calls[1] = abi.encodeWithSignature(\"totalDebtRatio()\");\n        calls[2] = abi.encodeWithSignature(\"totalDebt()\");\n        calls[3] = abi.encodeWithSignature(\"getStrategies()\");\n        calls[4] = abi.encodeWithSignature(\"getWithdrawQueue()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        address beforePool = abi.decode(_beforeResults[0], (address));\n        uint256 beforeTotalDebtRatio = abi.decode(_beforeResults[1], (uint256));\n        uint256 beforeTotalDebt = abi.decode(_beforeResults[2], (uint256));\n        address[] memory beforeGetStrategies = abi.decode(_beforeResults[3], (address[]));\n        address[] memory beforeGetWithdrawQueue = abi.decode(_beforeResults[4], (address[]));\n\n        address afterPool = abi.decode(_afterResults[0], (address));\n        uint256 afterTotalDebtRatio = abi.decode(_afterResults[1], (uint256));\n        uint256 afterTotalDebt = abi.decode(_afterResults[2], (uint256));\n        address[] memory afterGetStrategies = abi.decode(_afterResults[3], (address[]));\n        address[] memory afterGetWithdrawQueue = abi.decode(_afterResults[4], (address[]));\n\n        require(\n            beforePool == afterPool && beforeTotalDebtRatio == afterTotalDebtRatio && beforeTotalDebt == afterTotalDebt,\n            \"simple-fields-test-failed\"\n        );\n        require(\n            beforeGetStrategies.length == afterGetStrategies.length &&\n                beforeGetWithdrawQueue.length == afterGetWithdrawQueue.length,\n            \"dynamic-fields-test-failed\"\n        );\n    }\n}\n"
    },
    "vesper-pools/contracts/upgraders/PoolRewardsUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract PoolRewardsUpgrader is UpgraderBase {\n    constructor(\n        address _multicall\n    )\n        UpgraderBase(_multicall) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](3);\n        calls[0] = abi.encodeWithSignature(\"pool()\");\n        calls[1] = abi.encodeWithSignature(\"getRewardTokens()\");\n        calls[2] = abi.encodeWithSignature(\"rewardPerToken()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        address beforePool = abi.decode(_beforeResults[0], (address));\n        address[] memory beforeRewardToken = abi.decode(_beforeResults[1], (address[]));\n        (, address[] memory beforeRewardPerToken) = abi.decode(_beforeResults[2], (address[], address[]));\n\n        address afterPool = abi.decode(_afterResults[0], (address));\n        address[] memory afterRewardToken = abi.decode(_afterResults[1], (address[]));\n        (, address[] memory afterRewardPerToken) = abi.decode(_afterResults[2], (address[], address[]));\n\n        require(beforePool == afterPool, \"fields-test-failed\");\n        require(\n            beforeRewardToken.length == afterRewardToken.length &&\n                beforeRewardToken[0] == afterRewardToken[0] &&\n                beforeRewardPerToken[0] == afterRewardPerToken[0],\n            \"methods-test-failed\"\n        );\n    }\n}\n"
    },
    "vesper-pools/contracts/upgraders/UpgraderBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../dependencies/openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport \"../dependencies/openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\nimport \"../interfaces/multicall/IMulticall.sol\";\n\nabstract contract UpgraderBase is ProxyAdmin {\n    address public multicall;\n\n    constructor(address _multicall) {\n        multicall = _multicall;\n    }\n\n    function safeUpgrade(address _proxy, address _implementation) public onlyOwner {\n        bytes[] memory calls = _calls();\n        bytes[] memory beforeResults = _aggregate(_proxy, calls);\n\n        TransparentUpgradeableProxy(payable(_proxy)).upgradeTo(_implementation);\n\n        bytes[] memory afterResults = _aggregate(_proxy, calls);\n        _checkResults(beforeResults, afterResults);\n    }\n\n    function safeUpgradeToAndCall(\n        address _proxy,\n        address _implementation,\n        bytes memory _data\n    ) public payable onlyOwner {\n        bytes[] memory calls = _calls();\n        bytes[] memory beforeResults = _aggregate(_proxy, calls);\n\n        TransparentUpgradeableProxy(payable(_proxy)).upgradeToAndCall{value: msg.value}(_implementation, _data);\n\n        bytes[] memory afterResults = _aggregate(_proxy, calls);\n        _checkResults(beforeResults, afterResults);\n    }\n\n    function _aggregate(address _proxy, bytes[] memory _callDatas) internal returns (bytes[] memory results) {\n        IMulticall.Call[] memory calls = new IMulticall.Call[](_callDatas.length);\n        for (uint256 i = 0; i < _callDatas.length; i++) {\n            calls[i].target = _proxy;\n            calls[i].callData = _callDatas[i];\n        }\n        (, results) = IMulticall(multicall).aggregate(calls);\n    }\n\n    function _calls() internal virtual returns (bytes[] memory calls);\n\n    function _checkResults(bytes[] memory _beforeResult, bytes[] memory _afterResults) internal virtual;\n}\n"
    },
    "vesper-pools/contracts/upgraders/VPoolUpgrader.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./UpgraderBase.sol\";\n\ncontract VPoolUpgrader is UpgraderBase {\n    constructor(\n        address _multicall\n    )\n        UpgraderBase(_multicall) // solhint-disable-next-line no-empty-blocks\n    {}\n\n    function _calls() internal pure override returns (bytes[] memory calls) {\n        calls = new bytes[](4);\n        calls[0] = abi.encodeWithSignature(\"token()\");\n        calls[1] = abi.encodeWithSignature(\"poolAccountant()\");\n        calls[2] = abi.encodeWithSignature(\"pricePerShare()\");\n        calls[3] = abi.encodeWithSignature(\"tokensHere()\");\n    }\n\n    function _checkResults(bytes[] memory _beforeResults, bytes[] memory _afterResults) internal pure override {\n        address beforeToken = abi.decode(_beforeResults[0], (address));\n        address beforePoolAccountant = abi.decode(_beforeResults[1], (address));\n        uint256 beforePricePerShare = abi.decode(_beforeResults[2], (uint256));\n        uint256 beforeTokensHere = abi.decode(_beforeResults[3], (uint256));\n\n        address afterToken = abi.decode(_afterResults[0], (address));\n        address afterPoolAccountant = abi.decode(_afterResults[1], (address));\n        uint256 afterPricePerShare = abi.decode(_afterResults[2], (uint256));\n        uint256 afterTokensHere = abi.decode(_afterResults[3], (uint256));\n\n        require(beforeToken == afterToken && beforePoolAccountant == afterPoolAccountant, \"fields-test-failed\");\n        require(\n            beforePricePerShare == afterPricePerShare && beforeTokensHere == afterTokensHere,\n            \"methods-test-failed\"\n        );\n    }\n}\n"
    },
    "vesper-strategies/contracts/interfaces/aave/IAave.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface PoolAddressesProviderV3 {\n    function getPool() external view returns (AaveLendingPool);\n\n    function getPoolDataProvider() external view returns (AaveProtocolDataProvider);\n}\n\n// @dev Interface support both Aave v2 and v3 methods\ninterface PoolAddressesProvider {\n    function getPool() external view returns (address);\n\n    // Aave v2 method.\n    function getLendingPool() external view returns (address);\n\n    function getPoolDataProvider() external view returns (address);\n\n    function getAddress(bytes32 id) external view returns (address);\n\n    function getPriceOracle() external view returns (address);\n}\n\ninterface AaveOracle {\n    function getAssetPrice(address _asset) external view returns (uint256);\n}\n\ninterface AToken is IERC20 {\n    /**\n     * @dev Returns the address of the incentives controller contract\n     **/\n    function getIncentivesController() external view returns (address);\n\n    function mint(address user, uint256 amount, uint256 index) external returns (bool);\n\n    function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\n\n    //solhint-disable func-name-mixedcase\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n}\n\ninterface AaveIncentivesController {\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\n\n    function claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\n\n    function claimAllRewards(\n        address[] calldata assets,\n        address to\n    ) external returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\n\n    function getRewardsList() external view returns (address[] memory);\n}\n\ninterface AaveLendingPool {\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\n\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata interestRateModes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    function repay(address asset, uint256 amount, uint256 interestRateMode, address onBehalfOf) external;\n\n    function getUserAccountData(\n        address _user\n    )\n        external\n        view\n        returns (\n            uint256 totalCollateralETH,\n            uint256 totalDebtETH,\n            uint256 availableBorrowsETH,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n}\n\ninterface AaveProtocolDataProvider {\n    function getReserveTokensAddresses(\n        address asset\n    ) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\n\n    function getReserveData(\n        address asset\n    )\n        external\n        view\n        returns (\n            uint256 availableLiquidity,\n            uint256 totalStableDebt,\n            uint256 totalVariableDebt,\n            uint256 liquidityRate,\n            uint256 variableBorrowRate,\n            uint256 stableBorrowRate,\n            uint256 averageStableBorrowRate,\n            uint256 liquidityIndex,\n            uint256 variableBorrowIndex,\n            uint40 lastUpdateTimestamp\n        );\n\n    function getReserveConfigurationData(\n        address asset\n    )\n        external\n        view\n        returns (\n            uint256 decimals,\n            uint256 ltv,\n            uint256 liquidationThreshold,\n            uint256 liquidationBonus,\n            uint256 reserveFactor,\n            bool usageAsCollateralEnabled,\n            bool borrowingEnabled,\n            bool stableBorrowRateEnabled,\n            bool isActive,\n            bool isFrozen\n        );\n}\n\n//solhint-disable func-name-mixedcase\ninterface StakedAave is IERC20 {\n    function claimRewards(address to, uint256 amount) external;\n\n    function cooldown() external;\n\n    function stake(address onBehalfOf, uint256 amount) external;\n\n    function redeem(address to, uint256 amount) external;\n\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\n\n    function stakersCooldowns(address staker) external view returns (uint256);\n\n    function COOLDOWN_SECONDS() external view returns (uint256);\n\n    function UNSTAKE_WINDOW() external view returns (uint256);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/compound/ICompound.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface CToken {\n    function accrueInterest() external returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function getAccountSnapshot(address account) external view returns (uint256, uint256, uint256, uint256);\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function mint() external payable; // For ETH\n\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function repayBorrow() external payable; // For ETH\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256); // For ERC20\n\n    function transfer(address user, uint256 amount) external returns (bool);\n\n    function getCash() external view returns (uint256);\n\n    function transferFrom(address owner, address user, uint256 amount) external returns (bool);\n\n    function underlying() external view returns (address);\n\n    function comptroller() external view returns (address);\n\n    function totalBorrows() external view returns (uint256);\n}\n\ninterface Comptroller {\n    function claimComp(address holder, address[] memory) external;\n\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\n\n    function exitMarket(address cToken) external returns (uint256);\n\n    function compAccrued(address holder) external view returns (uint256);\n\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\n\n    function markets(\n        address market\n    ) external view returns (bool isListed, uint256 collateralFactorMantissa, bool isCompted);\n\n    function oracle() external view returns (address);\n\n    function borrowCaps(address market) external view returns (uint256);\n\n    function compSupplySpeeds(address cToken) external view returns (uint256);\n}\n\ninterface VenusComptroller is Comptroller {\n    function claimVenus(address holder, address[] memory) external;\n}\n\ninterface Oracle {\n    function getUnderlyingPrice(address cToken) external view returns (uint256);\n\n    function price(string memory symbol) external view returns (uint256);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/compound/ICompoundV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IComet is IERC20 {\n    struct AssetInfo {\n        uint8 offset;\n        address asset;\n        address priceFeed;\n        uint64 scale;\n        uint64 borrowCollateralFactor;\n        uint64 liquidateCollateralFactor;\n        uint64 liquidationFactor;\n        uint128 supplyCap;\n    }\n\n    struct TotalsCollateral {\n        uint128 totalSupplyAsset;\n        uint128 _reserved;\n    }\n\n    /// @notice The address of the base token contract\n    function baseToken() external view returns (address);\n\n    /// @notice The address of the price feed for the base token\n    function baseTokenPriceFeed() external view returns (address);\n\n    /**\n     * @notice Query the current negative base balance of an account or zero\n     * @dev Note: uses updated interest indices to calculate\n     * @param account The account whose balance to query\n     * @return The present day base balance magnitude of the account, if negative\n     */\n    function borrowBalanceOf(address account) external view returns (uint256);\n\n    /**\n     * @notice Query the current collateral balance of an account\n     * @param account The account whose balance to query\n     * @param asset The collateral asset to check the balance for\n     * @return The collateral balance of the account\n     */\n    function collateralBalanceOf(address account, address asset) external view returns (uint128);\n\n    /**\n     * @dev Determine index of asset that matches given address and return assetInfo\n     */\n    function getAssetInfoByAddress(address asset) external view returns (AssetInfo memory);\n\n    /**\n     * @notice Get the current price from a feed\n     * @param priceFeed The address of a price feed\n     * @return The price, scaled by `PRICE_SCALE`\n     */\n    function getPrice(address priceFeed) external view returns (uint256);\n\n    /**\n     * @notice Get the total amount of debt\n     * @dev Note: uses updated interest indices to calculate\n     * @return The amount of debt\n     **/\n    function totalBorrow() external view returns (uint256);\n\n    /**\n     * @notice Get the total amount of given token\n     * @param asset The collateral asset to check the total for\n     * @return The total collateral balance\n     */\n    function totalsCollateral(address asset) external view returns (TotalsCollateral memory);\n\n    /**\n     * @notice Get the total number of tokens in circulation\n     * @dev Note: uses updated interest indices to calculate\n     * @return The supply of tokens\n     **/\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Supply an amount of asset to the protocol\n     * @param asset The asset to supply\n     * @param amount The quantity to supply\n     */\n    function supply(address asset, uint256 amount) external;\n\n    /**\n     * @notice Withdraw an amount of asset from the protocol\n     * @param asset The asset to withdraw\n     * @param amount The quantity to withdraw\n     */\n    function withdraw(address asset, uint256 amount) external;\n}\n\ninterface IRewards {\n    struct RewardOwed {\n        address token;\n        uint256 owed;\n    }\n\n    /**\n     * @notice Calculates the amount of a reward token owed to an account\n     * @param comet The protocol instance\n     * @param account The account to check rewards for\n     */\n    function getRewardOwed(address comet, address account) external returns (RewardOwed memory);\n\n    /**\n     * @notice Claim rewards of token type from a comet instance to owner address\n     * @param comet The protocol instance\n     * @param src The owner to claim for\n     * @param shouldAccrue Whether or not to call accrue first\n     */\n    function claim(address comet, address src, bool shouldAccrue) external;\n}\n"
    },
    "vesper-strategies/contracts/interfaces/compound/IComptrollerMultiReward.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\nimport \"./ICompound.sol\";\n\ninterface ComptrollerMultiReward {\n    function claimReward(uint8 rewardType, address holder) external;\n\n    function claimReward(uint8 rewardType, address holder, address[] memory markets) external;\n\n    function rewardDistributor() external view returns (address);\n}\n\ninterface TraderJoeComptroller {\n    function markets(\n        address market\n    ) external view returns (bool isListed, uint256 collateralFactorMantissa, uint8 version);\n}\n\ninterface IRewardDistributor {\n    function rewardAccrued(uint8 rewardType, address holder) external view returns (uint256);\n\n    function admin() external view returns (address);\n\n    function _setRewardSpeed(\n        uint8 rewardType,\n        address jToken,\n        uint256 rewardSupplySpeed,\n        uint256 rewardBorrowSpeed\n    ) external;\n}\n"
    },
    "vesper-strategies/contracts/interfaces/convex/IConvexForCurve.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IConvex {\n    function poolInfo(uint256) external view returns (address, address, address, address, address, bool);\n\n    // deposit lp tokens and stake\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns (bool);\n\n    // deposit all lp tokens and stake\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\n\n    // withdraw lp tokens\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\n\n    // withdraw all lp tokens\n    function withdrawAll(uint256 _pid) external returns (bool);\n\n    // claim crv + extra rewards\n    function earmarkRewards(uint256 _pid) external returns (bool);\n\n    // claim  rewards on stash (msg.sender == stash)\n    function claimRewards(uint256 _pid, address _gauge) external returns (bool);\n\n    // delegate address votes on dao (needs to be voteDelegate)\n    function vote(uint256 _voteId, address _votingAddress, bool _support) external returns (bool);\n\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight) external returns (bool);\n}\n\ninterface Rewards {\n    function pid() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function extraRewardsLength() external view returns (uint256);\n\n    function extraRewards(uint256) external view returns (address);\n\n    function periodFinish() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function rewardPerTokenStored() external view returns (uint256);\n\n    function rewardRate() external view returns (uint256);\n\n    function rewardToken() external view returns (address);\n\n    function rewards(address) external view returns (uint256);\n\n    function userRewardPerTokenPaid(address) external view returns (uint256);\n\n    function stakingToken() external view returns (address);\n\n    function stake(uint256) external returns (bool);\n\n    function stakeAll() external returns (bool);\n\n    function stakeFor(address, uint256) external returns (bool);\n\n    function withdraw(uint256 amount, bool claim) external returns (bool);\n\n    function withdrawAll(bool claim) external returns (bool);\n\n    function withdrawAndUnwrap(uint256 amount, bool claim) external returns (bool);\n\n    function withdrawAllAndUnwrap(bool claim) external;\n\n    function getReward() external returns (bool);\n\n    function getReward(address _account, bool _claimExtras) external returns (bool);\n\n    function donate(uint256 _amount) external returns (bool);\n\n    function queuedRewards() external view returns (uint256);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/convex/IConvexForFrax.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable var-name-mixedcase\n// solhint-disable func-name-mixedcase\n\npragma solidity 0.8.9;\n\ninterface IConvexFraxPoolRegistry {\n    function poolInfo(\n        uint256\n    )\n        external\n        view\n        returns (\n            address implementation,\n            address stakingAddress,\n            address stakingToken,\n            address rewardsAddress,\n            uint8 active\n        );\n}\n\ninterface IVaultRegistry {\n    function createVault(uint256 _pid) external returns (address);\n}\n\ninterface IProxyVault {\n    function initialize(\n        address _owner,\n        address _stakingAddress,\n        address _stakingToken,\n        address _rewardsAddress\n    ) external;\n\n    function usingProxy() external returns (address);\n\n    function owner() external returns (address);\n\n    function stakingAddress() external returns (address);\n\n    function rewards() external returns (address);\n\n    function getReward() external;\n\n    function getReward(bool _claim) external;\n\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external;\n\n    function earned() external view returns (address[] memory token_addresses, uint256[] memory total_earned);\n}\n\ninterface IStakingProxyBase is IProxyVault {\n    //farming contract\n    function stakingAddress() external view returns (address);\n\n    //farming token\n    function stakingToken() external view returns (address);\n\n    function vaultVersion() external pure returns (uint256);\n}\n\ninterface IStakingProxyConvex is IStakingProxyBase {\n    function curveLpToken() external view returns (address);\n\n    function convexDepositToken() external view returns (address);\n\n    //create a new locked state of _secs timelength with a Curve LP token\n    function stakeLockedCurveLp(uint256 _liquidity, uint256 _secs) external returns (bytes32 kek_id);\n\n    //create a new locked state of _secs timelength with a Convex deposit token\n    function stakeLockedConvexToken(uint256 _liquidity, uint256 _secs) external returns (bytes32 kek_id);\n\n    //create a new locked state of _secs timelength\n    function stakeLocked(uint256 _liquidity, uint256 _secs) external returns (bytes32 kek_id);\n\n    //add to a current lock\n    function lockAdditional(bytes32 _kek_id, uint256 _addl_liq) external;\n\n    //add to a current lock\n    function lockAdditionalCurveLp(bytes32 _kek_id, uint256 _addl_liq) external;\n\n    //add to a current lock\n    function lockAdditionalConvexToken(bytes32 _kek_id, uint256 _addl_liq) external;\n\n    // Extends the lock of an existing stake\n    function lockLonger(bytes32 _kek_id, uint256 new_ending_ts) external;\n\n    //withdraw a staked position\n    //frax farm transfers first before updating farm state so will checkpoint during transfer\n    function withdrawLocked(bytes32 _kek_id) external;\n\n    //withdraw a staked position\n    //frax farm transfers first before updating farm state so will checkpoint during transfer\n    function withdrawLockedAndUnwrap(bytes32 _kek_id) external;\n\n    //helper function to combine earned tokens on staking contract and any tokens that are on this vault\n    function earned() external view override returns (address[] memory token_addresses, uint256[] memory total_earned);\n}\n\ninterface IFraxFarmERC20 {\n    event StakeLocked(address indexed user, uint256 amount, uint256 secs, bytes32 kek_id, address source_address);\n\n    struct LockedStake {\n        bytes32 kek_id;\n        uint256 start_timestamp;\n        uint256 liquidity;\n        uint256 ending_timestamp;\n        uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\n    }\n\n    function owner() external view returns (address);\n\n    function stakingToken() external view returns (address);\n\n    function fraxPerLPToken() external view returns (uint256);\n\n    function calcCurCombinedWeight(\n        address account\n    ) external view returns (uint256 old_combined_weight, uint256 new_vefxs_multiplier, uint256 new_combined_weight);\n\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory);\n\n    function lockedStakesOfLength(address account) external view returns (uint256);\n\n    function lockAdditional(bytes32 kek_id, uint256 addl_liq) external;\n\n    function lockLonger(bytes32 kek_id, uint256 new_ending_ts) external;\n\n    function stakeLocked(uint256 liquidity, uint256 secs) external returns (bytes32);\n\n    function withdrawLocked(bytes32 kek_id, address destination_address) external returns (uint256);\n\n    function periodFinish() external view returns (uint256);\n\n    function getAllRewardTokens() external view returns (address[] memory);\n\n    function earned(address account) external view returns (uint256[] memory new_earned);\n\n    function totalLiquidityLocked() external view returns (uint256);\n\n    function lockedLiquidityOf(address account) external view returns (uint256);\n\n    function totalCombinedWeight() external view returns (uint256);\n\n    function combinedWeightOf(address account) external view returns (uint256);\n\n    function lockMultiplier(uint256 secs) external view returns (uint256);\n\n    function lock_time_min() external view returns (uint256);\n\n    function rewardRates(uint256 token_idx) external view returns (uint256 rwd_rate);\n\n    function userStakedFrax(address account) external view returns (uint256);\n\n    function proxyStakedFrax(address proxy_address) external view returns (uint256);\n\n    function maxLPForMaxBoost(address account) external view returns (uint256);\n\n    function minVeFXSForMaxBoost(address account) external view returns (uint256);\n\n    function minVeFXSForMaxBoostProxy(address proxy_address) external view returns (uint256);\n\n    function veFXSMultiplier(address account) external view returns (uint256 vefxs_multiplier);\n\n    function toggleValidVeFXSProxy(address proxy_address) external;\n\n    function proxyToggleStaker(address staker_address) external;\n\n    function stakerSetVeFXSProxy(address proxy_address) external;\n\n    function getReward(address destination_address) external returns (uint256[] memory);\n\n    function vefxs_max_multiplier() external view returns (uint256);\n\n    function vefxs_boost_scale_factor() external view returns (uint256);\n\n    function vefxs_per_frax_for_max_boost() external view returns (uint256);\n\n    function getProxyFor(address addr) external view returns (address);\n\n    function sync() external;\n}\n\ninterface IMultiReward {\n    function poolId() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function rewardTokenLength() external view returns (uint256);\n\n    function rewardTokens(uint256) external view returns (address);\n\n    function rewards(address) external view returns (uint256);\n\n    function userRewardPerTokenPaid(address) external view returns (uint256);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/curve/IAddressProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.9;\n\ninterface IAddressProvider {\n    function get_registry() external view returns (address);\n\n    function get_address(uint256 i) external view returns (address);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/curve/IDeposit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.9;\n\ninterface IDeposit2x {\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\n}\n\ninterface IDeposit3x {\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\n}\n\ninterface IDeposit4x {\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external payable;\n\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\n\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\n\n    function token() external view returns (address);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/curve/IDepositZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.9;\n\ninterface IDepositZap {\n    function remove_liquidity_one_coin(address _pool, uint256 _burn_amount, int128 i, uint256 _min_amount) external;\n\n    function calc_withdraw_one_coin(address _pool, uint256 _token_amount, int128 i) external view returns (uint256);\n}\n\ninterface IDepositZap3x is IDepositZap {\n    function calc_token_amount(\n        address _pool,\n        uint256[3] memory _amounts,\n        bool is_deposit\n    ) external view returns (uint256);\n\n    function add_liquidity(\n        address _pool,\n        uint256[3] memory _deposit_amounts,\n        uint256 _min_mint_amount\n    ) external payable;\n\n    function remove_liquidity(address _pool, uint256 _burn_amount, uint256[3] memory _min_amounts) external;\n}\n\ninterface IDepositZap4x is IDepositZap {\n    function calc_token_amount(\n        address _pool,\n        uint256[4] memory _amounts,\n        bool is_deposit\n    ) external view returns (uint256);\n\n    function add_liquidity(address _pool, uint256[4] memory _amounts, uint256 _min_mint_amount) external payable;\n\n    function remove_liquidity(address _pool, uint256 _amount, uint256[4] memory _min_amounts) external;\n}\n"
    },
    "vesper-strategies/contracts/interfaces/curve/ILiquidityGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ILiquidityGauge {\n    function lp_token() external view returns (address);\n\n    function integrate_fraction(address addr) external view returns (uint256);\n\n    function claimable_tokens(address addr) external returns (uint256);\n\n    function user_checkpoint(address addr) external returns (bool);\n\n    function deposit(uint256 _value) external;\n\n    function deposit(uint256 _value, address addr) external;\n\n    function withdraw(uint256 _value) external;\n}\n\ninterface ILiquidityGaugeReward is ILiquidityGauge {\n    function reward_contract() external view returns (address);\n\n    function rewarded_token() external view returns (address);\n}\n\ninterface ILiquidityGaugeV2 is IERC20, ILiquidityGauge {\n    function claim_rewards(address addr) external;\n\n    function claim_rewards() external;\n\n    function claimable_reward(address, address) external returns (uint256);\n\n    function reward_integral(address) external view returns (uint256);\n\n    function reward_integral_for(address, address) external view returns (uint256);\n\n    function reward_count() external view returns (uint256);\n\n    function reward_tokens(uint256 _i) external view returns (address);\n}\n\ninterface ILiquidityGaugeV3 is ILiquidityGaugeV2 {\n    function claimable_reward(address addr, address token) external view override returns (uint256);\n\n    function claimable_reward_write(address addr, address token) external returns (uint256);\n}\n\n/* solhint-enable */\n"
    },
    "vesper-strategies/contracts/interfaces/curve/ILiquidityGaugeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.9;\n\ninterface ILiquidityGaugeFactory {\n    function get_gauge_from_lp_token(address lp_token) external view returns (address);\n\n    function is_valid_gauge(address _gauge) external view returns (bool);\n\n    function mint(address gauge_addr) external;\n}\n/* solhint-enable */\n"
    },
    "vesper-strategies/contracts/interfaces/curve/IMetapoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/* solhint-disable func-name-mixedcase*/\npragma solidity 0.8.9;\n\ninterface IMetapoolFactory {\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\n\n    function get_underlying_decimals(address pool) external view returns (uint256[8] memory);\n\n    function get_coins(address pool) external view returns (address[4] memory);\n\n    function get_n_coins(address pool) external view returns (uint256);\n\n    function get_meta_n_coins(address pool) external view returns (uint256[2] memory);\n\n    function get_decimals(address pool) external view returns (uint256[4] memory);\n\n    function get_gauge(address pool) external view returns (address);\n\n    function is_meta(address pool) external view returns (bool);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/curve/IRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.9;\n\ninterface IRegistry {\n    function get_pool_from_lp_token() external view returns (address);\n\n    function get_lp_token(address pool) external view returns (address);\n\n    function get_n_coins(address pool) external view returns (uint256[2] memory);\n\n    function get_underlying_coins(address pool) external view returns (address[8] memory);\n\n    function get_underlying_decimals(address pool) external view returns (uint256[8] memory);\n\n    function get_gauges(address pool) external view returns (address[10] memory);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/curve/IStableSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.9;\n\n// Not a complete interface, but should have what we need\ninterface IStableSwap {\n    function coins(uint256 i) external view returns (address);\n\n    function fee() external view returns (uint256); // fee * 1e10\n\n    function lp_token() external view returns (address);\n\n    function A() external view returns (uint256);\n\n    function A_precise() external view returns (uint256);\n\n    function balances(uint256 i) external view returns (uint256);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\n\n    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\n\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns (uint256);\n\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\n}\n\ninterface IStableSwapV2 {\n    function coins(int128 i) external view returns (address);\n}\n\ninterface IStableSwapUnderlying is IStableSwap {\n    function underlying_coins(uint256 i) external view returns (address);\n\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        int128 i,\n        uint256 _min_amount,\n        bool _use_underlying\n    ) external;\n}\n\ninterface IStableSwap2x is IStableSwap {\n    function calc_token_amount(uint256[2] memory _amounts, bool is_deposit) external view returns (uint256);\n\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external payable;\n\n    function remove_liquidity(uint256 _amount, uint256[2] memory _min_amounts) external;\n\n    function remove_liquidity_imbalance(\n        uint256[2] memory _amounts,\n        uint256 _max_burn_amount\n    ) external returns (uint256);\n}\n\ninterface IStableSwap3x is IStableSwap {\n    function calc_token_amount(uint256[3] memory _amounts, bool is_deposit) external view returns (uint256);\n\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external payable;\n\n    function remove_liquidity(uint256 _amount, uint256[3] memory _min_amounts) external;\n\n    function remove_liquidity_imbalance(\n        uint256[3] memory _amounts,\n        uint256 _max_burn_amount\n    ) external returns (uint256);\n}\n\ninterface IStableSwap4x is IStableSwap {\n    function calc_token_amount(uint256[4] memory _amounts, bool is_deposit) external view returns (uint256);\n\n    function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external payable;\n\n    function remove_liquidity(uint256 _amount, uint256[4] memory _min_amounts) external;\n\n    function remove_liquidity_imbalance(\n        uint256[4] memory _amounts,\n        uint256 _max_burn_amount\n    ) external returns (uint256);\n}\n\ninterface IStableSwap2xUnderlying is IStableSwap2x, IStableSwapUnderlying {\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount, bool use_underlying) external payable;\n\n    function remove_liquidity_imbalance(\n        uint256[2] calldata amounts,\n        uint256 max_burn_amount,\n        bool use_underlying\n    ) external;\n\n    function remove_liquidity(uint256 amount, uint256[2] calldata min_amounts, bool use_underlying) external;\n}\n\ninterface IStableSwap3xUnderlying is IStableSwap3x, IStableSwapUnderlying {\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount, bool use_underlying) external payable;\n\n    function remove_liquidity_imbalance(\n        uint256[3] calldata amounts,\n        uint256 max_burn_amount,\n        bool use_underlying\n    ) external;\n\n    function remove_liquidity(uint256 amount, uint256[3] calldata min_amounts, bool use_underlying) external;\n}\n\ninterface IStableSwap4xUnderlying is IStableSwap4x, IStableSwapUnderlying {\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount, bool use_underlying) external payable;\n\n    function remove_liquidity_imbalance(\n        uint256[4] calldata amounts,\n        uint256 max_burn_amount,\n        bool use_underlying\n    ) external;\n\n    function remove_liquidity(uint256 amount, uint256[4] calldata min_amounts, bool use_underlying) external;\n}\n\n/* solhint-enable */\n"
    },
    "vesper-strategies/contracts/interfaces/curve/ITokenMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/* solhint-disable */\npragma solidity 0.8.9;\n\n// Not a complete interface, but should have what we need\ninterface ITokenMinter {\n    function minted(address arg0, address arg1) external view returns (uint256);\n\n    function mint(address gauge_addr) external;\n}\n/* solhint-enable */\n"
    },
    "vesper-strategies/contracts/interfaces/dydx/ISoloMargin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/** In order to keep code/files short, all libraries and interfaces are trimmed as per Vesper need */\n\nlibrary Account {\n    enum Status {\n        Normal,\n        Liquid,\n        Vapor\n    }\n    struct Info {\n        address owner; // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n}\n\nlibrary Actions {\n    enum ActionType {\n        Deposit, // supply tokens\n        Withdraw, // borrow tokens\n        Transfer, // transfer balance between accounts\n        Buy, // buy an amount of some token (publicly)\n        Sell, // sell an amount of some token (publicly)\n        Trade, // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize, // use excess tokens to zero-out a completely negative account\n        Call // send arbitrary data to an address\n    }\n\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountId;\n        Types.AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountId;\n        bytes data;\n    }\n}\n\nlibrary Types {\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n}\n\ninterface ISoloMargin {\n    function getMarketTokenAddress(uint256 marketId) external view returns (address);\n\n    function getNumMarkets() external view returns (uint256);\n\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\n}\n\n/**\n * @title ICallee\n * @author dYdX\n *\n * Interface that Callees for Solo must implement in order to ingest data.\n */\ninterface ICallee {\n    // ============ Public Functions ============\n\n    /**\n     * Allows users to send this contract arbitrary data.\n     *\n     * @param  sender       The msg.sender to Solo\n     * @param  accountInfo  The account from which the data is being sent\n     * @param  data         Arbitrary data given by the sender\n     */\n    function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external;\n}\n"
    },
    "vesper-strategies/contracts/interfaces/euler/IEuler.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IEToken is IERC20 {\n    /// @notice Balance of a particular account, in underlying units (increases as interest is earned)\n    function balanceOfUnderlying(address account) external view returns (uint256);\n\n    /// @notice Sum of all balances, in underlying units (increases as interest is earned)\n    function totalSupplyUnderlying() external view returns (uint256);\n\n    /// @notice Transfer underlying tokens from sender to the Euler pool, and increase account's eTokens\n    /// @param subAccountId 0 for primary, 1-255 for a sub-account\n    /// @param amount In underlying units (use max uint256 for full underlying token balance)\n    function deposit(uint256 subAccountId, uint256 amount) external;\n\n    /// @notice Transfer underlying tokens from Euler pool to sender, and decrease account's eTokens\n    /// @param subAccountId 0 for primary, 1-255 for a sub-account\n    /// @param amount In underlying units (use max uint256 for full pool balance)\n    function withdraw(uint256 subAccountId, uint256 amount) external;\n}\n\ninterface IDToken is IERC20 {\n    /// @notice Debt owed by a particular account, in underlying units\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfer underlying tokens from the Euler pool to the sender, and increase sender's dTokens\n    /// @param subAccountId 0 for primary, 1-255 for a sub-account\n    /// @param amount In underlying units (use max uint256 for all available tokens)\n    function borrow(uint256 subAccountId, uint256 amount) external;\n\n    /// @notice Transfer underlying tokens from the sender to the Euler pool, and decrease sender's dTokens\n    /// @param subAccountId 0 for primary, 1-255 for a sub-account\n    /// @param amount In underlying units (use max uint256 for full debt owed)\n    function repay(uint256 subAccountId, uint256 amount) external;\n}\n\nstruct AssetConfig {\n    address eTokenAddress;\n    bool borrowIsolated;\n    uint32 collateralFactor;\n    uint32 borrowFactor;\n    uint24 twapWindow;\n}\n\ninterface IEulerMarkets {\n    /// @notice Given an underlying, lookup the associated EToken\n    /// @param underlying Token address\n    /// @return EToken address, or address(0) if not activated\n    function underlyingToEToken(address underlying) external view returns (address);\n\n    /// @notice Given an underlying, lookup the associated DToken\n    /// @param underlying Token address\n    /// @return DToken address, or address(0) if not activated\n    function underlyingToDToken(address underlying) external view returns (address);\n\n    /// @notice Add an asset to the entered market list, or do nothing if already entered\n    /// @param subAccountId 0 for primary, 1-255 for a sub-account\n    /// @param newMarket Underlying token address\n    function enterMarket(uint256 subAccountId, address newMarket) external;\n\n    /// @notice Looks up the Euler-related configuration for a token, and resolves all default-value placeholders to their currently configured values.\n    /// @param underlying Token address\n    /// @return Configuration struct\n    function underlyingToAssetConfig(address underlying) external view returns (AssetConfig memory);\n}\n\ninterface IEulDistributor {\n    /// @notice Claim distributed tokens\n    /// @param account Address that should receive tokens\n    /// @param token Address of token being claimed (ie EUL)\n    /// @param proof Merkle proof that validates this claim\n    /// @param stake If non-zero, then the address of a token to auto-stake to, instead of claiming\n    function claim(address account, address token, uint256 claimable, bytes32[] calldata proof, address stake) external;\n}\n\ninterface IExec {\n    function getPrice(address underlying) external returns (uint256 twap, uint256 twapPeriod);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/external/lido/IWstETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWstETH is IERC20 {\n    function unwrap(uint256 _wstETHAmount) external returns (uint256 _stETHAmount);\n\n    function wrap(uint256 _stETHAmount) external returns (uint256 _wstETHAmount);\n\n    function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256 _stETHAmount);\n\n    function getWstETHByStETH(uint256 _stETHAmount) external view returns (uint256 _wstETHAmount);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/frax-lend/IFraxLend.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// solhint-disable var-name-mixedcase\n\ninterface IFraxLend is IERC20 {\n    struct ExchangeRateInfo {\n        uint32 lastTimestamp;\n        uint224 exchangeRate; // collateral:asset ratio. i.e. how much collateral to buy 1e18 asset\n    }\n\n    function asset() external view returns (address);\n\n    function collateralContract() external view returns (address);\n\n    /// @notice Stores information about the current exchange rate. Collateral:Asset ratio\n    /// @dev Struct packed to save SLOADs. Amount of Collateral Token to buy 1e18 Asset Token\n    function exchangeRateInfo() external view returns (ExchangeRateInfo memory);\n\n    function getConstants()\n        external\n        pure\n        returns (\n            uint256 _LTV_PRECISION,\n            uint256 _LIQ_PRECISION,\n            uint256 _UTIL_PREC,\n            uint256 _FEE_PRECISION,\n            uint256 _EXCHANGE_PRECISION,\n            uint64 _DEFAULT_INT,\n            uint16 _DEFAULT_PROTOCOL_FEE,\n            uint256 _MAX_PROTOCOL_FEE\n        );\n\n    function maxLTV() external view returns (uint256);\n\n    /// @notice The ```toAssetAmount``` function converts a given number of shares to an asset amount\n    /// @param _shares Shares of asset (fToken)\n    /// @param _roundUp Whether to round up after division\n    /// @return The amount of asset\n    function toAssetAmount(uint256 _shares, bool _roundUp) external view returns (uint256);\n\n    /// @notice The ```toAssetShares``` function converts a given asset amount to a number of asset shares (fTokens)\n    /// @param _amount The amount of asset\n    /// @param _roundUp Whether to round up after division\n    /// @return The number of shares (fTokens)\n    function toAssetShares(uint256 _amount, bool _roundUp) external view returns (uint256);\n\n    /// @notice The ```toBorrowAmount``` function converts a given amount of borrow debt into the number of shares\n    /// @param _shares Shares of borrow\n    /// @param _roundUp Whether to roundup during division\n    /// @return The amount of asset\n    function toBorrowAmount(uint256 _shares, bool _roundUp) external view returns (uint256);\n\n    /// @notice The ```toBorrowShares``` function converts a given amount of borrow debt into the number of shares\n    /// @param _amount Amount of borrow\n    /// @param _roundUp Whether to roundup during division\n    function toBorrowShares(uint256 _amount, bool _roundUp) external view returns (uint256);\n\n    struct VaultAccount {\n        uint128 amount; // Total amount, analogous to market cap\n        uint128 shares; // Total shares, analogous to shares outstanding\n    }\n\n    function totalAsset() external view returns (VaultAccount memory);\n\n    function totalBorrow() external view returns (VaultAccount memory);\n\n    // total amount of collateral in contract\n    function totalCollateral() external view returns (uint256);\n\n    /// @notice Stores the balance of collateral for each user\n    function userCollateralBalance(address _user) external view returns (uint256);\n\n    /// @notice Stores the balance of borrow shares for each user\n    function userBorrowShares(address _user) external view returns (uint256);\n\n    /// @notice The ```addInterest``` function is a public implementation of _addInterest and allows 3rd parties to trigger interest accrual\n    /// @return _interestEarned The amount of interest accrued by all borrowers\n    function addInterest()\n        external\n        returns (uint256 _interestEarned, uint256 _feesAmount, uint256 _feesShare, uint64 _newRate);\n\n    /// @notice The ```deposit``` function allows a user to Lend Assets by specifying the amount of Asset Tokens to lend\n    /// @dev Caller must invoke ```ERC20.approve``` on the Asset Token contract prior to calling function\n    /// @param _amount The amount of Asset Token to transfer to Pair\n    /// @param _receiver The address to receive the Asset Shares (fTokens)\n    /// @return _sharesReceived The number of fTokens received for the deposit\n    function deposit(uint256 _amount, address _receiver) external returns (uint256 _sharesReceived);\n\n    /// @notice The ```redeem``` function allows the caller to redeem their Asset Shares for Asset Tokens\n    /// @param _shares The number of Asset Shares (fTokens) to burn for Asset Tokens\n    /// @param _receiver The address to which the Asset Tokens will be transferred\n    /// @param _owner The owner of the Asset Shares (fTokens)\n    /// @return _amountToReturn The amount of Asset Tokens to be transferred\n    function redeem(uint256 _shares, address _receiver, address _owner) external returns (uint256 _amountToReturn);\n\n    /// @notice The ```addCollateral``` function allows the caller to add Collateral Token to a borrowers position\n    /// @dev msg.sender must call ERC20.approve() on the Collateral Token contract prior to invocation\n    /// @param _collateralAmount The amount of Collateral Token to be added to borrower's position\n    /// @param _borrower The account to be credited\n    function addCollateral(uint256 _collateralAmount, address _borrower) external;\n\n    /// @notice The ```removeCollateral``` function is used to remove collateral from msg.sender's borrow position\n    /// @dev msg.sender must be solvent after invocation or transaction will revert\n    /// @param _collateralAmount The amount of Collateral Token to transfer\n    /// @param _receiver The address to receive the transferred funds\n    function removeCollateral(uint256 _collateralAmount, address _receiver) external;\n\n    /// @notice The ```borrowAsset``` function allows a user to open/increase a borrow position\n    /// @dev Borrower must call ```ERC20.approve``` on the Collateral Token contract if applicable\n    /// @param _borrowAmount The amount of Asset Token to borrow\n    /// @param _collateralAmount The amount of Collateral Token to transfer to Pair\n    /// @param _receiver The address which will receive the Asset Tokens\n    /// @return _shares The number of borrow Shares the msg.sender will be debited\n    function borrowAsset(\n        uint256 _borrowAmount,\n        uint256 _collateralAmount,\n        address _receiver\n    ) external returns (uint256 _shares);\n\n    /// @notice The ```repayAsset``` function allows the caller to pay down the debt for a given borrower.\n    /// @dev Caller must first invoke ```ERC20.approve()``` for the Asset Token contract\n    /// @param _shares The number of Borrow Shares which will be repaid by the call\n    /// @param _borrower The account for which the debt will be reduced\n    /// @return _amountToRepay The amount of Asset Tokens which were transferred in order to repay the Borrow Shares\n    function repayAsset(uint256 _shares, address _borrower) external returns (uint256 _amountToRepay);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/maker/IMakerDAO.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface ManagerLike {\n    function cdpCan(address, uint256, address) external view returns (uint256);\n\n    function ilks(uint256) external view returns (bytes32);\n\n    function owns(uint256) external view returns (address);\n\n    function urns(uint256) external view returns (address);\n\n    function vat() external view returns (address);\n\n    function open(bytes32, address) external returns (uint256);\n\n    function give(uint256, address) external;\n\n    function cdpAllow(uint256, address, uint256) external;\n\n    function urnAllow(address, uint256) external;\n\n    function frob(uint256, int256, int256) external;\n\n    function flux(uint256, address, uint256) external;\n\n    function move(uint256, address, uint256) external;\n\n    function exit(address, uint256, address, uint256) external;\n\n    function quit(uint256, address) external;\n\n    function enter(address, uint256) external;\n\n    function shift(uint256, uint256) external;\n}\n\ninterface VatLike {\n    function can(address, address) external view returns (uint256);\n\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\n\n    function dai(address) external view returns (uint256);\n\n    function urns(bytes32, address) external view returns (uint256, uint256);\n\n    function frob(bytes32, address, address, address, int256, int256) external;\n\n    function hope(address) external;\n\n    function nope(address) external;\n\n    function move(address, address, uint256) external;\n}\n\ninterface GemJoinLike {\n    function dec() external view returns (uint256);\n\n    function gem() external view returns (address);\n\n    function ilk() external view returns (bytes32);\n\n    function join(address, uint256) external payable;\n\n    function exit(address, uint256) external;\n}\n\ninterface DaiJoinLike {\n    function vat() external returns (VatLike);\n\n    function dai() external view returns (address);\n\n    function join(address, uint256) external payable;\n\n    function exit(address, uint256) external;\n}\n\ninterface JugLike {\n    function drip(bytes32) external returns (uint256);\n}\n\ninterface SpotterLike {\n    function ilks(bytes32) external view returns (address, uint256);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/one-oracle/IMasterOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IMasterOracle {\n    function getPriceInUsd(address token_) external view returns (uint256 _priceInUsd);\n\n    function quote(address tokenIn_, address tokenOut_, uint256 amountIn_) external view returns (uint256 _amountOut);\n\n    function quoteTokenToUsd(address token_, uint256 amountIn_) external view returns (uint256 amountOut_);\n\n    function quoteUsdToToken(address token_, uint256 amountIn_) external view returns (uint256 _amountOut);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/saddle/ISwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ISwap {\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function addLiquidity(uint256[] calldata amounts, uint256 minToMint, uint256 deadline) external returns (uint256);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/stargate/IStargateFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IStargateFactory {\n    function getPool(uint256) external view returns (address);\n\n    function allPoolsLength() external view returns (uint256);\n\n    function createPool(\n        uint256 _poolId,\n        address _token,\n        uint8 _sharedDecimals,\n        uint8 _localDecimals,\n        string memory _name,\n        string memory _symbol\n    ) external view returns (address);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/stargate/IStargateLpStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IStargateLpStaking {\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function stargate() external view returns (address);\n\n    function pendingStargate(uint256 _pid, address _user) external view returns (uint256);\n\n    function userInfo(uint256 _pid, address _user) external view returns (uint256 _amount, uint256 _rewardDebt);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/stargate/IStargatePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStargatePool is IERC20 {\n    function totalLiquidity() external view returns (uint256);\n\n    function token() external view returns (address);\n\n    function amountLPtoLD(uint256 _amountLP) external view returns (uint256);\n\n    function convertRate() external view returns (uint256);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/stargate/IStargateRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IStargateRouter {\n    // solhint-disable-next-line contract-name-camelcase\n    struct lzTxObj {\n        uint256 dstGasForCall;\n        uint256 dstNativeAmount;\n        bytes dstNativeAddr;\n    }\n\n    function factory() external view returns (address);\n\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\n\n    function swap(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        lzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable;\n\n    function redeemRemote(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLP,\n        uint256 _minAmountLD,\n        bytes calldata _to,\n        lzTxObj memory _lzTxParams\n    ) external payable;\n\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\n\n    function redeemLocal(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLP,\n        bytes calldata _to,\n        lzTxObj memory _lzTxParams\n    ) external payable;\n\n    function sendCredits(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress\n    ) external payable;\n\n    function quoteLayerZeroFee(\n        uint16 _dstChainId,\n        uint8 _functionType,\n        bytes calldata _toAddress,\n        bytes calldata _transferAndCallPayload,\n        lzTxObj memory _lzTxParams\n    ) external view returns (uint256, uint256);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\n/**\n * @notice Routed Swapper interface\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\n */\ninterface IRoutedSwapper {\n    /**\n     * @notice The list of supported DEXes\n     * @dev This function is gas intensive\n     */\n    function getAllExchanges() external view returns (address[] memory);\n\n    /**\n     * @notice Get *spot* quote\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\n     * @dev It shouldn't be used as oracle!!!\n     */\n    function getAmountIn(address tokenIn_, address tokenOut_, uint256 amountOut_) external returns (uint256 _amountIn);\n\n    /**\n     * @notice Get *spot* quote\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\n     * @dev It shouldn't be used as oracle!!!\n     */\n    function getAmountOut(address tokenIn_, address tokenOut_, uint256 amountIn_) external returns (uint256 _amountOut);\n\n    /**\n     * @notice Perform an exact input swap - will revert if there is no default routing\n     */\n    function swapExactInput(\n        address tokenIn_,\n        address tokenOut_,\n        uint256 amountIn_,\n        uint256 amountOutMin_,\n        address _receiver\n    ) external returns (uint256 _amountOut);\n\n    /**\n     * @notice Perform an exact output swap - will revert if there is no default routing\n     */\n    function swapExactOutput(\n        address tokenIn_,\n        address tokenOut_,\n        uint256 amountOut_,\n        uint256 amountInMax_,\n        address receiver_\n    ) external returns (uint256 _amountIn);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/vesper/ICollateralManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface ICollateralManager {\n    function addGemJoin(address[] calldata _gemJoins) external;\n\n    function borrow(uint256 _amount) external;\n\n    function createVault(bytes32 _collateralType) external returns (uint256 _vaultNum);\n\n    function depositCollateral(uint256 _amount) external;\n\n    function payback(uint256 _amount) external;\n\n    function transferVaultOwnership(address _newOwner) external;\n\n    function withdrawCollateral(uint256 _amount) external;\n\n    function getVaultBalance(address _vaultOwner) external view returns (uint256 collateralLocked);\n\n    function getVaultDebt(address _vaultOwner) external view returns (uint256 daiDebt);\n\n    function getVaultInfo(\n        address _vaultOwner\n    )\n        external\n        view\n        returns (\n            uint256 collateralLocked,\n            uint256 daiDebt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        );\n\n    function mcdManager() external view returns (address);\n\n    function vaultNum(address _vaultOwner) external view returns (uint256 _vaultNum);\n\n    function whatWouldWithdrawDo(\n        address _vaultOwner,\n        uint256 _amount\n    )\n        external\n        view\n        returns (\n            uint256 collateralLocked,\n            uint256 daiDebt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        );\n\n    function mcdGemJoin(bytes32) external view returns (address);\n\n    function governor() external view returns (address);\n}\n"
    },
    "vesper-strategies/contracts/interfaces/yearn/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\ninterface IStakingRewards {\n    /// @notice The balance a given user has staked.\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Amount of reward token pending claim by an account.\n    function earned(address account) external view returns (uint256);\n\n    /// @notice The address of our rewards token.\n    function rewardsToken() external view returns (address);\n\n    /// @notice The total tokens staked in this contract.\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Unstake all of the sender's tokens and claim any outstanding rewards.\n    function exit() external;\n\n    /// @notice Claim any earned reward tokens.\n    /// @dev Can claim rewards even if no tokens still staked.\n    function getReward() external;\n\n    /// @notice Deposit vault tokens to the staking pool.\n    /// @dev Can't stake zero.\n    /// @param amount Amount of vault tokens to deposit.\n    function stake(uint256 amount) external;\n\n    /// @notice Withdraw vault tokens from the staking pool.\n    /// @dev Can't withdraw zero. If trying to claim, call getReward() instead.\n    /// @param amount Amount of vault tokens to withdraw.\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "vesper-strategies/contracts/interfaces/yearn/IYToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IYToken {\n    function balanceOf(address user) external view returns (uint256);\n\n    function pricePerShare() external view returns (uint256);\n\n    function deposit(uint256 amount) external returns (uint256);\n\n    function deposit() external returns (uint256);\n\n    function withdraw(uint256 shares) external returns (uint256);\n\n    function token() external returns (address);\n\n    function totalAssets() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function availableDepositLimit() external view returns (uint256);\n\n    function decimals() external view returns (uint8);\n\n    function withdrawalQueue(uint256 index) external view returns (address);\n\n    function maxAvailableShares() external view returns (uint256);\n}\n"
    },
    "vesper-strategies/contracts/strategies/aave/v2/AaveV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./AaveV2Core.sol\";\nimport \"../../Strategy.sol\";\n\n/// @dev This strategy will deposit collateral token in Aave and earn interest.\ncontract AaveV2 is Strategy, AaveV2Core {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _receiptToken,\n        string memory _name\n    ) Strategy(_pool, _swapManager, _receiptToken) AaveV2Core(_receiptToken) {\n        NAME = _name;\n    }\n\n    /// @notice Initiate cooldown to unstake aave.\n    function startCooldown() external onlyKeeper returns (bool) {\n        return _startCooldown();\n    }\n\n    /// @notice Unstake Aave from stakedAave contract\n    function unstakeAave() external onlyKeeper {\n        _unstakeAave();\n    }\n\n    /**\n     * @notice Report total value locked\n     * @dev aToken and collateral are 1:1\n     */\n    function tvl() public view virtual override returns (uint256) {\n        return aToken.balanceOf(address(this)) + collateralToken.balanceOf(address(this));\n    }\n\n    function isReservedToken(address _token) public view override returns (bool) {\n        return _token == address(aToken) || _token == address(collateralToken);\n    }\n\n    /// @notice Large approval of token\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        collateralToken.safeApprove(address(aaveLendingPool), _amount);\n        IERC20(AAVE).safeApprove(address(swapper), _amount);\n    }\n\n    /**\n     * @notice Transfer StakeAave to newStrategy\n     * @param _newStrategy Address of newStrategy\n     */\n    function _beforeMigration(address _newStrategy) internal override {\n        uint256 _stkAaveAmount = stkAAVE.balanceOf(address(this));\n        if (_stkAaveAmount > 0) {\n            IERC20(stkAAVE).safeTransfer(_newStrategy, _stkAaveAmount);\n        }\n    }\n\n    /// @dev Claim Aave rewards\n    function _claimRewards() internal virtual override returns (address, uint256) {\n        return (AAVE, _claimAave());\n    }\n\n    /**\n     * @dev Generate report for pools accounting and also send profit and any payback to pool.\n     */\n    function _generateReport() internal returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _totalCollateral = aToken.balanceOf(address(this)) + _collateralHere;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_profitAndExcessDebt > _collateralHere) {\n            _withdrawHere(_profitAndExcessDebt - _collateralHere);\n            _collateralHere = collateralToken.balanceOf(address(this));\n        }\n\n        // Set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n    }\n\n    /**\n     * @dev Generate report for pools accounting and also send profit and any payback to pool.\n     */\n    function _rebalance() internal virtual override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        (_profit, _loss, _payback) = _generateReport();\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        // Pool may give fund to strategy. Deposit fund to generate yield.\n        _deposit(address(collateralToken), collateralToken.balanceOf(address(this)));\n    }\n\n    function _withdrawHere(uint256 _amount) internal override {\n        _safeWithdraw(address(collateralToken), address(this), _amount);\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/aave/v2/AaveV2Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\";\nimport \"vesper-pools/contracts/Errors.sol\";\nimport \"../../../interfaces/aave/IAave.sol\";\n\n/// @title This contract provide core operations for Aave\nabstract contract AaveV2Core {\n    //solhint-disable-next-line const-name-snakecase\n    StakedAave public constant stkAAVE = StakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\n    address public constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\n\n    AaveLendingPool public immutable aaveLendingPool;\n    AaveProtocolDataProvider public aaveProtocolDataProvider;\n    AaveIncentivesController public immutable aaveIncentivesController;\n    PoolAddressesProvider internal immutable aaveAddressesProvider_;\n\n    AToken internal immutable aToken;\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\n\n    constructor(address _receiptToken) {\n        require(_receiptToken != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        aToken = AToken(_receiptToken);\n        // If there is no AAVE incentive then below call will fail\n        try AToken(_receiptToken).getIncentivesController() returns (address _aaveIncentivesController) {\n            aaveIncentivesController = AaveIncentivesController(_aaveIncentivesController);\n        } catch {} //solhint-disable no-empty-blocks\n        aaveAddressesProvider_ = PoolAddressesProvider(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5);\n        aaveLendingPool = AaveLendingPool(aaveAddressesProvider_.getLendingPool());\n        aaveProtocolDataProvider = AaveProtocolDataProvider(aaveAddressesProvider_.getAddress(AAVE_PROVIDER_ID));\n    }\n\n    ///////////////////////// External access functions /////////////////////////\n\n    /**\n     * @notice Initiate cooldown to unstake aave.\n     * @dev We only want to call this function when cooldown is expired and\n     * that's the reason we have 'if' condition.\n     * @dev Child contract should expose this function as external and onlyKeeper\n     */\n    function _startCooldown() internal returns (bool) {\n        if (canStartCooldown()) {\n            stkAAVE.cooldown();\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @notice Unstake Aave from stakedAave contract\n     * @dev We want to unstake as soon as favorable condition exit\n     * @dev No guarding condition thus this call can fail, if we can't unstake.\n     * @dev Child contract should expose this function as external and onlyKeeper\n     */\n    function _unstakeAave() internal {\n        stkAAVE.redeem(address(this), type(uint256).max);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n\n    /// @notice Returns true if Aave can be unstaked\n    function canUnstake() external view returns (bool) {\n        (, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\n        return _canUnstake(_cooldownEnd, _unstakeEnd);\n    }\n\n    /// @notice Returns true if we should start cooldown\n    function canStartCooldown() public view returns (bool) {\n        (uint256 _cooldownStart, , uint256 _unstakeEnd) = cooldownData();\n        return _canStartCooldown(_cooldownStart, _unstakeEnd);\n    }\n\n    /// @notice Return cooldown related timestamps\n    function cooldownData() public view returns (uint256 _cooldownStart, uint256 _cooldownEnd, uint256 _unstakeEnd) {\n        _cooldownStart = stkAAVE.stakersCooldowns(address(this));\n        _cooldownEnd = _cooldownStart + stkAAVE.COOLDOWN_SECONDS();\n        _unstakeEnd = _cooldownEnd + stkAAVE.UNSTAKE_WINDOW();\n    }\n\n    /**\n     * @notice Claim Aave. Also unstake all Aave if favorable condition exits or start cooldown.\n     * @dev If we unstake all Aave, we can't start cooldown because it requires StakedAave balance.\n     * @dev DO NOT convert 'if else' to 2 'if's as we are reading cooldown state once to save gas.\n     * @dev Not all collateral token has aave incentive\n     */\n    function _claimAave() internal returns (uint256) {\n        (uint256 _cooldownStart, uint256 _cooldownEnd, uint256 _unstakeEnd) = cooldownData();\n        if (address(aaveIncentivesController) != address(0) && (_cooldownStart == 0 || block.timestamp > _unstakeEnd)) {\n            // claim stkAave when its first rebalance or unstake period passed.\n            aaveIncentivesController.claimRewards(getAssets(), type(uint256).max, address(this));\n        }\n        if (stkAAVE.balanceOf(address(this)) > 0) {\n            // Fetch and check again for next action.\n            (_cooldownStart, _cooldownEnd, _unstakeEnd) = cooldownData();\n            if (_canUnstake(_cooldownEnd, _unstakeEnd)) {\n                stkAAVE.redeem(address(this), type(uint256).max);\n            } else if (_canStartCooldown(_cooldownStart, _unstakeEnd)) {\n                stkAAVE.cooldown();\n            }\n\n            stkAAVE.claimRewards(address(this), type(uint256).max);\n        }\n        return IERC20(AAVE).balanceOf(address(this));\n    }\n\n    /// @notice Deposit asset into Aave\n    function _deposit(address _asset, uint256 _amount) internal {\n        if (_amount > 0) {\n            try aaveLendingPool.deposit(_asset, _amount, address(this), 0) {} catch Error(string memory _reason) {\n                // Aave uses liquidityIndex and some other indexes as needed to normalize input.\n                // If normalized input equals to 0 then error will be thrown with '56' error code.\n                // CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\n                // Hence discard error where error code is '56'\n                require(bytes32(bytes(_reason)) == \"56\", \"deposit failed\");\n            }\n        }\n    }\n\n    function getAssets() internal view returns (address[] memory) {\n        address[] memory _assets = new address[](1);\n        _assets[0] = address(aToken);\n        return _assets;\n    }\n\n    /**\n     * @notice Safe withdraw will make sure to check asking amount against available amount.\n     * @dev Check we have enough aToken and liquidity to support this withdraw\n     * @param _asset Address of asset to withdraw\n     * @param _to Address that will receive collateral token.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _safeWithdraw(address _asset, address _to, uint256 _amount) internal returns (uint256) {\n        uint256 _aTokenBalance = aToken.balanceOf(address(this));\n        // If Vesper becomes large liquidity provider in Aave(This happened in past in vUSDC 1.0)\n        // In this case we might have more aToken compare to available liquidity in Aave and any\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\n        // _amount against available liquidity.\n        uint256 _availableLiquidity = IERC20(_asset).balanceOf(address(aToken));\n\n        // Get minimum of _amount, _aTokenBalance and _availableLiquidity\n        return _withdraw(_asset, _to, Math.min(_amount, Math.min(_aTokenBalance, _availableLiquidity)));\n    }\n\n    /**\n     * @notice Withdraw given amount of collateral from Aave to given address\n     * @param _asset Address of asset to withdraw\n     * @param _to Address that will receive collateral token.\n     * @param _amount Amount of collateral to withdraw.\n     * @return Actual collateral withdrawn\n     */\n    function _withdraw(address _asset, address _to, uint256 _amount) internal returns (uint256) {\n        if (_amount > 0) {\n            require(aaveLendingPool.withdraw(_asset, _amount, _to) == _amount, Errors.INCORRECT_WITHDRAW_AMOUNT);\n        }\n        return _amount;\n    }\n\n    /**\n     * @dev Return true, only if we have StakedAave balance and either cooldown expired or cooldown is zero\n     * @dev If we are in cooldown period we cannot unstake Aave. But our cooldown is still valid so we do\n     * not want to reset/start cooldown.\n     */\n    function _canStartCooldown(uint256 _cooldownStart, uint256 _unstakeEnd) internal view returns (bool) {\n        return stkAAVE.balanceOf(address(this)) > 0 && (_cooldownStart == 0 || block.timestamp > _unstakeEnd);\n    }\n\n    /// @dev Return true, if cooldown is over and we are in unstake window.\n    function _canUnstake(uint256 _cooldownEnd, uint256 _unstakeEnd) internal view returns (bool) {\n        return block.timestamp > _cooldownEnd && block.timestamp <= _unstakeEnd;\n    }\n\n    /**\n     * @notice Return total AAVE incentive allocated to this address\n     * @dev Aave and StakedAave are 1:1\n     * @dev Not all collateral token has aave incentive\n     */\n    function _totalAave() internal view returns (uint256) {\n        if (address(aaveIncentivesController) == address(0)) {\n            return 0;\n        }\n        // TotalAave = Get current StakedAave rewards from controller +\n        //             StakedAave balance here +\n        //             Aave rewards by staking Aave in StakedAave contract\n        return\n            aaveIncentivesController.getRewardsBalance(getAssets(), address(this)) +\n            stkAAVE.balanceOf(address(this)) +\n            stkAAVE.getTotalRewardsBalance(address(this));\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/aave/v2/AaveV2VesperXy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\";\nimport \"../../VesperRewards.sol\";\nimport \"./AaveV2Xy.sol\";\n\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\ncontract AaveV2VesperXy is AaveV2Xy {\n    using SafeERC20 for IERC20;\n\n    // Destination Grow Pool for borrowed Token\n    IVesperPool public immutable vPool;\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowToken,\n        address _vPool,\n        string memory _name\n    ) AaveV2Xy(_pool, _swapper, _rewardToken, _receiptToken, _borrowToken, _name) {\n        require(address(IVesperPool(_vPool).token()) == borrowToken, \"invalid-grow-pool\");\n        vPool = IVesperPool(_vPool);\n    }\n\n    /// @notice After borrowing Y, deposit to Vesper Pool\n    function _afterBorrowY(uint256 _amount) internal virtual override {\n        vPool.deposit(_amount);\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        IERC20(borrowToken).safeApprove(address(vPool), _amount);\n        VesperRewards._approveToken(vPool, swapper, _amount);\n    }\n\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\n    function _beforeRepayY(uint256 _amount) internal virtual override {\n        _withdrawFromVesperPool(_amount);\n    }\n\n    /// @dev Claim AAVE and VSP and swap to collateral\n    function _claimAndSwapRewards() internal override {\n        // Claim and swap AAVE\n        uint256 _aaveAmount = _claimAave();\n        if (_aaveAmount > 0) {\n            _safeSwapExactInput(AAVE, address(collateralToken), _aaveAmount);\n        }\n        VesperRewards._claimAndSwapRewards(vPool, swapper, address(collateralToken));\n    }\n\n    /// @notice Borrowed Y balance deposited in Vesper Pool\n    function _getInvestedBorrowBalance() internal view virtual override returns (uint256) {\n        return\n            IERC20(borrowToken).balanceOf(address(this)) +\n            ((vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18);\n    }\n\n    /// @notice Swap excess borrow for more collateral when underlying VSP pool is making profits\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual override {\n        if (_excessBorrow > 0) {\n            _withdrawFromVesperPool(_excessBorrow);\n            uint256 _borrowedHere = IERC20(borrowToken).balanceOf(address(this));\n            if (_borrowedHere > 0) {\n                _safeSwapExactInput(borrowToken, address(collateralToken), _borrowedHere);\n            }\n        }\n    }\n\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\n    function _withdrawFromVesperPool(uint256 _amount) internal {\n        if (_amount > 0) {\n            uint256 _pricePerShare = vPool.pricePerShare();\n            uint256 _shares = (_amount * 1e18) / _pricePerShare;\n            _shares = _amount > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\n            vPool.withdraw(Math.min(_shares, vPool.balanceOf(address(this))));\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/aave/v2/AaveV2Xy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\";\nimport \"../../../interfaces/aave/IAave.sol\";\nimport \"../../Strategy.sol\";\nimport \"./AaveV2Core.sol\";\n\n// solhint-disable no-empty-blocks\n\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\ncontract AaveV2Xy is Strategy, AaveV2Core {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\n\n    uint32 internal constant TWAP_PERIOD = 3600;\n    address public rewardToken;\n    address public borrowToken;\n    AToken public vdToken; // Variable Debt Token\n    address internal aBorrowToken;\n    event UpdatedBorrowLimit(\n        uint256 previousMinBorrowLimit,\n        uint256 newMinBorrowLimit,\n        uint256 previousMaxBorrowLimit,\n        uint256 newMaxBorrowLimit\n    );\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowToken,\n        string memory _name\n    ) Strategy(_pool, _swapper, _receiptToken) AaveV2Core(_receiptToken) {\n        NAME = _name;\n        rewardToken = _rewardToken;\n        (address _aBorrowToken, , address _vdToken) = aaveProtocolDataProvider.getReserveTokensAddresses(_borrowToken);\n        vdToken = AToken(_vdToken);\n        borrowToken = _borrowToken;\n        aBorrowToken = _aBorrowToken;\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == address(aToken) || address(vdToken) == _token || borrowToken == _token;\n    }\n\n    /// @notice Returns total collateral locked in the strategy\n    function tvl() external view override returns (uint256) {\n        return aToken.balanceOf(address(this)) + collateralToken.balanceOf(address(this));\n    }\n\n    /// @notice After borrowing Y Hook\n    function _afterBorrowY(uint256 _amount) internal virtual {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        collateralToken.safeApprove(address(aToken), _amount);\n        collateralToken.safeApprove(address(aaveLendingPool), _amount);\n        IERC20(borrowToken).safeApprove(address(aaveLendingPool), _amount);\n        IERC20(collateralToken).safeApprove(address(swapper), _amount);\n        IERC20(rewardToken).safeApprove(address(swapper), _amount);\n        IERC20(borrowToken).safeApprove(address(swapper), _amount);\n    }\n\n    /**\n     * @notice Claim rewardToken and transfer to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal virtual override {\n        require(IStrategy(_newStrategy).token() == address(aToken), \"wrong-receipt-token\");\n        _repayY(vdToken.balanceOf(address(this)));\n    }\n\n    /// @notice Before repaying Y Hook\n    function _beforeRepayY(uint256 _amount) internal virtual {}\n\n    function _borrowY(uint256 _amount) internal virtual {\n        if (_amount > 0) {\n            // 2 for variable rate borrow, 0 for referralCode\n            aaveLendingPool.borrow(borrowToken, _amount, 2, 0, address(this));\n            _afterBorrowY(_amount);\n        }\n    }\n\n    /**\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\n     * @param _depositAmount deposit amount\n     * @param _withdrawAmount withdraw amount\n     * @return _borrowAmount borrow more amount\n     * @return _repayAmount repay amount to keep ltv within limit\n     */\n    function _calculateBorrowPosition(\n        uint256 _depositAmount,\n        uint256 _withdrawAmount\n    ) internal view returns (uint256 _borrowAmount, uint256 _repayAmount) {\n        require(_depositAmount == 0 || _withdrawAmount == 0, \"all-input-gt-zero\");\n        uint256 _borrowed = vdToken.balanceOf(address(this));\n        // If maximum borrow limit set to 0 then repay borrow\n        if (maxBorrowLimit == 0) {\n            return (0, _borrowed);\n        }\n        uint256 _collateral = aToken.balanceOf(address(this));\n        // In case of withdraw, _amount can be greater than _supply\n        uint256 _hypotheticalCollateral = _depositAmount > 0\n            ? _collateral + _depositAmount\n            : _collateral > _withdrawAmount\n            ? _collateral - _withdrawAmount\n            : 0;\n        if (_hypotheticalCollateral == 0) {\n            return (0, _borrowed);\n        }\n        AaveOracle _aaveOracle = AaveOracle(aaveAddressesProvider_.getPriceOracle());\n        // Oracle prices are in 18 decimal\n        uint256 _borrowTokenPrice = _aaveOracle.getAssetPrice(borrowToken);\n        uint256 _collateralTokenPrice = _aaveOracle.getAssetPrice(address(collateralToken));\n        if (_borrowTokenPrice == 0 || _collateralTokenPrice == 0) {\n            // Oracle problem. Lets payback all\n            return (0, _borrowed);\n        }\n        // _collateralFactor in 4 decimal. 10_000 = 100%\n        (, uint256 _collateralFactor, , , , , , , , ) = aaveProtocolDataProvider.getReserveConfigurationData(\n            address(collateralToken)\n        );\n\n        // Collateral in base currency based on oracle price and cf;\n        uint256 _actualCollateralForBorrow = (_hypotheticalCollateral * _collateralFactor * _collateralTokenPrice) /\n            (MAX_BPS * (10 ** IERC20Metadata(address(collateralToken)).decimals()));\n        // Calculate max borrow possible in borrow token number\n        uint256 _maxBorrowPossible = (_actualCollateralForBorrow *\n            (10 ** IERC20Metadata(address(borrowToken)).decimals())) / _borrowTokenPrice;\n        if (_maxBorrowPossible == 0) {\n            return (0, _borrowed);\n        }\n        // Safe buffer to avoid liquidation due to price variations.\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\n\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\n\n        // If current borrow is greater than max borrow, then repay to achieve safe position.\n        if (_borrowed > _borrowUpperBound) {\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _repayAmount = _borrowed - _borrowLowerBound;\n        } else if (_borrowLowerBound > _borrowed) {\n            _borrowAmount = _borrowLowerBound - _borrowed;\n            uint256 _availableLiquidity = IERC20(borrowToken).balanceOf(aBorrowToken);\n            if (_borrowAmount > _availableLiquidity) {\n                _borrowAmount = _availableLiquidity;\n            }\n        }\n    }\n\n    /// @dev Claim Aave rewards\n    function _claimRewards() internal override returns (address, uint256) {\n        return (AAVE, _claimAave());\n    }\n\n    /// @notice Deposit collateral in Aave and adjust borrow position\n    function _deposit() internal {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\n\n        if (_repayAmount > 0) {\n            // Repay _borrowAmount to maintain safe position\n            _repayY(_repayAmount);\n            _mint(_collateralBalance);\n        } else {\n            // Happy path, mint more borrow more\n            _mint(_collateralBalance);\n            _borrowY(_borrowAmount);\n        }\n    }\n\n    /// @notice Borrowed Y balance deposited here or elsewhere hook\n    function _getInvestedBorrowBalance() internal view virtual returns (uint256) {\n        return IERC20(borrowToken).balanceOf(address(this));\n    }\n\n    /**\n     * @dev Aave support WETH as collateral.\n     */\n    function _mint(uint256 _amount) internal virtual {\n        _deposit(address(collateralToken), _amount);\n    }\n\n    /**\n     * @dev Generate report for pools accounting and also send profit and any payback to pool.\n     */\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        uint256 _borrow = vdToken.balanceOf(address(this));\n        uint256 _investedBorrowBalance = _getInvestedBorrowBalance();\n\n        // _borrow increases every block. Convert collateral to borrowToken.\n        if (_borrow > _investedBorrowBalance) {\n            _swapToBorrowToken(_borrow - _investedBorrowBalance);\n        } else {\n            // When _investedBorrowBalance exceeds _borrow balance from Aave\n            // Customize this hook to handle the excess borrowToken for profit\n            _rebalanceBorrow(_investedBorrowBalance - _borrow);\n        }\n\n        uint256 _supply = aToken.balanceOf(address(this));\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _totalCollateral = _supply + _collateralHere;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_collateralHere < _profitAndExcessDebt) {\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _supply);\n            if (_totalAmountToWithdraw > 0) {\n                _withdrawHere(_totalAmountToWithdraw);\n                _collateralHere = collateralToken.balanceOf(address(this));\n            }\n        }\n\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _deposit();\n    }\n\n    /// @notice Swap excess borrow for more collateral hook\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual {}\n\n    function _redeemX(uint256 _amount) internal virtual {\n        _safeWithdraw(address(collateralToken), address(this), _amount);\n    }\n\n    function _repayY(uint256 _amount) internal virtual {\n        _beforeRepayY(_amount);\n        aaveLendingPool.repay(borrowToken, _amount, 2, address(this));\n    }\n\n    /**\n     * @dev Swap collateral token to borrowToken\n     * @param _shortOnBorrow Expected output of this swap\n     */\n    function _swapToBorrowToken(uint256 _shortOnBorrow) internal {\n        // Looking for _amountIn using fixed output amount\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, _shortOnBorrow);\n        if (_amountIn > 0) {\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\n            if (_amountIn > _collateralHere) {\n                // Redeem some collateral, so that we have enough collateral to get expected output\n                _redeemX(_amountIn - _collateralHere);\n            }\n            swapper.swapExactOutput(address(collateralToken), borrowToken, _shortOnBorrow, _amountIn, address(this));\n        }\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _requireAmount) internal override {\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, _requireAmount);\n        if (_repayAmount > 0) {\n            _repayY(_repayAmount);\n        }\n        _redeemX(_requireAmount);\n    }\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n    /**\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\n     * @dev It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\n     */\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\n        require(_maxBorrowLimit < MAX_BPS, \"invalid-max-borrow-limit\");\n        // set _maxBorrowLimit and _minBorrowLimit to disable borrow;\n        require(\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\n            \"max-should-be-higher-than-min\"\n        );\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\n        minBorrowLimit = _minBorrowLimit;\n        maxBorrowLimit = _maxBorrowLimit;\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/aave/v3/AaveV3Incentive.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\nimport \"../../../interfaces/aave/IAave.sol\";\n\n/// @title This contract provide core operations for Aave v3\nlibrary AaveV3Incentive {\n    /**\n     * @notice Claim rewards from Aave incentive controller\n     */\n    function _claimRewards(\n        address _aToken\n    ) internal returns (address[] memory rewardsList, uint256[] memory claimedAmounts) {\n        // Some aTokens may have no incentive controller method/variable. Better use try catch\n        try AToken(_aToken).getIncentivesController() returns (address _aaveIncentivesController) {\n            address[] memory assets = new address[](1);\n            assets[0] = address(_aToken);\n            return AaveIncentivesController(_aaveIncentivesController).claimAllRewards(assets, address(this));\n            //solhint-disable no-empty-blocks\n        } catch {}\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/aave/v3/AaveV3VesperXy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\";\nimport \"./AaveV3Xy.sol\";\nimport \"../../VesperRewards.sol\";\n\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\ncontract AaveV3VesperXy is AaveV3Xy {\n    using SafeERC20 for IERC20;\n\n    // Destination Grow Pool for borrowed Token\n    IVesperPool public immutable vPool;\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _receiptToken,\n        address _borrowToken,\n        address _aaveAddressProvider,\n        address _vPool,\n        string memory _name\n    ) AaveV3Xy(_pool, _swapper, _receiptToken, _borrowToken, _aaveAddressProvider, _name) {\n        require(address(IVesperPool(_vPool).token()) == borrowToken, \"invalid-grow-pool\");\n        vPool = IVesperPool(_vPool);\n    }\n\n    /// @notice After borrowing Y, deposit to Vesper Pool\n    function _afterBorrowY(uint256 _amount) internal virtual override {\n        vPool.deposit(_amount);\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        IERC20(borrowToken).safeApprove(address(vPool), _amount);\n        VesperRewards._approveToken(vPool, swapper, _amount);\n    }\n\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\n    function _beforeRepayY(uint256 _amount) internal virtual override {\n        _withdrawFromVesperPool(_amount);\n    }\n\n    /// @dev Claim all rewards and convert to collateral.\n    function _claimAndSwapRewards() internal override {\n        // Claim rewards from Aave\n        AaveV3Xy._claimAndSwapRewards();\n        VesperRewards._claimAndSwapRewards(vPool, swapper, address(collateralToken));\n    }\n\n    /// @notice Borrowed Y balance deposited in Vesper Pool\n    function _getInvestedBorrowBalance() internal view virtual override returns (uint256) {\n        return\n            IERC20(borrowToken).balanceOf(address(this)) +\n            ((vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18);\n    }\n\n    /// @notice Swap excess borrow for more collateral when underlying  vPool is making profits\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual override {\n        if (_excessBorrow > 0) {\n            _withdrawFromVesperPool(_excessBorrow);\n            uint256 _borrowedHere = IERC20(borrowToken).balanceOf(address(this));\n            if (_borrowedHere > 0) {\n                _safeSwapExactInput(borrowToken, address(collateralToken), _borrowedHere);\n            }\n        }\n    }\n\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\n    function _withdrawFromVesperPool(uint256 _amount) internal {\n        if (_amount > 0) {\n            uint256 _pricePerShare = vPool.pricePerShare();\n            uint256 _shares = (_amount * 1e18) / _pricePerShare;\n            _shares = _amount > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\n            vPool.withdraw(Math.min(_shares, vPool.balanceOf(address(this))));\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/aave/v3/AaveV3Xy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\";\nimport \"vesper-pools/contracts/Errors.sol\";\nimport \"../../../interfaces/aave/IAave.sol\";\nimport \"./AaveV3Incentive.sol\";\nimport \"../../Strategy.sol\";\n\n// solhint-disable no-empty-blocks\n\n/// @title Deposit Collateral in Aave and earn interest by depositing borrowed token in a Vesper Pool.\ncontract AaveV3Xy is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\n\n    PoolAddressesProvider public immutable aaveAddressProvider;\n    address public borrowToken;\n    AToken public vdToken; // Variable Debt Token\n    address internal aBorrowToken;\n    event UpdatedBorrowLimit(\n        uint256 previousMinBorrowLimit,\n        uint256 newMinBorrowLimit,\n        uint256 previousMaxBorrowLimit,\n        uint256 newMaxBorrowLimit\n    );\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _receiptToken,\n        address _borrowToken,\n        address _aaveAddressProvider,\n        string memory _name\n    ) Strategy(_pool, _swapper, _receiptToken) {\n        NAME = _name;\n        require(_aaveAddressProvider != address(0), \"addressProvider-is-zero\");\n        require(\n            AToken(_receiptToken).UNDERLYING_ASSET_ADDRESS() == address(IVesperPool(_pool).token()),\n            \"invalid-receipt-token\"\n        );\n        (address _aBorrowToken, , address _vdToken) = AaveProtocolDataProvider(\n            PoolAddressesProvider(_aaveAddressProvider).getPoolDataProvider()\n        ).getReserveTokensAddresses(_borrowToken);\n        vdToken = AToken(_vdToken);\n        borrowToken = _borrowToken;\n        aBorrowToken = _aBorrowToken;\n        aaveAddressProvider = PoolAddressesProvider(_aaveAddressProvider);\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return\n            _token == address(collateralToken) ||\n            _token == receiptToken ||\n            address(vdToken) == _token ||\n            borrowToken == _token;\n    }\n\n    /// @notice Returns total collateral locked in the strategy\n    function tvl() external view override returns (uint256) {\n        // receiptToken is aToken. aToken is 1:1 of collateral token\n        return IERC20(receiptToken).balanceOf(address(this)) + collateralToken.balanceOf(address(this));\n    }\n\n    /// @notice After borrowing Y Hook\n    function _afterBorrowY(uint256 _amount) internal virtual {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        address _swapper = address(swapper);\n        collateralToken.safeApprove(aaveAddressProvider.getPool(), _amount);\n        collateralToken.safeApprove(_swapper, _amount);\n        IERC20(borrowToken).safeApprove(aaveAddressProvider.getPool(), _amount);\n        IERC20(borrowToken).safeApprove(_swapper, _amount);\n        try AToken(receiptToken).getIncentivesController() returns (address _aaveIncentivesController) {\n            address[] memory _rewardTokens = AaveIncentivesController(_aaveIncentivesController).getRewardsList();\n            for (uint256 i; i < _rewardTokens.length; ++i) {\n                if (_rewardTokens[i] != address(collateralToken) && _rewardTokens[i] != borrowToken) {\n                    IERC20(_rewardTokens[i]).safeApprove(_swapper, _amount);\n                }\n            }\n            //solhint-disable no-empty-blocks\n        } catch {}\n    }\n\n    /**\n     * @notice Claim rewardToken and transfer to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal virtual override {\n        require(IStrategy(_newStrategy).token() == receiptToken, \"wrong-receipt-token\");\n        _repayY(vdToken.balanceOf(address(this)), AaveLendingPool(aaveAddressProvider.getPool()));\n    }\n\n    /// @notice Before repaying Y Hook\n    function _beforeRepayY(uint256 _amount) internal virtual {}\n\n    /**\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\n     * @param _depositAmount deposit amount\n     * @param _withdrawAmount withdraw amount\n     * @return _borrowAmount borrow more amount\n     * @return _repayAmount repay amount to keep ltv within limit\n     */\n    function _calculateBorrowPosition(\n        uint256 _depositAmount,\n        uint256 _withdrawAmount,\n        uint256 _borrowed,\n        uint256 _supplied\n    ) internal view returns (uint256 _borrowAmount, uint256 _repayAmount) {\n        require(_depositAmount == 0 || _withdrawAmount == 0, \"all-input-gt-zero\");\n        // If maximum borrow limit set to 0 then repay borrow\n        if (maxBorrowLimit == 0) {\n            return (0, _borrowed);\n        }\n        // In case of withdraw, _amount can be greater than _supply\n        uint256 _hypotheticalCollateral = _depositAmount > 0 ? _supplied + _depositAmount : _supplied > _withdrawAmount\n            ? _supplied - _withdrawAmount\n            : 0;\n        if (_hypotheticalCollateral == 0) {\n            return (0, _borrowed);\n        }\n        AaveOracle _aaveOracle = AaveOracle(aaveAddressProvider.getPriceOracle());\n\n        uint256 _borrowTokenPrice = _aaveOracle.getAssetPrice(borrowToken);\n        uint256 _collateralTokenPrice = _aaveOracle.getAssetPrice(address(collateralToken));\n        if (_borrowTokenPrice == 0 || _collateralTokenPrice == 0) {\n            // Oracle problem. Lets payback all\n            return (0, _borrowed);\n        }\n        // _collateralFactor in 4 decimal. 10_000 = 100%\n        (, uint256 _collateralFactor, , , , , , , , ) = AaveProtocolDataProvider(\n            aaveAddressProvider.getPoolDataProvider()\n        ).getReserveConfigurationData(address(collateralToken));\n\n        // Collateral in base currency based on oracle price and cf;\n        uint256 _actualCollateralForBorrow = (_hypotheticalCollateral * _collateralFactor * _collateralTokenPrice) /\n            (MAX_BPS * (10 ** IERC20Metadata(address(collateralToken)).decimals()));\n        // Calculate max borrow possible in borrow token number\n        uint256 _maxBorrowPossible = (_actualCollateralForBorrow *\n            (10 ** IERC20Metadata(address(borrowToken)).decimals())) / _borrowTokenPrice;\n        if (_maxBorrowPossible == 0) {\n            return (0, _borrowed);\n        }\n        // Safe buffer to avoid liquidation due to price variations.\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\n\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\n\n        // If current borrow is greater than max borrow, then repay to achieve safe position.\n        if (_borrowed > _borrowUpperBound) {\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _repayAmount = _borrowed - _borrowLowerBound;\n        } else if (_borrowLowerBound > _borrowed) {\n            _borrowAmount = _borrowLowerBound - _borrowed;\n            uint256 _availableLiquidity = IERC20(borrowToken).balanceOf(aBorrowToken);\n            if (_borrowAmount > _availableLiquidity) {\n                _borrowAmount = _availableLiquidity;\n            }\n        }\n    }\n\n    /// @dev Claim all rewards and convert to collateral.\n    /// Overriding _claimAndSwapRewards will help child contract otherwise override _claimReward.\n    function _claimAndSwapRewards() internal virtual override {\n        (address[] memory _tokens, uint256[] memory _amounts) = AaveV3Incentive._claimRewards(receiptToken);\n        uint256 _length = _tokens.length;\n        for (uint256 i; i < _length; ++i) {\n            if (_amounts[i] > 0 && _tokens[i] != address(collateralToken)) {\n                _safeSwapExactInput(_tokens[i], address(collateralToken), _amounts[i]);\n            }\n        }\n    }\n\n    /**\n     * @dev Aave support WETH as collateral.\n     */\n    function _depositToAave(uint256 _amount, AaveLendingPool _aaveLendingPool) internal virtual {\n        if (_amount > 0) {\n            try _aaveLendingPool.supply(address(collateralToken), _amount, address(this), 0) {} catch Error(\n                string memory _reason\n            ) {\n                // Aave uses liquidityIndex and some other indexes as needed to normalize input.\n                // If normalized input equals to 0 then error will be thrown with '56' error code.\n                // CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\n                // Hence discard error where error code is '56'\n                require(bytes32(bytes(_reason)) == \"56\", \"deposit failed\");\n            }\n        }\n    }\n\n    /// @notice Borrowed Y balance deposited here or elsewhere hook\n    function _getInvestedBorrowBalance() internal view virtual returns (uint256) {\n        return IERC20(borrowToken).balanceOf(address(this));\n    }\n\n    /**\n     * @dev Generate report for pools accounting and also send profit and any payback to pool.\n     */\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _borrowed = vdToken.balanceOf(address(this));\n        uint256 _investedBorrowBalance = _getInvestedBorrowBalance();\n        AaveLendingPool _aaveLendingPool = AaveLendingPool(aaveAddressProvider.getPool());\n\n        // _borrow increases every block. Convert collateral to borrowToken.\n        if (_borrowed > _investedBorrowBalance) {\n            _swapToBorrowToken(_borrowed - _investedBorrowBalance, _aaveLendingPool);\n        } else {\n            // When _investedBorrowBalance exceeds _borrow balance from Aave\n            // Customize this hook to handle the excess borrowToken for profit\n            _rebalanceBorrow(_investedBorrowBalance - _borrowed);\n        }\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _supplied = IERC20(receiptToken).balanceOf(address(this));\n        uint256 _totalCollateral = _supplied + _collateralHere;\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_collateralHere < _profitAndExcessDebt) {\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _supplied);\n            if (_totalAmountToWithdraw > 0) {\n                _withdrawHere(_totalAmountToWithdraw, _aaveLendingPool, _borrowed, _supplied);\n                _collateralHere = collateralToken.balanceOf(address(this));\n            }\n        }\n\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        uint256 _newSupply = collateralToken.balanceOf(address(this));\n        _depositToAave(_newSupply, _aaveLendingPool);\n\n        // There are scenarios when we want to call _calculateBorrowPosition and act on it.\n        // 1. Strategy got some collateral from pool which will allow strategy to borrow more.\n        // 2. Collateral and/or borrow token price is changed which leads to repay or borrow.\n        // 3. BorrowLimits are updated.\n        // In some edge scenarios, below call is redundant but keeping it as is for simplicity.\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(\n            0,\n            0,\n            vdToken.balanceOf(address(this)),\n            IERC20(receiptToken).balanceOf(address(this))\n        );\n        if (_repayAmount > 0) {\n            // Repay _borrowAmount to maintain safe position\n            _repayY(_repayAmount, _aaveLendingPool);\n        } else if (_borrowAmount > 0) {\n            // 2 for variable rate borrow, 0 for referralCode\n            _aaveLendingPool.borrow(borrowToken, _borrowAmount, 2, 0, address(this));\n        }\n        uint256 _borrowTokenBalance = IERC20(borrowToken).balanceOf(address(this));\n        if (_borrowTokenBalance > 0) {\n            _afterBorrowY(_borrowTokenBalance);\n        }\n    }\n\n    /// @notice Swap excess borrow for more collateral hook\n    function _rebalanceBorrow(uint256 _excessBorrow) internal virtual {}\n\n    function _repayY(uint256 _amount, AaveLendingPool _aaveLendingPool) internal virtual {\n        _beforeRepayY(_amount);\n        _aaveLendingPool.repay(borrowToken, _amount, 2, address(this));\n    }\n\n    /**\n     * @notice Swap given token to borrowToken\n     * @param _shortOnBorrow Expected output of this swap\n     */\n    function _swapToBorrowToken(uint256 _shortOnBorrow, AaveLendingPool _aaveLendingPool) internal {\n        // Looking for _amountIn using fixed output amount\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, _shortOnBorrow);\n        if (_amountIn > 0) {\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\n            if (_amountIn > _collateralHere) {\n                // Withdraw some collateral from Aave so that we have enough collateral to get expected output\n                uint256 _amount = _amountIn - _collateralHere;\n                require(\n                    _aaveLendingPool.withdraw(address(collateralToken), _amount, address(this)) == _amount,\n                    Errors.INCORRECT_WITHDRAW_AMOUNT\n                );\n            }\n            swapper.swapExactOutput(address(collateralToken), borrowToken, _shortOnBorrow, _amountIn, address(this));\n        }\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _requireAmount) internal override {\n        _withdrawHere(\n            _requireAmount,\n            AaveLendingPool(aaveAddressProvider.getPool()),\n            vdToken.balanceOf(address(this)),\n            IERC20(receiptToken).balanceOf(address(this))\n        );\n    }\n\n    function _withdrawHere(\n        uint256 _requireAmount,\n        AaveLendingPool _aaveLendingPool,\n        uint256 _borrowed,\n        uint256 _supplied\n    ) internal {\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, _requireAmount, _borrowed, _supplied);\n        if (_repayAmount > 0) {\n            _repayY(_repayAmount, _aaveLendingPool);\n        }\n        // withdraw asking more than available liquidity will fail. To do safe withdraw, check\n        // _requireAmount against available liquidity.\n        uint256 _possibleWithdraw = Math.min(\n            _requireAmount,\n            Math.min(IERC20(receiptToken).balanceOf(address(this)), collateralToken.balanceOf(receiptToken))\n        );\n        require(\n            _aaveLendingPool.withdraw(address(collateralToken), _possibleWithdraw, address(this)) == _possibleWithdraw,\n            Errors.INCORRECT_WITHDRAW_AMOUNT\n        );\n    }\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n    /**\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\n     * @dev It is possible to set _maxBorrowLimit and _minBorrowLimit as 0 to not borrow anything\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\n     */\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\n        require(_maxBorrowLimit < MAX_BPS, \"invalid-max-borrow-limit\");\n        // set _maxBorrowLimit and _minBorrowLimit to disable borrow;\n        require(\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\n            \"max-should-be-higher-than-min\"\n        );\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\n        minBorrowLimit = _minBorrowLimit;\n        maxBorrowLimit = _maxBorrowLimit;\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/AaveFlashLoanHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\";\nimport \"vesper-pools/contracts/Errors.sol\";\nimport \"../interfaces/aave/IAave.sol\";\n\n/**\n * @title FlashLoanHelper:: This contract does all heavy lifting to get flash loan via Aave.\n * @dev End user has to override _flashLoanLogic() function to perform logic after flash loan is done.\n *      Also needs to approve token to Aave via _approveToken function.\n *      1 utility internal function is also provided to activate/deactivate flash loan.\n *      Utility function is provided as internal so that end user can choose controlled access via public function.\n */\nabstract contract AaveFlashLoanHelper {\n    using SafeERC20 for IERC20;\n\n    PoolAddressesProviderV3 internal poolAddressesProvider;\n\n    bool public isAaveActive = false;\n\n    constructor(address _aaveAddressesProvider) {\n        require(_aaveAddressesProvider != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n        poolAddressesProvider = PoolAddressesProviderV3(_aaveAddressesProvider);\n    }\n\n    function _updateAaveStatus(bool _status) internal {\n        isAaveActive = _status;\n    }\n\n    /// @notice Approve all required tokens for flash loan\n    function _approveToken(address _token, uint256 _amount) internal {\n        IERC20(_token).safeApprove(address(poolAddressesProvider.getPool()), _amount);\n    }\n\n    /// @dev Override this function to execute logic which uses flash loan amount\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal virtual;\n\n    /***************************** Aave flash loan functions ***********************************/\n\n    bool private awaitingFlash = false;\n\n    /**\n     * @notice This is entry point for Aave flash loan\n     * @param _token Token for which we are taking flash loan\n     * @param _amountDesired Flash loan amount\n     * @param _data This will be passed downstream for processing. It can be empty.\n     */\n    function _doAaveFlashLoan(\n        address _token,\n        uint256 _amountDesired,\n        bytes memory _data\n    ) internal returns (uint256 _amount) {\n        require(isAaveActive, Errors.AAVE_FLASH_LOAN_NOT_ACTIVE);\n        // Check token liquidity in Aave\n        (address _aToken, , ) = poolAddressesProvider.getPoolDataProvider().getReserveTokensAddresses(_token);\n        uint256 _availableLiquidity = IERC20(_token).balanceOf(_aToken);\n        if (_amountDesired > _availableLiquidity) {\n            _amountDesired = _availableLiquidity;\n        }\n\n        address[] memory assets = new address[](1);\n        assets[0] = _token;\n\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = _amountDesired;\n\n        // 0 = no debt, 1 = stable, 2 = variable\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0;\n\n        // Anyone can call aave flash loan to us, so we need some protection\n        awaitingFlash = true;\n\n        // function params: receiver, assets, amounts, modes, onBehalfOf, data, referralCode\n        poolAddressesProvider.getPool().flashLoan(address(this), assets, amounts, modes, address(this), _data, 0);\n        _amount = _amountDesired;\n        awaitingFlash = false;\n    }\n\n    /// @dev Aave will call this function after doing flash loan\n    function executeOperation(\n        address[] calldata /*_assets*/,\n        uint256[] calldata _amounts,\n        uint256[] calldata _premiums,\n        address _initiator,\n        bytes calldata _data\n    ) external returns (bool) {\n        require(msg.sender == address(poolAddressesProvider.getPool()), \"!aave-pool\");\n        require(awaitingFlash, Errors.INVALID_FLASH_LOAN);\n        require(_initiator == address(this), Errors.INVALID_INITIATOR);\n\n        // Flash loan amount + flash loan fee\n        uint256 _repayAmount = _amounts[0] + _premiums[0];\n        _flashLoanLogic(_data, _repayAmount);\n        return true;\n    }\n\n    /***************************** Aave flash loan functions ends ***********************************/\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/avalanche/BenqiAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/token/IToken.sol\";\nimport \"./CompoundLike.sol\";\n\ncontract BenqiAVAX is CompoundLike {\n    //solhint-disable no-empty-blocks\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardDistributor,\n        address _rewardToken,\n        address _receiptToken,\n        string memory _name\n    ) CompoundLike(_pool, _swapManager, _comptroller, _rewardDistributor, _rewardToken, _receiptToken, _name) {}\n\n    /**\n     * @dev This hook get called after collateral is redeemed from Benqi\n     * Vesper deals in WAVAX as collateral so convert AVAX to WAVAX\n     */\n    function _afterRedeem() internal override {\n        TokenLike(WAVAX).deposit{value: address(this).balance}();\n    }\n\n    /**\n     * @dev During deposit we have WAVAX as collateral but Compound accepts AVAX.\n     * Withdraw AVAX from WAVAX before calling mint in Compound.\n     */\n    function _deposit(uint256 _amount) internal override {\n        if (_amount > 0) {\n            TokenLike(WAVAX).withdraw(_amount);\n            cToken.mint{value: _amount}();\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/avalanche/CompoundLike.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/token/IToken.sol\";\nimport \"../Compound.sol\";\nimport \"../../../interfaces/compound/IComptrollerMultiReward.sol\";\n\n/// @title This strategy will deposit collateral token in a Compound Fork on avalanche and Earn Interest\ncontract CompoundLike is Compound {\n    using SafeERC20 for IERC20;\n\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    address public rewardDistributor;\n\n    event RewardDistributorUpdated(address indexed _oldRewardDistributor, address indexed _newRewardDistributor);\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _comptroller,\n        address _rewardDistributor,\n        address _rewardToken,\n        address _receiptToken,\n        string memory _name\n    ) Compound(_pool, _swapper, _comptroller, _rewardToken, _receiptToken, _name) {\n        require(_rewardDistributor != address(0), \"invalid-reward-distributor-addr\");\n        rewardDistributor = _rewardDistributor;\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        // Approve swapper to swap extra wAVAX rewards\n        // Except for the case when collateral is wAVAX itself\n        if (address(collateralToken) != WAVAX) {\n            IERC20(WAVAX).safeApprove(address(swapper), _amount);\n        }\n    }\n\n    /// @dev Claim Protocol rewards + AVAX and convert them into collateral token.\n    function _claimAndSwapRewards() internal override {\n        address[] memory _markets = new address[](1);\n        _markets[0] = address(cToken);\n        ComptrollerMultiReward(address(comptroller)).claimReward(0, address(this), _markets); // Claim protocol rewards\n        ComptrollerMultiReward(address(comptroller)).claimReward(1, address(this), _markets); // Claim native AVAX (optional)\n        uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n        if (_rewardAmount > 0) {\n            _safeSwapExactInput(rewardToken, address(collateralToken), _rewardAmount);\n        }\n        uint256 _avaxRewardAmount = address(this).balance;\n        if (_avaxRewardAmount > 0) {\n            TokenLike(WAVAX).deposit{value: _avaxRewardAmount}();\n            if (address(collateralToken) != WAVAX) {\n                _safeSwapExactInput(WAVAX, address(collateralToken), _avaxRewardAmount);\n            }\n        }\n    }\n\n    // Updates rewardDistributor of the Compound fork, in case it changes over time\n    function updateRewardDistributor(address _newRewardDistributor) external onlyKeeper {\n        require(_newRewardDistributor != address(0), \"invalid-reward-distributor-addr\");\n        emit RewardDistributorUpdated(rewardDistributor, _newRewardDistributor);\n        rewardDistributor = _newRewardDistributor;\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/bsc/Venus.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../Compound.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title This strategy will deposit collateral token in Venus and earn interest.\ncontract Venus is Compound {\n    constructor(\n        address pool_,\n        address swapper_,\n        address comptroller_,\n        address rewardToken_,\n        address receiptToken_,\n        string memory name_\n    ) Compound(pool_, swapper_, comptroller_, rewardToken_, receiptToken_, name_) {}\n\n    /// @notice Claim Venus (XVS)\n    function _claimRewards() internal override returns (address, uint256) {\n        address[] memory _markets = new address[](1);\n        _markets[0] = address(cToken);\n        VenusComptroller(address(comptroller)).claimVenus(address(this), _markets);\n        return (rewardToken, IERC20(rewardToken).balanceOf(address(this)));\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/bsc/VenusBNB.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./Venus.sol\";\nimport \"vesper-pools/contracts/interfaces/token/IToken.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit BNB/WBNB in Venus and earn interest.\ncontract VenusBNB is Venus {\n    address internal constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n\n    constructor(\n        address pool_,\n        address swapper_,\n        address comptroller_,\n        address rewardToken_,\n        address receiptToken_,\n        string memory name_\n    ) Venus(pool_, swapper_, comptroller_, rewardToken_, receiptToken_, name_) {}\n\n    /// @dev Only receive BNB from either Venus Token or WBNB\n    receive() external payable {\n        require(msg.sender == address(cToken) || msg.sender == WBNB, \"not-allowed-to-send-ether\");\n    }\n\n    /**\n     * @dev This hook get called after collateral is redeemed from Venus\n     * Vesper deals in WBNB as collateral so convert BNB to WBNB\n     */\n    function _afterRedeem() internal override {\n        TokenLike(WBNB).deposit{value: address(this).balance}();\n    }\n\n    /**\n     * @dev During reinvest we have WBNB as collateral but Venus accepts BNB.\n     * Withdraw BNB from WBNB before calling mint in Venus.\n     */\n    function _deposit(uint256 _amount) internal override {\n        if (_amount > 0) {\n            TokenLike(WBNB).withdraw(_amount);\n            cToken.mint{value: _amount}();\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/Compound.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../Strategy.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\n\n/// @title This strategy will deposit collateral token in Compound and earn interest.\ncontract Compound is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    CToken internal immutable cToken;\n\n    Comptroller public immutable comptroller;\n    address public rewardToken;\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        string memory _name\n    ) Strategy(_pool, _swapper, _receiptToken) {\n        require(_receiptToken != address(0), \"cToken-address-is-zero\");\n        cToken = CToken(_receiptToken);\n        NAME = _name;\n\n        comptroller = Comptroller(_comptroller);\n        rewardToken = _rewardToken;\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == address(cToken);\n    }\n\n    function tvl() external view override returns (uint256) {\n        return\n            ((cToken.balanceOf(address(this)) * cToken.exchangeRateStored()) / 1e18) +\n            collateralToken.balanceOf(address(this));\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    function _afterRedeem() internal virtual {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        collateralToken.safeApprove(pool, _amount);\n        collateralToken.safeApprove(address(cToken), _amount);\n        IERC20(rewardToken).safeApprove(address(swapper), _amount);\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    function _beforeMigration(address _newStrategy) internal virtual override {}\n\n    /// @notice Claim comp\n    function _claimRewards() internal virtual override returns (address, uint256) {\n        address[] memory _markets = new address[](1);\n        _markets[0] = address(cToken);\n        comptroller.claimComp(address(this), _markets);\n        return (rewardToken, IERC20(rewardToken).balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Deposit collateral in Compound.\n     * @dev cETH works differently so ETH strategy will override this function.\n     */\n    function _deposit(uint256 _amount) internal virtual {\n        if (_amount > 0) {\n            require(cToken.mint(_amount) == 0, \"deposit-to-compound-failed\");\n        }\n    }\n\n    /**\n     * @dev Generate profit, loss and payback statement. Also claim rewards.\n     */\n    function _generateReport() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _totalCollateral = _collateralHere + cToken.balanceOfUnderlying(address(this));\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_profitAndExcessDebt > _collateralHere) {\n            _withdrawHere(_profitAndExcessDebt - _collateralHere);\n            _collateralHere = collateralToken.balanceOf(address(this));\n        }\n\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n    }\n\n    /**\n     * @dev Generate report for pools accounting and also send profit and any payback to pool.\n     */\n    function _rebalance() internal virtual override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        (_profit, _loss, _payback) = _generateReport();\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        // After reportEarning strategy may get more collateral from pool. Deposit those in Compound.\n        _deposit(collateralToken.balanceOf(address(this)));\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _amount) internal override {\n        // If _amount is very small and equivalent to 0 cToken then skip withdraw.\n        uint256 _expectedCToken = (_amount * 1e18) / cToken.exchangeRateStored();\n        if (_expectedCToken > 0) {\n            // Get minimum of _amount and _available collateral and _availableLiquidity\n            uint256 _withdrawAmount = Math.min(\n                _amount,\n                Math.min(cToken.balanceOfUnderlying(address(this)), cToken.getCash())\n            );\n            require(cToken.redeemUnderlying(_withdrawAmount) == 0, \"withdraw-from-compound-failed\");\n            _afterRedeem();\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/CompoundLeverage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Heavily inspired from CompoundLeverage strategy of Yearn. https://etherscan.io/address/0x4031afd3B0F71Bace9181E554A9E680Ee4AbE7dF#code\n\npragma solidity 0.8.9;\n\nimport \"../../interfaces/compound/ICompound.sol\";\nimport \"../Strategy.sol\";\nimport \"../FlashLoanHelper.sol\";\nimport \"./CompoundLeverageBase.sol\";\n\n// solhint-disable no-empty-blocks\n\n/// @title This strategy will deposit collateral token in Compound and based on position\n/// it will borrow same collateral token. It will use borrowed asset as supply and borrow again.\ncontract CompoundLeverage is CompoundLeverageBase, FlashLoanHelper {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _comptroller,\n        address _rewardToken,\n        address _aaveAddressesProvider,\n        address _receiptToken,\n        string memory _name\n    )\n        CompoundLeverageBase(_pool, _swapper, _comptroller, _rewardToken, _receiptToken, _name)\n        FlashLoanHelper(_aaveAddressesProvider)\n    {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        FlashLoanHelper._approveToken(address(collateralToken), _amount);\n    }\n\n    /// @notice Claim comp\n    function _claimRewards() internal override returns (address, uint256) {\n        address[] memory _markets = new address[](1);\n        _markets[0] = address(cToken);\n        comptroller.claimComp(address(this), _markets);\n        return (rewardToken, IERC20(rewardToken).balanceOf(address(this)));\n    }\n\n    /**\n     * @dev Aave flash is used only for withdrawal due to high fee compare to DyDx\n     * @param _flashAmount Amount for flash loan\n     * @param _shouldRepay Flag indicating we want to leverage or deleverage\n     * @return Total amount we leverage or deleverage using flash loan\n     */\n    function _doFlashLoan(uint256 _flashAmount, bool _shouldRepay) internal override returns (uint256) {\n        uint256 _totalFlashAmount;\n        // Due to less fee DyDx is our primary flash loan provider\n        if (isDyDxActive && _flashAmount > 0) {\n            bytes memory _data = abi.encode(_flashAmount, _shouldRepay);\n            _totalFlashAmount = _doDyDxFlashLoan(address(collateralToken), _flashAmount, _data);\n            _flashAmount -= _totalFlashAmount;\n        }\n        if (isAaveActive && _shouldRepay && _flashAmount > 0) {\n            bytes memory _data = abi.encode(_flashAmount, _shouldRepay);\n            _totalFlashAmount += _doAaveFlashLoan(address(collateralToken), _flashAmount, _data);\n        }\n        return _totalFlashAmount;\n    }\n\n    /**\n     * @notice This function will be called by flash loan\n     * @dev In case of borrow, DyDx is preferred as fee is so low that it does not effect\n     * our collateralRatio and liquidation risk.\n     */\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal override {\n        (uint256 _amount, bool _deficit) = abi.decode(_data, (uint256, bool));\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        require(_collateralHere >= _amount, \"FLASH_FAILED\"); // to stop malicious calls\n\n        //if in deficit we repay amount and then withdraw\n        if (_deficit) {\n            _repayBorrow(_amount);\n            //if we are withdrawing we take more to cover fee\n            _redeemUnderlying(_repayAmount);\n        } else {\n            _mint(_collateralHere);\n            //borrow more to cover fee\n            _borrowCollateral(_repayAmount);\n        }\n    }\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n\n    function updateAaveStatus(bool _status) external onlyGovernor {\n        _updateAaveStatus(_status);\n    }\n\n    function updateDyDxStatus(bool _status) external virtual onlyGovernor {\n        _updateDyDxStatus(_status, address(collateralToken));\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/CompoundLeverageBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Heavily inspired from CompoundLeverage strategy of Yearn. https://etherscan.io/address/0x4031afd3B0F71Bace9181E554A9E680Ee4AbE7dF#code\n\npragma solidity 0.8.9;\n\nimport \"../../interfaces/compound/ICompound.sol\";\nimport \"../Strategy.sol\";\n\n/// @title This strategy will deposit collateral token in Compound and based on position\n/// it will borrow same collateral token. It will use borrowed asset as supply and borrow again.\nabstract contract CompoundLeverageBase is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint256 public minBorrowRatio = 5_000; // 50%\n    uint256 public maxBorrowRatio = 6_000; // 60%\n    uint256 internal constant COLLATERAL_FACTOR_LIMIT = 9_500; // 95%\n    CToken internal cToken;\n\n    Comptroller public immutable comptroller;\n    address public rewardToken;\n\n    event UpdatedBorrowRatio(\n        uint256 previousMinBorrowRatio,\n        uint256 newMinBorrowRatio,\n        uint256 previousMaxBorrowRatio,\n        uint256 newMaxBorrowRatio\n    );\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        string memory _name\n    ) Strategy(_pool, _swapper, _receiptToken) {\n        NAME = _name;\n        require(_comptroller != address(0), \"comptroller-address-is-zero\");\n        comptroller = Comptroller(_comptroller);\n        rewardToken = _rewardToken;\n\n        require(_receiptToken != address(0), \"cToken-address-is-zero\");\n        cToken = CToken(_receiptToken);\n    }\n\n    /**\n     * @notice Current borrow ratio, calculated as current borrow divide by max allowed borrow\n     * Return value is based on basis points, i.e. 7500 = 75% ratio\n     */\n    function currentBorrowRatio() external view returns (uint256) {\n        (uint256 _supply, uint256 _borrow) = getPosition();\n        return _borrow == 0 ? 0 : (_borrow * MAX_BPS) / _supply;\n    }\n\n    /// @notice Return supply and borrow position. Position may return few block old value\n    function getPosition() public view returns (uint256 _supply, uint256 _borrow) {\n        (, uint256 _cTokenBalance, uint256 _borrowBalance, uint256 _exchangeRate) = cToken.getAccountSnapshot(\n            address(this)\n        );\n        _supply = (_cTokenBalance * _exchangeRate) / 1e18;\n        _borrow = _borrowBalance;\n    }\n\n    /// @inheritdoc Strategy\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == address(cToken) || _token == address(collateralToken);\n    }\n\n    /// @inheritdoc Strategy\n    function tvl() public view virtual override returns (uint256) {\n        (uint256 _supply, uint256 _borrow) = getPosition();\n        return collateralToken.balanceOf(address(this)) + _supply - _borrow;\n    }\n\n    /**\n     * @dev Adjust position by normal leverage and deleverage.\n     * @param _adjustBy Amount by which we want to increase or decrease _borrow\n     * @param _shouldRepay True indicate we want to deleverage\n     * @return amount Actual adjusted amount\n     */\n    function _adjustPosition(uint256 _adjustBy, bool _shouldRepay) internal returns (uint256 amount) {\n        // We can get position via view function, as this function will be called after _calculateDesiredPosition\n        (uint256 _supply, uint256 _borrow) = getPosition();\n\n        // If no borrow then there is nothing to deleverage\n        if (_borrow == 0 && _shouldRepay) {\n            return 0;\n        }\n\n        uint256 collateralFactor = _getCollateralFactor();\n\n        if (_shouldRepay) {\n            amount = _normalDeleverage(_adjustBy, _supply, _borrow, collateralFactor);\n        } else {\n            amount = _normalLeverage(_adjustBy, _supply, _borrow, collateralFactor);\n        }\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        collateralToken.safeApprove(address(cToken), _amount);\n        IERC20(rewardToken).safeApprove(address(swapper), _amount);\n    }\n\n    /**\n     * @dev Payback borrow before migration\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal virtual override {\n        require(IStrategy(_newStrategy).token() == address(cToken), \"wrong-receipt-token\");\n        minBorrowRatio = 0;\n        // It will calculate amount to repay based on borrow limit and payback all\n        _deposit();\n    }\n\n    function _borrowCollateral(uint256 _amount) internal virtual {\n        require(cToken.borrow(_amount) == 0, \"borrow-from-compound-failed\");\n    }\n\n    /**\n     * @notice Calculate borrow position based on borrow ratio, current supply, borrow, amount\n     * being deposited or withdrawn.\n     * @param _amount Collateral amount\n     * @param _isDeposit Flag indicating whether we are depositing _amount or withdrawing\n     * @return _position Amount of borrow that need to be adjusted\n     * @return _shouldRepay Flag indicating whether _position is borrow amount or repay amount\n     */\n    function _calculateDesiredPosition(\n        uint256 _amount,\n        bool _isDeposit\n    ) internal returns (uint256 _position, bool _shouldRepay) {\n        uint256 _totalSupply = cToken.balanceOfUnderlying(address(this));\n        uint256 _currentBorrow = cToken.borrowBalanceStored(address(this));\n        // If minimum borrow limit set to 0 then repay borrow\n        if (minBorrowRatio == 0) {\n            return (_currentBorrow, true);\n        }\n\n        uint256 _supply = _totalSupply - _currentBorrow;\n\n        // In case of withdraw, _amount can be greater than _supply\n        uint256 _newSupply = _isDeposit ? _supply + _amount : _supply > _amount ? _supply - _amount : 0;\n\n        // (supply * borrowRatio)/(BPS - borrowRatio)\n        uint256 _borrowUpperBound = (_newSupply * maxBorrowRatio) / (MAX_BPS - maxBorrowRatio);\n        uint256 _borrowLowerBound = (_newSupply * minBorrowRatio) / (MAX_BPS - minBorrowRatio);\n\n        // If our current borrow is greater than max borrow allowed, then we will have to repay\n        // some to achieve safe position else borrow more.\n        if (_currentBorrow > _borrowUpperBound) {\n            _shouldRepay = true;\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _position = _currentBorrow - _borrowLowerBound;\n        } else if (_currentBorrow < _borrowLowerBound) {\n            _shouldRepay = false;\n            // We can borrow more.\n            _position = _borrowLowerBound - _currentBorrow;\n        }\n    }\n\n    /// @notice Deposit collateral in Compound and adjust borrow position\n    function _deposit() internal {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        (uint256 _position, bool _shouldRepay) = _calculateDesiredPosition(_collateralBalance, true);\n        // Supply collateral to compound.\n        _mint(_collateralBalance);\n\n        // During reinvest, _shouldRepay will be false which indicate that we will borrow more.\n        _position -= _doFlashLoan(_position, _shouldRepay);\n\n        uint256 i;\n        while (_position > 0 && i <= 6) {\n            unchecked {\n                _position -= _adjustPosition(_position, _shouldRepay);\n                i++;\n            }\n        }\n    }\n\n    /**\n     * @dev Aave flash is used only for withdrawal due to high fee compare to DyDx\n     * @param _flashAmount Amount for flash loan\n     * @param _shouldRepay Flag indicating we want to leverage or deleverage\n     * @return Total amount we leverage or deleverage using flash loan\n     */\n    function _doFlashLoan(uint256 _flashAmount, bool _shouldRepay) internal virtual returns (uint256);\n\n    /**\n     * @notice Generate report for pools accounting and also send profit and any payback to pool.\n     * @dev Call claimAndSwapRewards to convert rewards to collateral before calling this function.\n     */\n    function _generateReport() internal returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        (, , , , uint256 _totalDebt, , , uint256 _debtRatio, ) = IVesperPool(pool).strategy(address(this));\n\n        // Invested collateral = supply - borrow\n        uint256 _investedCollateral = cToken.balanceOfUnderlying(address(this)) -\n            cToken.borrowBalanceStored(address(this));\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _totalCollateral = _investedCollateral + _collateralHere;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_collateralHere < _profitAndExcessDebt) {\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _investedCollateral);\n            if (_totalAmountToWithdraw > 0) {\n                _withdrawHere(_totalAmountToWithdraw);\n                _collateralHere = collateralToken.balanceOf(address(this));\n            }\n        }\n\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n\n        // Handle scenario if debtRatio is zero and some supply left.\n        // Remaining tokens are profit.\n        if (_debtRatio == 0) {\n            (uint256 _supply, uint256 _borrow) = getPosition();\n            if (_supply > 0 && _borrow == 0) {\n                // This will redeem all cTokens this strategy has\n                _redeemUnderlying(MAX_UINT_VALUE);\n                _profit += _supply;\n            }\n        }\n    }\n\n    /**\n     * @notice Get Collateral Factor\n     */\n    function _getCollateralFactor() internal view virtual returns (uint256 _collateralFactor) {\n        (, _collateralFactor, ) = comptroller.markets(address(cToken));\n        // Take 95% of collateralFactor to avoid any rounding issue.\n        _collateralFactor = (_collateralFactor * COLLATERAL_FACTOR_LIMIT) / MAX_BPS;\n    }\n\n    /**\n     * @dev Compound support ETH as collateral not WETH. So ETH strategy can override\n     * below functions and handle wrap/unwrap of WETH.\n     */\n    function _mint(uint256 _amount) internal virtual {\n        require(cToken.mint(_amount) == 0, \"supply-to-compound-failed\");\n    }\n\n    /**\n     * Deleverage: Reduce borrow to achieve safe position\n     * @param _maxDeleverage Reduce borrow by this amount\n     * @return _deleveragedAmount Amount we actually reduced\n     */\n    function _normalDeleverage(\n        uint256 _maxDeleverage,\n        uint256 _supply,\n        uint256 _borrow,\n        uint256 _collateralFactor\n    ) internal returns (uint256 _deleveragedAmount) {\n        uint256 _theoreticalSupply;\n\n        if (_collateralFactor > 0) {\n            // Calculate minimum supply required to support _borrow\n            _theoreticalSupply = (_borrow * 1e18) / _collateralFactor;\n        }\n\n        _deleveragedAmount = _supply - _theoreticalSupply;\n\n        if (_deleveragedAmount >= _borrow) {\n            _deleveragedAmount = _borrow;\n        }\n        if (_deleveragedAmount >= _maxDeleverage) {\n            _deleveragedAmount = _maxDeleverage;\n        }\n\n        _redeemUnderlying(_deleveragedAmount);\n        _repayBorrow(_deleveragedAmount);\n    }\n\n    /**\n     * Leverage: Borrow more\n     * @param _maxLeverage Max amount to borrow\n     * @return _leveragedAmount Amount we actually borrowed\n     */\n    function _normalLeverage(\n        uint256 _maxLeverage,\n        uint256 _supply,\n        uint256 _borrow,\n        uint256 _collateralFactor\n    ) internal returns (uint256 _leveragedAmount) {\n        // Calculate maximum we can borrow at current _supply\n        uint256 theoreticalBorrow = (_supply * _collateralFactor) / 1e18;\n\n        _leveragedAmount = theoreticalBorrow - _borrow;\n\n        if (_leveragedAmount >= _maxLeverage) {\n            _leveragedAmount = _maxLeverage;\n        }\n        _borrowCollateral(_leveragedAmount);\n        _mint(collateralToken.balanceOf(address(this)));\n    }\n\n    function _rebalance() internal virtual override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        (_profit, _loss, _payback) = _generateReport();\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _deposit();\n    }\n\n    function _redeemUnderlying(uint256 _amount) internal virtual {\n        if (_amount == MAX_UINT_VALUE) {\n            // Withdraw all cTokens\n            require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \"withdraw-from-compound-failed\");\n        } else {\n            // Withdraw underlying\n            require(cToken.redeemUnderlying(_amount) == 0, \"withdraw-from-compound-failed\");\n        }\n    }\n\n    function _repayBorrow(uint256 _amount) internal virtual {\n        require(cToken.repayBorrow(_amount) == 0, \"repay-to-compound-failed\");\n    }\n\n    /// @dev Withdraw collateral here.\n    function _withdrawHere(uint256 _amount) internal override {\n        (uint256 _position, bool _shouldRepay) = _calculateDesiredPosition(_amount, false);\n        if (_shouldRepay) {\n            // Do deleverage by flash loan\n            _position -= _doFlashLoan(_position, _shouldRepay);\n\n            // If we still have _position to deleverage do it via normal deleverage\n            uint256 i;\n            while (_position > 0 && i <= 10) {\n                unchecked {\n                    _position -= _adjustPosition(_position, true);\n                    i++;\n                }\n            }\n\n            (uint256 _supply, uint256 _borrow) = getPosition();\n            // If we are not able to deleverage enough\n            if (_position > 0) {\n                // Calculate redeemable at current borrow and supply.\n                uint256 _supplyToSupportBorrow;\n                if (maxBorrowRatio > 0) {\n                    _supplyToSupportBorrow = (_borrow * MAX_BPS) / maxBorrowRatio;\n                }\n                // Current supply minus supply required to support _borrow at _maxBorrowRatio\n                uint256 _redeemable = _supply - _supplyToSupportBorrow;\n                if (_amount > _redeemable) {\n                    _amount = _redeemable;\n                }\n            }\n            // Position is 0 and amount > supply due to deleverage\n            else if (_amount > _supply) {\n                _amount = _supply;\n            }\n        }\n        _redeemUnderlying(_amount);\n    }\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n\n    /**\n     * @notice Update upper and lower borrow ratio\n     * @dev It is possible to set 0 as _minBorrowRatio to not borrow anything\n     * @param _minBorrowRatio Minimum % we want to borrow\n     * @param _maxBorrowRatio Maximum % we want to borrow\n     */\n    function updateBorrowRatio(uint256 _minBorrowRatio, uint256 _maxBorrowRatio) external onlyGovernor {\n        // CollateralFactor is 1e18 based and borrow ratio is 1e4 based. Hence using 1e14 for conversion.\n        require(_maxBorrowRatio < (_getCollateralFactor() / 1e14), \"invalid-max-borrow-limit\");\n        require(_maxBorrowRatio > _minBorrowRatio, \"max-should-be-higher-than-min\");\n        emit UpdatedBorrowRatio(minBorrowRatio, _minBorrowRatio, maxBorrowRatio, _maxBorrowRatio);\n        minBorrowRatio = _minBorrowRatio;\n        maxBorrowRatio = _maxBorrowRatio;\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/CompoundVesperXy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\";\nimport \"./CompoundXy.sol\";\nimport \"../VesperRewards.sol\";\n\n/// @title Deposit Collateral in Compound and earn interest by depositing borrowed token in a Vesper Pool.\ncontract CompoundVesperXy is CompoundXy {\n    using SafeERC20 for IERC20;\n\n    // Destination Grow Pool for borrowed Token\n    IVesperPool public immutable vPool;\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowCToken,\n        address _vPool,\n        string memory _name\n    ) CompoundXy(_pool, _swapper, _comptroller, _rewardToken, _receiptToken, _borrowCToken, _name) {\n        require(address(IVesperPool(_vPool).token()) == borrowToken, \"invalid-grow-pool\");\n        vPool = IVesperPool(_vPool);\n    }\n\n    /// @notice Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool\n    function borrowBalance() external view returns (uint256) {\n        return IERC20(borrowToken).balanceOf(address(this)) + _getYTokensInProtocol();\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return super.isReservedToken(_token) || _token == address(vPool);\n    }\n\n    /// @notice After borrowing Y, deposit to Vesper Pool\n    function _afterBorrowY(uint256 _amount) internal override {\n        vPool.deposit(_amount);\n    }\n\n    function _approveToken(uint256 _amount) internal override {\n        super._approveToken(_amount);\n        IERC20(borrowToken).safeApprove(address(vPool), _amount);\n        VesperRewards._approveToken(vPool, swapper, _amount);\n    }\n\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\n    function _beforeRepayY(uint256 _amount) internal override {\n        _withdrawY(_amount);\n    }\n\n    /// @dev Claim Compound and VSP rewards and convert to collateral token.\n    function _claimAndSwapRewards() internal override {\n        // Claim and swap Compound rewards\n        CompoundXy._claimAndSwapRewards();\n        // Claim and swap rewards from Vesper\n        VesperRewards._claimAndSwapRewards(vPool, swapper, address(collateralToken));\n    }\n\n    function _getYTokensInProtocol() internal view override returns (uint256) {\n        return (vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18;\n    }\n\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\n    function _withdrawY(uint256 _amount) internal override {\n        uint256 _pricePerShare = vPool.pricePerShare();\n        uint256 _shares = (_amount * 1e18) / _pricePerShare;\n        _shares = _amount > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\n        uint256 _maxShares = vPool.balanceOf(address(this));\n        _shares = _shares > _maxShares ? _maxShares : _shares;\n        if (_shares > 0) {\n            vPool.withdraw(_shares);\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/CompoundVesperXyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./CompoundVesperXy.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit ETH in Compound and earn interest by depositing borrowed token in a Vesper Pool.\ncontract CompoundVesperXyETH is CompoundVesperXy {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowCToken,\n        address _vPool,\n        string memory _name\n    ) CompoundVesperXy(_pool, _swapper, _comptroller, _rewardToken, _receiptToken, _borrowCToken, _vPool, _name) {}\n\n    /// @dev Unwrap ETH and supply in Compound\n    function _mintX(uint256 _amount) internal override {\n        if (_amount > 0) {\n            TokenLike(WETH).withdraw(_amount);\n            supplyCToken.mint{value: _amount}();\n        }\n    }\n\n    /// @dev Withdraw ETH from Compound and Wrap those as WETH\n    function _redeemX(uint256 _amount) internal override {\n        super._redeemX(_amount);\n        TokenLike(WETH).deposit{value: address(this).balance}();\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/CompoundXy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/token/IToken.sol\";\nimport \"./CompoundXyCore.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\n\n/// @title This strategy will deposit collateral token in Compound and based on position it will borrow\n/// another token. Supply X borrow Y and keep borrowed amount here. It does handle rewards and handle\n/// wrap/unwrap of WETH as ETH is required to interact with Compound.\ncontract CompoundXy is CompoundXyCore {\n    using SafeERC20 for IERC20;\n\n    address public immutable rewardToken;\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address private constant CETH = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowCToken,\n        string memory _name\n    ) CompoundXyCore(_pool, _swapper, _comptroller, _receiptToken, _borrowCToken, _name) {\n        require(_rewardToken != address(0), \"rewardToken-address-is-zero\");\n        rewardToken = _rewardToken;\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        if (rewardToken != address(collateralToken)) {\n            IERC20(rewardToken).safeApprove(address(swapper), _amount);\n        }\n    }\n\n    /// @dev If borrowToken WETH then wrap borrowed ETH to get WETH\n    function _borrowY(uint256 _amount) internal override {\n        if (_amount > 0) {\n            require(borrowCToken.borrow(_amount) == 0, \"borrow-from-compound-failed\");\n            if (borrowToken == WETH) {\n                TokenLike(WETH).deposit{value: address(this).balance}();\n            }\n            _afterBorrowY(_amount);\n        }\n    }\n\n    /// @dev Claim rewardToken and convert rewardToken into collateral token.\n    /// Overriding _claimAndSwapRewards will help child contract otherwise override _claimReward.\n    function _claimAndSwapRewards() internal virtual override {\n        address[] memory _markets = new address[](2);\n        _markets[0] = address(supplyCToken);\n        _markets[1] = address(borrowCToken);\n        comptroller.claimComp(address(this), _markets);\n        uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n        if (_rewardAmount > 0 && rewardToken != address(collateralToken)) {\n            _safeSwapExactInput(rewardToken, address(collateralToken), _rewardAmount);\n        }\n    }\n\n    /// @dev Native Compound cETH doesn't has underlying method\n    function _getUnderlyingToken(address _cToken) internal view virtual override returns (address) {\n        if (_cToken == CETH) {\n            return WETH;\n        }\n        return CToken(_cToken).underlying();\n    }\n\n    /// @dev If borrowToken is WETH then unwrap WETH to get ETH and repay borrow using ETH.\n    function _repayY(uint256 _amount) internal override {\n        _beforeRepayY(_amount);\n        if (borrowToken == WETH) {\n            TokenLike(WETH).withdraw(_amount);\n            borrowCToken.repayBorrow{value: _amount}();\n        } else {\n            require(borrowCToken.repayBorrow(_amount) == 0, \"repay-to-compound-failed\");\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/CompoundXyCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../Strategy.sol\";\nimport \"../../interfaces/compound/ICompound.sol\";\n\n// solhint-disable no-empty-blocks\n\n/// @title This strategy will deposit collateral token in Compound and based on position it will\n/// borrow another token. Supply X borrow Y and keep borrowed amount here.\n/// It does not handle rewards and ETH as collateral\nabstract contract CompoundXyCore is Strategy {\n    using SafeERC20 for IERC20;\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint32 internal constant TWAP_PERIOD = 3_600;\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\n    address public borrowToken;\n\n    Comptroller public comptroller;\n\n    CToken public immutable supplyCToken;\n    CToken public immutable borrowCToken;\n\n    event UpdatedBorrowLimit(\n        uint256 previousMinBorrowLimit,\n        uint256 newMinBorrowLimit,\n        uint256 previousMaxBorrowLimit,\n        uint256 newMaxBorrowLimit\n    );\n\n    constructor(\n        address _pool,\n        address _swapper,\n        address _comptroller,\n        address _receiptToken,\n        address _borrowCToken,\n        string memory _name\n    ) Strategy(_pool, _swapper, _receiptToken) {\n        require(_receiptToken != address(0), \"cToken-address-is-zero\");\n        require(_comptroller != address(0), \"comptroller-address-is-zero\");\n\n        NAME = _name;\n\n        comptroller = Comptroller(_comptroller);\n        supplyCToken = CToken(_receiptToken);\n        borrowCToken = CToken(_borrowCToken);\n        borrowToken = _getUnderlyingToken(_borrowCToken);\n\n        address[] memory _cTokens = new address[](2);\n        _cTokens[0] = _receiptToken;\n        _cTokens[1] = _borrowCToken;\n        comptroller.enterMarkets(_cTokens);\n    }\n\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == address(supplyCToken) || _token == address(collateralToken) || _token == borrowToken;\n    }\n\n    /// @notice Returns total collateral locked in the strategy\n    function tvl() external view override returns (uint256) {\n        uint256 _collateralInCompound = (supplyCToken.balanceOf(address(this)) * supplyCToken.exchangeRateStored()) /\n            1e18;\n        return _collateralInCompound + collateralToken.balanceOf(address(this));\n    }\n\n    /// @dev Hook that executes after collateral borrow.\n    function _afterBorrowY(uint256 _amount) internal virtual {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        collateralToken.safeApprove(address(supplyCToken), _amount);\n        collateralToken.safeApprove(address(swapper), _amount);\n        IERC20(borrowToken).safeApprove(address(borrowCToken), _amount);\n        IERC20(borrowToken).safeApprove(address(swapper), _amount);\n    }\n\n    /**\n     * @notice Claim rewardToken and transfer to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal override {\n        require(IStrategy(_newStrategy).token() == address(supplyCToken), \"wrong-receipt-token\");\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), false);\n    }\n\n    /// @dev Hook that executes before repaying borrowed collateral\n    function _beforeRepayY(uint256 _amount) internal virtual {}\n\n    /// @dev Borrow Y from Compound. _afterBorrowY hook can be used to do anything with borrowed amount.\n    /// @dev Override to handle ETH\n    function _borrowY(uint256 _amount) internal virtual {\n        if (_amount > 0) {\n            require(borrowCToken.borrow(_amount) == 0, \"borrow-failed\");\n            _afterBorrowY(_amount);\n        }\n    }\n\n    /**\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\n     * @param _depositAmount deposit amount\n     * @param _withdrawAmount withdraw amount\n     * @return _borrowAmount borrow more amount\n     * @return _repayAmount repay amount to keep ltv within limit\n     */\n    function _calculateBorrowPosition(\n        uint256 _depositAmount,\n        uint256 _withdrawAmount\n    ) internal returns (uint256 _borrowAmount, uint256 _repayAmount) {\n        require(_depositAmount == 0 || _withdrawAmount == 0, \"all-input-gt-zero\");\n        uint256 _borrowed = borrowCToken.borrowBalanceCurrent(address(this));\n        // If maximum borrow limit set to 0 then repay borrow\n        if (maxBorrowLimit == 0) {\n            return (0, _borrowed);\n        }\n\n        uint256 _collateral = supplyCToken.balanceOfUnderlying(address(this));\n        uint256 _collateralFactor = _getCollateralFactor(address(supplyCToken));\n        // In case of withdraw, _amount can be greater than _supply\n        uint256 _hypotheticalCollateral;\n        if (_depositAmount > 0) {\n            _hypotheticalCollateral = _collateral + _depositAmount;\n        } else if (_collateral > _withdrawAmount) {\n            _hypotheticalCollateral = _collateral - _withdrawAmount;\n        }\n\n        // Calculate max borrow based on collateral factor\n        uint256 _maxCollateralForBorrow = (_hypotheticalCollateral * _collateralFactor) / 1e18;\n        Oracle _oracle = Oracle(comptroller.oracle());\n\n        // Compound \"UnderlyingPrice\" decimal = (30 + 6 - tokenDecimal)\n        // Rari \"UnderlyingPrice\" decimal = (30 + 6 - tokenDecimal)\n        // Iron \"UnderlyingPrice\" decimal = (18 + 8 - tokenDecimal)\n        uint256 _collateralTokenPrice = _oracle.getUnderlyingPrice(address(supplyCToken));\n        uint256 _borrowTokenPrice = _oracle.getUnderlyingPrice(address(borrowCToken));\n        // Max borrow limit in borrow token\n        uint256 _maxBorrowPossible = (_maxCollateralForBorrow * _collateralTokenPrice) / _borrowTokenPrice;\n        // If maxBorrow is zero, we should repay total amount of borrow\n        if (_maxBorrowPossible == 0) {\n            return (0, _borrowed);\n        }\n\n        // Safe buffer to avoid liquidation due to price variations.\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\n\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\n\n        // If current borrow is greater than max borrow, then repay to achieve safe position else borrow more.\n        if (_borrowed > _borrowUpperBound) {\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _repayAmount = _borrowed - _borrowLowerBound;\n        } else if (_borrowLowerBound > _borrowed) {\n            _borrowAmount = _borrowLowerBound - _borrowed;\n            uint256 _availableLiquidity = _getAvailableLiquidity();\n            if (_borrowAmount > _availableLiquidity) {\n                _borrowAmount = _availableLiquidity;\n            }\n        }\n    }\n\n    /// @dev Deposit collateral in Compound and adjust borrow position\n    function _deposit() internal {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\n        if (_repayAmount > 0) {\n            // Repay to maintain safe position\n            _repay(_repayAmount, false);\n            _mintX(collateralToken.balanceOf(address(this)));\n        } else {\n            // Happy path, mint more borrow more\n            _mintX(_collateralBalance);\n            _borrowY(_borrowAmount);\n        }\n    }\n\n    function _getAvailableLiquidity() internal view virtual returns (uint256) {\n        return borrowCToken.getCash();\n    }\n\n    /// @dev TraderJoe Compound fork has different markets API so allow this method to override.\n    function _getCollateralFactor(address _cToken) internal view virtual returns (uint256 _collateralFactor) {\n        (, _collateralFactor, ) = comptroller.markets(_cToken);\n    }\n\n    /// @dev Get underlying token. Compound handle ETH differently hence allow this method to override\n    function _getUnderlyingToken(address _cToken) internal view virtual returns (address) {\n        return CToken(_cToken).underlying();\n    }\n\n    function _getYTokensInProtocol() internal view virtual returns (uint256) {}\n\n    /// @dev Deposit collateral aka X in Compound. Override to handle ETH\n    function _mintX(uint256 _amount) internal virtual {\n        if (_amount > 0) {\n            require(supplyCToken.mint(_amount) == 0, \"supply-failed\");\n        }\n    }\n\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        uint256 _yTokensBorrowed = borrowCToken.borrowBalanceCurrent(address(this));\n        uint256 _yTokensHere = IERC20(borrowToken).balanceOf(address(this));\n        uint256 _yTokensInProtocol = _getYTokensInProtocol();\n        uint256 _totalYTokens = _yTokensHere + _yTokensInProtocol;\n\n        // _borrow increases every block. Convert collateral to borrowToken.\n        if (_yTokensBorrowed > _totalYTokens) {\n            _swapToBorrowToken(_yTokensBorrowed - _totalYTokens);\n        } else {\n            // When _yTokensInProtocol exceeds _yTokensBorrowed from Compound\n            // then we have profit from investing borrow tokens. _yTokensHere is profit.\n            if (_yTokensInProtocol > _yTokensBorrowed) {\n                _withdrawY(_yTokensInProtocol - _yTokensBorrowed);\n                _yTokensHere = IERC20(borrowToken).balanceOf(address(this));\n            }\n            if (_yTokensHere > 0) {\n                _safeSwapExactInput(borrowToken, address(collateralToken), _yTokensHere);\n            }\n        }\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _collateralInCompound = supplyCToken.balanceOfUnderlying(address(this));\n        uint256 _totalCollateral = _collateralInCompound + _collateralHere;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_collateralHere < _profitAndExcessDebt) {\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _collateralInCompound);\n            if (_totalAmountToWithdraw > 0) {\n                _withdrawHere(_totalAmountToWithdraw);\n                _collateralHere = collateralToken.balanceOf(address(this));\n            }\n        }\n\n        // Set actual payback first and then profit. Make sure _collateralHere >= _payback + profit.\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _deposit();\n    }\n\n    /// @dev Withdraw collateral aka X from Compound. Override to handle ETH\n    function _redeemX(uint256 _amount) internal virtual {\n        require(supplyCToken.redeemUnderlying(_amount) == 0, \"withdraw-failed\");\n    }\n\n    /**\n     * @dev Repay borrow amount\n     * @dev Claim rewardToken and convert to collateral. Swap collateral to borrowToken as needed.\n     * @param _repayAmount BorrowToken amount that we should repay to maintain safe position.\n     * @param _shouldClaimComp Flag indicating should we claim rewardToken and convert to collateral or not.\n     */\n    function _repay(uint256 _repayAmount, bool _shouldClaimComp) internal {\n        if (_repayAmount > 0) {\n            uint256 _totalYTokens = IERC20(borrowToken).balanceOf(address(this)) + _getYTokensInProtocol();\n            // Liability is more than what we have.\n            // To repay loan - convert all rewards to collateral, if asked, and redeem collateral(if needed).\n            // This scenario is rare and if system works okay it will/might happen during final repay only.\n            if (_repayAmount > _totalYTokens) {\n                if (_shouldClaimComp) {\n                    // Claim rewardToken and convert those to collateral.\n                    _claimAndSwapRewards();\n                }\n\n                uint256 _yTokensBorrowed = borrowCToken.borrowBalanceCurrent(address(this));\n                // For example this is final repay and 100 blocks has passed since last withdraw/rebalance,\n                // _yTokensBorrowed is increasing due to interest. Now if _repayAmount > _borrowBalanceHere is true\n                // _yTokensBorrowed > _borrowBalanceHere is also true.\n                // To maintain safe position we always try to keep _yTokensBorrowed = _borrowBalanceHere\n\n                // Swap collateral to borrowToken to repay borrow and also maintain safe position\n                // Here borrowToken amount needed is (_yTokensBorrowed - _borrowBalanceHere)\n                _swapToBorrowToken(_yTokensBorrowed - _totalYTokens);\n            }\n            _repayY(_repayAmount);\n        }\n    }\n\n    /// @dev Repay Y to Compound. _beforeRepayY hook can be used for pre-repay actions.\n    /// @dev Override this to handle ETH\n    function _repayY(uint256 _amount) internal virtual {\n        _beforeRepayY(_amount);\n        require(borrowCToken.repayBorrow(_amount) == 0, \"repay-failed\");\n    }\n\n    /**\n     * @dev Swap given token to borrowToken\n     * @param _shortOnBorrow Expected output of this swap\n     */\n    function _swapToBorrowToken(uint256 _shortOnBorrow) internal {\n        // Looking for _amountIn using fixed output amount\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, _shortOnBorrow);\n        if (_amountIn > 0) {\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\n            // If we do not have enough _from token to get expected output, either get\n            // some _from token or adjust expected output.\n            if (_amountIn > _collateralHere) {\n                // Redeem some collateral, so that we have enough collateral to get expected output\n                _redeemX(_amountIn - _collateralHere);\n            }\n            swapper.swapExactOutput(address(collateralToken), borrowToken, _shortOnBorrow, _amountIn, address(this));\n        }\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 _amount) internal override {\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, _amount);\n        _repay(_repayAmount, true);\n        // If _amount is very small and equivalent to 0 cToken then skip withdraw.\n        uint256 _expectedCToken = (_amount * 1e18) / supplyCToken.exchangeRateStored();\n        if (_expectedCToken > 0) {\n            // Get minimum of _amount and _available collateral and _availableLiquidity\n            uint256 _withdrawAmount = Math.min(\n                _amount,\n                Math.min(supplyCToken.balanceOfUnderlying(address(this)), supplyCToken.getCash())\n            );\n            _redeemX(_withdrawAmount);\n        }\n    }\n\n    function _withdrawY(uint256 _amount) internal virtual {}\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n    /**\n     * @notice Recover extra borrow tokens from strategy\n     * @dev If we get liquidation in Compound, we will have borrowToken sitting in strategy.\n     * This function allows to recover idle borrow token amount.\n     * @param _amountToRecover Amount of borrow token we want to recover in 1 call.\n     *      Set it 0 to recover all available borrow tokens\n     */\n    function recoverBorrowToken(uint256 _amountToRecover) external onlyKeeper {\n        uint256 _borrowBalanceHere = IERC20(borrowToken).balanceOf(address(this));\n        uint256 _borrowInCompound = borrowCToken.borrowBalanceStored(address(this));\n\n        if (_borrowBalanceHere > _borrowInCompound) {\n            uint256 _extraBorrowBalance = _borrowBalanceHere - _borrowInCompound;\n            uint256 _recoveryAmount = (_amountToRecover > 0 && _extraBorrowBalance > _amountToRecover)\n                ? _amountToRecover\n                : _extraBorrowBalance;\n            // Do swap and transfer\n            uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n            _safeSwapExactInput(borrowToken, address(collateralToken), _recoveryAmount);\n            collateralToken.transfer(pool, collateralToken.balanceOf(address(this)) - _collateralBefore);\n        }\n    }\n\n    /**\n     * @notice Repay all borrow amount and set min borrow limit to 0.\n     * @dev This action usually done when loss is detected in strategy.\n     * @dev 0 borrow limit make sure that any future rebalance do not borrow again.\n     */\n    function repayAll() external onlyKeeper {\n        _repay(borrowCToken.borrowBalanceCurrent(address(this)), true);\n        minBorrowLimit = 0;\n        maxBorrowLimit = 0;\n    }\n\n    /**\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\n     * @dev It is possible to set 0 as _minBorrowLimit to not borrow anything\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\n     */\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\n        require(_maxBorrowLimit < MAX_BPS, \"invalid-max-borrow-limit\");\n        // set _maxBorrowLimit and _minBorrowLimit to zero to disable borrow;\n        require(\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\n            \"max-should-be-higher-than-min\"\n        );\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\n        // To avoid liquidation due to price variations maxBorrowLimit is a collateral factor that is less than actual collateral factor of protocol\n        minBorrowLimit = _minBorrowLimit;\n        maxBorrowLimit = _maxBorrowLimit;\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/CompoundXyETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./CompoundXy.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit ETH/WETH in Compound and earn interest.\ncontract CompoundXyETH is CompoundXy {\n    constructor(\n        address _pool,\n        address _swapper,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowCToken,\n        string memory _name\n    ) CompoundXy(_pool, _swapper, _comptroller, _rewardToken, _receiptToken, _borrowCToken, _name) {}\n\n    /// @dev Unwrap ETH and supply in Compound\n    function _mintX(uint256 _amount) internal override {\n        if (_amount > 0) {\n            TokenLike(WETH).withdraw(_amount);\n            supplyCToken.mint{value: _amount}();\n        }\n    }\n\n    /// @dev Withdraw ETH from Compound and Wrap those as WETH\n    function _redeemX(uint256 _amount) internal override {\n        super._redeemX(_amount);\n        TokenLike(WETH).deposit{value: address(this).balance}();\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/optimism/Sonne.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../Compound.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title This strategy will deposit collateral token in Sonne and earn interest.\ncontract Sonne is Compound {\n    constructor(\n        address pool_,\n        address swapper_,\n        address comptroller_,\n        address rewardToken_,\n        address receiptToken_,\n        string memory name_\n    ) Compound(pool_, swapper_, comptroller_, rewardToken_, receiptToken_, name_) {}\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/optimism/SonneLeverage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/token/IToken.sol\";\nimport \"../CompoundLeverageBase.sol\";\nimport \"../../../interfaces/compound/IComptrollerMultiReward.sol\";\nimport \"../../AaveFlashLoanHelper.sol\";\n\n// solhint-disable no-empty-blocks\n\ncontract SonneLeverage is CompoundLeverageBase, AaveFlashLoanHelper {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _pool,\n        address _swapManager,\n        address _comptroller,\n        address _rewardToken,\n        address _aaveAddressesProvider,\n        address _receiptToken,\n        string memory _name\n    )\n        CompoundLeverageBase(_pool, _swapManager, _comptroller, _rewardToken, _receiptToken, _name)\n        AaveFlashLoanHelper(_aaveAddressesProvider)\n    {}\n\n    //solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        AaveFlashLoanHelper._approveToken(address(collateralToken), _amount);\n    }\n\n    /// @notice Claim comp\n    function _claimRewards() internal override returns (address, uint256) {\n        address[] memory _markets = new address[](1);\n        _markets[0] = address(cToken);\n        comptroller.claimComp(address(this), _markets);\n        return (rewardToken, IERC20(rewardToken).balanceOf(address(this)));\n    }\n\n    /**\n     * @dev Aave flash is used only for withdrawal due to fee\n     * @param _flashAmount Amount for flash loan\n     * @param _shouldRepay Flag indicating we want to leverage or deleverage\n     * @return Total amount we leverage or deleverage using flash loan\n     */\n    function _doFlashLoan(uint256 _flashAmount, bool _shouldRepay) internal override returns (uint256) {\n        uint256 _totalFlashAmount;\n\n        if (isAaveActive && _shouldRepay && _flashAmount > 0) {\n            bytes memory _data = abi.encode(_flashAmount, _shouldRepay);\n            _totalFlashAmount += _doAaveFlashLoan(address(collateralToken), _flashAmount, _data);\n        }\n        return _totalFlashAmount;\n    }\n\n    /**\n     * @notice This function will be called by flash loan\n     * @dev In case of borrow, DyDx is preferred as fee is so low that it does not effect\n     * our collateralRatio and liquidation risk.\n     */\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal override {\n        (uint256 _amount, bool _deficit) = abi.decode(_data, (uint256, bool));\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        require(_collateralHere >= _amount, \"FLASH_FAILED\"); // to stop malicious calls\n\n        //if in deficit we repay amount and then withdraw\n        if (_deficit) {\n            _repayBorrow(_amount);\n            //if we are withdrawing we take more to cover fee\n            _redeemUnderlying(_repayAmount);\n        } else {\n            _mint(_collateralHere);\n            //borrow more to cover fee\n            _borrowCollateral(_repayAmount);\n        }\n    }\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n\n    function updateAaveStatus(bool _status) external onlyGovernor {\n        _updateAaveStatus(_status);\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/optimism/SonneVesperXy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\";\nimport \"./../CompoundVesperXy.sol\";\nimport \"../../VesperRewards.sol\";\n\n// solhint-disable no-empty-blocks\n/// @title Deposit Collateral in Sonne and earn interest by depositing borrowed token in a Vesper Pool.\ncontract SonneVesperXy is CompoundVesperXy {\n    constructor(\n        address _pool,\n        address _swapper,\n        address _comptroller,\n        address _rewardToken,\n        address _receiptToken,\n        address _borrowCToken,\n        address _vPool,\n        string memory _name\n    ) CompoundVesperXy(_pool, _swapper, _comptroller, _rewardToken, _receiptToken, _borrowCToken, _vPool, _name) {}\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/v3/CompoundV3VesperXy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\";\nimport \"../../VesperRewards.sol\";\nimport \"./CompoundV3Xy.sol\";\n\n/// @title Deposit Collateral in Compound and earn interest by depositing borrowed token in a Vesper Pool.\ncontract CompoundV3VesperXy is CompoundV3Xy {\n    using SafeERC20 for IERC20;\n\n    // Destination Grow Pool for borrowed Token\n    IVesperPool public immutable vPool;\n\n    constructor(\n        address pool_,\n        address swapper_,\n        address compRewards_,\n        address rewardToken_,\n        address comet_,\n        address borrowToken_,\n        address vPool_,\n        string memory name_\n    ) CompoundV3Xy(pool_, swapper_, compRewards_, rewardToken_, comet_, borrowToken_, name_) {\n        require(address(IVesperPool(vPool_).token()) == borrowToken, \"invalid-grow-pool\");\n        vPool = IVesperPool(vPool_);\n    }\n\n    /// @notice Gets amount of borrowed Y collateral in strategy + Y collateral amount deposited in vPool\n    function borrowBalance() external view returns (uint256) {\n        return IERC20(borrowToken).balanceOf(address(this)) + _getYTokensInProtocol();\n    }\n\n    function isReservedToken(address token_) public view virtual override returns (bool) {\n        return super.isReservedToken(token_) || token_ == address(vPool);\n    }\n\n    /// @notice After borrowing Y, deposit to Vesper Pool\n    function _afterBorrowY(uint256 amount_) internal override {\n        vPool.deposit(amount_);\n    }\n\n    function _approveToken(uint256 amount_) internal override {\n        super._approveToken(amount_);\n        IERC20(borrowToken).safeApprove(address(vPool), amount_);\n        VesperRewards._approveToken(vPool, swapper, amount_);\n    }\n\n    /// @dev Claim Compound and VSP rewards and convert to collateral token.\n    function _claimAndSwapRewards() internal override {\n        // Claim and swap Compound rewards\n        CompoundV3Xy._claimAndSwapRewards();\n        // Claim and swap rewards from Vesper\n        VesperRewards._claimAndSwapRewards(vPool, swapper, address(collateralToken));\n    }\n\n    function _getYTokensInProtocol() internal view override returns (uint256) {\n        return (vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18;\n    }\n\n    /// @notice Withdraw _shares proportional to collateral _amount from vPool\n    function _withdrawY(uint256 amount_) internal override {\n        uint256 _pricePerShare = vPool.pricePerShare();\n        uint256 _shares = (amount_ * 1e18) / _pricePerShare;\n        _shares = amount_ > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\n        uint256 _maxShares = vPool.balanceOf(address(this));\n        _shares = _shares > _maxShares ? _maxShares : _shares;\n        if (_shares > 0) {\n            vPool.withdraw(_shares);\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/compound/v3/CompoundV3Xy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../../Strategy.sol\";\nimport \"../../../interfaces/compound/ICompoundV3.sol\";\n\n// solhint-disable no-empty-blocks\n\n/// @title This strategy will deposit collateral token in Compound V3 and based on position it will\n/// borrow based token. Supply X borrow Y and keep borrowed amount here.\n/// It does not handle ETH as collateral\ncontract CompoundV3Xy is Strategy {\n    using SafeERC20 for IERC20;\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\n\n    IRewards public immutable compRewards;\n    address public immutable rewardToken;\n    IComet public immutable comet;\n    address public immutable borrowToken;\n\n    event UpdatedBorrowLimit(\n        uint256 previousMinBorrowLimit,\n        uint256 newMinBorrowLimit,\n        uint256 previousMaxBorrowLimit,\n        uint256 newMaxBorrowLimit\n    );\n\n    constructor(\n        address pool_,\n        address swapper_,\n        address compRewards_,\n        address rewardToken_,\n        address comet_,\n        address borrowToken_,\n        string memory name_\n    ) Strategy(pool_, swapper_, comet_) {\n        require(compRewards_ != address(0), \"rewards-address-is-zero\");\n        require(comet_ != address(0), \"comet-address-is-zero\");\n        require(rewardToken_ != address(0), \"reward-token-address-is-zero\");\n\n        compRewards = IRewards(compRewards_);\n        rewardToken = rewardToken_;\n        comet = IComet(comet_);\n        borrowToken = borrowToken_;\n        NAME = name_;\n    }\n\n    function isReservedToken(address token_) public view virtual override returns (bool) {\n        return token_ == address(comet) || token_ == address(collateralToken) || token_ == borrowToken;\n    }\n\n    /// @notice Returns total collateral locked in the strategy\n    function tvl() external view override returns (uint256) {\n        return\n            comet.collateralBalanceOf(address(this), address(collateralToken)) +\n            collateralToken.balanceOf(address(this));\n    }\n\n    /// @dev Hook that executes after collateral borrow.\n    function _afterBorrowY(uint256 amount_) internal virtual {}\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 amount_) internal virtual override {\n        super._approveToken(amount_);\n        address _swapper = address(swapper);\n        collateralToken.safeApprove(address(comet), amount_);\n        collateralToken.safeApprove(_swapper, amount_);\n        IERC20(borrowToken).safeApprove(address(comet), amount_);\n        IERC20(borrowToken).safeApprove(_swapper, amount_);\n        IERC20(rewardToken).safeApprove(_swapper, amount_);\n    }\n\n    /**\n     * @notice Claim rewardToken and transfer to new strategy\n     * @param newStrategy_ Address of new strategy.\n     */\n    function _beforeMigration(address newStrategy_) internal override {\n        require(IStrategy(newStrategy_).token() == address(comet), \"wrong-receipt-token\");\n        _repay(comet.borrowBalanceOf(address(this)), false);\n        _withdrawHere(comet.collateralBalanceOf(address(this), address(collateralToken)));\n    }\n\n    /// @dev Borrow Y from Compound. _afterBorrowY hook can be used to do anything with borrowed amount.\n    /// @dev Override to handle ETH\n    function _borrowY(uint256 amount_) internal virtual {\n        if (amount_ > 0) {\n            comet.withdraw(borrowToken, amount_);\n            _afterBorrowY(amount_);\n        }\n    }\n\n    /**\n     * @notice Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\n     * @param depositAmount_ deposit amount\n     * @param withdrawAmount_ withdraw amount\n     * @return _borrowAmount borrow more amount\n     * @return _repayAmount repay amount to keep ltv within limits\n     */\n    function _calculateBorrowPosition(\n        uint256 depositAmount_,\n        uint256 withdrawAmount_\n    ) internal view returns (uint256 _borrowAmount, uint256 _repayAmount) {\n        require(depositAmount_ == 0 || withdrawAmount_ == 0, \"all-input-gt-zero\");\n        uint256 _borrowed = comet.borrowBalanceOf(address(this));\n        // If maximum borrow limit set to 0 then repay borrow\n        if (maxBorrowLimit == 0) {\n            return (0, _borrowed);\n        }\n\n        uint256 _collateralSupplied = comet.collateralBalanceOf(address(this), address(collateralToken));\n\n        // In case of withdraw, withdrawAmount_ may be greater than _collateralSupplied\n        uint256 _hypotheticalCollateral;\n        if (depositAmount_ > 0) {\n            _hypotheticalCollateral = _collateralSupplied + depositAmount_;\n        } else if (_collateralSupplied > withdrawAmount_) {\n            _hypotheticalCollateral = _collateralSupplied - withdrawAmount_;\n        }\n\n        IComet.AssetInfo memory _collateralInfo = comet.getAssetInfoByAddress(address(collateralToken));\n\n        // Compound V3 is using chainlink for price feed. Feed has 8 decimals\n        uint256 _collateralTokenPrice = comet.getPrice(_collateralInfo.priceFeed);\n        uint256 _borrowTokenPrice = comet.getPrice(comet.baseTokenPriceFeed());\n\n        // Calculate max borrow based on collateral factor. CF is 18 decimal based\n        uint256 _collateralForBorrowInUSD = (_hypotheticalCollateral *\n            _collateralTokenPrice *\n            _collateralInfo.borrowCollateralFactor) /\n            (1e18 * 10 ** IERC20Metadata(address(collateralToken)).decimals());\n\n        // Max borrow limit in borrow token\n        uint256 _maxBorrowPossible = (_collateralForBorrowInUSD * 10 ** IERC20Metadata(borrowToken).decimals()) /\n            _borrowTokenPrice;\n        // If maxBorrow is zero, we should repay total amount of borrow\n        if (_maxBorrowPossible == 0) {\n            return (0, _borrowed);\n        }\n\n        // Safe buffer to avoid liquidation due to price variations.\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\n\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\n\n        // If current borrow is greater than max borrow, then repay to achieve safe position else borrow more.\n        if (_borrowed > _borrowUpperBound) {\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _repayAmount = _borrowed - _borrowLowerBound;\n        } else if (_borrowLowerBound > _borrowed) {\n            _borrowAmount = _borrowLowerBound - _borrowed;\n            uint256 _availableLiquidity = _getAvailableLiquidity();\n            if (_borrowAmount > _availableLiquidity) {\n                _borrowAmount = _availableLiquidity;\n            }\n        }\n    }\n\n    /// @dev Claim COMP and convert COMP into given token.\n    /// Overriding _claimAndSwapRewards will help child contract otherwise override _claimReward.\n    function _claimAndSwapRewards() internal virtual override {\n        compRewards.claim(address(comet), address(this), true);\n        uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\n        if (_rewardAmount > 0) {\n            _safeSwapExactInput(rewardToken, address(collateralToken), _rewardAmount);\n        }\n    }\n\n    /// @dev Deposit collateral in Compound V3 and adjust borrow position\n    function _deposit() internal {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\n        if (_repayAmount > 0) {\n            // Repay to maintain safe position\n            _repay(_repayAmount, false);\n            _mintX(collateralToken.balanceOf(address(this)));\n        } else {\n            // Happy path, mint more borrow more\n            _mintX(_collateralBalance);\n            _borrowY(_borrowAmount);\n        }\n    }\n\n    function _getAvailableLiquidity() internal view virtual returns (uint256) {\n        uint256 _totalSupply = comet.totalSupply();\n        uint256 _totalBorrow = comet.totalBorrow();\n        return _totalSupply > _totalBorrow ? _totalSupply - _totalBorrow : 0;\n    }\n\n    function _getYTokensInProtocol() internal view virtual returns (uint256) {}\n\n    /// @dev Deposit collateral aka X in Compound. Override to handle ETH\n    function _mintX(uint256 _amount) internal virtual {\n        if (_amount > 0) {\n            comet.supply(address(collateralToken), _amount);\n        }\n    }\n\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        uint256 _yTokensBorrowed = comet.borrowBalanceOf(address(this));\n        uint256 _yTokensHere = IERC20(borrowToken).balanceOf(address(this));\n        uint256 _yTokensInProtocol = _getYTokensInProtocol();\n        uint256 _totalYTokens = _yTokensHere + _yTokensInProtocol;\n\n        // _borrow increases every block. Convert collateral to borrowToken.\n        if (_yTokensBorrowed > _totalYTokens) {\n            _swapToBorrowToken(_yTokensBorrowed - _totalYTokens);\n        } else {\n            // When _yTokensInProtocol exceeds _yTokensBorrowed from Compound\n            // then we have profit from investing borrow tokens. _yTokensHere is profit.\n            if (_yTokensInProtocol > _yTokensBorrowed) {\n                _withdrawY(_yTokensInProtocol - _yTokensBorrowed);\n                _yTokensHere = IERC20(borrowToken).balanceOf(address(this));\n            }\n            if (_yTokensHere > 0) {\n                _safeSwapExactInput(borrowToken, address(collateralToken), _yTokensHere);\n            }\n        }\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _collateralInCompound = comet.collateralBalanceOf(address(this), address(collateralToken));\n        uint256 _totalCollateral = _collateralInCompound + _collateralHere;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_collateralHere < _profitAndExcessDebt) {\n            uint256 _totalAmountToWithdraw = _profitAndExcessDebt - _collateralHere;\n            if (_totalAmountToWithdraw > 0) {\n                _withdrawHere(_totalAmountToWithdraw);\n                _collateralHere = collateralToken.balanceOf(address(this));\n            }\n        }\n\n        // Set actual payback first and then profit. Make sure _collateralHere >= _payback + profit.\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _deposit();\n    }\n\n    /**\n     * @dev Repay borrow amount\n     * @dev Claim rewardToken and convert to collateral. Swap collateral to borrowToken as needed.\n     * @param _repayAmount BorrowToken amount that we should repay to maintain safe position.\n     * @param _shouldClaimComp Flag indicating should we claim rewardToken and convert to collateral or not.\n     */\n    function _repay(uint256 _repayAmount, bool _shouldClaimComp) internal {\n        if (_repayAmount > 0) {\n            uint256 _totalYTokens = IERC20(borrowToken).balanceOf(address(this)) + _getYTokensInProtocol();\n            // Liability is more than what we have.\n            // To repay loan - convert all rewards to collateral, if asked, and redeem collateral(if needed).\n            // This scenario is rare and if system works okay it will/might happen during final repay only.\n            if (_repayAmount > _totalYTokens) {\n                if (_shouldClaimComp) {\n                    // Claim rewardToken and convert those to collateral.\n                    _claimAndSwapRewards();\n                }\n\n                uint256 _yTokensBorrowed = comet.borrowBalanceOf(address(this));\n                // For example this is final repay and 100 blocks has passed since last withdraw/rebalance,\n                // _yTokensBorrowed is increasing due to interest. Now if _repayAmount > _borrowBalanceHere is true\n                // _yTokensBorrowed > _borrowBalanceHere is also true.\n                // To maintain safe position we always try to keep _yTokensBorrowed = _borrowBalanceHere\n\n                // Swap collateral to borrowToken to repay borrow and also maintain safe position\n                // Here borrowToken amount needed is (_yTokensBorrowed - _borrowBalanceHere)\n                _swapToBorrowToken(_yTokensBorrowed - _totalYTokens);\n            }\n            _repayY(_repayAmount);\n        }\n    }\n\n    /// @dev Repay Y to Compound V3. Withdraw Y from end protocol if applicable.\n    /// @dev Override this to handle ETH\n    function _repayY(uint256 amount_) internal virtual {\n        _withdrawY(amount_);\n        comet.supply(borrowToken, amount_);\n    }\n\n    /**\n     * @dev Swap given token to borrowToken\n     * @param shortOnBorrow_ Expected output of this swap\n     */\n    function _swapToBorrowToken(uint256 shortOnBorrow_) internal {\n        // Looking for _amountIn using fixed output amount\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, shortOnBorrow_);\n        if (_amountIn > 0) {\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\n            // If we do not have enough _from token to get expected output, either get\n            // some _from token or adjust expected output.\n            if (_amountIn > _collateralHere) {\n                // Redeem some collateral, so that we have enough collateral to get expected output\n                comet.withdraw(address(collateralToken), _amountIn - _collateralHere);\n            }\n            swapper.swapExactOutput(address(collateralToken), borrowToken, shortOnBorrow_, _amountIn, address(this));\n        }\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 amount_) internal override {\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, amount_);\n        _repay(_repayAmount, true);\n\n        // Get minimum of amount_ and collateral supplied and _availableLiquidity of collateral\n        uint256 _withdrawAmount = Math.min(\n            amount_,\n            Math.min(\n                comet.collateralBalanceOf(address(this), address(collateralToken)),\n                comet.totalsCollateral(address(collateralToken)).totalSupplyAsset\n            )\n        );\n        comet.withdraw(address(collateralToken), _withdrawAmount);\n    }\n\n    function _withdrawY(uint256 _amount) internal virtual {}\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n    /**\n     * @notice Recover extra borrow tokens from strategy\n     * @dev If we get liquidation in Compound, we will have borrowToken sitting in strategy.\n     * This function allows to recover idle borrow token amount.\n     * @param _amountToRecover Amount of borrow token we want to recover in 1 call.\n     *      Set it 0 to recover all available borrow tokens\n     */\n    function recoverBorrowToken(uint256 _amountToRecover) external onlyKeeper {\n        uint256 _borrowBalanceHere = IERC20(borrowToken).balanceOf(address(this));\n        uint256 _borrowInCompound = comet.borrowBalanceOf(address(this));\n\n        if (_borrowBalanceHere > _borrowInCompound) {\n            uint256 _extraBorrowBalance = _borrowBalanceHere - _borrowInCompound;\n            uint256 _recoveryAmount = (_amountToRecover > 0 && _extraBorrowBalance > _amountToRecover)\n                ? _amountToRecover\n                : _extraBorrowBalance;\n            // Do swap and transfer\n            uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n            _safeSwapExactInput(borrowToken, address(collateralToken), _recoveryAmount);\n            collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)) - _collateralBefore);\n        }\n    }\n\n    /**\n     * @notice Repay all borrow amount and set min borrow limit to 0.\n     * @dev This action usually done when loss is detected in strategy.\n     * @dev 0 borrow limit make sure that any future rebalance do not borrow again.\n     */\n    function repayAll() external onlyKeeper {\n        _repay(comet.borrowBalanceOf(address(this)), true);\n        minBorrowLimit = 0;\n        maxBorrowLimit = 0;\n    }\n\n    /**\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\n     * @dev It is possible to set 0 as _minBorrowLimit to not borrow anything\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\n     */\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\n        require(_maxBorrowLimit < MAX_BPS, \"invalid-max-borrow-limit\");\n        // set _maxBorrowLimit and _minBorrowLimit to zero to disable borrow;\n        require(\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\n            \"max-should-be-higher-than-min\"\n        );\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\n        // To avoid liquidation due to price variations maxBorrowLimit is a collateral factor that is less than actual collateral factor of protocol\n        minBorrowLimit = _minBorrowLimit;\n        maxBorrowLimit = _maxBorrowLimit;\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/convex/Convex.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/convex/IConvexForCurve.sol\";\nimport \"../../strategies/curve/CurveBase.sol\";\n\n// Convex Strategies common variables and helper functions\ncontract Convex is CurveBase {\n    using SafeERC20 for IERC20;\n\n    address public constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\n    IConvex public constant BOOSTER = IConvex(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\n\n    Rewards public immutable cvxCrvRewards;\n    uint256 public immutable convexPoolId;\n\n    struct ClaimableRewardInfo {\n        address token;\n        uint256 amount;\n    }\n\n    constructor(\n        address pool_,\n        address crvPool_,\n        PoolType curvePoolType_,\n        address depositZap_,\n        address crvToken_,\n        uint256 crvSlippage_,\n        address masterOracle_,\n        address swapper_,\n        uint256 collateralIdx_,\n        uint256 convexPoolId_,\n        string memory name_\n    )\n        CurveBase(\n            pool_,\n            crvPool_,\n            curvePoolType_,\n            depositZap_,\n            crvToken_,\n            crvSlippage_,\n            masterOracle_,\n            swapper_,\n            collateralIdx_,\n            name_\n        )\n    {\n        (address _lp, , , address _reward, , ) = BOOSTER.poolInfo(convexPoolId_);\n        require(_lp == address(crvLp), \"incorrect-lp-token\");\n        cvxCrvRewards = Rewards(_reward);\n        convexPoolId = convexPoolId_;\n        rewardTokens = _getRewardTokens();\n    }\n\n    function lpBalanceStaked() public view override returns (uint256 _total) {\n        _total = cvxCrvRewards.balanceOf(address(this));\n    }\n\n    function _approveToken(uint256 amount_) internal virtual override {\n        super._approveToken(amount_);\n        crvLp.safeApprove(address(BOOSTER), amount_);\n    }\n\n    /// @dev Return values are not being used hence returning 0\n    function _claimRewards() internal override returns (address, uint256) {\n        require(cvxCrvRewards.getReward(address(this), true), \"reward-claim-failed\");\n        return (address(0), 0);\n    }\n\n    /**\n     * @notice Add reward tokens\n     * The Convex pools have CRV and CVX as base rewards and may have others tokens as extra rewards\n     * In some cases, CVX is also added as extra reward, reason why we have to ensure to not add it twice\n     * @return _rewardTokens The array of reward tokens (both base and extra rewards)\n     */\n    function _getRewardTokens() internal view override returns (address[] memory _rewardTokens) {\n        uint256 _extraRewardCount;\n        uint256 _length = cvxCrvRewards.extraRewardsLength();\n\n        for (uint256 i; i < _length; i++) {\n            address _rewardToken = Rewards(cvxCrvRewards.extraRewards(i)).rewardToken();\n            // Some pool has CVX as extra rewards but other do not. CVX still reward token\n            if (_rewardToken != CRV && _rewardToken != CVX) {\n                _extraRewardCount++;\n            }\n        }\n\n        _rewardTokens = new address[](_extraRewardCount + 2);\n        _rewardTokens[0] = CRV;\n        _rewardTokens[1] = CVX;\n        uint256 _nextIdx = 2;\n\n        for (uint256 i; i < _length; i++) {\n            address _rewardToken = Rewards(cvxCrvRewards.extraRewards(i)).rewardToken();\n            // CRV and CVX already added in array\n            if (_rewardToken != CRV && _rewardToken != CVX) {\n                _rewardTokens[_nextIdx++] = _rewardToken;\n            }\n        }\n    }\n\n    function _stakeAllLp() internal virtual override {\n        uint256 _balance = crvLp.balanceOf(address(this));\n        if (_balance > 0) {\n            require(BOOSTER.deposit(convexPoolId, _balance, true), \"booster-deposit-failed\");\n        }\n    }\n\n    /**\n     * @notice Unstake all LPs\n     * @dev This function is called by `_beforeMigration()` hook\n     * Should claim rewards that will be swept later\n     */\n    function _unstakeAllLp() internal override {\n        cvxCrvRewards.withdrawAllAndUnwrap(true);\n    }\n\n    /**\n     * @notice Unstake LPs\n     * Don't claiming rewards because `_claimRewards()` already does that\n     */\n    function _unstakeLp(uint256 _amount) internal override {\n        if (_amount > 0) {\n            require(cvxCrvRewards.withdrawAndUnwrap(_amount, false), \"withdraw-and-unwrap-failed\");\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/convex/ConvexForFrax.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/convex/IConvexForFrax.sol\";\nimport \"../../strategies/curve/CurveBase.sol\";\n\n/**\n * @title Convex for Frax strategy\n * @dev This strategy only supports Curve deposits\n */\ncontract ConvexForFrax is CurveBase {\n    using SafeERC20 for IERC20;\n\n    IVaultRegistry public constant VAULT_REGISTRY = IVaultRegistry(0x569f5B842B5006eC17Be02B8b94510BA8e79FbCa);\n    IConvexFraxPoolRegistry public constant POOL_REGISTRY =\n        IConvexFraxPoolRegistry(0x41a5881c17185383e19Df6FA4EC158a6F4851A69);\n    address public constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\n    address public constant FXS = 0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0;\n\n    /// @notice Frax Staking contract\n    IFraxFarmERC20 public immutable fraxStaking;\n\n    /// @notice Convex vault to interact with FRAX staking\n    IStakingProxyConvex public immutable vault;\n\n    /// @notice Convex Rewards contract\n    IMultiReward public immutable rewards;\n\n    /// @notice FRAX staking period\n    /// @dev Uses the `lock_time_min` by default. Use `updateLockPeriod` to update it if needed.\n    uint256 public lockPeriod;\n\n    /// @notice Staking position ID\n    bytes32 public kekId;\n\n    /// @notice Next time where the withdraw will be available\n    uint256 public unlockTime;\n\n    /// @notice Emitted when `unlockTime` is updated\n    event UnlockTimeUpdated(uint256 oldUnlockTime, uint256 newUnlockTime);\n\n    constructor(\n        address pool_,\n        address crvPool_,\n        PoolType curvePoolType_,\n        address depositZap_,\n        address crvToken_,\n        uint256 crvSlippage_,\n        address masterOracle_,\n        address swapper_,\n        uint256 collateralIdx_,\n        uint256 convexPoolId_,\n        string memory name_\n    )\n        CurveBase(\n            pool_,\n            crvPool_,\n            curvePoolType_,\n            depositZap_,\n            crvToken_,\n            crvSlippage_,\n            masterOracle_,\n            swapper_,\n            collateralIdx_,\n            name_\n        )\n    {\n        (, address _stakingAddress, , address _reward, ) = POOL_REGISTRY.poolInfo(convexPoolId_);\n        rewards = IMultiReward(_reward);\n        vault = IStakingProxyConvex(VAULT_REGISTRY.createVault(convexPoolId_));\n        require(vault.curveLpToken() == address(crvLp), \"incorrect-lp-token\");\n        fraxStaking = IFraxFarmERC20(_stakingAddress);\n        lockPeriod = fraxStaking.lock_time_min();\n        rewardTokens = _getRewardTokens();\n    }\n\n    function lpBalanceStaked() public view override returns (uint256 _total) {\n        // Note: No need to specify which position here because we'll always have one open position at the same time\n        // because of the open position is deleted when `vault.withdrawLockedAndUnwrap(kekId)` is called\n        _total = fraxStaking.lockedLiquidityOf(address(vault));\n    }\n\n    function _approveToken(uint256 amount_) internal virtual override {\n        super._approveToken(amount_);\n        crvLp.safeApprove(address(vault), amount_);\n    }\n\n    /// @dev Return values are not being used hence returning 0\n    function _claimRewards() internal override returns (address, uint256) {\n        // solhint-disable-next-line no-empty-blocks\n        try vault.getReward() {} catch {\n            // It may fail if reward collection is paused on FRAX side\n            // See more: https://github.com/convex-eth/frax-cvx-platform/blob/01855f4f82729b49cbed0b5fab37bdefe9fdb736/contracts/contracts/StakingProxyConvex.sol#L222-L225\n            vault.getReward(false);\n        }\n        return (address(0), 0);\n    }\n\n    /// @notice Get reward tokens\n    function _getRewardTokens() internal view override returns (address[] memory _rewardTokens) {\n        uint256 _extraRewardCount;\n        uint256 _length = rewards.rewardTokenLength();\n\n        for (uint256 i; i < _length; i++) {\n            address _rewardToken = rewards.rewardTokens(i);\n            // Some pool has CVX as extra rewards but other do not. CVX still reward token\n            if (_rewardToken != CRV && _rewardToken != CVX && _rewardToken != FXS) {\n                _extraRewardCount++;\n            }\n        }\n\n        _rewardTokens = new address[](_extraRewardCount + 3);\n        _rewardTokens[0] = CRV;\n        _rewardTokens[1] = CVX;\n        _rewardTokens[2] = FXS;\n        uint256 _nextIdx = 3;\n\n        for (uint256 i; i < _length; i++) {\n            address _rewardToken = rewards.rewardTokens(i);\n            // CRV and CVX already added in array\n            if (_rewardToken != CRV && _rewardToken != CVX && _rewardToken != FXS) {\n                _rewardTokens[_nextIdx++] = _rewardToken;\n            }\n        }\n    }\n\n    /**\n     * @notice Stake Curve-LP token\n     * @dev Stake to the current position if there is any\n     */\n    function _stakeAllLp() internal virtual override {\n        uint256 _balance = crvLp.balanceOf(address(this));\n        if (_balance > 0) {\n            if (kekId != bytes32(0)) {\n                // if there is an active position, lock more\n                vault.lockAdditionalCurveLp(kekId, _balance);\n            } else {\n                // otherwise create a new position\n                kekId = vault.stakeLockedCurveLp(_balance, lockPeriod);\n                unlockTime = block.timestamp + lockPeriod;\n            }\n        }\n    }\n\n    /**\n     * @notice Unstake all LPs\n     * @dev This function is called by `_beforeMigration()` hook\n     * @dev `withdrawLockedAndUnwrap` destroys current position\n     * Should claim rewards that will be swept later\n     */\n    function _unstakeAllLp() internal override {\n        require(block.timestamp >= unlockTime, \"unlock-time-didnt-pass\");\n        vault.withdrawLockedAndUnwrap(kekId);\n        kekId = 0x0;\n    }\n\n    /**\n     * @notice Unstake LPs\n     * @dev Unstake all because Convex-FRAX doesn't support partial unlocks\n     */\n    function _unstakeLp(uint256 _amount) internal override {\n        if (_amount > 0) {\n            _unstakeAllLp();\n        }\n    }\n\n    /// @notice Update `lockPeriod` param\n    /// @dev To be used if the `lock_time_min` value changes or we want to increase it\n    function updateLockPeriod(uint256 newLockPeriod_) external onlyGovernor {\n        require(newLockPeriod_ >= fraxStaking.lock_time_min(), \"period-lt-min\");\n        emit UnlockTimeUpdated(lockPeriod, newLockPeriod_);\n        lockPeriod = newLockPeriod_;\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/curve/Curve.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./CurveBase.sol\";\n\n/// @title This strategy will deposit collateral token in a Curve Pool and earn interest.\n// solhint-disable no-empty-blocks\ncontract Curve is CurveBase {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address pool_,\n        address crvPool_,\n        CurveBase.PoolType curvePoolType_,\n        address depositZap_,\n        address crvToken_,\n        uint256 crvSlippage_,\n        address masterOracle_,\n        address swapper_,\n        uint256 collateralIdx_,\n        string memory name_\n    )\n        CurveBase(\n            pool_,\n            crvPool_,\n            curvePoolType_,\n            depositZap_,\n            crvToken_,\n            crvSlippage_,\n            masterOracle_,\n            swapper_,\n            collateralIdx_,\n            name_\n        )\n    {\n        rewardTokens = _getRewardTokens();\n    }\n\n    /**\n     * @dev Prepare rewardToken array\n     * @return _rewardTokens The array of reward tokens (both base and extra rewards)\n     */\n    function _getRewardTokens() internal view virtual override returns (address[] memory _rewardTokens) {\n        _rewardTokens = new address[](1);\n        _rewardTokens[0] = CRV;\n\n        // If there is no gauge, CRV only\n        if (address(crvGauge) == address(0)) {\n            return _rewardTokens;\n        }\n\n        // If LiquidityGaugeReward, `rewarded_token` only\n        try ILiquidityGaugeReward(address(crvGauge)).rewarded_token() returns (address _rewardToken) {\n            _rewardTokens = new address[](2);\n            _rewardTokens[0] = CRV;\n            _rewardTokens[1] = _rewardToken;\n            return _rewardTokens;\n        } catch {}\n\n        // If LiquidityGaugeV2 or LiquidityGaugeV3, CRV + extra reward tokens\n        try ILiquidityGaugeV2(address(crvGauge)).reward_tokens(0) returns (address _rewardToken) {\n            // If no extra reward token, CRV only\n            if (_rewardToken == address(0)) {\n                return _rewardTokens;\n            }\n\n            try ILiquidityGaugeV2(address(crvGauge)).reward_count() returns (uint256 _len) {\n                _rewardTokens = new address[](1 + _len);\n                _rewardTokens[0] = _rewardToken;\n                for (uint256 i = 1; i < _len; ++i) {\n                    _rewardTokens[i] = ILiquidityGaugeV2(address(crvGauge)).reward_tokens(i);\n                }\n                _rewardTokens[_len] = CRV;\n                return _rewardTokens;\n            } catch {\n                // If doesn't implement `reward_count` assuming only one extra reward token\n                // E.g. stETH pool\n                _rewardTokens = new address[](2);\n                _rewardTokens[0] = CRV;\n                _rewardTokens[1] = _rewardToken;\n                return _rewardTokens;\n            }\n        } catch {}\n\n        // If LiquidityGauge, CRV only\n        return _rewardTokens;\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/curve/CurveBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../../interfaces/curve/IDeposit.sol\";\nimport \"../../interfaces/curve/IDepositZap.sol\";\nimport \"../../interfaces/curve/IStableSwap.sol\";\nimport \"../../interfaces/curve/ILiquidityGauge.sol\";\nimport \"../../interfaces/curve/ITokenMinter.sol\";\nimport \"../../interfaces/curve/IMetapoolFactory.sol\";\nimport \"../../interfaces/curve/IRegistry.sol\";\nimport \"../../interfaces/curve/IAddressProvider.sol\";\nimport \"../../interfaces/curve/ILiquidityGaugeFactory.sol\";\nimport \"../../interfaces/one-oracle/IMasterOracle.sol\";\nimport \"../Strategy.sol\";\n\n/// @title Base contract for Curve-related strategies\nabstract contract CurveBase is Strategy {\n    using SafeERC20 for IERC20;\n\n    enum PoolType {\n        PLAIN_2_POOL,\n        PLAIN_3_POOL,\n        PLAIN_4_POOL,\n        LENDING_2_POOL,\n        LENDING_3_POOL,\n        LENDING_4_POOL,\n        META_3_POOL,\n        META_4_POOL\n    }\n\n    string public constant VERSION = \"5.1.0\";\n    uint256 internal constant MAX_BPS = 10_000;\n    ITokenMinter public constant CRV_MINTER = ITokenMinter(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0); // This contract only exists on mainnet\n    ILiquidityGaugeFactory public constant GAUGE_FACTORY =\n        ILiquidityGaugeFactory(0xabC000d88f23Bb45525E447528DBF656A9D55bf5); // Act as CRV_MINTER on side chains\n    IAddressProvider public constant ADDRESS_PROVIDER = IAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383); // Same address to all chains\n    uint256 private constant FACTORY_ADDRESS_ID = 3;\n\n    // solhint-disable-next-line var-name-mixedcase\n    address public immutable CRV;\n    IERC20 public immutable crvLp; // Note: Same as `receiptToken` but using this in order to save gas since it's `immutable` and `receiptToken` isn't\n    address public immutable crvPool;\n    ILiquidityGaugeV2 public immutable crvGauge;\n    uint256 public immutable collateralIdx;\n    address internal immutable depositZap;\n    PoolType public immutable curvePoolType;\n    bool private immutable isFactoryPool;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    uint256 public crvSlippage;\n    IMasterOracle public masterOracle;\n    address[] public rewardTokens;\n\n    event CrvSlippageUpdated(uint256 oldCrvSlippage, uint256 newCrvSlippage);\n    event MasterOracleUpdated(IMasterOracle oldMasterOracle, IMasterOracle newMasterOracle);\n\n    constructor(\n        address pool_,\n        address crvPool_,\n        PoolType curvePoolType_,\n        address depositZap_,\n        address crvToken_,\n        uint256 crvSlippage_,\n        address masterOracle_,\n        address swapper_,\n        uint256 collateralIdx_,\n        string memory name_\n    ) Strategy(pool_, swapper_, address(0)) {\n        require(crvToken_ != address(0), \"crv-token-is-null\");\n\n        address _crvGauge;\n        IRegistry _registry = IRegistry(ADDRESS_PROVIDER.get_registry());\n        address _crvLp = _registry.get_lp_token(crvPool_);\n\n        if (_crvLp != address(0)) {\n            // Get data from Registry contract\n            require(collateralIdx_ < _registry.get_n_coins(crvPool_)[1], \"invalid-collateral\");\n            _verifyCollateral(_registry.get_underlying_coins(crvPool_)[collateralIdx_]);\n            _crvGauge = _registry.get_gauges(crvPool_)[0];\n        } else {\n            // Get data from Factory contract\n            IMetapoolFactory _factory = IMetapoolFactory(ADDRESS_PROVIDER.get_address(FACTORY_ADDRESS_ID));\n\n            if (_factory.is_meta(crvPool_)) {\n                require(collateralIdx_ < _factory.get_meta_n_coins(crvPool_)[1], \"invalid-collateral\");\n                _verifyCollateral(_factory.get_underlying_coins(crvPool_)[collateralIdx_]);\n            } else {\n                require(collateralIdx_ < _factory.get_n_coins(crvPool_), \"invalid-collateral\");\n                _verifyCollateral(_factory.get_coins(crvPool_)[collateralIdx_]);\n            }\n            _crvLp = crvPool_;\n            _crvGauge = _factory.get_gauge(crvPool_);\n        }\n\n        require(crvPool_ != address(0), \"pool-is-null\");\n        require(_crvLp != address(0), \"lp-is-null\");\n        if (_crvGauge == address(0)) {\n            _crvGauge = GAUGE_FACTORY.get_gauge_from_lp_token(_crvLp);\n        }\n        require(_crvGauge != address(0), \"gauge-is-null\");\n\n        CRV = crvToken_;\n        crvPool = crvPool_;\n        crvLp = IERC20(_crvLp);\n        crvGauge = ILiquidityGaugeV2(_crvGauge);\n        crvSlippage = crvSlippage_;\n        receiptToken = _crvLp;\n        collateralIdx = collateralIdx_;\n        curvePoolType = curvePoolType_;\n        isFactoryPool = _crvLp == crvPool_;\n        depositZap = depositZap_;\n        masterOracle = IMasterOracle(masterOracle_);\n        NAME = name_;\n    }\n\n    function getRewardTokens() external view returns (address[] memory) {\n        return rewardTokens;\n    }\n\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address token_) public view override returns (bool) {\n        return token_ == address(crvLp) || token_ == address(collateralToken);\n    }\n\n    // Gets LP value not staked in gauge\n    function lpBalanceHere() public view virtual returns (uint256 _lpHere) {\n        _lpHere = crvLp.balanceOf(address(this));\n    }\n\n    function lpBalanceHereAndStaked() public view virtual returns (uint256 _lpHereAndStaked) {\n        _lpHereAndStaked = crvLp.balanceOf(address(this)) + lpBalanceStaked();\n    }\n\n    function lpBalanceStaked() public view virtual returns (uint256 _lpStaked) {\n        _lpStaked = crvGauge.balanceOf(address(this));\n    }\n\n    /// @notice Returns collateral balance + collateral deposited to curve\n    function tvl() external view override returns (uint256) {\n        return\n            collateralToken.balanceOf(address(this)) +\n            _quoteLpToCoin(lpBalanceHereAndStaked(), SafeCast.toInt128(int256(collateralIdx)));\n    }\n\n    function _approveToken(uint256 amount_) internal virtual override {\n        super._approveToken(amount_);\n\n        address _swapper = address(swapper);\n\n        collateralToken.safeApprove(crvPool, amount_);\n        collateralToken.safeApprove(_swapper, amount_);\n\n        uint256 _rewardTokensLength = rewardTokens.length;\n        for (uint256 i; i < _rewardTokensLength; ++i) {\n            IERC20(rewardTokens[i]).safeApprove(_swapper, amount_);\n        }\n        crvLp.safeApprove(address(crvGauge), amount_);\n\n        if (depositZap != address(0)) {\n            collateralToken.safeApprove(depositZap, amount_);\n            crvLp.safeApprove(depositZap, amount_);\n        }\n    }\n\n    /// @notice Unstake LP tokens in order to transfer to the new strategy\n    function _beforeMigration(address newStrategy_) internal override {\n        require(IStrategy(newStrategy_).collateral() == address(collateralToken), \"wrong-collateral-token\");\n        require(IStrategy(newStrategy_).token() == address(crvLp), \"wrong-receipt-token\");\n        _unstakeAllLp();\n    }\n\n    function _calculateAmountOutMin(\n        address tokenIn_,\n        address tokenOut_,\n        uint256 amountIn_\n    ) private view returns (uint256 _amountOutMin) {\n        _amountOutMin = (masterOracle.quote(tokenIn_, tokenOut_, amountIn_) * (MAX_BPS - crvSlippage)) / MAX_BPS;\n    }\n\n    /**\n     * @dev Curve pool may have more than one reward token.\n     */\n    function _claimAndSwapRewards() internal virtual override {\n        _claimRewards();\n        uint256 _rewardTokensLength = rewardTokens.length;\n        for (uint256 i; i < _rewardTokensLength; ++i) {\n            address _rewardToken = rewardTokens[i];\n            uint256 _amountIn = IERC20(_rewardToken).balanceOf(address(this));\n            if (_amountIn > 0) {\n                _safeSwapExactInput(_rewardToken, address(collateralToken), _amountIn);\n            }\n        }\n    }\n\n    /// @dev Return values are not being used hence returning 0\n    function _claimRewards() internal virtual override returns (address, uint256) {\n        if (block.chainid == 1) {\n            CRV_MINTER.mint(address(crvGauge));\n        } else if (GAUGE_FACTORY.is_valid_gauge(address(crvGauge))) {\n            // On side chain gauge factory can mint CRV reward but only for valid gauge.\n            GAUGE_FACTORY.mint(address(crvGauge));\n        }\n        // solhint-disable-next-line no-empty-blocks\n        try crvGauge.claim_rewards() {} catch {\n            // This call may fail in some scenarios\n            // e.g. 3Crv gauge doesn't have such function\n        }\n        return (address(0), 0);\n    }\n\n    function _deposit() internal {\n        _depositToCurve(collateralToken.balanceOf(address(this)));\n        _stakeAllLp();\n    }\n\n    function _depositTo2PlainPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\n        uint256[2] memory _depositAmounts;\n        _depositAmounts[collateralIdx] = coinAmountIn_;\n        IStableSwap2x(crvPool).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(_depositAmounts, lpAmountOutMin_);\n    }\n\n    function _depositTo2LendingPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\n        uint256[2] memory _depositAmounts;\n        _depositAmounts[collateralIdx] = coinAmountIn_;\n        // Note: Using use_underlying = true to deposit underlying instead of IB token\n        IStableSwap2xUnderlying(crvPool).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(\n            _depositAmounts,\n            lpAmountOutMin_,\n            true\n        );\n    }\n\n    function _depositTo3PlainPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\n        uint256[3] memory _depositAmounts;\n        _depositAmounts[collateralIdx] = coinAmountIn_;\n        IStableSwap3x(crvPool).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(_depositAmounts, lpAmountOutMin_);\n    }\n\n    function _depositTo3LendingPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\n        uint256[3] memory _depositAmounts;\n        _depositAmounts[collateralIdx] = coinAmountIn_;\n        // Note: Using use_underlying = true to deposit underlying instead of IB token\n        IStableSwap3xUnderlying(crvPool).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(\n            _depositAmounts,\n            lpAmountOutMin_,\n            true\n        );\n    }\n\n    function _depositTo4PlainOrMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\n        uint256[4] memory _depositAmounts;\n        _depositAmounts[collateralIdx] = coinAmountIn_;\n        IDeposit4x(depositZap).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(_depositAmounts, lpAmountOutMin_);\n    }\n\n    function _depositTo3FactoryMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\n        uint256[3] memory _depositAmounts;\n        _depositAmounts[collateralIdx] = coinAmountIn_;\n        // Note: The function below won't return a reason when reverting due to slippage\n        IDepositZap3x(depositZap).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(\n            address(crvPool),\n            _depositAmounts,\n            lpAmountOutMin_\n        );\n    }\n\n    function _depositTo4FactoryMetaPool(uint256 coinAmountIn_, uint256 lpAmountOutMin_, bool useEth_) private {\n        uint256[4] memory _depositAmounts;\n        _depositAmounts[collateralIdx] = coinAmountIn_;\n        // Note: The function below won't return a reason when reverting due to slippage\n        IDepositZap4x(depositZap).add_liquidity{value: useEth_ ? coinAmountIn_ : 0}(\n            address(crvPool),\n            _depositAmounts,\n            lpAmountOutMin_\n        );\n    }\n\n    function _depositToCurve(uint256 coinAmountIn_) internal virtual {\n        _depositToCurve(coinAmountIn_, false);\n    }\n\n    function _depositToCurve(uint256 coinAmountIn_, bool useEth_) internal virtual {\n        if (coinAmountIn_ == 0) {\n            return;\n        }\n\n        uint256 _lpAmountOutMin = _calculateAmountOutMin(address(collateralToken), address(crvLp), coinAmountIn_);\n\n        if (curvePoolType == PoolType.PLAIN_2_POOL) {\n            return _depositTo2PlainPool(coinAmountIn_, _lpAmountOutMin, useEth_);\n        }\n        if (curvePoolType == PoolType.LENDING_2_POOL) {\n            return _depositTo2LendingPool(coinAmountIn_, _lpAmountOutMin, useEth_);\n        }\n        if (curvePoolType == PoolType.PLAIN_3_POOL) {\n            return _depositTo3PlainPool(coinAmountIn_, _lpAmountOutMin, useEth_);\n        }\n        if (curvePoolType == PoolType.LENDING_3_POOL) {\n            return _depositTo3LendingPool(coinAmountIn_, _lpAmountOutMin, useEth_);\n        }\n        if (curvePoolType == PoolType.PLAIN_4_POOL) {\n            return _depositTo4PlainOrMetaPool(coinAmountIn_, _lpAmountOutMin, useEth_);\n        }\n        if (curvePoolType == PoolType.META_3_POOL) {\n            return _depositTo3FactoryMetaPool(coinAmountIn_, _lpAmountOutMin, useEth_);\n        }\n        if (curvePoolType == PoolType.META_4_POOL) {\n            if (isFactoryPool) {\n                return _depositTo4FactoryMetaPool(coinAmountIn_, _lpAmountOutMin, useEth_);\n            }\n            return _depositTo4PlainOrMetaPool(coinAmountIn_, _lpAmountOutMin, useEth_);\n        }\n\n        revert(\"deposit-to-curve-failed\");\n    }\n\n    function _generateReport() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _strategyDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        int128 _i = SafeCast.toInt128(int256(collateralIdx));\n        uint256 _lpHere = lpBalanceHere();\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\n        uint256 _collateralInCurve = _quoteLpToCoin(_totalLp, _i);\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _totalCollateral = _collateralHere + _collateralInCurve;\n\n        if (_totalCollateral > _strategyDebt) {\n            _profit = _totalCollateral - _strategyDebt;\n        } else {\n            _loss = _strategyDebt - _totalCollateral;\n        }\n\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_profitAndExcessDebt > _collateralHere) {\n            uint256 _totalAmountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _collateralInCurve);\n            if (_totalAmountToWithdraw > 0) {\n                uint256 _lpToBurn = Math.min((_totalAmountToWithdraw * _totalLp) / _collateralInCurve, _totalLp);\n\n                if (_lpToBurn > 0) {\n                    if (_lpToBurn > _lpHere) {\n                        _unstakeLp(_lpToBurn - _lpHere);\n                    }\n\n                    _withdrawFromCurve(_lpToBurn, _i);\n\n                    _collateralHere = collateralToken.balanceOf(address(this));\n                }\n            }\n        }\n\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n    }\n\n    function _getRewardTokens() internal view virtual returns (address[] memory _rewardTokens);\n\n    function _quoteLpToCoin(uint256 amountIn_, int128 toIdx_) private view returns (uint256 _amountOut) {\n        if (amountIn_ == 0) {\n            return 0;\n        }\n\n        if (curvePoolType == PoolType.PLAIN_4_POOL || (curvePoolType == PoolType.META_4_POOL && !isFactoryPool)) {\n            return IDeposit4x(depositZap).calc_withdraw_one_coin(amountIn_, toIdx_);\n        }\n        if (curvePoolType == PoolType.META_3_POOL || curvePoolType == PoolType.META_4_POOL) {\n            return IDepositZap(depositZap).calc_withdraw_one_coin(address(crvLp), amountIn_, toIdx_);\n        }\n\n        return IStableSwap(crvPool).calc_withdraw_one_coin(amountIn_, toIdx_);\n    }\n\n    function _rebalance() internal virtual override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        (_profit, _loss, _payback) = _generateReport();\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _deposit();\n    }\n\n    // Requires that gauge has approval for lp token\n    function _stakeAllLp() internal virtual {\n        uint256 _balance = crvLp.balanceOf(address(this));\n        if (_balance > 0) {\n            crvGauge.deposit(_balance);\n        }\n    }\n\n    function _unstakeAllLp() internal virtual {\n        _unstakeLp(crvGauge.balanceOf(address(this)));\n    }\n\n    function _unstakeLp(uint256 amount_) internal virtual {\n        if (amount_ > 0) {\n            crvGauge.withdraw(amount_);\n        }\n    }\n\n    function _verifyCollateral(address collateralFromCurve_) internal view virtual {\n        require(collateralFromCurve_ == address(collateralToken), \"collateral-mismatch\");\n    }\n\n    function _withdrawFromPlainPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\n        IStableSwap(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_);\n    }\n\n    function _withdrawFrom2LendingPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\n        // Note: Using use_underlying = true to withdraw underlying instead of IB token\n        IStableSwap2xUnderlying(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_, true);\n    }\n\n    function _withdrawFrom3LendingPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\n        // Note: Using use_underlying = true to withdraw underlying instead of IB token\n        IStableSwap3xUnderlying(crvPool).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_, true);\n    }\n\n    function _withdrawFrom4PlainOrMetaPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\n        IDeposit4x(depositZap).remove_liquidity_one_coin(lpAmount_, i_, minAmountOut_);\n    }\n\n    function _withdrawFrom3FactoryMetaOr4FactoryMetaPool(uint256 lpAmount_, uint256 minAmountOut_, int128 i_) private {\n        // Note: The function below won't return a reason when reverting due to slippage\n        IDepositZap(depositZap).remove_liquidity_one_coin(address(crvLp), lpAmount_, i_, minAmountOut_);\n    }\n\n    function _withdrawFromCurve(uint256 lpToBurn_, int128 coinIdx_) internal {\n        if (lpToBurn_ == 0) {\n            return;\n        }\n\n        uint256 _minCoinAmountOut = _calculateAmountOutMin(address(crvLp), address(collateralToken), lpToBurn_);\n\n        if (curvePoolType == PoolType.PLAIN_2_POOL || curvePoolType == PoolType.PLAIN_3_POOL) {\n            _withdrawFromPlainPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\n        } else if (curvePoolType == PoolType.LENDING_2_POOL) {\n            _withdrawFrom2LendingPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\n        } else if (curvePoolType == PoolType.LENDING_3_POOL) {\n            _withdrawFrom3LendingPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\n        } else if (curvePoolType == PoolType.PLAIN_4_POOL) {\n            _withdrawFrom4PlainOrMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\n        } else if (curvePoolType == PoolType.META_3_POOL) {\n            _withdrawFrom3FactoryMetaOr4FactoryMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\n        } else if (curvePoolType == PoolType.META_4_POOL) {\n            if (isFactoryPool) {\n                _withdrawFrom3FactoryMetaOr4FactoryMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\n            } else {\n                _withdrawFrom4PlainOrMetaPool(lpToBurn_, _minCoinAmountOut, coinIdx_);\n            }\n        } else {\n            revert(\"withdraw-from-curve-failed\");\n        }\n    }\n\n    function _withdrawHere(uint256 coinAmountOut_) internal override {\n        int128 _i = SafeCast.toInt128(int256(collateralIdx));\n\n        uint256 _lpHere = lpBalanceHere();\n        uint256 _totalLp = _lpHere + lpBalanceStaked();\n        uint256 _lpToBurn = Math.min((coinAmountOut_ * _totalLp) / _quoteLpToCoin(_totalLp, _i), _totalLp);\n\n        if (_lpToBurn == 0) return;\n\n        if (_lpToBurn > _lpHere) {\n            _unstakeLp(_lpToBurn - _lpHere);\n        }\n\n        _withdrawFromCurve(_lpToBurn, _i);\n    }\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n\n    /**\n     * @notice Rewards token in gauge can be updated any time. This method refresh list.\n     * It is recommended to claimAndSwapRewards before calling this function.\n     */\n    function refetchRewardTokens() external virtual onlyGovernor {\n        // Before updating the reward list, claim rewards and swap into collateral.\n        _claimAndSwapRewards();\n        rewardTokens = _getRewardTokens();\n        _approveToken(0);\n        _approveToken(MAX_UINT_VALUE);\n    }\n\n    function updateCrvSlippage(uint256 newCrvSlippage_) external onlyGovernor {\n        require(newCrvSlippage_ < MAX_BPS, \"invalid-slippage-value\");\n        emit CrvSlippageUpdated(crvSlippage, newCrvSlippage_);\n        crvSlippage = newCrvSlippage_;\n    }\n\n    function updateMasterOracle(IMasterOracle newMasterOracle_) external onlyGovernor {\n        emit MasterOracleUpdated(masterOracle, newMasterOracle_);\n        masterOracle = newMasterOracle_;\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/curve/CurveETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./Curve.sol\";\nimport \"vesper-pools/contracts/interfaces/token/IToken.sol\";\n\n/// @title Deposit ETH to Curve Pool and earn interest.\ncontract CurveETH is Curve {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    TokenLike public immutable WETH;\n\n    constructor(\n        address pool_,\n        address crvPool_,\n        CurveBase.PoolType curvePoolType_,\n        address depositZap_,\n        address crvToken_,\n        uint256 crvSlippage_,\n        address masterOracle_,\n        address swapper_,\n        uint256 collateralIdx_,\n        string memory name_,\n        TokenLike wethLike_\n    )\n        Curve(\n            pool_,\n            crvPool_,\n            curvePoolType_,\n            depositZap_,\n            crvToken_,\n            crvSlippage_,\n            masterOracle_,\n            swapper_,\n            collateralIdx_,\n            name_\n        )\n    {\n        WETH = wethLike_;\n    }\n\n    /**\n     * @dev During reinvest we have WETH as collateral but Curve accepts ETH.\n     * Withdraw ETH from WETH before adding liquidity to Curve pool.\n     */\n    function _depositToCurve(uint256 coinAmountIn_) internal override {\n        if (coinAmountIn_ == 0) {\n            return;\n        }\n\n        WETH.withdraw(coinAmountIn_);\n\n        super._depositToCurve(coinAmountIn_, true);\n    }\n\n    function _verifyCollateral(address collateralFromCurve_) internal view override {\n        require(collateralFromCurve_ == address(collateralToken) || collateralFromCurve_ == ETH, \"collateral-mismatch\");\n    }\n\n    /**\n     *  @dev Only receive ETH from either pool or WETH\n     */\n    receive() external payable {\n        require(msg.sender == address(crvPool) || msg.sender == address(WETH), \"not-allowed-to-send-ether\");\n        if (msg.sender == address(crvPool)) {\n            WETH.deposit{value: address(this).balance}();\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/Earn.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"vesper-pools/contracts/interfaces/vesper/IEarnDrip.sol\";\nimport \"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\";\nimport \"./Strategy.sol\";\n\nabstract contract Earn is Strategy {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IVesperPool;\n\n    IERC20 public immutable dripToken;\n\n    uint256 public dripPeriod = 48 hours;\n    uint256 public totalEarned; // accounting total coin earned after fee. This amount is not reported to pool.\n\n    event DripPeriodUpdated(uint256 oldDripPeriod, uint256 newDripPeriod);\n\n    constructor(address dripToken_) {\n        require(dripToken_ != address(0), \"dripToken-zero\");\n        dripToken = IERC20(dripToken_);\n    }\n\n    /// @dev Converts excess collateral earned to drip token\n    function _convertCollateralToDrip(uint256 _collateralAmount) internal virtual returns (uint256 _amountOut) {\n        if (_collateralAmount > 0) {\n            _swapExactInput(address(collateralToken), address(dripToken), _collateralAmount);\n            // balanceOf drip token will be considered as drip amount\n            _amountOut = dripToken.balanceOf(address(this));\n        }\n    }\n\n    /// @dev Send earning to drip contract.\n    function _forwardEarning(uint256 earned_) internal virtual {\n        if (earned_ > 0) {\n            totalEarned += earned_;\n\n            address _dripContract = IVesperPool(pool).poolRewards();\n            // Fetches which rewardToken collects the drip\n            IVesperPool _growPool = IVesperPool(IEarnDrip(_dripContract).growToken());\n            // Checks that the Grow Pool supports dripToken as underlying\n            if (address(_growPool) != address(0) && _growPool.token() == dripToken) {\n                uint256 _growPoolBalanceBefore = _growPool.balanceOf(address(this));\n                _growPool.deposit(earned_);\n                uint256 _growPoolShares = _growPool.balanceOf(address(this)) - _growPoolBalanceBefore;\n                _growPool.safeTransfer(_dripContract, _growPoolShares);\n                IEarnDrip(_dripContract).notifyRewardAmount(address(_growPool), _growPoolShares, dripPeriod);\n            } else {\n                dripToken.safeTransfer(_dripContract, earned_);\n                IEarnDrip(_dripContract).notifyRewardAmount(address(dripToken), earned_, dripPeriod);\n            }\n        }\n    }\n\n    /** @dev Handle collateral profit.\n     *      Calculate fee on profit.\n     *      Transfer fee to feeCollector\n     *      Convert remaining profit into drip token\n     *      Forward drip token earning to EarnDrip\n     * @param profit_ Profit in collateral\n     */\n    function _handleProfit(uint256 profit_) internal virtual {\n        if (profit_ > 0) {\n            uint256 _fee = IVesperPool(pool).calculateUniversalFee(profit_);\n            if (_fee > 0) {\n                collateralToken.safeTransfer(feeCollector, _fee);\n                // Calculated fee will always be less than _profit\n                profit_ -= _fee;\n            }\n            _forwardEarning(_convertCollateralToDrip(profit_));\n        }\n    }\n\n    /// @dev Approves EarnDrip' Grow token to spend dripToken\n    function approveGrowToken() external onlyKeeper {\n        address _growPool = IEarnDrip(IVesperPool(pool).poolRewards()).growToken();\n        // Checks that the Grow Pool supports dripToken as underlying\n        if (_growPool != address(0)) {\n            require(IVesperPool(_growPool).token() == dripToken, \"invalid-grow-pool\");\n            dripToken.safeApprove(_growPool, 0);\n            dripToken.safeApprove(_growPool, MAX_UINT_VALUE);\n        }\n    }\n\n    /**\n     * @notice Update update period of distribution of earning done in one rebalance\n     * @dev _dripPeriod in seconds\n     */\n    function updateDripPeriod(uint256 dripPeriod_) external onlyGovernor {\n        require(dripPeriod_ > 0, \"zero-drip-period\");\n        require(dripPeriod_ != dripPeriod, \"same-drip-period\");\n        emit DripPeriodUpdated(dripPeriod, dripPeriod_);\n        dripPeriod = dripPeriod_;\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/euler/Euler.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\nimport \"../Strategy.sol\";\nimport \"../../interfaces/euler/IEuler.sol\";\n\n/// @title This strategy will deposit collateral token in Euler and earn interest.\ncontract Euler is Strategy {\n    using SafeERC20 for IERC20;\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    IEToken internal immutable eToken;\n    address internal immutable euler;\n\n    uint256 internal constant SUB_ACCOUNT_ID = 0;\n\n    constructor(\n        address pool_,\n        address swapper_,\n        address euler_,\n        address eulerMarkets_,\n        string memory name_\n    ) Strategy(pool_, swapper_, address(0)) {\n        require(euler_ != address(0), \"euler-protocol-address-is-null\");\n        require(eulerMarkets_ != address(0), \"market-address-is-null\");\n        receiptToken = _fetchReceiptToken(eulerMarkets_);\n        require(receiptToken != address(0), \"market-does-not-exist\");\n        eToken = IEToken(receiptToken);\n        euler = euler_;\n        NAME = name_;\n    }\n\n    function isReservedToken(address token_) public view virtual override returns (bool) {\n        return token_ == address(eToken);\n    }\n\n    function tvl() external view override returns (uint256) {\n        return\n            _getUnwrappedAmount(eToken.balanceOfUnderlying(address(this))) + collateralToken.balanceOf(address(this));\n    }\n\n    /// @dev Approve all required tokens\n    function _approveToken(uint256 amount_) internal virtual override {\n        super._approveToken(amount_);\n        collateralToken.safeApprove(euler, amount_);\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    function _beforeMigration(address newStrategy_) internal virtual override {}\n\n    function _fetchReceiptToken(address eulerMarkets_) internal view virtual returns (address) {\n        return IEulerMarkets(eulerMarkets_).underlyingToEToken(address(collateralToken));\n    }\n\n    function _getWrappedAmount(uint256 unwrappedAmount_) internal view virtual returns (uint256) {\n        return unwrappedAmount_;\n    }\n\n    function _getUnwrappedAmount(uint256 wrappedAmount_) internal view virtual returns (uint256 _unwrapped) {\n        return wrappedAmount_;\n    }\n\n    /**\n     * @dev Generate report for pools accounting and also send profit and any payback to pool.\n     */\n    function _rebalance() internal virtual override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _totalCollateral = _collateralHere + _getUnwrappedAmount(eToken.balanceOfUnderlying(address(this)));\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_profitAndExcessDebt > _collateralHere) {\n            _withdrawHere(_profitAndExcessDebt - _collateralHere);\n            _collateralHere = collateralToken.balanceOf(address(this));\n        }\n\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        // After reportEarning strategy may get more collateral from pool. Deposit those in Euler.\n        _collateralHere = collateralToken.balanceOf(address(this));\n\n        if (_collateralHere > 0) {\n            eToken.deposit(SUB_ACCOUNT_ID, _wrap(_collateralHere));\n        }\n    }\n\n    function _unwrap(uint256 wrappedAmount_) internal virtual returns (uint256) {\n        return wrappedAmount_;\n    }\n\n    function _wrap(uint256 unwrappedAmount_) internal virtual returns (uint256) {\n        return unwrappedAmount_;\n    }\n\n    /// @dev Withdraw collateral here.\n    function _withdrawHere(uint256 _amount) internal override {\n        // Get minimum of _amount and collateral invested and available liquidity\n        uint256 _withdrawAmount = Math.min(\n            _getWrappedAmount(_amount),\n            Math.min(eToken.balanceOfUnderlying(address(this)), eToken.totalSupplyUnderlying())\n        );\n        eToken.withdraw(SUB_ACCOUNT_ID, _withdrawAmount);\n        // Unwrap wrapped tokens\n        _unwrap(_withdrawAmount);\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/euler/EulerVesperXy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\";\nimport \"vesper-pools/contracts/Errors.sol\";\nimport \"../../interfaces/euler/IEuler.sol\";\nimport \"../VesperRewards.sol\";\nimport \"./EulerXy.sol\";\n\n// solhint-disable no-empty-blocks\n\n/// @title Deposit Collateral in Euler and earn interest by depositing borrowed token in a Vesper Pool.\ncontract EulerVesperXy is EulerXy {\n    using SafeERC20 for IERC20;\n\n    // Destination Grow Pool for borrowed Token\n    IVesperPool public immutable vPool;\n\n    constructor(\n        address pool_,\n        address swapper_,\n        address euler_,\n        IEulerMarkets eulerMarkets_,\n        IExec eulerExec_,\n        IEulDistributor rewardDistributor_,\n        address rewardToken_,\n        address borrowToken_,\n        address vPool_,\n        string memory name_\n    )\n        EulerXy(\n            pool_,\n            swapper_,\n            euler_,\n            eulerMarkets_,\n            eulerExec_,\n            rewardDistributor_,\n            rewardToken_,\n            borrowToken_,\n            name_\n        )\n    {\n        require(address(IVesperPool(vPool_).token()) == borrowToken, \"invalid-grow-pool\");\n        vPool = IVesperPool(vPool_);\n    }\n\n    /// @notice After borrowing Y, deposit to Vesper Pool\n    function _afterBorrowY(uint256 amount_) internal virtual override {\n        vPool.deposit(amount_);\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 amount_) internal virtual override {\n        super._approveToken(amount_);\n        IERC20(borrowToken).safeApprove(address(vPool), amount_);\n        VesperRewards._approveToken(vPool, swapper, amount_);\n    }\n\n    /// @notice Before repaying Y, withdraw it from Vesper Pool\n    function _beforeRepayY(uint256 amount_) internal virtual override {\n        _withdrawFromVesperPool(amount_);\n    }\n\n    /**\n     * @dev Claim VSP rewards and swap for collateral tokens.\n     * Keeper will claim EUL and this function will swap those for collateral.\n     */\n    function _claimAndSwapRewards() internal override {\n        // Swap EUL for collateral\n        uint256 _eulAmount = IERC20(rewardToken).balanceOf(address(this));\n        if (_eulAmount > 0) {\n            _safeSwapExactInput(rewardToken, address(collateralToken), _eulAmount);\n        }\n        // Claim and swap rewards from Vesper\n        VesperRewards._claimAndSwapRewards(vPool, swapper, address(collateralToken));\n    }\n\n    /// @notice Borrowed Y balance deposited in Vesper Pool\n    function _getInvestedBorrowBalance() internal view virtual override returns (uint256) {\n        return\n            IERC20(borrowToken).balanceOf(address(this)) +\n            ((vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18);\n    }\n\n    /// @notice Swap excess borrow for more collateral when underlying  vPool is making profits\n    function _rebalanceBorrow(uint256 excessBorrow_) internal virtual override {\n        if (excessBorrow_ > 0) {\n            _withdrawFromVesperPool(excessBorrow_);\n            uint256 _borrowedHere = IERC20(borrowToken).balanceOf(address(this));\n            if (_borrowedHere > 0) {\n                _safeSwapExactInput(borrowToken, address(collateralToken), _borrowedHere);\n            }\n        }\n    }\n\n    /// @notice Withdraw _shares proportional to collateral amount_ from vPool\n    function _withdrawFromVesperPool(uint256 amount_) internal {\n        if (amount_ > 0) {\n            uint256 _pricePerShare = vPool.pricePerShare();\n            uint256 _shares = (amount_ * 1e18) / _pricePerShare;\n            _shares = amount_ > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\n            vPool.withdraw(Math.min(_shares, vPool.balanceOf(address(this))));\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/euler/EulerXy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\";\nimport \"vesper-pools/contracts/Errors.sol\";\nimport \"../../interfaces/euler/IEuler.sol\";\nimport \"../Strategy.sol\";\n\n// solhint-disable no-empty-blocks\n\n/// @title Deposit Collateral in Euler and earn interest by depositing borrowed token in a Vesper Pool.\ncontract EulerXy is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    uint32 internal constant EULER_CONFIG_FACTOR_SCALE = 4_000_000_000;\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\n\n    address public immutable euler;\n    IEulerMarkets public immutable eulerMarkets;\n    IExec public immutable eulerExec;\n    IEulDistributor public immutable rewardDistributor;\n    address public immutable rewardToken;\n    address public immutable borrowToken;\n\n    IEToken private immutable collateralEToken;\n    IDToken private immutable collateralDToken;\n    IEToken private immutable borrowEToken;\n    IDToken public immutable borrowDToken; // Debt Token\n\n    uint256 internal constant SUB_ACCOUNT_ID = 0;\n\n    event UpdatedBorrowLimit(\n        uint256 previousMinBorrowLimit,\n        uint256 newMinBorrowLimit,\n        uint256 previousMaxBorrowLimit,\n        uint256 newMaxBorrowLimit\n    );\n\n    constructor(\n        address pool_,\n        address swapper_,\n        address euler_,\n        IEulerMarkets eulerMarkets_,\n        IExec eulerExec_,\n        IEulDistributor rewardDistributor_,\n        address rewardToken_,\n        address borrowToken_,\n        string memory name_\n    ) Strategy(pool_, swapper_, address(0)) {\n        require(euler_ != address(0), \"euler-protocol-address-is-null\");\n        require(address(eulerMarkets_) != address(0), \"market-address-is-null\");\n        require(address(eulerExec_) != address(0), \"euler-exec-address-is-null\");\n        require(address(rewardDistributor_) != address(0), \"distributor-address-is-null\");\n        require(rewardToken_ != address(0), \"reward-address-is-null\");\n        require(borrowToken_ != address(0), \"borrow-token-address-is-null\");\n\n        euler = euler_;\n        eulerMarkets = eulerMarkets_;\n        eulerExec = eulerExec_;\n        rewardDistributor = rewardDistributor_;\n        rewardToken = rewardToken_;\n        borrowToken = borrowToken_;\n        NAME = name_;\n\n        receiptToken = eulerMarkets_.underlyingToEToken(address(collateralToken));\n        collateralEToken = IEToken(receiptToken);\n        collateralDToken = IDToken(eulerMarkets_.underlyingToDToken(address(collateralToken)));\n\n        borrowEToken = IEToken(eulerMarkets_.underlyingToEToken(borrowToken_));\n        borrowDToken = IDToken(eulerMarkets_.underlyingToDToken(borrowToken_));\n\n        eulerMarkets_.enterMarket(SUB_ACCOUNT_ID, address(collateralToken));\n    }\n\n    function isReservedToken(address token_) public view virtual override returns (bool) {\n        return\n            token_ == address(collateralToken) ||\n            token_ == receiptToken ||\n            token_ == borrowToken ||\n            token_ == address(borrowDToken);\n    }\n\n    /// @notice Returns total collateral locked in the strategy\n    function tvl() external view override returns (uint256) {\n        return collateralEToken.balanceOfUnderlying(address(this)) + collateralToken.balanceOf(address(this));\n    }\n\n    /// @dev After borrowing Y Hook\n    function _afterBorrowY(uint256 amount_) internal virtual {}\n\n    /// @dev Approve all required tokens\n    function _approveToken(uint256 amount_) internal virtual override {\n        super._approveToken(amount_);\n        address _swapper = address(swapper);\n        collateralToken.safeApprove(euler, amount_);\n        collateralToken.safeApprove(_swapper, amount_);\n        IERC20(borrowToken).safeApprove(euler, amount_);\n        IERC20(borrowToken).safeApprove(_swapper, amount_);\n        IERC20(rewardToken).safeApprove(_swapper, amount_);\n    }\n\n    /**\n     * @dev Perform steps needed for migration\n     * @param newStrategy_ Address of new strategy.\n     */\n    function _beforeMigration(address newStrategy_) internal virtual override {\n        require(IStrategy(newStrategy_).token() == receiptToken, \"wrong-receipt-token\");\n        _repayY(borrowDToken.balanceOf(address(this)));\n    }\n\n    /// @dev Before repaying Y Hook\n    function _beforeRepayY(uint256 amount_) internal virtual {}\n\n    /**\n     * @dev Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\n     * @param depositAmount_ deposit amount\n     * @param withdrawAmount_ withdraw amount\n     * @param borrowed_ Borrow token borrowed\n     * @param supplied_ Collateral supplied\n     * @return _borrowAmount borrow more amount\n     * @return _repayAmount repay amount to keep ltv within limit\n     */\n    function _calculateBorrowPosition(\n        uint256 depositAmount_,\n        uint256 withdrawAmount_,\n        uint256 borrowed_,\n        uint256 supplied_\n    ) internal returns (uint256 _borrowAmount, uint256 _repayAmount) {\n        require(depositAmount_ == 0 || withdrawAmount_ == 0, \"all-input-gt-zero\");\n        // If maximum borrow limit set to 0 then repay borrow\n        if (maxBorrowLimit == 0) {\n            return (0, borrowed_);\n        }\n        // In case of withdraw, _amount can be greater than _supply\n        uint256 _hypotheticalCollateral = depositAmount_ > 0 ? supplied_ + depositAmount_ : supplied_ > withdrawAmount_\n            ? supplied_ - withdrawAmount_\n            : 0;\n        if (_hypotheticalCollateral == 0) {\n            return (0, borrowed_);\n        }\n        // Price is denominated in ETH and has 18 decimals\n        (uint256 _borrowTokenPrice, ) = eulerExec.getPrice(borrowToken);\n        (uint256 _collateralTokenPrice, ) = eulerExec.getPrice(address(collateralToken));\n        if (_borrowTokenPrice == 0 || _collateralTokenPrice == 0) {\n            // Oracle problem. Lets payback all\n            return (0, borrowed_);\n        }\n\n        // collateral and borrow factors are in 9 decimals.\n        uint64 _cfOfCollateralToken = eulerMarkets.underlyingToAssetConfig(address(collateralToken)).collateralFactor;\n        uint64 _bfOfBorrowToken = eulerMarkets.underlyingToAssetConfig(borrowToken).borrowFactor;\n        uint64 _effectiveCF = (_cfOfCollateralToken * _bfOfBorrowToken) / EULER_CONFIG_FACTOR_SCALE;\n\n        // Actual collateral based on price, collateral factor and borrow factor\n        uint256 _actualCollateralForBorrow = (_hypotheticalCollateral * _effectiveCF * _collateralTokenPrice) /\n            (EULER_CONFIG_FACTOR_SCALE * (10 ** IERC20Metadata(address(collateralToken)).decimals()));\n\n        // Calculate max possible borrow amount\n        uint256 _maxBorrowPossible = (_actualCollateralForBorrow * 10 ** IERC20Metadata(borrowToken).decimals()) /\n            _borrowTokenPrice;\n\n        if (_maxBorrowPossible == 0) {\n            return (0, borrowed_);\n        }\n        // Safe buffer to avoid liquidation due to price variations.\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\n\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\n\n        // If current borrow is greater than max borrow, then repay to achieve safe position.\n        if (borrowed_ > _borrowUpperBound) {\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _repayAmount = borrowed_ - _borrowLowerBound;\n        } else if (_borrowLowerBound > borrowed_) {\n            _borrowAmount = _borrowLowerBound - borrowed_;\n            uint256 _availableLiquidity = _getAvailableLiquidity(borrowEToken, borrowDToken);\n            if (_borrowAmount > _availableLiquidity) {\n                _borrowAmount = _availableLiquidity;\n            }\n        }\n    }\n\n    function _claimRewards() internal virtual override returns (address, uint256) {\n        // Claim is being done by claimReward() public function\n        return (rewardToken, IERC20(rewardToken).balanceOf(address(this)));\n    }\n\n    /**\n     * @dev Swap collateral token to borrowToken to overcome borrowToken shortage.\n     * @param shortOnBorrow_ Amount of borrow token\n     */\n    function _fixBorrowShortage(uint256 shortOnBorrow_) internal {\n        // Looking for _amountIn using fixed output amount\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, shortOnBorrow_);\n        if (_amountIn > 0) {\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\n            if (_amountIn > _collateralHere) {\n                // Withdraw some collateral from Euler so that we have enough collateral to get expected output\n                collateralEToken.withdraw(SUB_ACCOUNT_ID, _amountIn - _collateralHere);\n            }\n            swapper.swapExactOutput(address(collateralToken), borrowToken, shortOnBorrow_, _amountIn, address(this));\n        }\n    }\n\n    function _getAvailableLiquidity(\n        IEToken eToken_,\n        IDToken dToken_\n    ) private view returns (uint256 _availableLiquidity) {\n        // totalSupplyUnderlying on eToken = Total supply of underlying token\n        // totalSupply on dToken = Total borrow issued.\n        // Available liquidity of underlying token = (supply - borrow)\n        uint256 _totalSupplyUnderlying = eToken_.totalSupplyUnderlying();\n        uint256 _totalDebtUnderlying = dToken_.totalSupply();\n        if (_totalSupplyUnderlying > _totalDebtUnderlying) {\n            _availableLiquidity = _totalSupplyUnderlying - _totalDebtUnderlying;\n        }\n    }\n\n    /// @dev Borrowed Y balance deposited here or elsewhere hook\n    function _getInvestedBorrowBalance() internal view virtual returns (uint256) {\n        return IERC20(borrowToken).balanceOf(address(this));\n    }\n\n    /**\n     * @dev Generate report for pools accounting and also send profit and any payback to pool.\n     */\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _borrowed = borrowDToken.balanceOf(address(this));\n        uint256 _investedBorrowBalance = _getInvestedBorrowBalance();\n\n        // EUL rewards will be harvested by harvestEul function\n\n        // if _borrow increases at higher rate than investedBorrow then strategy will be short on borrow token.\n        if (_borrowed > _investedBorrowBalance) {\n            _fixBorrowShortage(_borrowed - _investedBorrowBalance);\n        } else {\n            // When _investedBorrowBalance exceeds _borrow balance from Euler\n            // Customize this hook to handle the excess borrowToken for profit\n            _rebalanceBorrow(_investedBorrowBalance - _borrowed);\n        }\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _supplied = collateralEToken.balanceOfUnderlying(address(this));\n        uint256 _totalCollateral = _supplied + _collateralHere;\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        uint256 _totalAmountToWithdraw;\n        if (_collateralHere < _profitAndExcessDebt) {\n            _totalAmountToWithdraw = _profitAndExcessDebt - _collateralHere;\n            _withdrawHere(_totalAmountToWithdraw, _borrowed, _supplied);\n            _collateralHere = collateralToken.balanceOf(address(this));\n        }\n\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        uint256 _newSupply = collateralToken.balanceOf(address(this));\n        if (_newSupply > 0) {\n            collateralEToken.deposit(SUB_ACCOUNT_ID, _newSupply);\n        }\n\n        // There are scenarios when we want to call _calculateBorrowPosition and act on it.\n        // 1. Strategy got some collateral from pool which will allow strategy to borrow more.\n        // 2. Collateral and/or borrow token price is changed which leads to repay or borrow.\n        // 3. BorrowLimits are updated.\n        // In some edge scenarios, below call is redundant but keeping it as is for simplicity.\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(\n            0,\n            0,\n            borrowDToken.balanceOf(address(this)),\n            collateralEToken.balanceOfUnderlying(address(this))\n        );\n        if (_repayAmount > 0) {\n            // Repay _borrowAmount to maintain safe position\n            _repayY(_repayAmount);\n        } else if (_borrowAmount > 0) {\n            borrowDToken.borrow(SUB_ACCOUNT_ID, _borrowAmount);\n        }\n        // If there is any borrowToken in contract, use those in _afterBorrowY hook\n        uint256 _borrowTokenBalance = IERC20(borrowToken).balanceOf(address(this));\n        if (_borrowTokenBalance > 0) {\n            _afterBorrowY(_borrowTokenBalance);\n        }\n    }\n\n    /// @notice Swap excess borrow for more collateral hook\n    function _rebalanceBorrow(uint256 excessBorrow_) internal virtual {}\n\n    function _repayY(uint256 amount_) internal virtual {\n        _beforeRepayY(amount_);\n        borrowDToken.repay(SUB_ACCOUNT_ID, amount_);\n    }\n\n    /// @dev Withdraw collateral here\n    function _withdrawHere(uint256 withdrawAmount_) internal override {\n        _withdrawHere(\n            withdrawAmount_,\n            borrowDToken.balanceOf(address(this)),\n            collateralEToken.balanceOfUnderlying(address(this))\n        );\n    }\n\n    function _withdrawHere(uint256 withdrawAmount_, uint256 borrowed_, uint256 supplied_) internal {\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, withdrawAmount_, borrowed_, supplied_);\n        if (_repayAmount > 0) {\n            _repayY(_repayAmount);\n        }\n        // To do safe withdraw, check withdrawAmount_ against collateral supplied\n        // and available liquidity in Euler\n        uint256 _possibleWithdraw = Math.min(\n            withdrawAmount_,\n            Math.min(supplied_, _getAvailableLiquidity(collateralEToken, collateralDToken))\n        );\n        if (_possibleWithdraw > 0) {\n            collateralEToken.withdraw(SUB_ACCOUNT_ID, _possibleWithdraw);\n        }\n    }\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n\n    /**\n     * @notice onlyKeeper:: Claim EUL tokens from Euler.\n     */\n    function claimRewards(uint256 claimable_, bytes32[] calldata proof_) external onlyKeeper {\n        rewardDistributor.claim(address(this), rewardToken, claimable_, proof_, address(0));\n    }\n\n    /**\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\n     * @dev It is possible to set maxBorrowLimit_ and minBorrowLimit_ as 0 to not borrow anything\n     * @param minBorrowLimit_ It is % of actual collateral factor of protocol\n     * @param maxBorrowLimit_ It is % of actual collateral factor of protocol\n     */\n    function updateBorrowLimit(uint256 minBorrowLimit_, uint256 maxBorrowLimit_) external onlyGovernor {\n        require(maxBorrowLimit_ < MAX_BPS, \"invalid-max-borrow-limit\");\n        // set maxBorrowLimit_ and minBorrowLimit_ to disable borrow;\n        require(\n            (maxBorrowLimit_ == 0 && minBorrowLimit_ == 0) || maxBorrowLimit_ > minBorrowLimit_,\n            \"max-should-be-higher-than-min\"\n        );\n        emit UpdatedBorrowLimit(minBorrowLimit, minBorrowLimit_, maxBorrowLimit, maxBorrowLimit_);\n        minBorrowLimit = minBorrowLimit_;\n        maxBorrowLimit = maxBorrowLimit_;\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/FlashLoanHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\";\nimport \"vesper-pools/contracts/Errors.sol\";\nimport \"../interfaces/aave/IAave.sol\";\nimport \"../interfaces/dydx/ISoloMargin.sol\";\n\n/**\n * @title FlashLoanHelper:: This contract does all heavy lifting to get flash loan via Aave and DyDx.\n * @dev End user has to override _flashLoanLogic() function to perform logic after flash loan is done.\n *      Also needs to approve token to aave and dydx via _approveToken function.\n *      2 utility internal functions are also provided to activate/deactivate flash loan providers.\n *      Utility function are provided as internal so that end user can choose controlled access via public functions.\n */\nabstract contract FlashLoanHelper {\n    using SafeERC20 for IERC20;\n\n    PoolAddressesProvider internal poolAddressesProvider;\n\n    address internal constant SOLO = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    uint256 public dyDxMarketId;\n    bytes32 private constant AAVE_PROVIDER_ID = 0x0100000000000000000000000000000000000000000000000000000000000000;\n    bool public isAaveActive = false;\n    bool public isDyDxActive = false;\n\n    constructor(address _aaveAddressesProvider) {\n        require(_aaveAddressesProvider != address(0), Errors.INPUT_ADDRESS_IS_ZERO);\n\n        poolAddressesProvider = PoolAddressesProvider(_aaveAddressesProvider);\n    }\n\n    function _updateAaveStatus(bool _status) internal {\n        isAaveActive = _status;\n    }\n\n    function _updateDyDxStatus(bool _status, address _token) internal {\n        if (_status) {\n            dyDxMarketId = _getMarketIdFromTokenAddress(SOLO, _token);\n        }\n        isDyDxActive = _status;\n    }\n\n    /// @notice Approve all required tokens for flash loan\n    function _approveToken(address _token, uint256 _amount) internal {\n        IERC20(_token).safeApprove(SOLO, _amount);\n        IERC20(_token).safeApprove(poolAddressesProvider.getLendingPool(), _amount);\n    }\n\n    /// @dev Override this function to execute logic which uses flash loan amount\n    function _flashLoanLogic(bytes memory _data, uint256 _repayAmount) internal virtual;\n\n    /***************************** Aave flash loan functions ***********************************/\n\n    bool private awaitingFlash = false;\n\n    /**\n     * @notice This is entry point for Aave flash loan\n     * @param _token Token for which we are taking flash loan\n     * @param _amountDesired Flash loan amount\n     * @param _data This will be passed downstream for processing. It can be empty.\n     */\n    function _doAaveFlashLoan(\n        address _token,\n        uint256 _amountDesired,\n        bytes memory _data\n    ) internal returns (uint256 _amount) {\n        require(isAaveActive, Errors.AAVE_FLASH_LOAN_NOT_ACTIVE);\n        AaveLendingPool _aaveLendingPool = AaveLendingPool(poolAddressesProvider.getLendingPool());\n        AaveProtocolDataProvider _aaveProtocolDataProvider = AaveProtocolDataProvider(\n            poolAddressesProvider.getAddress(AAVE_PROVIDER_ID)\n        );\n        // Check token liquidity in Aave\n        (uint256 _availableLiquidity, , , , , , , , , ) = _aaveProtocolDataProvider.getReserveData(_token);\n        if (_amountDesired > _availableLiquidity) {\n            _amountDesired = _availableLiquidity;\n        }\n\n        address[] memory assets = new address[](1);\n        assets[0] = _token;\n\n        uint256[] memory amounts = new uint256[](1);\n        amounts[0] = _amountDesired;\n\n        // 0 = no debt, 1 = stable, 2 = variable\n        uint256[] memory modes = new uint256[](1);\n        modes[0] = 0;\n\n        // Anyone can call aave flash loan to us, so we need some protection\n        awaitingFlash = true;\n\n        // function params: receiver, assets, amounts, modes, onBehalfOf, data, referralCode\n        _aaveLendingPool.flashLoan(address(this), assets, amounts, modes, address(this), _data, 0);\n        _amount = _amountDesired;\n        awaitingFlash = false;\n    }\n\n    /// @dev Aave will call this function after doing flash loan\n    function executeOperation(\n        address[] calldata /*_assets*/,\n        uint256[] calldata _amounts,\n        uint256[] calldata _premiums,\n        address _initiator,\n        bytes calldata _data\n    ) external returns (bool) {\n        require(msg.sender == poolAddressesProvider.getLendingPool(), \"!aave-pool\");\n        require(awaitingFlash, Errors.INVALID_FLASH_LOAN);\n        require(_initiator == address(this), Errors.INVALID_INITIATOR);\n\n        // Flash loan amount + flash loan fee\n        uint256 _repayAmount = _amounts[0] + _premiums[0];\n        _flashLoanLogic(_data, _repayAmount);\n        return true;\n    }\n\n    /***************************** Aave flash loan functions ends ***********************************/\n\n    /***************************** DyDx flash loan functions ***************************************/\n\n    /**\n     * @notice This is entry point for DyDx flash loan\n     * @param _token Token for which we are taking flash loan\n     * @param _amountDesired Flash loan amount\n     * @param _data This will be passed downstream for processing. It can be empty.\n     */\n    function _doDyDxFlashLoan(\n        address _token,\n        uint256 _amountDesired,\n        bytes memory _data\n    ) internal returns (uint256 _amount) {\n        require(isDyDxActive, Errors.DYDX_FLASH_LOAN_NOT_ACTIVE);\n\n        // Check token liquidity in DyDx\n        uint256 amountInSolo = IERC20(_token).balanceOf(SOLO);\n        if (_amountDesired > amountInSolo) {\n            _amountDesired = amountInSolo;\n        }\n        // Repay amount, amount with fee, can be 2 wei higher. Consider 2 wei as fee\n        uint256 repayAmount = _amountDesired + 2;\n\n        // Encode custom data for callFunction\n        bytes memory _callData = abi.encode(_data, repayAmount);\n\n        // 1. Withdraw _token\n        // 2. Call callFunction(...) which will call loanLogic\n        // 3. Deposit _token back\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\n\n        operations[0] = _getWithdrawAction(dyDxMarketId, _amountDesired);\n        operations[1] = _getCallAction(_callData);\n        operations[2] = _getDepositAction(dyDxMarketId, repayAmount);\n\n        Account.Info[] memory accountInfos = new Account.Info[](1);\n        accountInfos[0] = _getAccountInfo();\n\n        ISoloMargin(SOLO).operate(accountInfos, operations);\n        _amount = _amountDesired;\n    }\n\n    /// @dev DyDx calls this function after doing flash loan\n    function callFunction(address _sender, Account.Info memory /* _account */, bytes memory _callData) external {\n        (bytes memory _data, uint256 _repayAmount) = abi.decode(_callData, (bytes, uint256));\n        require(msg.sender == SOLO, \"!solo\");\n        require(_sender == address(this), Errors.INVALID_INITIATOR);\n        _flashLoanLogic(_data, _repayAmount);\n    }\n\n    /********************************* DyDx helper functions *********************************/\n    function _getAccountInfo() internal view returns (Account.Info memory) {\n        return Account.Info({owner: address(this), number: 1});\n    }\n\n    function _getMarketIdFromTokenAddress(address _solo, address token) internal view returns (uint256) {\n        ISoloMargin solo = ISoloMargin(_solo);\n\n        uint256 numMarkets = solo.getNumMarkets();\n\n        address curToken;\n        for (uint256 i = 0; i < numMarkets; i++) {\n            curToken = solo.getMarketTokenAddress(i);\n\n            if (curToken == token) {\n                return i;\n            }\n        }\n\n        revert(Errors.NO_MARKET_ID_FOUND);\n    }\n\n    function _getWithdrawAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Withdraw,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n\n    function _getCallAction(bytes memory data) internal view returns (Actions.ActionArgs memory) {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Call,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: false,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: 0\n                }),\n                primaryMarketId: 0,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: data\n            });\n    }\n\n    function _getDepositAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\n        return\n            Actions.ActionArgs({\n                actionType: Actions.ActionType.Deposit,\n                accountId: 0,\n                amount: Types.AssetAmount({\n                    sign: true,\n                    denomination: Types.AssetDenomination.Wei,\n                    ref: Types.AssetReference.Delta,\n                    value: amount\n                }),\n                primaryMarketId: marketId,\n                secondaryMarketId: 0,\n                otherAddress: address(this),\n                otherAccountId: 0,\n                data: \"\"\n            });\n    }\n\n    /***************************** DyDx flash loan functions end *****************************/\n}\n"
    },
    "vesper-strategies/contracts/strategies/frax-lend/FraxLend.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../Strategy.sol\";\nimport \"../../interfaces/frax-lend/IFraxLend.sol\";\n\n/// @title This strategy will deposit FRAX as collateral token in FraxLend and earn interest.\ncontract FraxLend is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    IFraxLend internal immutable fraxLend;\n\n    constructor(\n        address pool_,\n        address swapper_,\n        address receiptToken_,\n        string memory name_\n    ) Strategy(pool_, swapper_, receiptToken_) {\n        require(receiptToken_ != address(0), \"frax-lend-address-is-null\");\n        require(IFraxLend(receiptToken_).asset() == address(collateralToken), \"collateral-mismatch\");\n        fraxLend = IFraxLend(receiptToken_);\n        NAME = name_;\n    }\n\n    function isReservedToken(address token_) public view virtual override returns (bool) {\n        return token_ == address(fraxLend);\n    }\n\n    function tvl() external view override returns (uint256) {\n        return _balanceOfUnderlying() + collateralToken.balanceOf(address(this));\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 amount_) internal virtual override {\n        collateralToken.safeApprove(pool, amount_);\n        collateralToken.safeApprove(address(fraxLend), amount_);\n    }\n\n    function _balanceOfUnderlying() internal view returns (uint256) {\n        return fraxLend.toAssetAmount(fraxLend.balanceOf(address(this)), false);\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    function _beforeMigration(address newStrategy_) internal virtual override {}\n\n    /**\n     * @notice Deposit collateral in FraxLend.\n     */\n    function _deposit(uint256 amount_) internal virtual {\n        if (amount_ > 0) {\n            fraxLend.deposit(amount_, address(this));\n        }\n    }\n\n    /**\n     * @dev Generate profit, loss and payback statement. Also claim rewards.\n     */\n    function _generateReport() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _totalCollateral = _collateralHere + _balanceOfUnderlying();\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_profitAndExcessDebt > _collateralHere) {\n            _withdrawHere(_profitAndExcessDebt - _collateralHere);\n            _collateralHere = collateralToken.balanceOf(address(this));\n        }\n\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n    }\n\n    /**\n     * @dev Generate report for pools accounting and also send profit and any payback to pool.\n     */\n    function _rebalance() internal virtual override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        (_profit, _loss, _payback) = _generateReport();\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        // After reportEarning strategy may get more collateral from pool. Deposit those in protocol.\n        _deposit(collateralToken.balanceOf(address(this)));\n    }\n\n    function _totalAssetAvailable() internal view returns (uint256) {\n        return fraxLend.totalAsset().amount - fraxLend.totalBorrow().amount;\n    }\n\n    function _withdrawHere(uint256 amount_) internal override {\n        // Check protocol has enough assets to entertain this withdraw amount_\n        uint256 _withdrawAmount = Math.min(amount_, _totalAssetAvailable());\n\n        // Check we have enough LPs for this withdraw\n        uint256 _sharesToWithdraw = Math.min(\n            fraxLend.toAssetShares(_withdrawAmount, false),\n            fraxLend.balanceOf(address(this))\n        );\n\n        if (_sharesToWithdraw > 0) {\n            fraxLend.redeem(_sharesToWithdraw, address(this), address(this));\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\";\nimport \"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\";\nimport \"../Strategy.sol\";\nimport \"../../interfaces/frax-lend/IFraxLend.sol\";\n\n// solhint-disable var-name-mixedcase\n\n/// @title This strategy will deposit collateral token in FraxLend and based on position it will\n/// borrow Frax and supplied borrowed tokens to Vesper pool.\ncontract FraxLendVesperXy is Strategy {\n    using SafeERC20 for IERC20;\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    uint256 internal constant MAX_BPS = 10_000; //100%\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\n\n    IFraxLend internal immutable fraxLend;\n    address public immutable borrowToken;\n\n    // Destination Grow Pool for borrowed Token\n    IVesperPool public immutable vPool;\n    // VSP token address\n    address public immutable vsp;\n\n    // FraxLend constants\n    uint256 internal immutable MAX_LTV;\n    uint256 internal immutable LTV_PRECISION;\n    uint256 internal immutable EXCHANGE_PRECISION;\n\n    event UpdatedBorrowLimit(\n        uint256 previousMinBorrowLimit,\n        uint256 newMinBorrowLimit,\n        uint256 previousMaxBorrowLimit,\n        uint256 newMaxBorrowLimit\n    );\n\n    constructor(\n        address pool_,\n        address swapper_,\n        address fraxLend_,\n        address frax_,\n        address vPool_,\n        address vsp_,\n        string memory name_\n    ) Strategy(pool_, swapper_, fraxLend_) {\n        require(fraxLend_ != address(0), \"frax-lend-address-is-null\");\n        require(frax_ != address(0), \"frax-address-is-null\");\n        require(vsp_ != address(0), \"vsp-address-is-null\");\n        require(address(IVesperPool(vPool_).token()) == frax_, \"invalid-grow-pool\");\n        require(IFraxLend(fraxLend_).collateralContract() == address(collateralToken), \"collateral-mismatch\");\n        fraxLend = IFraxLend(fraxLend_);\n        borrowToken = frax_;\n        vPool = IVesperPool(vPool_);\n        vsp = vsp_;\n        NAME = name_;\n\n        (uint256 _LTV_PRECISION, , , , uint256 _EXCHANGE_PRECISION, , , ) = fraxLend.getConstants();\n        LTV_PRECISION = _LTV_PRECISION;\n        EXCHANGE_PRECISION = _EXCHANGE_PRECISION;\n        MAX_LTV = fraxLend.maxLTV();\n    }\n\n    /// @notice Gets amount of borrowed token in strategy + borrowed tokens deposited in vPool\n    function borrowBalance() external view returns (uint256) {\n        return IERC20(borrowToken).balanceOf(address(this)) + _getYTokensInProtocol();\n    }\n\n    function isReservedToken(address token_) public view virtual override returns (bool) {\n        return\n            token_ == address(fraxLend) ||\n            token_ == address(collateralToken) ||\n            token_ == borrowToken ||\n            token_ == address(vPool);\n    }\n\n    /// @notice Returns total collateral locked in the strategy\n    function tvl() external view override returns (uint256) {\n        return fraxLend.userCollateralBalance(address(this)) + collateralToken.balanceOf(address(this));\n    }\n\n    /// @dev Approve all required tokens\n    function _approveToken(uint256 amount_) internal virtual override {\n        super._approveToken(amount_);\n        address _swapper = address(swapper);\n        collateralToken.safeApprove(address(fraxLend), amount_);\n        collateralToken.safeApprove(_swapper, amount_);\n        IERC20(borrowToken).safeApprove(_swapper, amount_);\n        IERC20(borrowToken).safeApprove(address(fraxLend), amount_);\n        IERC20(borrowToken).safeApprove(address(vPool), amount_);\n        IERC20(vsp).safeApprove(_swapper, amount_);\n    }\n\n    /**\n     * @dev Repay borrow and withdraw collateral\n     * @param newStrategy_ Address of new strategy.\n     */\n    function _beforeMigration(address newStrategy_) internal override {\n        require(IStrategy(newStrategy_).token() == address(fraxLend), \"wrong-receipt-token\");\n        // Accrue and update interest\n        fraxLend.addInterest();\n        _repay(_borrowedFromFraxLend());\n\n        fraxLend.removeCollateral(fraxLend.userCollateralBalance(address(this)), address(this));\n    }\n\n    function _borrowedFromFraxLend() internal view returns (uint256) {\n        return fraxLend.toBorrowAmount(fraxLend.userBorrowShares(address(this)), true);\n    }\n\n    /**\n     * @dev Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\n     * @param depositAmount_ deposit amount\n     * @param withdrawAmount_ withdraw amount\n     * @return _borrowAmount borrow more amount\n     * @return _repayAmount repay amount to keep ltv within limits\n     */\n    function _calculateBorrowPosition(\n        uint256 depositAmount_,\n        uint256 withdrawAmount_\n    ) internal view returns (uint256 _borrowAmount, uint256 _repayAmount) {\n        require(depositAmount_ == 0 || withdrawAmount_ == 0, \"all-input-gt-zero\");\n        uint256 _borrowed = _borrowedFromFraxLend();\n        // If maximum borrow limit set to 0 then repay borrow\n        if (maxBorrowLimit == 0) {\n            return (0, _borrowed);\n        }\n\n        uint256 _collateralSupplied = fraxLend.userCollateralBalance(address(this));\n\n        // In case of withdraw, withdrawAmount_ may be greater than _collateralSupplied\n        uint256 _hypotheticalCollateral;\n        if (depositAmount_ > 0) {\n            _hypotheticalCollateral = _collateralSupplied + depositAmount_;\n        } else if (_collateralSupplied > withdrawAmount_) {\n            _hypotheticalCollateral = _collateralSupplied - withdrawAmount_;\n        }\n        // It is collateral:asset ratio. i.e. how much collateral to buy 1e18 asset\n        uint224 _exchangeRate = fraxLend.exchangeRateInfo().exchangeRate;\n\n        // Max borrow limit in borrow token i.e. FRAX.\n        uint256 _maxBorrowPossible = (_hypotheticalCollateral * MAX_LTV * EXCHANGE_PRECISION) /\n            (LTV_PRECISION * _exchangeRate);\n\n        // If maxBorrow is zero, we should repay total amount of borrow\n        if (_maxBorrowPossible == 0) {\n            return (0, _borrowed);\n        }\n\n        // Safe buffer to avoid liquidation due to price variations.\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\n\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\n\n        // If current borrow is greater than max borrow, then repay to achieve safe position else borrow more.\n        if (_borrowed > _borrowUpperBound) {\n            // If borrow > upperBound then it is greater than lowerBound too.\n            _repayAmount = _borrowed - _borrowLowerBound;\n        } else if (_borrowed < _borrowLowerBound) {\n            _borrowAmount = _borrowLowerBound - _borrowed;\n            uint256 _availableLiquidity = _getAvailableLiquidity();\n            if (_borrowAmount > _availableLiquidity) {\n                _borrowAmount = _availableLiquidity;\n            }\n        }\n    }\n\n    /// @dev Claim VSP rewards\n    function _claimRewards() internal override returns (address, uint256) {\n        address _poolRewards = vPool.poolRewards();\n        if (_poolRewards != address(0)) {\n            IPoolRewards(_poolRewards).claimReward(address(this));\n        }\n        return (vsp, IERC20(vsp).balanceOf(address(this)));\n    }\n\n    /// @dev Deposit collateral in protocol and adjust borrow position\n    function _deposit() internal {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\n        if (_repayAmount > 0) {\n            // Repay to maintain safe position\n            _repay(_repayAmount);\n            // Read collateral balance again as repay() may change balance\n            _collateralBalance = collateralToken.balanceOf(address(this));\n            if (_collateralBalance > 0) {\n                fraxLend.addCollateral(_collateralBalance, address(this));\n            }\n        } else if (_borrowAmount > 0) {\n            // Happy path, mint more borrow more\n            // borrowAsset will deposit collateral and then borrow FRAX\n            fraxLend.borrowAsset(_borrowAmount, _collateralBalance, address(this));\n            // Deposit all borrow token, FRAX, we have.\n            vPool.deposit(IERC20(borrowToken).balanceOf(address(this)));\n        }\n    }\n\n    function _getAvailableLiquidity() internal view virtual returns (uint256) {\n        uint256 _totalAsset = fraxLend.totalAsset().amount;\n        uint256 _totalBorrow = fraxLend.totalBorrow().amount;\n        return _totalAsset > _totalBorrow ? _totalAsset - _totalBorrow : 0;\n    }\n\n    function _getYTokensInProtocol() internal view returns (uint256) {\n        return (vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18;\n    }\n\n    /// @dev Deposit collateral aka X in FraxLend.\n    function _mintX(uint256 _amount) internal virtual {\n        if (_amount > 0) {\n            fraxLend.addCollateral(_amount, address(this));\n        }\n    }\n\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        // Accrue and update interest\n        fraxLend.addInterest();\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        uint256 _yTokensBorrowed = _borrowedFromFraxLend();\n        uint256 _yTokensHere = IERC20(borrowToken).balanceOf(address(this));\n        uint256 _yTokensInProtocol = _getYTokensInProtocol();\n        uint256 _totalYTokens = _yTokensHere + _yTokensInProtocol;\n\n        // _borrow increases every block. Convert collateral to borrowToken.\n        if (_yTokensBorrowed > _totalYTokens) {\n            _swapToBorrowToken(_yTokensBorrowed - _totalYTokens);\n        } else {\n            // When _yTokensInProtocol exceeds _yTokensBorrowed from protocol\n            // then we have profit from investing borrow tokens. _yTokensHere is profit.\n            if (_yTokensInProtocol > _yTokensBorrowed) {\n                _withdrawY(_yTokensInProtocol - _yTokensBorrowed);\n                _yTokensHere = IERC20(borrowToken).balanceOf(address(this));\n            }\n            if (_yTokensHere > 0) {\n                _safeSwapExactInput(borrowToken, address(collateralToken), _yTokensHere);\n            }\n        }\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _collateralInFraxLend = fraxLend.userCollateralBalance(address(this));\n        uint256 _totalCollateral = _collateralInFraxLend + _collateralHere;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_collateralHere < _profitAndExcessDebt) {\n            _withdrawHere(_profitAndExcessDebt - _collateralHere);\n            _collateralHere = collateralToken.balanceOf(address(this));\n        }\n\n        // Set actual payback first and then profit. Make sure _collateralHere >= _payback + profit.\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _deposit();\n    }\n\n    /**\n     * @dev Repay borrow amount\n     * @param _repayAmount BorrowToken amount that we should repay to maintain safe position.\n     */\n    function _repay(uint256 _repayAmount) internal {\n        if (_repayAmount > 0) {\n            uint256 _totalYTokens = IERC20(borrowToken).balanceOf(address(this)) + _getYTokensInProtocol();\n            // Liability is more than what we have.\n            // To repay loan - convert all rewards to collateral, if asked, and redeem collateral(if needed).\n            // This scenario is rare and if system works okay it will/might happen during final repay only.\n            if (_repayAmount > _totalYTokens) {\n                uint256 _yTokensBorrowed = _borrowedFromFraxLend();\n                // For example this is final repay and 100 blocks has passed since last withdraw/rebalance,\n                // _yTokensBorrowed is increasing due to interest. Now if _repayAmount > _borrowBalanceHere is true\n                // _yTokensBorrowed > _borrowBalanceHere is also true.\n                // To maintain safe position we always try to keep _yTokensBorrowed = _borrowBalanceHere\n\n                // Swap collateral to borrowToken to repay borrow and also maintain safe position\n                // Here borrowToken amount needed is (_yTokensBorrowed - _borrowBalanceHere)\n                _swapToBorrowToken(_yTokensBorrowed - _totalYTokens);\n            }\n            _repayY(_repayAmount);\n        }\n    }\n\n    /// @dev Repay Y to FraxLend. Withdraw Y from end protocol if applicable.\n    function _repayY(uint256 amount_) internal virtual {\n        _withdrawY(amount_);\n        uint256 _fraxShare = fraxLend.toBorrowShares(amount_, false);\n        fraxLend.repayAsset(_fraxShare, address(this));\n    }\n\n    /**\n     * @dev Swap given token to borrowToken\n     * @param shortOnBorrow_ Expected output of this swap\n     */\n    function _swapToBorrowToken(uint256 shortOnBorrow_) internal {\n        // Looking for _amountIn using fixed output amount\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, shortOnBorrow_);\n        if (_amountIn > 0) {\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\n            // If we do not have enough _from token to get expected output, either get\n            // some _from token or adjust expected output.\n            if (_amountIn > _collateralHere) {\n                // Redeem some collateral, so that we have enough collateral to get expected output\n                fraxLend.removeCollateral(_amountIn - _collateralHere, address(this));\n            }\n            swapper.swapExactOutput(address(collateralToken), borrowToken, shortOnBorrow_, _amountIn, address(this));\n        }\n    }\n\n    function _withdrawHere(uint256 amount_) internal override {\n        // Accrue and update interest\n        fraxLend.addInterest();\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, amount_);\n        _repay(_repayAmount);\n\n        // Get minimum of amount_ and collateral supplied and _available collateral in FraxLend\n        uint256 _withdrawAmount = Math.min(\n            amount_,\n            Math.min(fraxLend.userCollateralBalance(address(this)), fraxLend.totalCollateral())\n        );\n        fraxLend.removeCollateral(_withdrawAmount, address(this));\n    }\n\n    function _withdrawY(uint256 amount_) internal virtual {\n        uint256 _pricePerShare = vPool.pricePerShare();\n        uint256 _shares = (amount_ * 1e18) / _pricePerShare;\n        _shares = amount_ > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\n        uint256 _maxShares = vPool.balanceOf(address(this));\n        _shares = _shares > _maxShares ? _maxShares : _shares;\n        if (_shares > 0) {\n            vPool.withdraw(_shares);\n        }\n    }\n\n    /************************************************************************************************\n     *                          Governor/admin/keeper function                                      *\n     ***********************************************************************************************/\n    /**\n     * @notice Recover extra borrow tokens from strategy\n     * @dev If we get liquidation in protocol, we will have borrowToken sitting in strategy.\n     * This function allows to recover idle borrow token amount.\n     * @param _amountToRecover Amount of borrow token we want to recover in 1 call.\n     *      Set it 0 to recover all available borrow tokens\n     */\n    function recoverBorrowToken(uint256 _amountToRecover) external onlyKeeper {\n        uint256 _borrowBalanceHere = IERC20(borrowToken).balanceOf(address(this));\n        uint256 _borrow = _borrowedFromFraxLend();\n\n        if (_borrowBalanceHere > _borrow) {\n            uint256 _extraBorrowBalance = _borrowBalanceHere - _borrow;\n            uint256 _recoveryAmount = (_amountToRecover > 0 && _extraBorrowBalance > _amountToRecover)\n                ? _amountToRecover\n                : _extraBorrowBalance;\n            // Do swap and transfer\n            uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n            _safeSwapExactInput(borrowToken, address(collateralToken), _recoveryAmount);\n            collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)) - _collateralBefore);\n        }\n    }\n\n    /**\n     * @notice Repay all borrow amount and set min borrow limit to 0.\n     * @dev This action usually done when loss is detected in strategy.\n     * @dev 0 borrow limit make sure that any future rebalance do not borrow again.\n     */\n    function repayAll() external onlyKeeper {\n        // Accrue and update interest\n        fraxLend.addInterest();\n        _repay(_borrowedFromFraxLend());\n        minBorrowLimit = 0;\n        maxBorrowLimit = 0;\n    }\n\n    /**\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\n     * @dev It is possible to set 0 as _minBorrowLimit to not borrow anything\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\n     */\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\n        require(_maxBorrowLimit < MAX_BPS, \"invalid-max-borrow-limit\");\n        // set _maxBorrowLimit and _minBorrowLimit to zero to disable borrow;\n        require(\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\n            \"max-should-be-higher-than-min\"\n        );\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\n        // To avoid liquidation due to price variations maxBorrowLimit is a collateral factor that is less than actual collateral factor of protocol\n        minBorrowLimit = _minBorrowLimit;\n        maxBorrowLimit = _maxBorrowLimit;\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/maker/Maker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../Strategy.sol\";\nimport \"../../interfaces/vesper/ICollateralManager.sol\";\n\n/// @title This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in other lending pool to earn interest.\nabstract contract Maker is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    ICollateralManager public immutable cm;\n    bytes32 public immutable collateralType;\n    uint256 public highWater;\n    uint256 public lowWater;\n    uint256 public immutable decimalConversionFactor;\n    uint256 private constant WAT = 10 ** 16;\n\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapper,\n        address _receiptToken,\n        bytes32 _collateralType,\n        uint256 _highWater,\n        uint256 _lowWater,\n        string memory _name\n    ) Strategy(_pool, _swapper, _receiptToken) {\n        require(_cm != address(0), \"cm-address-is-zero\");\n        collateralType = _collateralType;\n        cm = ICollateralManager(_cm);\n        _updateBalancingFactor(_highWater, _lowWater);\n        // Assuming token supports 18 or less decimals.\n        uint256 _decimals = IERC20Metadata(address(IVesperPool(_pool).token())).decimals();\n        decimalConversionFactor = 10 ** (18 - _decimals);\n        NAME = _name;\n    }\n\n    /// @notice Convert from 18 decimals to token defined decimals.\n    function convertFrom18(uint256 _amount) public view returns (uint256) {\n        return _amount / decimalConversionFactor;\n    }\n\n    /// @notice Convert from 18 decimals to token defined decimals.\n    function convertTo18(uint256 _amount) public view returns (uint256) {\n        return _amount * decimalConversionFactor;\n    }\n\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view virtual override returns (bool) {\n        return _token == receiptToken || _token == address(collateralToken);\n    }\n\n    /**\n     * @notice Returns true if pool is underwater.\n     * @notice Underwater - If debt is greater than (earning of pool + DAI in pool + some wei buffer).\n     * @notice Earning - Sum of DAI balance and DAI from accrued reward, if any, in lending pool.\n     */\n    function isUnderwater() external view virtual returns (bool) {\n        return cm.getVaultDebt(address(this)) > (_daiSupplied() + IERC20(DAI).balanceOf(address(this)));\n    }\n\n    /// @notice Returns total collateral locked in the strategy\n    function tvl() external view override returns (uint256) {\n        return convertFrom18(cm.getVaultBalance(address(this))) + collateralToken.balanceOf(address(this));\n    }\n\n    function vaultNum() external view returns (uint256) {\n        return cm.vaultNum(address(this));\n    }\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        IERC20(DAI).safeApprove(address(cm), _amount);\n        collateralToken.safeApprove(address(cm), _amount);\n        collateralToken.safeApprove(address(swapper), _amount);\n        IERC20(DAI).safeApprove(address(swapper), _amount);\n    }\n\n    /**\n     * @dev It will be called during migration. Transfer Maker vault ownership to new strategy\n     * @param _newStrategy Address of new strategy.\n     */\n    function _beforeMigration(address _newStrategy) internal virtual override {\n        require(Maker(_newStrategy).collateralType() == collateralType, \"collateral-type-must-be-the-same\");\n        cm.transferVaultOwnership(_newStrategy);\n    }\n\n    function _calculateSafeBorrowPosition(\n        uint256 _collateralLocked, // All collateral are 18 decimal in Maker\n        uint256 _currentDaiDebt, // DAI is 18 decimal\n        uint256 _collateralUsdRate,\n        uint256 _minimumDebt\n    ) internal view returns (uint256 _daiToRepay, uint256 _daiToBorrow) {\n        uint256 _safeDebt = (_collateralLocked * _collateralUsdRate) / highWater;\n        if (_safeDebt < _minimumDebt) {\n            _daiToRepay = _currentDaiDebt;\n        } else {\n            uint256 _unSafeDebt = (_collateralLocked * _collateralUsdRate) / lowWater;\n            if (_currentDaiDebt > _unSafeDebt) {\n                // Being below low water brings risk of liquidation in Maker.\n                // Withdraw DAI from Lender and deposit in Maker\n                // highWater > lowWater hence _safeDebt < unSafeDebt\n                _daiToRepay = _currentDaiDebt - _safeDebt;\n            } else if (_currentDaiDebt < _safeDebt) {\n                _daiToBorrow = _safeDebt - _currentDaiDebt;\n            }\n        }\n    }\n\n    /**\n     * @notice Convert amount to wrapped (i.e. asset to shares)\n     * @dev Only used when dealing with wrapped token as collateral (e.g. wstETH)\n     */\n    function _convertToWrapped(uint256 _amount) internal view virtual returns (uint256 _wrappedAmount) {\n        _wrappedAmount = _amount;\n    }\n\n    function _depositDaiToLender(uint256 _amount) internal virtual;\n\n    // Dai supplied to other protocol to generate yield in DAI.\n    function _daiSupplied() internal view virtual returns (uint256);\n\n    function _moveDaiToMaker(uint256 _amount) internal {\n        if (_amount > 0) {\n            _withdrawDaiFromLender(_amount);\n            cm.payback(_amount);\n        }\n    }\n\n    function _rebalance() internal virtual override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        (\n            uint256 _wrappedCollateralInVault18,\n            uint256 _currentDaiDebt,\n            uint256 _collateralUsdRate,\n            ,\n            uint256 _minimumDaiDebt\n        ) = cm.getVaultInfo(address(this));\n        _payback = IVesperPool(pool).excessDebt(address(this));\n        uint256 withdrawFromVault;\n        if (_payback > 0) {\n            withdrawFromVault = _convertToWrapped(_payback);\n        }\n        // Assets in maker is always in 18 decimal.\n        {\n            uint256 _wrappedCollateralInVault = convertFrom18(_wrappedCollateralInVault18);\n            uint256 _strategyDebtInWrapped = _convertToWrapped(IVesperPool(pool).totalDebtOf(address(this)));\n            if (_wrappedCollateralInVault > _strategyDebtInWrapped) {\n                withdrawFromVault += _wrappedCollateralInVault - _strategyDebtInWrapped;\n            }\n            if (withdrawFromVault > _wrappedCollateralInVault) {\n                withdrawFromVault = _wrappedCollateralInVault;\n            }\n        }\n        // remaining _collateralInVault\n        _wrappedCollateralInVault18 -= convertTo18(withdrawFromVault); // Collateral in Maker vault is always 18 decimal.\n\n        // Calculate daiToRepay or daiToBorrow considering current collateral in Vault, payback, collateralUsdRate\n        (uint256 _daiToRepay, uint256 _daiToBorrow) = _calculateSafeBorrowPosition(\n            _wrappedCollateralInVault18,\n            _currentDaiDebt,\n            _collateralUsdRate,\n            _minimumDaiDebt\n        );\n        uint256 _daiToWithdraw = _daiToRepay;\n\n        uint256 _daiInLender = _daiSupplied();\n        if (_daiInLender > _currentDaiDebt) {\n            // Yield generated in DAI. Withdraw these yield to convert to collateral.\n            _daiToWithdraw += _daiInLender - _currentDaiDebt;\n        }\n        if (_daiToWithdraw > 0) {\n            // This can withdraw less than requested amount.  This is not problem as long as Dai here >= _daiToRepay. Profit earned in DAI can be reused for _daiToRepay.\n            _withdrawDaiFromLender(_daiToWithdraw);\n        }\n\n        if (_daiToRepay > 0) {\n            cm.payback(_daiToRepay);\n            _currentDaiDebt -= _daiToRepay;\n        }\n        // Dai paid back by now. Good to withdraw excessDebt in collateral.\n        if (withdrawFromVault > 0) {\n            cm.withdrawCollateral(withdrawFromVault);\n            _unwrap(withdrawFromVault);\n        }\n\n        // All remaining dai here is profit.\n        uint256 _profitInDai = IERC20(DAI).balanceOf(address(this));\n        if (_profitInDai > 0) {\n            // calling safeSwap to not revert in case profit conversion to collateralToken fails. Let Dai remains here. It doesn't harm overall.\n            _safeSwapExactInput(DAI, address(collateralToken), _profitInDai);\n        }\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        _payback = Math.min(_payback, _collateralHere);\n        if (_collateralHere > _payback) {\n            _profit = _collateralHere - _payback;\n        }\n\n        // Pool expect this contract has _profit + _payback in the contract. This method would revert if collateral.balanceOf(strategy) < (_profit + _excessDebt);\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n\n        // Pool may send some collateral after reporting earning.\n        _collateralHere = collateralToken.balanceOf(address(this));\n        if (_collateralHere > 0) {\n            uint256 _wrappedHere = _wrap(_collateralHere);\n            cm.depositCollateral(_wrappedHere);\n            _wrappedCollateralInVault18 += convertTo18(_wrappedHere);\n            (, _daiToBorrow) = _calculateSafeBorrowPosition(\n                _wrappedCollateralInVault18,\n                _currentDaiDebt,\n                _collateralUsdRate,\n                _minimumDaiDebt\n            );\n        }\n\n        if (_daiToBorrow > 100e18) {\n            // borrow only if its above dust\n            cm.borrow(_daiToBorrow);\n            _depositDaiToLender(_daiToBorrow);\n        }\n    }\n\n    function _resurface(uint256 _maximumCollateralForDaiSwap) internal virtual {\n        uint256 _totalDaiBalance = _daiSupplied() + IERC20(DAI).balanceOf(address(this));\n        uint256 _daiDebt = cm.getVaultDebt(address(this));\n        require(_daiDebt > _totalDaiBalance, \"pool-is-above-water\");\n        uint256 _daiNeeded = _daiDebt - _totalDaiBalance;\n        uint256 _collateralNeeded = swapper.getAmountIn(address(collateralToken), DAI, _daiNeeded);\n        require(_collateralNeeded <= _maximumCollateralForDaiSwap, \"collateral-require-too-high\");\n        if (_collateralNeeded > 0) {\n            uint256 _wrappedNeeded = _convertToWrapped(_collateralNeeded);\n            if (_wrappedNeeded > 0) {\n                cm.withdrawCollateral(_wrappedNeeded);\n                _collateralNeeded = _unwrap(_wrappedNeeded);\n                swapper.swapExactOutput(address(collateralToken), DAI, _daiNeeded, _collateralNeeded, address(this));\n                cm.payback(IERC20(DAI).balanceOf(address(this)));\n                IVesperPool(pool).reportLoss(_collateralNeeded);\n            }\n        }\n    }\n\n    /**\n     * @notice Unwraps collateral token\n     * @dev Only used when dealing with wrapped token as collateral (e.g. wstETH)\n     */\n    function _unwrap(uint256 _amount) internal virtual returns (uint256 _unwrappedAmount) {\n        _unwrappedAmount = _amount;\n    }\n\n    function _updateBalancingFactor(uint256 _highWater, uint256 _lowWater) internal {\n        require(_lowWater > 0, \"lowWater-is-zero\");\n        require(_highWater > _lowWater, \"highWater-less-than-lowWater\");\n        highWater = _highWater * WAT;\n        lowWater = _lowWater * WAT;\n    }\n\n    function _withdrawDaiFromLender(uint256 _amount) internal virtual;\n\n    /**\n     * @notice Wraps collateral token\n     * @dev Only used when dealing with wrapped token as collateral (e.g. wstETH)\n     */\n    function _wrap(uint256 _amount) internal virtual returns (uint256 _wrappedAmount) {\n        _wrappedAmount = _amount;\n    }\n\n    function _withdrawHere(uint256 _amount) internal virtual override {\n        _amount = _convertToWrapped(_amount);\n\n        (\n            uint256 collateralLocked,\n            uint256 debt,\n            uint256 collateralUsdRate,\n            uint256 collateralRatio,\n            uint256 minimumDebt\n        ) = cm.whatWouldWithdrawDo(address(this), _amount);\n        if (debt > 0 && collateralRatio < lowWater) {\n            // If this withdraw results in Low Water scenario.\n            uint256 maxDebt = (collateralLocked * collateralUsdRate) / highWater;\n            if (maxDebt < minimumDebt) {\n                // This is Dusting scenario\n                _moveDaiToMaker(debt);\n            } else if (maxDebt < debt) {\n                _moveDaiToMaker(debt - maxDebt);\n            }\n        }\n        cm.withdrawCollateral(_amount);\n        _unwrap(_amount);\n    }\n\n    /******************************************************************************\n     *                            Admin functions                              *\n     *****************************************************************************/\n\n    /// @notice Create new Maker vault\n    function createVault() external onlyGovernor {\n        cm.createVault(collateralType);\n    }\n\n    /**\n     * @param _maximumCollateralForDaiSwap To protect from sandwich attack let keeper send _maximumCollateralForDaiSwap\n     * @dev If pool is underwater this function will resolve underwater condition.\n     * If Debt in Maker is greater than Dai balance in lender then pool is underwater.\n     * Lowering DAI debt in Maker will resolve underwater condition.\n     * Resolve: Calculate required collateral token to lower DAI debt. Withdraw required\n     * collateral token from Maker and convert those to DAI via Uniswap.\n     * Finally payback debt in Maker using DAI.\n     * @dev Also report loss in pool.\n     */\n    function resurface(uint256 _maximumCollateralForDaiSwap) external onlyKeeper {\n        _resurface(_maximumCollateralForDaiSwap);\n    }\n\n    /**\n     * @notice Update balancing factors aka high water and low water values.\n     * Water mark values represent Collateral Ratio in Maker. For example 300 as high water\n     * means 300% collateral ratio.\n     * @param _highWater Value for high water mark.\n     * @param _lowWater Value for low water mark.\n     */\n    function updateBalancingFactor(uint256 _highWater, uint256 _lowWater) external onlyGovernor {\n        _updateBalancingFactor(_highWater, _lowWater);\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/maker/MakerVesper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./Maker.sol\";\nimport \"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\";\n\n/// @title This strategy will deposit collateral token in Maker, borrow Dai and\n/// deposit borrowed DAI in Vesper DAI pool to earn interest.\ncontract MakerVesper is Maker {\n    using SafeERC20 for IERC20;\n    address internal constant VSP = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421;\n\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _vPool,\n        bytes32 _collateralType,\n        uint256 _highWater,\n        uint256 _lowWater,\n        string memory _name\n    ) Maker(_pool, _cm, _swapManager, _vPool, _collateralType, _highWater, _lowWater, _name) {\n        require(address(IVesperPool(_vPool).token()) == DAI, \"not-a-valid-dai-pool\");\n    }\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        IERC20(DAI).safeApprove(address(receiptToken), _amount);\n        IERC20(VSP).safeApprove(address(swapper), _amount);\n    }\n\n    /// @notice Claim VSP\n    function _claimRewards() internal virtual override returns (address, uint256) {\n        address _poolRewards = IVesperPool(receiptToken).poolRewards();\n        if (_poolRewards != address(0)) {\n            IPoolRewards(_poolRewards).claimReward(address(this));\n        }\n        return (VSP, IERC20(VSP).balanceOf(address(this)));\n    }\n\n    function _depositDaiToLender(uint256 _amount) internal override {\n        IVesperPool(receiptToken).deposit(_amount);\n    }\n\n    function _daiSupplied() internal view override returns (uint256) {\n        return (IVesperPool(receiptToken).pricePerShare() * IVesperPool(receiptToken).balanceOf(address(this))) / 1e18;\n    }\n\n    function _withdrawDaiFromLender(uint256 _amount) internal override {\n        uint256 _pricePerShare = IVesperPool(receiptToken).pricePerShare();\n        uint256 _share = (_amount * 1e18) / _pricePerShare;\n        // Should not withdraw less than requested amount\n        _share = _amount > ((_share * _pricePerShare) / 1e18) ? _share + 1 : _share;\n        IVesperPool(receiptToken).withdraw(Math.min(_share, IVesperPool(receiptToken).balanceOf(address(this))));\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/maker/MakerVesperStETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../interfaces/external/lido/IWstETH.sol\";\nimport \"./MakerVesper.sol\";\n\n/// @title This strategy will receive stETH, wraps it and deposit wstETH token in Maker, borrow Dai and\n/// deposit borrowed DAI in Vesper DAI pool to earn interest.\ncontract MakerVesperStETH is MakerVesper {\n    using SafeERC20 for IERC20;\n\n    address internal constant STETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\n    IWstETH internal constant WSTETH = IWstETH(0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0);\n\n    constructor(\n        address _pool,\n        address _cm,\n        address _swapManager,\n        address _vPool,\n        bytes32 _collateralType,\n        uint256 _highWater,\n        uint256 _lowWater,\n        string memory _name\n    ) MakerVesper(_pool, _cm, _swapManager, _vPool, _collateralType, _highWater, _lowWater, _name) {\n        require(address(IVesperPool(_pool).token()) == STETH, \"not-a-valid-steth-pool\");\n    }\n\n    function _approveToken(uint256 _amount) internal override {\n        super._approveToken(_amount);\n        IERC20(STETH).safeApprove(address(WSTETH), _amount);\n        IERC20(WSTETH).safeApprove(address(cm), _amount);\n    }\n\n    function _convertToWrapped(uint256 _amount) internal view override returns (uint256) {\n        return WSTETH.getWstETHByStETH(_amount);\n    }\n\n    function _unwrap(uint256 _amount) internal override returns (uint256 _unwrappedAmount) {\n        _unwrappedAmount = WSTETH.unwrap(_amount);\n    }\n\n    function _wrap(uint256 _amount) internal override returns (uint256 _wrappedAmount) {\n        _wrappedAmount = WSTETH.wrap(_amount);\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/stargate/Stargate.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../interfaces/stargate/IStargatePool.sol\";\nimport \"../../interfaces/stargate/IStargateRouter.sol\";\nimport \"../../interfaces/stargate/IStargateFactory.sol\";\nimport \"../../interfaces/stargate/IStargateLpStaking.sol\";\nimport \"../Strategy.sol\";\n\n/// @title This Strategy will deposit collateral token in a Stargate Pool\n/// Stake LP Token and accrue swap rewards\ncontract Stargate is Strategy {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IStargatePool;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    /// @notice Address of Staking contract (MasterChef V2 behavior)\n    IStargateLpStaking public immutable stargateLpStaking;\n    /// @notice Reward pool id of the MasterChef\n    uint256 public immutable stargateLpStakingPoolId;\n    /// @notice Stargate Factory LP Pool Id\n    uint256 public immutable stargatePoolId;\n\n    /// @notice rewardToken, usually STG\n    address public immutable rewardToken;\n\n    IStargatePool internal immutable stargateLp;\n\n    /// @dev Router to add/remove liquidity from a STG Pool\n    IStargateRouter internal immutable stargateRouter;\n\n    constructor(\n        address pool_,\n        address swapper_,\n        IStargateRouter stargateRouter_,\n        IStargatePool stargateLp_,\n        IStargateLpStaking stargateLpStaking_,\n        uint256 stargatePoolId_,\n        uint256 stargateLpStakingPoolId_,\n        string memory name_\n    ) Strategy(pool_, swapper_, address(0)) {\n        require(address(stargateRouter_) != address(0), \"stg-router-is-zero\");\n        require(address(stargateLp_) != address(0), \"stg-lp-pool-is-zero\");\n        require(address(stargateLpStaking_) != address(0), \"stg-staking-is-zero\");\n        require(stargatePoolId_ > 0, \"stg-pool-is-zero\");\n\n        stargateRouter = stargateRouter_;\n        stargateLpStaking = IStargateLpStaking(stargateLpStaking_);\n        receiptToken = address(stargateLp_);\n        stargateLp = stargateLp_;\n        stargatePoolId = stargatePoolId_;\n        stargateLpStakingPoolId = stargateLpStakingPoolId_; // can be 0\n        rewardToken = stargateLpStaking.stargate();\n        NAME = name_;\n    }\n\n    function isReservedToken(address token_) public view override returns (bool) {\n        return token_ == receiptToken;\n    }\n\n    function lpAmountStaked() public view returns (uint256 _lpAmountStaked) {\n        (_lpAmountStaked, ) = stargateLpStaking.userInfo(stargateLpStakingPoolId, address(this));\n    }\n\n    function pendingStargate() external view returns (uint256 _pendingStargate) {\n        return stargateLpStaking.pendingStargate(stargateLpStakingPoolId, address(this));\n    }\n\n    function tvl() external view override returns (uint256) {\n        return _getCollateralInStargate() + collateralToken.balanceOf(address(this));\n    }\n\n    function _approveToken(uint256 _amount) internal virtual override {\n        super._approveToken(_amount);\n        collateralToken.safeApprove(address(stargateRouter), _amount);\n        stargateLp.safeApprove(address(stargateLpStaking), _amount);\n        stargateLp.safeApprove(address(stargateRouter), _amount);\n        IERC20(rewardToken).safeApprove(address(swapper), _amount);\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function _beforeDeposit(uint256 collateralAmount_) internal virtual {}\n\n    /**\n     * @notice Before migration hook.\n     */\n    function _beforeMigration(address newStrategy_) internal override {\n        require(IStrategy(newStrategy_).token() == receiptToken, \"wrong-receipt-token\");\n        stargateLpStaking.withdraw(stargateLpStakingPoolId, lpAmountStaked());\n    }\n\n    /// @notice Claim rewardToken from LPStaking contract\n    function _claimRewards() internal override returns (address, uint256) {\n        // 0 withdraw will trigger rewards claim\n        stargateLpStaking.withdraw(stargateLpStakingPoolId, 0);\n        return (rewardToken, IERC20(rewardToken).balanceOf(address(this)));\n    }\n\n    /// @dev Converts a collateral amount in its relative shares of STG LP Token\n    function _convertToLpShares(uint256 collateralAmount_) internal view returns (uint256) {\n        uint256 _totalLiquidity = stargateLp.totalLiquidity();\n        // amount SD = _collateralAmount / stargateLp.convertRate()\n        // amount LP = SD * totalSupply / totalLiquidity\n        return\n            (_totalLiquidity > 0)\n                ? ((collateralAmount_ / stargateLp.convertRate()) * stargateLp.totalSupply()) / _totalLiquidity\n                : 0;\n    }\n\n    function _deposit(uint256 collateralAmount_) internal {\n        if (collateralAmount_ > 0) {\n            _beforeDeposit(collateralAmount_);\n            stargateRouter.addLiquidity(stargatePoolId, collateralAmount_, address(this));\n            stargateLpStaking.deposit(stargateLpStakingPoolId, stargateLp.balanceOf(address(this)));\n        }\n    }\n\n    /// @dev Gets collateral balance deposited into STG Pool\n    function _getCollateralInStargate() internal view returns (uint256 _collateralStaked) {\n        return stargateLp.amountLPtoLD(lpAmountStaked() + stargateLp.balanceOf(address(this)));\n    }\n\n    function _getLpForCollateral(uint256 collateralAmount_) internal returns (uint256) {\n        uint256 _lpRequired = _convertToLpShares(collateralAmount_);\n        uint256 _lpHere = stargateLp.balanceOf(address(this));\n        if (_lpRequired > _lpHere) {\n            uint256 _lpAmountStaked = lpAmountStaked();\n            uint256 _lpToUnstake = _lpRequired - _lpHere;\n            if (_lpToUnstake > _lpAmountStaked) {\n                _lpToUnstake = _lpAmountStaked;\n            }\n            stargateLpStaking.withdraw(stargateLpStakingPoolId, _lpToUnstake);\n            return stargateLp.balanceOf(address(this));\n        }\n        return _lpRequired;\n    }\n\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n\n        uint256 _totalCollateral = _getCollateralInStargate() + _collateralHere;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_profitAndExcessDebt > _collateralHere) {\n            _withdrawHere(_profitAndExcessDebt - _collateralHere);\n            _collateralHere = collateralToken.balanceOf(address(this));\n        }\n\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n\n        // strategy may get new fund. Deposit and stake it to stargate\n        _deposit(collateralToken.balanceOf(address(this)));\n    }\n\n    /// @dev Withdraw collateral here.\n    /// @dev This method may withdraw less than requested amount. Caller may need to check balance before and after\n    function _withdrawHere(uint256 amount_) internal override {\n        uint256 _lpToRedeem = _getLpForCollateral(amount_);\n        if (_lpToRedeem > 0) {\n            stargateRouter.instantRedeemLocal(uint16(stargatePoolId), _lpToRedeem, address(this));\n        }\n    }\n\n    /************************************************************************************************\n     *                                       keeper function                                        *\n     ***********************************************************************************************/\n\n    /**\n     * @notice OnlyKeeper: This function will withdraw required collateral from given\n     *   destination chain to the chain where this contract is deployed.\n     * @param dstChainId_ Destination chainId.\n     * @dev Stargate has different chainId than EVM chainId.\n     */\n    function withdrawForRebalance(uint16 dstChainId_) external payable onlyKeeper {\n        // amountToWithdraw is excessDebt of strategy\n        uint256 _amountToWithdraw = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n        uint256 _totalCollateral = _getCollateralInStargate();\n\n        if (_totalCollateral > _totalDebt) {\n            // If we have profit then amountToWithdraw = excessDebt + profit\n            _amountToWithdraw += (_totalCollateral - _totalDebt);\n        }\n\n        uint256 _lpToRedeem = _getLpForCollateral(_amountToWithdraw);\n        if (_lpToRedeem > 0) {\n            // RedeemLocal will redeem asset from dstChain to this chain and at this address.\n            // Also srcPoolId and dstPoolId will be same in this case\n            stargateRouter.redeemLocal{value: msg.value}(\n                dstChainId_,\n                stargatePoolId,\n                stargatePoolId,\n                payable(msg.sender),\n                _lpToRedeem,\n                abi.encodePacked(address(this)), // Address which will receive asset\n                IStargateRouter.lzTxObj(0, 0, \"0x\") // Basically empty layer zero tx object\n            );\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/stargate/StargateETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/token/IToken.sol\";\nimport \"./Stargate.sol\";\n\n/// @title This Strategy will deposit ETH in a Stargate Pool\n/// Stake LP Token and accrue swap rewards\ncontract StargateETH is Stargate {\n    using SafeERC20 for TokenLike;\n\n    TokenLike public immutable stargateETH;\n    TokenLike public immutable wrappedNativeToken;\n\n    constructor(\n        address pool_,\n        address swapper_,\n        IStargateRouter stargateRouter_,\n        IStargatePool stargateLp_,\n        IStargateLpStaking stargateLpStaking_,\n        uint256 stargatePoolId_,\n        uint256 stargateLpStakingPoolId_,\n        TokenLike wrappedNativeToken_,\n        string memory name_\n    )\n        Stargate(\n            pool_,\n            swapper_,\n            stargateRouter_,\n            stargateLp_,\n            stargateLpStaking_,\n            stargatePoolId_,\n            stargateLpStakingPoolId_,\n            name_\n        )\n    {\n        require(address(wrappedNativeToken_) != address(0), \"wrapped-eth-is-null\");\n\n        stargateETH = TokenLike(stargateLp.token());\n        wrappedNativeToken = wrappedNativeToken_;\n    }\n\n    receive() external payable {\n        /// @dev Stargate will send ETH when we withdraw from Stargate ETH pool.\n        /// So convert ETH to WETH if ETH sender is not WETH contract.\n        if (msg.sender != address(wrappedNativeToken)) {\n            wrappedNativeToken.deposit{value: address(this).balance}();\n        }\n    }\n\n    function _approveToken(uint256 amount_) internal virtual override {\n        super._approveToken(amount_);\n        stargateETH.safeApprove(address(stargateRouter), amount_);\n    }\n\n    /**\n     * @dev Stargate ETH strategy supports sgETH as collateral and Vesper deals\n     * in WETH. Hence withdraw ETH from WETH and deposit ETH into sgETH.\n     */\n    function _beforeDeposit(uint256 collateralAmount_) internal override {\n        wrappedNativeToken.withdraw(collateralAmount_);\n        stargateETH.deposit{value: collateralAmount_}();\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/Strategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\";\nimport \"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\";\nimport \"../interfaces/swapper/IRoutedSwapper.sol\";\n\nabstract contract Strategy is IStrategy, Context {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    IERC20 public immutable collateralToken;\n    address public receiptToken;\n    address public immutable override pool;\n    address public override feeCollector;\n    IRoutedSwapper public swapper;\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\n\n    EnumerableSet.AddressSet private _keepers;\n\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\n\n    constructor(address _pool, address _swapper, address _receiptToken) {\n        require(_pool != address(0), \"pool-address-is-zero\");\n        require(_swapper != address(0), \"swapper-address-is-zero\");\n        swapper = IRoutedSwapper(_swapper);\n        pool = _pool;\n        collateralToken = IVesperPool(_pool).token();\n        receiptToken = _receiptToken;\n        require(_keepers.add(_msgSender()), \"add-keeper-failed\");\n    }\n\n    modifier onlyGovernor() {\n        require(_msgSender() == IVesperPool(pool).governor(), \"caller-is-not-the-governor\");\n        _;\n    }\n\n    modifier onlyKeeper() {\n        require(_keepers.contains(_msgSender()), \"caller-is-not-a-keeper\");\n        _;\n    }\n\n    modifier onlyPool() {\n        require(_msgSender() == pool, \"caller-is-not-vesper-pool\");\n        _;\n    }\n\n    /**\n     * @notice Add given address in keepers list.\n     * @param _keeperAddress keeper address to add.\n     */\n    function addKeeper(address _keeperAddress) external onlyGovernor {\n        require(_keepers.add(_keeperAddress), \"add-keeper-failed\");\n    }\n\n    /// @dev Approve all required tokens\n    function approveToken(uint256 _approvalAmount) external onlyKeeper {\n        _approveToken(_approvalAmount);\n    }\n\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\n    function claimAndSwapRewards(uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n        _claimAndSwapRewards();\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\n        require(_amountOut >= _minAmountOut, \"not-enough-amountOut\");\n    }\n\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address _token) public view virtual override returns (bool);\n\n    /// @notice Return list of keepers\n    function keepers() external view override returns (address[] memory) {\n        return _keepers.values();\n    }\n\n    /**\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\n     * @param _newStrategy Address of new strategy\n     */\n    function migrate(address _newStrategy) external virtual override onlyPool {\n        require(_newStrategy != address(0), \"new-strategy-address-is-zero\");\n        require(IStrategy(_newStrategy).pool() == pool, \"not-valid-new-strategy\");\n        _beforeMigration(_newStrategy);\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\n     *  withdraw fund for payback, if any, and submit this report to pool.\n     * @return _profit Realized profit in collateral.\n     * @return _loss Realized loss, if any, in collateral.\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\n     */\n    function rebalance() external onlyKeeper returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        return _rebalance();\n    }\n\n    /**\n     * @notice Remove given address from keepers list.\n     * @param _keeperAddress keeper address to remove.\n     */\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\n        require(_keepers.remove(_keeperAddress), \"remove-keeper-failed\");\n    }\n\n    /// @notice onlyKeeper:: Swap given token into collateral token.\n    function swapToCollateral(IERC20 _tokenIn, uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\n        require(address(_tokenIn) != address(collateralToken), \"not-allowed-to-sweep-collateral\");\n        require(!isReservedToken(address(_tokenIn)), \"not-allowed-to-sweep\");\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\n        uint256 _amountIn = _tokenIn.balanceOf(address(this));\n        if (_amountIn > 0) {\n            if (_amountIn > _tokenIn.allowance(address(this), address(swapper))) {\n                _tokenIn.safeApprove(address(swapper), 0);\n                _tokenIn.safeApprove(address(swapper), MAX_UINT_VALUE);\n            }\n            _swapExactInput(address(_tokenIn), address(collateralToken), _amountIn);\n        }\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\n        require(_amountOut >= _minAmountOut, \"not-enough-amountOut\");\n    }\n\n    /**\n     * @notice sweep given token to feeCollector of strategy\n     * @param _fromToken token address to sweep\n     */\n    function sweep(address _fromToken) external override onlyKeeper {\n        require(feeCollector != address(0), \"fee-collector-not-set\");\n        require(_fromToken != address(collateralToken), \"not-allowed-to-sweep-collateral\");\n        require(!isReservedToken(_fromToken), \"not-allowed-to-sweep\");\n        if (_fromToken == ETH) {\n            Address.sendValue(payable(feeCollector), address(this).balance);\n        } else {\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\n        }\n    }\n\n    /// @notice Returns address of token correspond to receipt token\n    function token() external view override returns (address) {\n        return receiptToken;\n    }\n\n    /// @notice Returns address of token correspond to collateral token\n    function collateral() external view override returns (address) {\n        return address(collateralToken);\n    }\n\n    /// @notice Returns total collateral locked in the strategy\n    function tvl() external view virtual returns (uint256);\n\n    /**\n     * @notice Update fee collector\n     * @param _feeCollector fee collector address\n     */\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\n        require(_feeCollector != address(0), \"fee-collector-address-is-zero\");\n        require(_feeCollector != feeCollector, \"fee-collector-is-same\");\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\n        feeCollector = _feeCollector;\n    }\n\n    /**\n     * @notice Update swapper\n     * @param _swapper swapper address\n     */\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\n        require(address(_swapper) != address(0), \"swapper-address-is-zero\");\n        require(_swapper != swapper, \"swapper-is-same\");\n        emit UpdatedSwapper(swapper, _swapper);\n        swapper = _swapper;\n    }\n\n    /**\n     * @notice Withdraw collateral token from end protocol.\n     * @param _amount Amount of collateral token\n     */\n    function withdraw(uint256 _amount) external override onlyPool {\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        if (_collateralHere >= _amount) {\n            collateralToken.safeTransfer(pool, _amount);\n        } else {\n            _withdrawHere(_amount - _collateralHere);\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\n            _collateralHere = collateralToken.balanceOf(address(this));\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\n        }\n    }\n\n    function _approveToken(uint256 _amount) internal virtual {\n        collateralToken.safeApprove(pool, _amount);\n    }\n\n    /**\n     * @dev some strategy may want to prepare before doing migration.\n     *  Example In Maker old strategy want to give vault ownership to new strategy\n     * @param _newStrategy .\n     */\n    function _beforeMigration(address _newStrategy) internal virtual;\n\n    function _claimAndSwapRewards() internal virtual {\n        (address _rewardToken, uint256 _rewardsAmount) = _claimRewards();\n        if (_rewardsAmount > 0) {\n            _safeSwapExactInput(_rewardToken, address(collateralToken), _rewardsAmount);\n        }\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function _claimRewards() internal virtual returns (address, uint256) {}\n\n    function _rebalance() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback);\n\n    function _swapExactInput(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) internal returns (uint256 _amountOut) {\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\n    }\n\n    function _safeSwapExactInput(address _tokenIn, address _tokenOut, uint256 _amountIn) internal {\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\n    }\n\n    // These methods must be implemented by the inheriting strategy\n    function _withdrawHere(uint256 _amount) internal virtual;\n}\n"
    },
    "vesper-strategies/contracts/strategies/vesper/earn/VesperEarn.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"../../Earn.sol\";\nimport \"../Vesper.sol\";\n\n/// @notice This strategy will deposit collateral in a Vesper Grow Pool and converts the yield to another Drip Token\n// solhint-disable no-empty-blocks\ncontract VesperEarn is Vesper, Earn {\n    constructor(\n        address pool_,\n        address swapper_,\n        address receiptToken_,\n        address dripToken_,\n        address vsp_,\n        string memory name_\n    ) Vesper(pool_, swapper_, receiptToken_, vsp_, name_) Earn(dripToken_) {}\n\n    function _approveToken(uint256 amount_) internal virtual override(Strategy, Vesper) {\n        super._approveToken(amount_);\n    }\n\n    function _claimRewards() internal override(Strategy, Vesper) returns (address, uint256) {\n        return Vesper._claimRewards();\n    }\n\n    function _rebalance()\n        internal\n        override(Strategy, Vesper)\n        returns (uint256 _profit, uint256 _loss, uint256 _payback)\n    {\n        (_profit, , _payback) = _generateReport();\n        _handleProfit(_profit);\n        _profit = 0;\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _deposit();\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/vesper/earn/VesperEarnSaddleLp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./VesperEarn.sol\";\nimport \"../../../interfaces/saddle/ISwap.sol\";\n\n/// @notice This strategy will deposit collateral in a Vesper Grow Pool and converts the yield to Saddle LP token\ncontract VesperEarnSaddleLp is VesperEarn {\n    using SafeERC20 for IERC20;\n\n    ISwap public immutable saddlePool;\n    uint8 private immutable collateralIdx;\n\n    constructor(\n        address pool_,\n        ISwap saddlePool_,\n        address swapper_,\n        address receiptToken_,\n        address dripToken_,\n        address vsp_,\n        string memory name_\n    ) VesperEarn(pool_, swapper_, receiptToken_, dripToken_, vsp_, name_) {\n        saddlePool = saddlePool_;\n        collateralIdx = saddlePool.getTokenIndex(address(collateralToken));\n    }\n\n    function _approveToken(uint256 amount_) internal override(VesperEarn) {\n        super._approveToken(amount_);\n        collateralToken.safeApprove(address(saddlePool), amount_);\n    }\n\n    function _convertCollateralToDrip(uint256 _collateralAmount) internal override returns (uint256 _amountOut) {\n        if (_collateralAmount > 0) {\n            uint256[] memory _depositAmounts = new uint256[](collateralIdx + 1);\n            _depositAmounts[collateralIdx] = _collateralAmount;\n\n            // Note: Not checking slippage here because we are dealing with small amounts\n            _amountOut = saddlePool.addLiquidity(_depositAmounts, 0, block.timestamp);\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/vesper/Vesper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\nimport \"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\";\nimport \"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\";\nimport \"../Strategy.sol\";\n\n/// @title This Strategy will deposit collateral token in a Vesper Grow Pool\nabstract contract Vesper is Strategy {\n    using SafeERC20 for IERC20;\n\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n\n    address internal immutable vsp;\n\n    // Note: Same as `receiptToken` but using this in order to save gas since it's `immutable` and `receiptToken` isn't\n    IVesperPool internal immutable vToken;\n\n    constructor(\n        address pool_,\n        address swapper_,\n        address receiptToken_,\n        address vsp_,\n        string memory name_\n    ) Strategy(pool_, swapper_, receiptToken_) {\n        require(receiptToken_ != address(0), \"null-receipt-token\");\n        vToken = IVesperPool(receiptToken_);\n        NAME = name_;\n        vsp = vsp_;\n    }\n\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\n    function isReservedToken(address token_) public view override returns (bool) {\n        return token_ == address(vToken) || token_ == address(collateralToken);\n    }\n\n    /// @notice Returns collateral balance + collateral deposited to Vesper\n    function tvl() external view override returns (uint256) {\n        return collateralToken.balanceOf(address(this)) + _convertToAssets(vToken.balanceOf(address(this)));\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 amount_) internal virtual override {\n        super._approveToken(amount_);\n        address _swapper = address(swapper);\n        collateralToken.safeApprove(address(vToken), amount_);\n        collateralToken.safeApprove(_swapper, amount_);\n        IERC20(vsp).safeApprove(_swapper, amount_);\n    }\n\n    //solhint-disable-next-line no-empty-blocks\n    function _beforeMigration(address _newStrategy) internal override {}\n\n    /// @notice Claim VSP rewards\n    function _claimRewards() internal virtual override returns (address, uint256) {\n        address _poolRewards = vToken.poolRewards();\n        if (_poolRewards != address(0)) {\n            IPoolRewards(_poolRewards).claimReward(address(this));\n        }\n        return (vsp, IERC20(vsp).balanceOf(address(this)));\n    }\n\n    /// @dev Converts a share amount in its relative collateral for Vesper Grow Pool\n    function _convertToAssets(uint256 shares_) internal view returns (uint256 _assets) {\n        if (shares_ > 0) {\n            uint256 _totalSupply = vToken.totalSupply();\n            _assets = (_totalSupply > 0) ? (vToken.totalValue() * shares_) / _totalSupply : 0;\n        }\n    }\n\n    /// @dev Converts a collateral amount in its relative shares for Vesper Grow Pool\n    function _convertToShares(uint256 assets_) internal view returns (uint256 _shares) {\n        if (assets_ > 0) {\n            uint256 _totalValue = vToken.totalValue();\n            _shares = (_totalValue > 0) ? (assets_ * vToken.totalSupply()) / _totalValue : 0;\n        }\n    }\n\n    /// @notice Deposit collateral in Vesper Grow\n    function _deposit() internal {\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\n        if (_collateralBalance > 0) {\n            vToken.deposit(_collateralBalance);\n        }\n    }\n\n    function _generateReport() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _strategyDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        uint256 _sharesHere = vToken.balanceOf(address(this));\n        uint256 _collateralInVesper = _convertToAssets(_sharesHere);\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _totalCollateral = _collateralHere + _collateralInVesper;\n\n        if (_totalCollateral > _strategyDebt) {\n            _profit = _totalCollateral - _strategyDebt;\n        } else {\n            _loss = _strategyDebt - _totalCollateral;\n        }\n\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_profitAndExcessDebt > _collateralHere) {\n            uint256 _amountToWithdraw = Math.min((_profitAndExcessDebt - _collateralHere), _collateralInVesper);\n            if (_amountToWithdraw > 0) {\n                uint256 _sharesToBurn = Math.min(_convertToShares(_amountToWithdraw), _sharesHere);\n                // Making sure that _sharesToBurn is equivalent to > zero assets.\n                if (_convertToAssets(_sharesToBurn) > 0) {\n                    vToken.withdraw(_sharesToBurn);\n                    _collateralHere = collateralToken.balanceOf(address(this));\n                }\n            }\n        }\n\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n    }\n\n    function _rebalance() internal virtual override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        (_profit, _loss, _payback) = _generateReport();\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n        _deposit();\n    }\n\n    /// @dev Withdraw collateral here. Do not transfer to pool\n    function _withdrawHere(uint256 collateralAmount_) internal override {\n        vToken.withdraw(_convertToShares(collateralAmount_));\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/VesperRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\";\nimport \"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\";\nimport \"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\";\nimport \"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/swapper/IRoutedSwapper.sol\";\n\nlibrary VesperRewards {\n    using SafeERC20 for IERC20;\n\n    function _approveToken(IVesperPool vPool_, IRoutedSwapper swapper_, uint256 amount_) internal {\n        address _poolRewards = vPool_.poolRewards();\n        if (_poolRewards != address(0)) {\n            address[] memory _rewardTokens = IPoolRewards(_poolRewards).getRewardTokens();\n            uint256 _length = _rewardTokens.length;\n            for (uint256 i; i < _length; ++i) {\n                // Borrow strategy is using 2 protocols and other protocol may have same reward token.\n                // So it is possible that we have already approved reward token.\n                if (IERC20(_rewardTokens[i]).allowance(address(this), address(swapper_)) == 0) {\n                    IERC20(_rewardTokens[i]).safeApprove(address(swapper_), amount_);\n                } else {\n                    IERC20(_rewardTokens[i]).safeApprove(address(swapper_), 0);\n                    IERC20(_rewardTokens[i]).safeApprove(address(swapper_), amount_);\n                }\n            }\n        }\n    }\n\n    function _claimAndSwapRewards(IVesperPool vPool_, IRoutedSwapper swapper_, address collateralToken_) internal {\n        address _poolRewards = vPool_.poolRewards();\n        if (_poolRewards != address(0)) {\n            IPoolRewards(_poolRewards).claimReward(address(this));\n            address[] memory _rewardTokens = IPoolRewards(_poolRewards).getRewardTokens();\n            uint256 _length = _rewardTokens.length;\n            for (uint256 i; i < _length; ++i) {\n                uint256 _rewardAmount = IERC20(_rewardTokens[i]).balanceOf(address(this));\n                if (_rewardAmount > 0 && _rewardTokens[i] != collateralToken_) {\n                    try\n                        swapper_.swapExactInput(_rewardTokens[i], collateralToken_, _rewardAmount, 1, address(this))\n                    {} catch {} //solhint-disable no-empty-blocks\n                }\n            }\n        }\n    }\n}\n"
    },
    "vesper-strategies/contracts/strategies/yearn/YearnStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\nimport \"../Strategy.sol\";\nimport \"../../interfaces/yearn/IYToken.sol\";\nimport \"../../interfaces/yearn/IStakingRewards.sol\";\n\n/// @title This strategy will deposit collateral token in a Yearn vault and stake receipt tokens\n/// into staking contract to earn rewards and yield.\ncontract YearnStaking is Strategy {\n    using SafeERC20 for IERC20;\n    // solhint-disable-next-line var-name-mixedcase\n    string public NAME;\n    string public constant VERSION = \"5.1.0\";\n    IYToken internal immutable yToken;\n    uint256 internal immutable yTokenDecimals;\n    IStakingRewards public immutable stakingRewards;\n    address public immutable rewardToken;\n    IYToken internal immutable yTokenReward;\n\n    constructor(\n        address pool_,\n        address swapper_,\n        address receiptToken_,\n        address stakingRewards_,\n        string memory name_\n    ) Strategy(pool_, swapper_, receiptToken_) {\n        require(receiptToken_ != address(0), \"yToken-address-is-null\");\n        require(stakingRewards_ != address(0), \"stakingRewards-address-is-null\");\n        yToken = IYToken(receiptToken_);\n        yTokenDecimals = 10 ** yToken.decimals();\n        stakingRewards = IStakingRewards(stakingRewards_);\n        yTokenReward = IYToken(stakingRewards.rewardsToken());\n        rewardToken = yTokenReward.token();\n        NAME = name_;\n    }\n\n    function isReservedToken(address token_) public view virtual override returns (bool) {\n        return token_ == address(yToken);\n    }\n\n    function tvl() external view override returns (uint256) {\n        return _getCollateralFromYearn() + collateralToken.balanceOf(address(this));\n    }\n\n    /// @notice Approve all required tokens\n    function _approveToken(uint256 amount_) internal virtual override {\n        super._approveToken(amount_);\n        collateralToken.safeApprove(address(yToken), amount_);\n        IERC20(address(yToken)).safeApprove(address(stakingRewards), amount_);\n        IERC20(rewardToken).safeApprove(address(swapper), amount_);\n    }\n\n    function _beforeMigration(address) internal override {\n        // Unstake all staked tokens\n        uint256 _stakedShares = stakingRewards.balanceOf(address(this));\n        if (_stakedShares > 0) {\n            stakingRewards.withdraw(_stakedShares);\n        }\n    }\n\n    function _claimAndSwapRewards() internal override {\n        // Claim reward and it will give us yToken as reward\n        stakingRewards.getReward();\n        uint256 _yRewardsAmount = yTokenReward.balanceOf(address(this));\n        if (_yRewardsAmount > 0) {\n            // Withdraw actual reward token from yToken\n            yTokenReward.withdraw(_yRewardsAmount);\n        }\n\n        uint256 _rewardsAmount = IERC20(rewardToken).balanceOf(address(this));\n        // Swap reward to collateral\n        if (_rewardsAmount > 0 && rewardToken != address(collateralToken)) {\n            _safeSwapExactInput(rewardToken, address(collateralToken), _rewardsAmount);\n        }\n    }\n\n    function _convertToShares(uint256 collateralAmount_) internal view returns (uint256) {\n        return (collateralAmount_ * yTokenDecimals) / yToken.pricePerShare();\n    }\n\n    function _getCollateralFromYearn() internal view returns (uint256) {\n        return (_getTotalShares() * yToken.pricePerShare()) / yTokenDecimals;\n    }\n\n    function _getTotalShares() internal view returns (uint256) {\n        return yToken.balanceOf(address(this)) + stakingRewards.balanceOf(address(this));\n    }\n\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\n\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\n        uint256 _totalCollateral = _getCollateralFromYearn() + _collateralHere;\n\n        if (_totalCollateral > _totalDebt) {\n            _profit = _totalCollateral - _totalDebt;\n        } else {\n            _loss = _totalDebt - _totalCollateral;\n        }\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\n        if (_profitAndExcessDebt > _collateralHere) {\n            _withdrawHere(_profitAndExcessDebt - _collateralHere);\n            _collateralHere = collateralToken.balanceOf(address(this));\n        }\n\n        // Make sure _collateralHere >= _payback + profit. set actual payback first and then profit\n        _payback = Math.min(_collateralHere, _excessDebt);\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\n\n        // strategy may get new fund. deposit to generate yield\n        _collateralHere = collateralToken.balanceOf(address(this));\n        if (_convertToShares(_collateralHere) > 0) {\n            yToken.deposit(_collateralHere);\n        }\n\n        // Staking all yTokens to earn rewards\n        uint256 _sharesHere = yToken.balanceOf(address(this));\n        if (_sharesHere > 0) {\n            stakingRewards.stake(_sharesHere);\n        }\n    }\n\n    function _withdrawHere(uint256 amount_) internal override {\n        // Check staked shares and shares here\n        uint256 _sharesRequired = _convertToShares(amount_);\n        uint256 _sharesHere = yToken.balanceOf(address(this));\n        if (_sharesRequired > _sharesHere) {\n            // Unstake minimum of staked and required\n            uint256 _toUnstake = Math.min(stakingRewards.balanceOf(address(this)), (_sharesRequired - _sharesHere));\n            if (_toUnstake > 0) {\n                stakingRewards.withdraw(_toUnstake);\n            }\n        }\n\n        // Withdraw all available yTokens. Reread balance as unstake will increase balance.\n        _sharesHere = yToken.balanceOf(address(this));\n        if (_sharesHere > 0) {\n            yToken.withdraw(yToken.balanceOf(address(this)));\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 500
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}