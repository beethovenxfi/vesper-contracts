{
  "address": "0x5B458d71a353384087CE1c48dA405D9cab14d155",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapper_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fraxLend_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "frax_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vPool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vsp_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousMaxBorrowLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdatedBorrowLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousFeeCollector",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeCollector",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeCollector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "oldSwapper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRoutedSwapper",
          "name": "newSwapper",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapper",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_approvalAmount",
          "type": "uint256"
        }
      ],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "claimAndSwapRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newStrategy",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payback",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToRecover",
          "type": "uint256"
        }
      ],
      "name": "recoverBorrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperAddress",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swapToCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapper",
      "outputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBorrowLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBorrowLimit",
          "type": "uint256"
        }
      ],
      "name": "updateBorrowLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "updateFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoutedSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "updateSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vPool",
      "outputs": [
        {
          "internalType": "contract IVesperPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vsp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d42a5861c3a09ddb1b164eb453d75f2943d168044bd0fe371f9bf6db8a72191",
  "receipt": {
    "to": null,
    "from": "0x169e2FfC1c6b229b04E65A431434bF0e8eD9563d",
    "contractAddress": "0x5B458d71a353384087CE1c48dA405D9cab14d155",
    "transactionIndex": 120,
    "gasUsed": "4725328",
    "logsBloom": "0x
    "blockHash": "0x2cfd672d01dcafbbab111c823ba66d66ba6f601b6a6fba641f05a3676a1f6f03",
    "transactionHash": "0x2d42a5861c3a09ddb1b164eb453d75f2943d168044bd0fe371f9bf6db8a72191",
    "logs": [],
    "blockNumber": 17543500,
    "cumulativeGasUsed": "15483625",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x01e1d41C1159b745298724c5Fd3eAfF3da1C6efD",
    "0x8f156189A3CD28dFc8FB7BbbAce58F98F09c0bB3",
    "0x32467a5fc2d72D21E8DCe990906547A2b012f382",
    "0x853d955aCEf822Db058eb8505911ED77F175b99e",
    "0xc14900dFB1Aa54e7674e1eCf9ce02b3b35157ba5",
    "0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421",
    "FraxLend_Vesper_Xy_WBTC_FRAX"
  ],
  "numDeployments": 1,
  "solcInputHash": "6dfbe19a7733b28acfa7b6409be85b3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapper_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraxLend_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"frax_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vsp_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousMaxBorrowLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"UpdatedBorrowLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"UpdatedFeeCollector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"oldSwapper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoutedSwapper\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"UpdatedSwapper\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvalAmount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"claimAndSwapRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payback\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToRecover\",\"type\":\"uint256\"}],\"name\":\"recoverBorrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperAddress\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapToCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBorrowLimit\",\"type\":\"uint256\"}],\"name\":\"updateBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoutedSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"updateSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vPool\",\"outputs\":[{\"internalType\":\"contract IVesperPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vsp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to add.\"}},\"approveToken(uint256)\":{\"details\":\"Approve all required tokens\"},\"migrate(address)\":{\"details\":\"_beforeMigration hook can be implemented in child strategy to do extra steps.\",\"params\":{\"_newStrategy\":\"Address of new strategy\"}},\"rebalance()\":{\"returns\":{\"_loss\":\"Realized loss, if any, in collateral.\",\"_payback\":\"If strategy has any excess debt, we have to liquidate asset to payback excess debt.\",\"_profit\":\"Realized profit in collateral.\"}},\"recoverBorrowToken(uint256)\":{\"details\":\"If we get liquidation in protocol, we will have borrowToken sitting in strategy. This function allows to recover idle borrow token amount.\",\"params\":{\"_amountToRecover\":\"Amount of borrow token we want to recover in 1 call.      Set it 0 to recover all available borrow tokens\"}},\"removeKeeper(address)\":{\"params\":{\"_keeperAddress\":\"keeper address to remove.\"}},\"repayAll()\":{\"details\":\"This action usually done when loss is detected in strategy.0 borrow limit make sure that any future rebalance do not borrow again.\"},\"sweep(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"updateBorrowLimit(uint256,uint256)\":{\"details\":\"It is possible to set 0 as _minBorrowLimit to not borrow anything\",\"params\":{\"_maxBorrowLimit\":\"It is % of actual collateral factor of protocol\",\"_minBorrowLimit\":\"It is % of actual collateral factor of protocol\"}},\"updateFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"fee collector address\"}},\"updateSwapper(address)\":{\"params\":{\"_swapper\":\"swapper address\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"Amount of collateral token\"}}},\"title\":\"This strategy will deposit collateral token in FraxLend and based on position it will borrow Frax and supplied borrowed tokens to Vesper pool.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addKeeper(address)\":{\"notice\":\"Add given address in keepers list.\"},\"borrowBalance()\":{\"notice\":\"Gets amount of borrowed token in strategy + borrowed tokens deposited in vPool\"},\"claimAndSwapRewards(uint256)\":{\"notice\":\"Claim rewardToken and convert rewardToken into collateral token.\"},\"collateral()\":{\"notice\":\"Returns address of token correspond to collateral token\"},\"keepers()\":{\"notice\":\"Return list of keepers\"},\"migrate(address)\":{\"notice\":\"Migrate all asset and vault ownership,if any, to new strategy\"},\"rebalance()\":{\"notice\":\"OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool.\"},\"recoverBorrowToken(uint256)\":{\"notice\":\"Recover extra borrow tokens from strategy\"},\"removeKeeper(address)\":{\"notice\":\"Remove given address from keepers list.\"},\"repayAll()\":{\"notice\":\"Repay all borrow amount and set min borrow limit to 0.\"},\"swapToCollateral(address,uint256)\":{\"notice\":\"onlyKeeper:: Swap given token into collateral token.\"},\"sweep(address)\":{\"notice\":\"sweep given token to feeCollector of strategy\"},\"token()\":{\"notice\":\"Returns address of token correspond to receipt token\"},\"tvl()\":{\"notice\":\"Returns total collateral locked in the strategy\"},\"updateBorrowLimit(uint256,uint256)\":{\"notice\":\"Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\"},\"updateFeeCollector(address)\":{\"notice\":\"Update fee collector\"},\"updateSwapper(address)\":{\"notice\":\"Update swapper\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw collateral token from end protocol.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol\":\"FraxLendVesperXy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStrategy {\\n    function rebalance() external returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function sweep(address _fromToken) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function migrate(address _newStrategy) external;\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    function collateral() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf7b06736a402e8548dd9cd3752418ab23e44426652f0fee6e0a40e37fbacdcab\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0xbe84461adf33aec1bf31b6d84a5380aaeb791de9a4b95346dd8270dc6632984e\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Pausable interface\\n */\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function stopEverything() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function shutdown() external;\\n\\n    function open() external;\\n}\\n\",\"keccak256\":\"0x22ea4d5c268f55d0839ec0140fef79a8849508c33106c63e57e967e301bf4f68\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPoolRewards {\\n    /// Emitted after reward added\\n    event RewardAdded(address indexed rewardToken, uint256 reward, uint256 rewardDuration);\\n    /// Emitted whenever any user claim rewards\\n    event RewardPaid(address indexed user, address indexed rewardToken, uint256 reward);\\n    /// Emitted after adding new rewards token into rewardTokens array\\n    event RewardTokenAdded(address indexed rewardToken, address[] existingRewardTokens);\\n\\n    function claimReward(address) external;\\n\\n    function notifyRewardAmount(address rewardToken_, uint256 _rewardAmount, uint256 _rewardDuration) external;\\n\\n    function notifyRewardAmount(\\n        address[] memory rewardTokens_,\\n        uint256[] memory rewardAmounts_,\\n        uint256[] memory rewardDurations_\\n    ) external;\\n\\n    function updateReward(address) external;\\n\\n    function claimable(\\n        address account_\\n    ) external view returns (address[] memory _rewardTokens, uint256[] memory _claimableAmounts);\\n\\n    function lastTimeRewardApplicable(address rewardToken_) external view returns (uint256);\\n\\n    function rewardForDuration()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardForDuration);\\n\\n    function rewardPerToken()\\n        external\\n        view\\n        returns (address[] memory _rewardTokens, uint256[] memory _rewardPerTokenRate);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    function isRewardToken(address) external view returns (bool);\\n\\n    function addRewardToken(address newRewardToken_) external;\\n\\n    function periodFinish(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x16bcd3efe70be89cdfb2474135266ee332f17e98084e61601ff138682cfdb67b\",\"license\":\"MIT\"},\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\ninterface IVesperPool is IGovernable, IPausable, IERC20Metadata {\\n    function calculateUniversalFee(uint256 profit_) external view returns (uint256 _fee);\\n\\n    function deposit(uint256 collateralAmount_) external;\\n\\n    function excessDebt(address strategy_) external view returns (uint256);\\n\\n    function poolAccountant() external view returns (address);\\n\\n    function poolRewards() external view returns (address);\\n\\n    function reportEarning(uint256 profit_, uint256 loss_, uint256 payback_) external;\\n\\n    function reportLoss(uint256 loss_) external;\\n\\n    function sweepERC20(address fromToken_) external;\\n\\n    function withdraw(uint256 share_) external;\\n\\n    function keepers() external view returns (address[] memory);\\n\\n    function isKeeper(address address_) external view returns (bool);\\n\\n    function maintainers() external view returns (address[] memory);\\n\\n    function isMaintainer(address address_) external view returns (bool);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function strategy(\\n        address strategy_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _active,\\n            uint256 _interestFee, // Obsolete\\n            uint256 _debtRate, // Obsolete\\n            uint256 _lastRebalance,\\n            uint256 _totalDebt,\\n            uint256 _totalLoss,\\n            uint256 _totalProfit,\\n            uint256 _debtRatio,\\n            uint256 _externalDepositFee\\n        );\\n\\n    function token() external view returns (IERC20);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalDebtOf(address strategy_) external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e04db3bafbcc5985db33ae168ada16fed2bbc42a6cd26bbe936a71a4f537e0c\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/frax-lend/IFraxLend.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IFraxLend is IERC20 {\\n    struct ExchangeRateInfo {\\n        uint32 lastTimestamp;\\n        uint224 exchangeRate; // collateral:asset ratio. i.e. how much collateral to buy 1e18 asset\\n    }\\n\\n    function asset() external view returns (address);\\n\\n    function collateralContract() external view returns (address);\\n\\n    /// @notice Stores information about the current exchange rate. Collateral:Asset ratio\\n    /// @dev Struct packed to save SLOADs. Amount of Collateral Token to buy 1e18 Asset Token\\n    function exchangeRateInfo() external view returns (ExchangeRateInfo memory);\\n\\n    function getConstants()\\n        external\\n        pure\\n        returns (\\n            uint256 _LTV_PRECISION,\\n            uint256 _LIQ_PRECISION,\\n            uint256 _UTIL_PREC,\\n            uint256 _FEE_PRECISION,\\n            uint256 _EXCHANGE_PRECISION,\\n            uint64 _DEFAULT_INT,\\n            uint16 _DEFAULT_PROTOCOL_FEE,\\n            uint256 _MAX_PROTOCOL_FEE\\n        );\\n\\n    function maxLTV() external view returns (uint256);\\n\\n    /// @notice The ```toAssetAmount``` function converts a given number of shares to an asset amount\\n    /// @param _shares Shares of asset (fToken)\\n    /// @param _roundUp Whether to round up after division\\n    /// @return The amount of asset\\n    function toAssetAmount(uint256 _shares, bool _roundUp) external view returns (uint256);\\n\\n    /// @notice The ```toAssetShares``` function converts a given asset amount to a number of asset shares (fTokens)\\n    /// @param _amount The amount of asset\\n    /// @param _roundUp Whether to round up after division\\n    /// @return The number of shares (fTokens)\\n    function toAssetShares(uint256 _amount, bool _roundUp) external view returns (uint256);\\n\\n    /// @notice The ```toBorrowAmount``` function converts a given amount of borrow debt into the number of shares\\n    /// @param _shares Shares of borrow\\n    /// @param _roundUp Whether to roundup during division\\n    /// @return The amount of asset\\n    function toBorrowAmount(uint256 _shares, bool _roundUp) external view returns (uint256);\\n\\n    /// @notice The ```toBorrowShares``` function converts a given amount of borrow debt into the number of shares\\n    /// @param _amount Amount of borrow\\n    /// @param _roundUp Whether to roundup during division\\n    function toBorrowShares(uint256 _amount, bool _roundUp) external view returns (uint256);\\n\\n    struct VaultAccount {\\n        uint128 amount; // Total amount, analogous to market cap\\n        uint128 shares; // Total shares, analogous to shares outstanding\\n    }\\n\\n    function totalAsset() external view returns (VaultAccount memory);\\n\\n    function totalBorrow() external view returns (VaultAccount memory);\\n\\n    // total amount of collateral in contract\\n    function totalCollateral() external view returns (uint256);\\n\\n    /// @notice Stores the balance of collateral for each user\\n    function userCollateralBalance(address _user) external view returns (uint256);\\n\\n    /// @notice Stores the balance of borrow shares for each user\\n    function userBorrowShares(address _user) external view returns (uint256);\\n\\n    /// @notice The ```addInterest``` function is a public implementation of _addInterest and allows 3rd parties to trigger interest accrual\\n    /// @return _interestEarned The amount of interest accrued by all borrowers\\n    function addInterest()\\n        external\\n        returns (uint256 _interestEarned, uint256 _feesAmount, uint256 _feesShare, uint64 _newRate);\\n\\n    /// @notice The ```deposit``` function allows a user to Lend Assets by specifying the amount of Asset Tokens to lend\\n    /// @dev Caller must invoke ```ERC20.approve``` on the Asset Token contract prior to calling function\\n    /// @param _amount The amount of Asset Token to transfer to Pair\\n    /// @param _receiver The address to receive the Asset Shares (fTokens)\\n    /// @return _sharesReceived The number of fTokens received for the deposit\\n    function deposit(uint256 _amount, address _receiver) external returns (uint256 _sharesReceived);\\n\\n    /// @notice The ```redeem``` function allows the caller to redeem their Asset Shares for Asset Tokens\\n    /// @param _shares The number of Asset Shares (fTokens) to burn for Asset Tokens\\n    /// @param _receiver The address to which the Asset Tokens will be transferred\\n    /// @param _owner The owner of the Asset Shares (fTokens)\\n    /// @return _amountToReturn The amount of Asset Tokens to be transferred\\n    function redeem(uint256 _shares, address _receiver, address _owner) external returns (uint256 _amountToReturn);\\n\\n    /// @notice The ```addCollateral``` function allows the caller to add Collateral Token to a borrowers position\\n    /// @dev msg.sender must call ERC20.approve() on the Collateral Token contract prior to invocation\\n    /// @param _collateralAmount The amount of Collateral Token to be added to borrower's position\\n    /// @param _borrower The account to be credited\\n    function addCollateral(uint256 _collateralAmount, address _borrower) external;\\n\\n    /// @notice The ```removeCollateral``` function is used to remove collateral from msg.sender's borrow position\\n    /// @dev msg.sender must be solvent after invocation or transaction will revert\\n    /// @param _collateralAmount The amount of Collateral Token to transfer\\n    /// @param _receiver The address to receive the transferred funds\\n    function removeCollateral(uint256 _collateralAmount, address _receiver) external;\\n\\n    /// @notice The ```borrowAsset``` function allows a user to open/increase a borrow position\\n    /// @dev Borrower must call ```ERC20.approve``` on the Collateral Token contract if applicable\\n    /// @param _borrowAmount The amount of Asset Token to borrow\\n    /// @param _collateralAmount The amount of Collateral Token to transfer to Pair\\n    /// @param _receiver The address which will receive the Asset Tokens\\n    /// @return _shares The number of borrow Shares the msg.sender will be debited\\n    function borrowAsset(\\n        uint256 _borrowAmount,\\n        uint256 _collateralAmount,\\n        address _receiver\\n    ) external returns (uint256 _shares);\\n\\n    /// @notice The ```repayAsset``` function allows the caller to pay down the debt for a given borrower.\\n    /// @dev Caller must first invoke ```ERC20.approve()``` for the Asset Token contract\\n    /// @param _shares The number of Borrow Shares which will be repaid by the call\\n    /// @param _borrower The account for which the debt will be reduced\\n    /// @return _amountToRepay The amount of Asset Tokens which were transferred in order to repay the Borrow Shares\\n    function repayAsset(uint256 _shares, address _borrower) external returns (uint256 _amountToRepay);\\n}\\n\",\"keccak256\":\"0x7494ef4beaf392c8accc5a8e847a1a8fb862ba247eefff9b69be9c98ce23290f\",\"license\":\"MIT\"},\"vesper-strategies/contracts/interfaces/swapper/IRoutedSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Routed Swapper interface\\n * @dev This contract doesn't support native coins (e.g. ETH, AVAX, MATIC, etc) use wrapper tokens instead\\n */\\ninterface IRoutedSwapper {\\n    /**\\n     * @notice The list of supported DEXes\\n     * @dev This function is gas intensive\\n     */\\n    function getAllExchanges() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountIn(address tokenIn_, address tokenOut_, uint256 amountOut_) external returns (uint256 _amountIn);\\n\\n    /**\\n     * @notice Get *spot* quote\\n     * It will return the swap amount based on the current reserves of the best pair/path found (i.e. spot price).\\n     * @dev It shouldn't be used as oracle!!!\\n     */\\n    function getAmountOut(address tokenIn_, address tokenOut_, uint256 amountIn_) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact input swap - will revert if there is no default routing\\n     */\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address _receiver\\n    ) external returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Perform an exact output swap - will revert if there is no default routing\\n     */\\n    function swapExactOutput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address receiver_\\n    ) external returns (uint256 _amountIn);\\n}\\n\",\"keccak256\":\"0x853ff5f9fbdd441f535370e39d43221d72d7a02fd5e48e343bbecb716a633f10\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-commons/contracts/interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/swapper/IRoutedSwapper.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Context {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IERC20 public immutable collateralToken;\\n    address public receiptToken;\\n    address public immutable override pool;\\n    address public override feeCollector;\\n    IRoutedSwapper public swapper;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    EnumerableSet.AddressSet private _keepers;\\n\\n    event UpdatedFeeCollector(address indexed previousFeeCollector, address indexed newFeeCollector);\\n    event UpdatedSwapper(IRoutedSwapper indexed oldSwapper, IRoutedSwapper indexed newSwapper);\\n\\n    constructor(address _pool, address _swapper, address _receiptToken) {\\n        require(_pool != address(0), \\\"pool-address-is-zero\\\");\\n        require(_swapper != address(0), \\\"swapper-address-is-zero\\\");\\n        swapper = IRoutedSwapper(_swapper);\\n        pool = _pool;\\n        collateralToken = IVesperPool(_pool).token();\\n        receiptToken = _receiptToken;\\n        require(_keepers.add(_msgSender()), \\\"add-keeper-failed\\\");\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(_msgSender() == IVesperPool(pool).governor(), \\\"caller-is-not-the-governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(_keepers.contains(_msgSender()), \\\"caller-is-not-a-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-vesper-pool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add given address in keepers list.\\n     * @param _keeperAddress keeper address to add.\\n     */\\n    function addKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.add(_keeperAddress), \\\"add-keeper-failed\\\");\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken(uint256 _approvalAmount) external onlyKeeper {\\n        _approveToken(_approvalAmount);\\n    }\\n\\n    /// @notice Claim rewardToken and convert rewardToken into collateral token.\\n    function claimAndSwapRewards(uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        _claimAndSwapRewards();\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /// @notice Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @notice Return list of keepers\\n    function keepers() external view override returns (address[] memory) {\\n        return _keepers.values();\\n    }\\n\\n    /**\\n     * @notice Migrate all asset and vault ownership,if any, to new strategy\\n     * @dev _beforeMigration hook can be implemented in child strategy to do extra steps.\\n     * @param _newStrategy Address of new strategy\\n     */\\n    function migrate(address _newStrategy) external virtual override onlyPool {\\n        require(_newStrategy != address(0), \\\"new-strategy-address-is-zero\\\");\\n        require(IStrategy(_newStrategy).pool() == pool, \\\"not-valid-new-strategy\\\");\\n        _beforeMigration(_newStrategy);\\n        IERC20(receiptToken).safeTransfer(_newStrategy, IERC20(receiptToken).balanceOf(address(this)));\\n        collateralToken.safeTransfer(_newStrategy, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice OnlyKeeper: Rebalance profit, loss and investment of this strategy.\\n     *  Calculate profit, loss and payback of this strategy and realize profit/loss and\\n     *  withdraw fund for payback, if any, and submit this report to pool.\\n     * @return _profit Realized profit in collateral.\\n     * @return _loss Realized loss, if any, in collateral.\\n     * @return _payback If strategy has any excess debt, we have to liquidate asset to payback excess debt.\\n     */\\n    function rebalance() external onlyKeeper returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        return _rebalance();\\n    }\\n\\n    /**\\n     * @notice Remove given address from keepers list.\\n     * @param _keeperAddress keeper address to remove.\\n     */\\n    function removeKeeper(address _keeperAddress) external onlyGovernor {\\n        require(_keepers.remove(_keeperAddress), \\\"remove-keeper-failed\\\");\\n    }\\n\\n    /// @notice onlyKeeper:: Swap given token into collateral token.\\n    function swapToCollateral(IERC20 _tokenIn, uint256 _minAmountOut) external onlyKeeper returns (uint256 _amountOut) {\\n        require(address(_tokenIn) != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(address(_tokenIn)), \\\"not-allowed-to-sweep\\\");\\n        uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n        uint256 _amountIn = _tokenIn.balanceOf(address(this));\\n        if (_amountIn > 0) {\\n            if (_amountIn > _tokenIn.allowance(address(this), address(swapper))) {\\n                _tokenIn.safeApprove(address(swapper), 0);\\n                _tokenIn.safeApprove(address(swapper), MAX_UINT_VALUE);\\n            }\\n            _swapExactInput(address(_tokenIn), address(collateralToken), _amountIn);\\n        }\\n        _amountOut = collateralToken.balanceOf(address(this)) - _collateralBefore;\\n        require(_amountOut >= _minAmountOut, \\\"not-enough-amountOut\\\");\\n    }\\n\\n    /**\\n     * @notice sweep given token to feeCollector of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweep(address _fromToken) external override onlyKeeper {\\n        require(feeCollector != address(0), \\\"fee-collector-not-set\\\");\\n        require(_fromToken != address(collateralToken), \\\"not-allowed-to-sweep-collateral\\\");\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(feeCollector), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(feeCollector, _amount);\\n        }\\n    }\\n\\n    /// @notice Returns address of token correspond to receipt token\\n    function token() external view override returns (address) {\\n        return receiptToken;\\n    }\\n\\n    /// @notice Returns address of token correspond to collateral token\\n    function collateral() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Update fee collector\\n     * @param _feeCollector fee collector address\\n     */\\n    function updateFeeCollector(address _feeCollector) external onlyGovernor {\\n        require(_feeCollector != address(0), \\\"fee-collector-address-is-zero\\\");\\n        require(_feeCollector != feeCollector, \\\"fee-collector-is-same\\\");\\n        emit UpdatedFeeCollector(feeCollector, _feeCollector);\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Update swapper\\n     * @param _swapper swapper address\\n     */\\n    function updateSwapper(IRoutedSwapper _swapper) external onlyGovernor {\\n        require(address(_swapper) != address(0), \\\"swapper-address-is-zero\\\");\\n        require(_swapper != swapper, \\\"swapper-is-same\\\");\\n        emit UpdatedSwapper(swapper, _swapper);\\n        swapper = _swapper;\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral token from end protocol.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyPool {\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        if (_collateralHere >= _amount) {\\n            collateralToken.safeTransfer(pool, _amount);\\n        } else {\\n            _withdrawHere(_amount - _collateralHere);\\n            // Do not assume _withdrawHere() will withdraw exact amount. Check balance again and transfer to pool\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n            collateralToken.safeTransfer(pool, Math.min(_amount, _collateralHere));\\n        }\\n    }\\n\\n    function _approveToken(uint256 _amount) internal virtual {\\n        collateralToken.safeApprove(pool, _amount);\\n    }\\n\\n    /**\\n     * @dev some strategy may want to prepare before doing migration.\\n     *  Example In Maker old strategy want to give vault ownership to new strategy\\n     * @param _newStrategy .\\n     */\\n    function _beforeMigration(address _newStrategy) internal virtual;\\n\\n    function _claimAndSwapRewards() internal virtual {\\n        (address _rewardToken, uint256 _rewardsAmount) = _claimRewards();\\n        if (_rewardsAmount > 0) {\\n            _safeSwapExactInput(_rewardToken, address(collateralToken), _rewardsAmount);\\n        }\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _claimRewards() internal virtual returns (address, uint256) {}\\n\\n    function _rebalance() internal virtual returns (uint256 _profit, uint256 _loss, uint256 _payback);\\n\\n    function _swapExactInput(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal returns (uint256 _amountOut) {\\n        _amountOut = swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this));\\n    }\\n\\n    function _safeSwapExactInput(address _tokenIn, address _tokenOut, uint256 _amountIn) internal {\\n        try swapper.swapExactInput(_tokenIn, _tokenOut, _amountIn, 1, address(this)) {} catch {} //solhint-disable no-empty-blocks\\n    }\\n\\n    // These methods must be implemented by the inheriting strategy\\n    function _withdrawHere(uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x58711ce2d409c8069e25980d2df4d09fd73e66c8ed41ba9ade1829bbb4ad6d80\",\"license\":\"MIT\"},\"vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"vesper-pools/contracts/dependencies/openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"vesper-pools/contracts/interfaces/vesper/IPoolRewards.sol\\\";\\nimport \\\"../Strategy.sol\\\";\\nimport \\\"../../interfaces/frax-lend/IFraxLend.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\n/// @title This strategy will deposit collateral token in FraxLend and based on position it will\\n/// borrow Frax and supplied borrowed tokens to Vesper pool.\\ncontract FraxLendVesperXy is Strategy {\\n    using SafeERC20 for IERC20;\\n    // solhint-disable-next-line var-name-mixedcase\\n    string public NAME;\\n    string public constant VERSION = \\\"5.1.0\\\";\\n\\n    uint256 internal constant MAX_BPS = 10_000; //100%\\n    uint256 public minBorrowLimit = 7_000; // 70% of actual collateral factor of protocol\\n    uint256 public maxBorrowLimit = 8_500; // 85% of actual collateral factor of protocol\\n\\n    IFraxLend internal immutable fraxLend;\\n    address public immutable borrowToken;\\n\\n    // Destination Grow Pool for borrowed Token\\n    IVesperPool public immutable vPool;\\n    // VSP token address\\n    address public immutable vsp;\\n\\n    // FraxLend constants\\n    uint256 internal immutable MAX_LTV;\\n    uint256 internal immutable LTV_PRECISION;\\n    uint256 internal immutable EXCHANGE_PRECISION;\\n\\n    event UpdatedBorrowLimit(\\n        uint256 previousMinBorrowLimit,\\n        uint256 newMinBorrowLimit,\\n        uint256 previousMaxBorrowLimit,\\n        uint256 newMaxBorrowLimit\\n    );\\n\\n    constructor(\\n        address pool_,\\n        address swapper_,\\n        address fraxLend_,\\n        address frax_,\\n        address vPool_,\\n        address vsp_,\\n        string memory name_\\n    ) Strategy(pool_, swapper_, fraxLend_) {\\n        require(fraxLend_ != address(0), \\\"frax-lend-address-is-null\\\");\\n        require(frax_ != address(0), \\\"frax-address-is-null\\\");\\n        require(vsp_ != address(0), \\\"vsp-address-is-null\\\");\\n        require(address(IVesperPool(vPool_).token()) == frax_, \\\"invalid-grow-pool\\\");\\n        require(IFraxLend(fraxLend_).collateralContract() == address(collateralToken), \\\"collateral-mismatch\\\");\\n        fraxLend = IFraxLend(fraxLend_);\\n        borrowToken = frax_;\\n        vPool = IVesperPool(vPool_);\\n        vsp = vsp_;\\n        NAME = name_;\\n\\n        (uint256 _LTV_PRECISION, , , , uint256 _EXCHANGE_PRECISION, , , ) = fraxLend.getConstants();\\n        LTV_PRECISION = _LTV_PRECISION;\\n        EXCHANGE_PRECISION = _EXCHANGE_PRECISION;\\n        MAX_LTV = fraxLend.maxLTV();\\n    }\\n\\n    /// @notice Gets amount of borrowed token in strategy + borrowed tokens deposited in vPool\\n    function borrowBalance() external view returns (uint256) {\\n        return IERC20(borrowToken).balanceOf(address(this)) + _getYTokensInProtocol();\\n    }\\n\\n    function isReservedToken(address token_) public view virtual override returns (bool) {\\n        return\\n            token_ == address(fraxLend) ||\\n            token_ == address(collateralToken) ||\\n            token_ == borrowToken ||\\n            token_ == address(vPool);\\n    }\\n\\n    /// @notice Returns total collateral locked in the strategy\\n    function tvl() external view override returns (uint256) {\\n        return fraxLend.userCollateralBalance(address(this)) + collateralToken.balanceOf(address(this));\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function _approveToken(uint256 amount_) internal virtual override {\\n        super._approveToken(amount_);\\n        address _swapper = address(swapper);\\n        collateralToken.safeApprove(address(fraxLend), amount_);\\n        collateralToken.safeApprove(_swapper, amount_);\\n        IERC20(borrowToken).safeApprove(_swapper, amount_);\\n        IERC20(borrowToken).safeApprove(address(fraxLend), amount_);\\n        IERC20(borrowToken).safeApprove(address(vPool), amount_);\\n        IERC20(vsp).safeApprove(_swapper, amount_);\\n    }\\n\\n    /**\\n     * @dev Repay borrow and withdraw collateral\\n     * @param newStrategy_ Address of new strategy.\\n     */\\n    function _beforeMigration(address newStrategy_) internal override {\\n        require(IStrategy(newStrategy_).token() == address(fraxLend), \\\"wrong-receipt-token\\\");\\n        // Accrue and update interest\\n        fraxLend.addInterest();\\n        _repay(_borrowedFromFraxLend());\\n\\n        fraxLend.removeCollateral(fraxLend.userCollateralBalance(address(this)), address(this));\\n    }\\n\\n    function _borrowedFromFraxLend() internal view returns (uint256) {\\n        return fraxLend.toBorrowAmount(fraxLend.userBorrowShares(address(this)), true);\\n    }\\n\\n    /**\\n     * @dev Calculate borrow and repay amount based on current collateral and new deposit/withdraw amount.\\n     * @param depositAmount_ deposit amount\\n     * @param withdrawAmount_ withdraw amount\\n     * @return _borrowAmount borrow more amount\\n     * @return _repayAmount repay amount to keep ltv within limits\\n     */\\n    function _calculateBorrowPosition(\\n        uint256 depositAmount_,\\n        uint256 withdrawAmount_\\n    ) internal view returns (uint256 _borrowAmount, uint256 _repayAmount) {\\n        require(depositAmount_ == 0 || withdrawAmount_ == 0, \\\"all-input-gt-zero\\\");\\n        uint256 _borrowed = _borrowedFromFraxLend();\\n        // If maximum borrow limit set to 0 then repay borrow\\n        if (maxBorrowLimit == 0) {\\n            return (0, _borrowed);\\n        }\\n\\n        uint256 _collateralSupplied = fraxLend.userCollateralBalance(address(this));\\n\\n        // In case of withdraw, withdrawAmount_ may be greater than _collateralSupplied\\n        uint256 _hypotheticalCollateral;\\n        if (depositAmount_ > 0) {\\n            _hypotheticalCollateral = _collateralSupplied + depositAmount_;\\n        } else if (_collateralSupplied > withdrawAmount_) {\\n            _hypotheticalCollateral = _collateralSupplied - withdrawAmount_;\\n        }\\n        // It is collateral:asset ratio. i.e. how much collateral to buy 1e18 asset\\n        uint224 _exchangeRate = fraxLend.exchangeRateInfo().exchangeRate;\\n\\n        // Max borrow limit in borrow token i.e. FRAX.\\n        uint256 _maxBorrowPossible = (_hypotheticalCollateral * MAX_LTV * EXCHANGE_PRECISION) /\\n            (LTV_PRECISION * _exchangeRate);\\n\\n        // If maxBorrow is zero, we should repay total amount of borrow\\n        if (_maxBorrowPossible == 0) {\\n            return (0, _borrowed);\\n        }\\n\\n        // Safe buffer to avoid liquidation due to price variations.\\n        uint256 _borrowUpperBound = (_maxBorrowPossible * maxBorrowLimit) / MAX_BPS;\\n\\n        // Borrow up to _borrowLowerBound and keep buffer of _borrowUpperBound - _borrowLowerBound for price variation\\n        uint256 _borrowLowerBound = (_maxBorrowPossible * minBorrowLimit) / MAX_BPS;\\n\\n        // If current borrow is greater than max borrow, then repay to achieve safe position else borrow more.\\n        if (_borrowed > _borrowUpperBound) {\\n            // If borrow > upperBound then it is greater than lowerBound too.\\n            _repayAmount = _borrowed - _borrowLowerBound;\\n        } else if (_borrowed < _borrowLowerBound) {\\n            _borrowAmount = _borrowLowerBound - _borrowed;\\n            uint256 _availableLiquidity = _getAvailableLiquidity();\\n            if (_borrowAmount > _availableLiquidity) {\\n                _borrowAmount = _availableLiquidity;\\n            }\\n        }\\n    }\\n\\n    /// @dev Claim VSP rewards\\n    function _claimRewards() internal override returns (address, uint256) {\\n        address _poolRewards = vPool.poolRewards();\\n        if (_poolRewards != address(0)) {\\n            IPoolRewards(_poolRewards).claimReward(address(this));\\n        }\\n        return (vsp, IERC20(vsp).balanceOf(address(this)));\\n    }\\n\\n    /// @dev Deposit collateral in protocol and adjust borrow position\\n    function _deposit() internal {\\n        uint256 _collateralBalance = collateralToken.balanceOf(address(this));\\n        (uint256 _borrowAmount, uint256 _repayAmount) = _calculateBorrowPosition(_collateralBalance, 0);\\n        if (_repayAmount > 0) {\\n            // Repay to maintain safe position\\n            _repay(_repayAmount);\\n            // Read collateral balance again as repay() may change balance\\n            _collateralBalance = collateralToken.balanceOf(address(this));\\n            if (_collateralBalance > 0) {\\n                fraxLend.addCollateral(_collateralBalance, address(this));\\n            }\\n        } else if (_borrowAmount > 0) {\\n            // Happy path, mint more borrow more\\n            // borrowAsset will deposit collateral and then borrow FRAX\\n            fraxLend.borrowAsset(_borrowAmount, _collateralBalance, address(this));\\n            // Deposit all borrow token, FRAX, we have.\\n            vPool.deposit(IERC20(borrowToken).balanceOf(address(this)));\\n        }\\n    }\\n\\n    function _getAvailableLiquidity() internal view virtual returns (uint256) {\\n        uint256 _totalAsset = fraxLend.totalAsset().amount;\\n        uint256 _totalBorrow = fraxLend.totalBorrow().amount;\\n        return _totalAsset > _totalBorrow ? _totalAsset - _totalBorrow : 0;\\n    }\\n\\n    function _getYTokensInProtocol() internal view returns (uint256) {\\n        return (vPool.pricePerShare() * vPool.balanceOf(address(this))) / 1e18;\\n    }\\n\\n    /// @dev Deposit collateral aka X in FraxLend.\\n    function _mintX(uint256 _amount) internal virtual {\\n        if (_amount > 0) {\\n            fraxLend.addCollateral(_amount, address(this));\\n        }\\n    }\\n\\n    function _rebalance() internal override returns (uint256 _profit, uint256 _loss, uint256 _payback) {\\n        // Accrue and update interest\\n        fraxLend.addInterest();\\n        uint256 _excessDebt = IVesperPool(pool).excessDebt(address(this));\\n        uint256 _totalDebt = IVesperPool(pool).totalDebtOf(address(this));\\n\\n        uint256 _yTokensBorrowed = _borrowedFromFraxLend();\\n        uint256 _yTokensHere = IERC20(borrowToken).balanceOf(address(this));\\n        uint256 _yTokensInProtocol = _getYTokensInProtocol();\\n        uint256 _totalYTokens = _yTokensHere + _yTokensInProtocol;\\n\\n        // _borrow increases every block. Convert collateral to borrowToken.\\n        if (_yTokensBorrowed > _totalYTokens) {\\n            _swapToBorrowToken(_yTokensBorrowed - _totalYTokens);\\n        } else {\\n            // When _yTokensInProtocol exceeds _yTokensBorrowed from protocol\\n            // then we have profit from investing borrow tokens. _yTokensHere is profit.\\n            if (_yTokensInProtocol > _yTokensBorrowed) {\\n                _withdrawY(_yTokensInProtocol - _yTokensBorrowed);\\n                _yTokensHere = IERC20(borrowToken).balanceOf(address(this));\\n            }\\n            if (_yTokensHere > 0) {\\n                _safeSwapExactInput(borrowToken, address(collateralToken), _yTokensHere);\\n            }\\n        }\\n\\n        uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n        uint256 _collateralInFraxLend = fraxLend.userCollateralBalance(address(this));\\n        uint256 _totalCollateral = _collateralInFraxLend + _collateralHere;\\n\\n        if (_totalCollateral > _totalDebt) {\\n            _profit = _totalCollateral - _totalDebt;\\n        } else {\\n            _loss = _totalDebt - _totalCollateral;\\n        }\\n        uint256 _profitAndExcessDebt = _profit + _excessDebt;\\n        if (_collateralHere < _profitAndExcessDebt) {\\n            _withdrawHere(_profitAndExcessDebt - _collateralHere);\\n            _collateralHere = collateralToken.balanceOf(address(this));\\n        }\\n\\n        // Set actual payback first and then profit. Make sure _collateralHere >= _payback + profit.\\n        _payback = Math.min(_collateralHere, _excessDebt);\\n        _profit = _collateralHere > _payback ? Math.min((_collateralHere - _payback), _profit) : 0;\\n\\n        IVesperPool(pool).reportEarning(_profit, _loss, _payback);\\n        _deposit();\\n    }\\n\\n    /**\\n     * @dev Repay borrow amount\\n     * @param _repayAmount BorrowToken amount that we should repay to maintain safe position.\\n     */\\n    function _repay(uint256 _repayAmount) internal {\\n        if (_repayAmount > 0) {\\n            uint256 _totalYTokens = IERC20(borrowToken).balanceOf(address(this)) + _getYTokensInProtocol();\\n            // Liability is more than what we have.\\n            // To repay loan - convert all rewards to collateral, if asked, and redeem collateral(if needed).\\n            // This scenario is rare and if system works okay it will/might happen during final repay only.\\n            if (_repayAmount > _totalYTokens) {\\n                uint256 _yTokensBorrowed = _borrowedFromFraxLend();\\n                // For example this is final repay and 100 blocks has passed since last withdraw/rebalance,\\n                // _yTokensBorrowed is increasing due to interest. Now if _repayAmount > _borrowBalanceHere is true\\n                // _yTokensBorrowed > _borrowBalanceHere is also true.\\n                // To maintain safe position we always try to keep _yTokensBorrowed = _borrowBalanceHere\\n\\n                // Swap collateral to borrowToken to repay borrow and also maintain safe position\\n                // Here borrowToken amount needed is (_yTokensBorrowed - _borrowBalanceHere)\\n                _swapToBorrowToken(_yTokensBorrowed - _totalYTokens);\\n            }\\n            _repayY(_repayAmount);\\n        }\\n    }\\n\\n    /// @dev Repay Y to FraxLend. Withdraw Y from end protocol if applicable.\\n    function _repayY(uint256 amount_) internal virtual {\\n        _withdrawY(amount_);\\n        uint256 _fraxShare = fraxLend.toBorrowShares(amount_, false);\\n        fraxLend.repayAsset(_fraxShare, address(this));\\n    }\\n\\n    /**\\n     * @dev Swap given token to borrowToken\\n     * @param shortOnBorrow_ Expected output of this swap\\n     */\\n    function _swapToBorrowToken(uint256 shortOnBorrow_) internal {\\n        // Looking for _amountIn using fixed output amount\\n        uint256 _amountIn = swapper.getAmountIn(address(collateralToken), borrowToken, shortOnBorrow_);\\n        if (_amountIn > 0) {\\n            uint256 _collateralHere = collateralToken.balanceOf(address(this));\\n            // If we do not have enough _from token to get expected output, either get\\n            // some _from token or adjust expected output.\\n            if (_amountIn > _collateralHere) {\\n                // Redeem some collateral, so that we have enough collateral to get expected output\\n                fraxLend.removeCollateral(_amountIn - _collateralHere, address(this));\\n            }\\n            swapper.swapExactOutput(address(collateralToken), borrowToken, shortOnBorrow_, _amountIn, address(this));\\n        }\\n    }\\n\\n    function _withdrawHere(uint256 amount_) internal override {\\n        // Accrue and update interest\\n        fraxLend.addInterest();\\n        (, uint256 _repayAmount) = _calculateBorrowPosition(0, amount_);\\n        _repay(_repayAmount);\\n\\n        // Get minimum of amount_ and collateral supplied and _available collateral in FraxLend\\n        uint256 _withdrawAmount = Math.min(\\n            amount_,\\n            Math.min(fraxLend.userCollateralBalance(address(this)), fraxLend.totalCollateral())\\n        );\\n        fraxLend.removeCollateral(_withdrawAmount, address(this));\\n    }\\n\\n    function _withdrawY(uint256 amount_) internal virtual {\\n        uint256 _pricePerShare = vPool.pricePerShare();\\n        uint256 _shares = (amount_ * 1e18) / _pricePerShare;\\n        _shares = amount_ > ((_shares * _pricePerShare) / 1e18) ? _shares + 1 : _shares;\\n        uint256 _maxShares = vPool.balanceOf(address(this));\\n        _shares = _shares > _maxShares ? _maxShares : _shares;\\n        if (_shares > 0) {\\n            vPool.withdraw(_shares);\\n        }\\n    }\\n\\n    /************************************************************************************************\\n     *                          Governor/admin/keeper function                                      *\\n     ***********************************************************************************************/\\n    /**\\n     * @notice Recover extra borrow tokens from strategy\\n     * @dev If we get liquidation in protocol, we will have borrowToken sitting in strategy.\\n     * This function allows to recover idle borrow token amount.\\n     * @param _amountToRecover Amount of borrow token we want to recover in 1 call.\\n     *      Set it 0 to recover all available borrow tokens\\n     */\\n    function recoverBorrowToken(uint256 _amountToRecover) external onlyKeeper {\\n        uint256 _borrowBalanceHere = IERC20(borrowToken).balanceOf(address(this));\\n        uint256 _borrow = _borrowedFromFraxLend();\\n\\n        if (_borrowBalanceHere > _borrow) {\\n            uint256 _extraBorrowBalance = _borrowBalanceHere - _borrow;\\n            uint256 _recoveryAmount = (_amountToRecover > 0 && _extraBorrowBalance > _amountToRecover)\\n                ? _amountToRecover\\n                : _extraBorrowBalance;\\n            // Do swap and transfer\\n            uint256 _collateralBefore = collateralToken.balanceOf(address(this));\\n            _safeSwapExactInput(borrowToken, address(collateralToken), _recoveryAmount);\\n            collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)) - _collateralBefore);\\n        }\\n    }\\n\\n    /**\\n     * @notice Repay all borrow amount and set min borrow limit to 0.\\n     * @dev This action usually done when loss is detected in strategy.\\n     * @dev 0 borrow limit make sure that any future rebalance do not borrow again.\\n     */\\n    function repayAll() external onlyKeeper {\\n        // Accrue and update interest\\n        fraxLend.addInterest();\\n        _repay(_borrowedFromFraxLend());\\n        minBorrowLimit = 0;\\n        maxBorrowLimit = 0;\\n    }\\n\\n    /**\\n     * @notice Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol.\\n     * @dev It is possible to set 0 as _minBorrowLimit to not borrow anything\\n     * @param _minBorrowLimit It is % of actual collateral factor of protocol\\n     * @param _maxBorrowLimit It is % of actual collateral factor of protocol\\n     */\\n    function updateBorrowLimit(uint256 _minBorrowLimit, uint256 _maxBorrowLimit) external onlyGovernor {\\n        require(_maxBorrowLimit < MAX_BPS, \\\"invalid-max-borrow-limit\\\");\\n        // set _maxBorrowLimit and _minBorrowLimit to zero to disable borrow;\\n        require(\\n            (_maxBorrowLimit == 0 && _minBorrowLimit == 0) || _maxBorrowLimit > _minBorrowLimit,\\n            \\\"max-should-be-higher-than-min\\\"\\n        );\\n        emit UpdatedBorrowLimit(minBorrowLimit, _minBorrowLimit, maxBorrowLimit, _maxBorrowLimit);\\n        // To avoid liquidation due to price variations maxBorrowLimit is a collateral factor that is less than actual collateral factor of protocol\\n        minBorrowLimit = _minBorrowLimit;\\n        maxBorrowLimit = _maxBorrowLimit;\\n    }\\n}\\n\",\"keccak256\":\"0xe1deffae6ebe7034dbd01ba70eb6f8e60ace93f53f8af9ca097121063e2c0710\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c8063a3f4df7e1161010f578063e260d747116100a2578063fa3ae6dc11610071578063fa3ae6dc146104a7578063fb7ee102146104af578063fc0c546a146104c2578063ffa1ad74146104d357600080fd5b8063e260d74714610470578063e5328e0614610479578063ec78e83214610481578063ee330ee31461049457600080fd5b8063ce5494bb116100de578063ce5494bb14610411578063d2c35ce814610424578063d3033c3914610437578063d8dfeb451461044a57600080fd5b8063a3f4df7e146103af578063b2016bd4146103c4578063c415b95c146103eb578063c7ad2748146103fe57600080fd5b80632e1a7d4d11610187578063456dc17a11610156578063456dc17a146103295780636719578c146103505780637d7c2a1c14610377578063951dc22c1461039a57600080fd5b80632e1a7d4d146102cd5780633ac9fc11146102e05780634032b72b146102f3578063440d72481461030657600080fd5b806316f0115b116101c357806316f0115b1461024c578063243cd14e1461028b57806329ba73ed146102935780632b3297f9146102ba57600080fd5b806301681a62146101f55780630181686c1461020a5780631026013a1461022657806314ae9f2e14610239575b600080fd5b610208610203366004614c7d565b6104f7565b005b61021360075481565b6040519081526020015b60405180910390f35b610213610234366004614c9a565b61074e565b610208610247366004614c7d565b610934565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161021d565b610213610a7c565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b600254610273906001600160a01b031681565b6102086102db366004614c9a565b610b2d565b6102086102ee366004614c9a565b610da6565b610208610301366004614c7d565b610dfd565b610319610314366004614c7d565b610f45565b604051901515815260200161021d565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b61037f611036565b6040805193845260208401929092529082015260600161021d565b6103a261109b565b60405161021d9190614cb3565b6103b76110a7565b60405161021d9190614d2c565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b600154610273906001600160a01b031681565b61020861040c366004614c9a565b611135565b61020861041f366004614c7d565b611419565b610208610432366004614c7d565b611712565b610208610445366004614c7d565b611920565b7f0000000000000000000000000000000000000000000000000000000000000000610273565b61021360065481565b610213611b2e565b600054610273906001600160a01b031681565b6102136104a2366004614d5f565b611c14565b610208612034565b6102086104bd366004614d8b565b612135565b6000546001600160a01b0316610273565b6103b7604051806040016040528060058152602001640352e312e360dc1b81525081565b610504335b60039061234b565b61054e5760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b60448201526064015b60405180910390fd5b6001546001600160a01b03166105a65760405162461bcd60e51b815260206004820152601560248201527f6665652d636f6c6c6563746f722d6e6f742d73657400000000000000000000006044820152606401610545565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156106285760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610545565b61063181610f45565b156106755760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610545565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156106b3576001546106b0906001600160a01b03164761236d565b50565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b1580156106f557600080fd5b505afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190614dad565b60015490915061074a906001600160a01b03848116911683612486565b5050565b6000610759336104fc565b61079e5760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b6044820152606401610545565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561080057600080fd5b505afa158015610814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108389190614dad565b90506108426124e9565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156108a357600080fd5b505afa1580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db9190614dad565b6108e59190614ddc565b91508282101561092e5760405162461bcd60e51b81526020600482015260146024820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b6044820152606401610545565b50919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561098d57600080fd5b505afa1580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c59190614df3565b6001600160a01b0316336001600160a01b031614610a255760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f720000000000006044820152606401610545565b610a3060038261252a565b6106b05760405162461bcd60e51b815260206004820152601460248201527f72656d6f76652d6b65657065722d6661696c65640000000000000000000000006044820152606401610545565b6000610a8661253f565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b60206040518083038186803b158015610ae657600080fd5b505afa158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e9190614dad565b610b289190614e10565b905090565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ba55760405162461bcd60e51b815260206004820152601960248201527f63616c6c65722d69732d6e6f742d7665737065722d706f6f6c000000000000006044820152606401610545565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610c0757600080fd5b505afa158015610c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3f9190614dad565b9050818110610c9c5761074a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000084612486565b610cae610ca98284614ddc565b612688565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015610d0d57600080fd5b505afa158015610d21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d459190614dad565b905061074a7f0000000000000000000000000000000000000000000000000000000000000000610d7584846128fb565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612486565b610daf336104fc565b610df45760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b6044820152606401610545565b6106b081612911565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610e5657600080fd5b505afa158015610e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8e9190614df3565b6001600160a01b0316336001600160a01b031614610eee5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f720000000000006044820152606401610545565b610ef960038261232f565b6106b05760405162461bcd60e51b815260206004820152601160248201527f6164642d6b65657065722d6661696c65640000000000000000000000000000006044820152606401610545565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610fb857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b80610ff457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b8061103057507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b60008080611043336104fc565b6110885760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b6044820152606401610545565b611090612aba565b925092509250909192565b6060610b28600361316f565b600580546110b490614e28565b80601f01602080910402602001604051908101604052809291908181526020018280546110e090614e28565b801561112d5780601f106111025761010080835404028352916020019161112d565b820191906000526020600020905b81548152906001019060200180831161111057829003601f168201915b505050505081565b61113e336104fc565b6111835760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b6044820152606401610545565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156111e557600080fd5b505afa1580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d9190614dad565b9050600061122961317c565b90508082111561141457600061123f8284614ddc565b90506000808511801561125157508482115b61125b578161125d565b845b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156112c257600080fd5b505afa1580156112d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fa9190614dad565b90506113477f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084613294565b6040516370a0823160e01b8152306004820152611410907f00000000000000000000000000000000000000000000000000000000000000009083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156113ce57600080fd5b505afa1580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114069190614dad565b610d759190614ddc565b5050505b505050565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146114915760405162461bcd60e51b815260206004820152601960248201527f63616c6c65722d69732d6e6f742d7665737065722d706f6f6c000000000000006044820152606401610545565b6001600160a01b0381166114e75760405162461bcd60e51b815260206004820152601c60248201527f6e65772d73747261746567792d616464726573732d69732d7a65726f000000006044820152606401610545565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561154a57600080fd5b505afa15801561155e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115829190614df3565b6001600160a01b0316146115d85760405162461bcd60e51b815260206004820152601660248201527f6e6f742d76616c69642d6e65772d7374726174656779000000000000000000006044820152606401610545565b6115e181613336565b6000546040516370a0823160e01b81523060048201526116759183916001600160a01b03909116906370a082319060240160206040518083038186803b15801561162a57600080fd5b505afa15801561163e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116629190614dad565b6000546001600160a01b03169190612486565b6040516370a0823160e01b81523060048201526106b09082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156116da57600080fd5b505afa1580156116ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d759190614dad565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561176b57600080fd5b505afa15801561177f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a39190614df3565b6001600160a01b0316336001600160a01b0316146118035760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f720000000000006044820152606401610545565b6001600160a01b0381166118595760405162461bcd60e51b815260206004820152601d60248201527f6665652d636f6c6c6563746f722d616464726573732d69732d7a65726f0000006044820152606401610545565b6001546001600160a01b03828116911614156118b75760405162461bcd60e51b815260206004820152601560248201527f6665652d636f6c6c6563746f722d69732d73616d6500000000000000000000006044820152606401610545565b6001546040516001600160a01b038084169216907f0f06062680f9bd68e786e9980d9bb03d73d5620fc3b345e417b6eacb310b970690600090a36001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561197957600080fd5b505afa15801561198d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b19190614df3565b6001600160a01b0316336001600160a01b031614611a115760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f720000000000006044820152606401610545565b6001600160a01b038116611a675760405162461bcd60e51b815260206004820152601760248201527f737761707065722d616464726573732d69732d7a65726f0000000000000000006044820152606401610545565b6002546001600160a01b0382811691161415611ac55760405162461bcd60e51b815260206004820152600f60248201527f737761707065722d69732d73616d6500000000000000000000000000000000006044820152606401610545565b6002546040516001600160a01b038084169216907f6c953b7ec311055c20b96a42cea31e89528e375b1bf953a503db40854b3188fe90600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611b9057600080fd5b505afa158015611ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc89190614dad565b604051635ad7983160e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b5af306290602401610ace565b6000611c1f336104fc565b611c645760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b6044820152606401610545565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415611ce65760405162461bcd60e51b815260206004820152601f60248201527f6e6f742d616c6c6f7765642d746f2d73776565702d636f6c6c61746572616c006044820152606401610545565b611cef83610f45565b15611d335760405162461bcd60e51b815260206004820152601460248201527306e6f742d616c6c6f7765642d746f2d73776565760641b6044820152606401610545565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611d9557600080fd5b505afa158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcd9190614dad565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a082319060240160206040518083038186803b158015611e1257600080fd5b505afa158015611e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4a9190614dad565b90508015611f4057600254604051636eb1769f60e11b81523060048201526001600160a01b0391821660248201529086169063dd62ed3e9060440160206040518083038186803b158015611e9d57600080fd5b505afa158015611eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed59190614dad565b811115611f1357600254611ef7906001600160a01b03878116911660006135c2565b600254611f13906001600160a01b0387811691166000196135c2565b611f3e857f0000000000000000000000000000000000000000000000000000000000000000836136ed565b505b6040516370a0823160e01b815230600482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611fa157600080fd5b505afa158015611fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd99190614dad565b611fe39190614ddc565b92508383101561202c5760405162461bcd60e51b81526020600482015260146024820152731b9bdd0b595b9bdd59da0b585b5bdd5b9d13dd5d60621b6044820152606401610545565b505092915050565b61203d336104fc565b6120825760405162461bcd60e51b815260206004820152601660248201527531b0b63632b916b4b996b737ba16b096b5b2b2b832b960511b6044820152606401610545565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630d09365c6040518163ffffffff1660e01b8152600401608060405180830381600087803b1580156120dd57600080fd5b505af11580156120f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121159190614e5d565b5050505061212961212461317c565b613791565b60006006819055600755565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561218e57600080fd5b505afa1580156121a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c69190614df3565b6001600160a01b0316336001600160a01b0316146122265760405162461bcd60e51b815260206004820152601a60248201527f63616c6c65722d69732d6e6f742d7468652d676f7665726e6f720000000000006044820152606401610545565b61271081106122775760405162461bcd60e51b815260206004820152601860248201527f696e76616c69642d6d61782d626f72726f772d6c696d697400000000000000006044820152606401610545565b80158015612283575081155b8061228d57508181115b6122d95760405162461bcd60e51b815260206004820152601d60248201527f6d61782d73686f756c642d62652d6869676865722d7468616e2d6d696e0000006044820152606401610545565b6006546007546040805192835260208301859052820152606081018290527fedd77444afdf63401315e81ffe86d08f7865796e8ad2e11acf1d56a1393f07d59060800160405180910390a1600691909155600755565b6000612344836001600160a01b038416613870565b9392505050565b6001600160a01b03811660009081526001830160205260408120541515612344565b804710156123bd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610545565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461240a576040519150601f19603f3d011682016040523d82523d6000602084013e61240f565b606091505b50509050806114145760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610545565b6040516001600160a01b03831660248201526044810182905261141490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526138bf565b6000806124f4613991565b9092509050801561074a5761074a827f000000000000000000000000000000000000000000000000000000000000000083613294565b6000612344836001600160a01b038416613b34565b6040516370a0823160e01b8152306004820152600090670de0b6b3a7640000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156125ab57600080fd5b505afa1580156125bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e39190614dad565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561263c57600080fd5b505afa158015612650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126749190614dad565b61267e9190614eab565b610b289190614eca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630d09365c6040518163ffffffff1660e01b8152600401608060405180830381600087803b1580156126e357600080fd5b505af11580156126f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271b9190614e5d565b50505050600061272c600083613c27565b91505061273881613791565b604051635ad7983160e11b815230600482015260009061287290849061286d906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b5af30629060240160206040518083038186803b1580156127a457600080fd5b505afa1580156127b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127dc9190614dad565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634ac8eb5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561283557600080fd5b505afa158015612849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286d9190614dad565b6128fb565b604051636a0eee4b60e11b8152600481018290523060248201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d41ddc96906044015b600060405180830381600087803b1580156128de57600080fd5b505af11580156128f2573d6000803e3d6000fd5b50505050505050565b600081831061290a5781612344565b5090919050565b61291a81613f45565b6002546001600160a01b0390811690612976907f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846135c2565b6129aa6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682846135c2565b6129de6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682846135c2565b612a326001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846135c2565b612a866001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846135c2565b61074a6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682846135c2565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630d09365c6040518163ffffffff1660e01b8152600401608060405180830381600087803b158015612b1a57600080fd5b505af1158015612b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b529190614e5d565b5050604051636a9eee1360e11b8152306004820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063d53ddc269060240160206040518083038186803b158015612bb857600080fd5b505afa158015612bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf09190614dad565b604051639f2b283360e01b81523060048201529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639f2b28339060240160206040518083038186803b158015612c5557600080fd5b505afa158015612c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8d9190614dad565b90506000612c9961317c565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612cfe57600080fd5b505afa158015612d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d369190614dad565b90506000612d4261253f565b90506000612d508284614e10565b905080841115612d7157612d6c612d678286614ddc565b613f99565b612e76565b83821115612e2557612d8b612d868584614ddc565b614280565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612dea57600080fd5b505afa158015612dfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e229190614dad565b92505b8215612e7657612e767f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085613294565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015612ed857600080fd5b505afa158015612eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f109190614dad565b604051635ad7983160e11b81523060048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b5af30629060240160206040518083038186803b158015612f7557600080fd5b505afa158015612f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fad9190614dad565b90506000612fbb8383614e10565b905087811115612fd657612fcf8882614ddc565b9b50612fe3565b612fe08189614ddc565b9a505b6000612fef8a8e614e10565b9050808410156130a057613006610ca98583614ddc565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561306557600080fd5b505afa158015613079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309d9190614dad565b93505b6130aa848b6128fb565b9a508a84116130ba5760006130cd565b6130cd6130c78c86614ddc565b8e6128fb565b6040516302df682360e11b815260048101829052602481018e9052604481018d9052909d506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906305bed04690606401600060405180830381600087803b15801561314057600080fd5b505af1158015613154573d6000803e3d6000fd5b505050506131606144a0565b50505050505050505050909192565b60606000612344836147dd565b604051634fd422df60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906394e301e0908290634fd422df9060240160206040518083038186803b1580156131e657600080fd5b505afa1580156131fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321e9190614dad565b6040516001600160e01b031960e084901b16815260048101919091526001602482015260440160206040518083038186803b15801561325c57600080fd5b505afa158015613270573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b289190614dad565b600254604051636ccb2b0160e01b81526001600160a01b0385811660048301528481166024830152604482018490526001606483015230608483015290911690636ccb2b019060a401602060405180830381600087803b1580156132f757600080fd5b505af1925050508015613327575060408051601f3d908101601f1916820190925261332491810190614dad565b60015b61333057505050565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561339957600080fd5b505afa1580156133ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d19190614df3565b6001600160a01b0316146134275760405162461bcd60e51b815260206004820152601360248201527f77726f6e672d726563656970742d746f6b656e000000000000000000000000006044820152606401610545565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630d09365c6040518163ffffffff1660e01b8152600401608060405180830381600087803b15801561348257600080fd5b505af1158015613496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ba9190614e5d565b505050506134c961212461317c565b604051635ad7983160e11b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d41ddc9690829063b5af30629060240160206040518083038186803b15801561353057600080fd5b505afa158015613544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135689190614dad565b6040516001600160e01b031960e084901b1681526004810191909152306024820152604401600060405180830381600087803b1580156135a757600080fd5b505af11580156135bb573d6000803e3d6000fd5b5050505050565b80158061364b5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561361157600080fd5b505afa158015613625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136499190614dad565b155b6136bd5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610545565b6040516001600160a01b03831660248201526044810182905261141490849063095ea7b360e01b906064016124b2565b600254604051636ccb2b0160e01b81526001600160a01b038581166004830152848116602483015260448201849052600160648301523060848301526000921690636ccb2b019060a401602060405180830381600087803b15801561375157600080fd5b505af1158015613765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137899190614dad565b949350505050565b80156106b05760006137a161253f565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561380057600080fd5b505afa158015613814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138389190614dad565b6138429190614e10565b90508082111561386757600061385661317c565b9050613865612d678383614ddc565b505b61074a82614839565b60008181526001830160205260408120546138b757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611030565b506000611030565b6000613914826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166149879092919063ffffffff16565b80519091501561141457808060200190518101906139329190614eec565b6114145760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610545565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638bc6beb26040518163ffffffff1660e01b815260040160206040518083038186803b1580156139ef57600080fd5b505afa158015613a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a279190614df3565b90506001600160a01b03811615613a925760405163d279c19160e01b81523060048201526001600160a01b0382169063d279c19190602401600060405180830381600087803b158015613a7957600080fd5b505af1158015613a8d573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201527f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b038216906370a082319060240160206040518083038186803b158015613af357600080fd5b505afa158015613b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b2b9190614dad565b92509250509091565b60008181526001830160205260408120548015613c1d576000613b58600183614ddc565b8554909150600090613b6c90600190614ddc565b9050818114613bd1576000866000018281548110613b8c57613b8c614f0e565b9060005260206000200154905080876000018481548110613baf57613baf614f0e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613be257613be2614f24565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611030565b6000915050611030565b600080831580613c35575082155b613c815760405162461bcd60e51b815260206004820152601160248201527f616c6c2d696e7075742d67742d7a65726f0000000000000000000000000000006044820152606401610545565b6000613c8b61317c565b905060075460001415613ca357600092509050613f3e565b604051635ad7983160e11b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b5af30629060240160206040518083038186803b158015613d0557600080fd5b505afa158015613d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d3d9190614dad565b905060008615613d5857613d518783614e10565b9050613d6d565b85821115613d6d57613d6a8683614ddc565b90505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fbbbf94c6040518163ffffffff1660e01b8152600401604080518083038186803b158015613dc757600080fd5b505afa158015613ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dff9190614f71565b6020015190506000613e3a6001600160e01b0383167f0000000000000000000000000000000000000000000000000000000000000000614eab565b7f0000000000000000000000000000000000000000000000000000000000000000613e857f000000000000000000000000000000000000000000000000000000000000000086614eab565b613e8f9190614eab565b613e999190614eca565b905080613eb157600085965096505050505050613f3e565b600061271060075483613ec49190614eab565b613ece9190614eca565b9050600061271060065484613ee39190614eab565b613eed9190614eca565b905081871115613f0857613f018188614ddc565b9750613f36565b80871015613f3657613f1a8782614ddc565b98506000613f26614996565b9050808a1115613f34578099505b505b505050505050505b9250929050565b6106b06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000836135c2565b6002546040516353b609b560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820184905260009216906353b609b590606401602060405180830381600087803b15801561403057600080fd5b505af1158015614044573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140689190614dad565b9050801561074a576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156140d257600080fd5b505afa1580156140e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061410a9190614dad565b9050808211156141a5576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d41ddc9661414d8385614ddc565b6040516001600160e01b031960e084901b1681526004810191909152306024820152604401600060405180830381600087803b15801561418c57600080fd5b505af11580156141a0573d6000803e3d6000fd5b505050505b6002546040516381cc619b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301526044820186905260648201859052306084830152909116906381cc619b9060a401602060405180830381600087803b15801561424857600080fd5b505af115801561425c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133309190614dad565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b1580156142db57600080fd5b505afa1580156142ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143139190614dad565b905060008161432a84670de0b6b3a7640000614eab565b6143349190614eca565b9050670de0b6b3a76400006143498383614eab565b6143539190614eca565b831161435f578061436a565b61436a816001614e10565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156143cf57600080fd5b505afa1580156143e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144079190614dad565b90508082116144165781614418565b805b9150811561333057604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561448257600080fd5b505af1158015614496573d6000803e3d6000fd5b5050505050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561450257600080fd5b505afa158015614516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061453a9190614dad565b905060008061454a836000613c27565b909250905080156146505761455e81613791565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156145bd57600080fd5b505afa1580156145d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145f59190614dad565b925082156114145760405163cadac47960e01b8152600481018490523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cadac479906044016128c4565b8115611414576040516372f89d8b60e11b815260048101839052602481018490523060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e5f13b1690606401602060405180830381600087803b1580156146c557600080fd5b505af11580156146d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146fd9190614dad565b506040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163b6b55f25917f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561478757600080fd5b505afa15801561479b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147bf9190614dad565b6040518263ffffffff1660e01b81526004016128c491815260200190565b60608160000180548060200260200160405190810160405280929190818152602001828054801561482d57602002820191906000526020600020905b815481526020019060010190808311614819575b50505050509050919050565b61484281614280565b60405163309c295160e21b815260048101829052600060248201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c270a5449060440160206040518083038186803b1580156148ac57600080fd5b505afa1580156148c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148e49190614dad565b604051633d417d2d60e01b8152600481018290523060248201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633d417d2d90604401602060405180830381600087803b15801561494f57600080fd5b505af1158015614963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114149190614dad565b60606137898484600085614b07565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f9557ccb6040518163ffffffff1660e01b8152600401604080518083038186803b1580156149f157600080fd5b505afa158015614a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a299190614fec565b600001516fffffffffffffffffffffffffffffffff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638285ef406040518163ffffffff1660e01b8152600401604080518083038186803b158015614a9b57600080fd5b505afa158015614aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ad39190614fec565b516fffffffffffffffffffffffffffffffff169050808211614af6576000614b00565b614b008183614ddc565b9250505090565b606082471015614b685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610545565b843b614bb65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610545565b600080866001600160a01b03168587604051614bd2919061501d565b60006040518083038185875af1925050503d8060008114614c0f576040519150601f19603f3d011682016040523d82523d6000602084013e614c14565b606091505b5091509150614c24828286614c2f565b979650505050505050565b60608315614c3e575081612344565b825115614c4e5782518084602001fd5b8160405162461bcd60e51b81526004016105459190614d2c565b6001600160a01b03811681146106b057600080fd5b600060208284031215614c8f57600080fd5b813561234481614c68565b600060208284031215614cac57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015614cf45783516001600160a01b031683529284019291840191600101614ccf565b50909695505050505050565b60005b83811015614d1b578181015183820152602001614d03565b838111156133305750506000910152565b6020815260008251806020840152614d4b816040850160208701614d00565b601f01601f19169190910160400192915050565b60008060408385031215614d7257600080fd5b8235614d7d81614c68565b946020939093013593505050565b60008060408385031215614d9e57600080fd5b50508035926020909101359150565b600060208284031215614dbf57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015614dee57614dee614dc6565b500390565b600060208284031215614e0557600080fd5b815161234481614c68565b60008219821115614e2357614e23614dc6565b500190565b600181811c90821680614e3c57607f821691505b6020821081141561092e57634e487b7160e01b600052602260045260246000fd5b60008060008060808587031215614e7357600080fd5b845193506020850151925060408501519150606085015167ffffffffffffffff81168114614ea057600080fd5b939692955090935050565b6000816000190483118215151615614ec557614ec5614dc6565b500290565b600082614ee757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215614efe57600080fd5b8151801515811461234457600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6040805190810167ffffffffffffffff81118282101715614f6b57634e487b7160e01b600052604160045260246000fd5b60405290565b600060408284031215614f8357600080fd5b614f8b614f3a565b825163ffffffff81168114614f9f57600080fd5b815260208301516001600160e01b0381168114614fbb57600080fd5b60208201529392505050565b80516fffffffffffffffffffffffffffffffff81168114614fe757600080fd5b919050565b600060408284031215614ffe57600080fd5b615006614f3a565b61500f83614fc7565b8152614fbb60208401614fc7565b6000825161502f818460208701614d00565b919091019291505056fea2646970667358221220984ae17113dc54e0e6cdfbc6f0261847b0c9bd5b2b33da53d4516409fe8608e664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to add."
        }
      },
      "approveToken(uint256)": {
        "details": "Approve all required tokens"
      },
      "migrate(address)": {
        "details": "_beforeMigration hook can be implemented in child strategy to do extra steps.",
        "params": {
          "_newStrategy": "Address of new strategy"
        }
      },
      "rebalance()": {
        "returns": {
          "_loss": "Realized loss, if any, in collateral.",
          "_payback": "If strategy has any excess debt, we have to liquidate asset to payback excess debt.",
          "_profit": "Realized profit in collateral."
        }
      },
      "recoverBorrowToken(uint256)": {
        "details": "If we get liquidation in protocol, we will have borrowToken sitting in strategy. This function allows to recover idle borrow token amount.",
        "params": {
          "_amountToRecover": "Amount of borrow token we want to recover in 1 call.      Set it 0 to recover all available borrow tokens"
        }
      },
      "removeKeeper(address)": {
        "params": {
          "_keeperAddress": "keeper address to remove."
        }
      },
      "repayAll()": {
        "details": "This action usually done when loss is detected in strategy.0 borrow limit make sure that any future rebalance do not borrow again."
      },
      "sweep(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "updateBorrowLimit(uint256,uint256)": {
        "details": "It is possible to set 0 as _minBorrowLimit to not borrow anything",
        "params": {
          "_maxBorrowLimit": "It is % of actual collateral factor of protocol",
          "_minBorrowLimit": "It is % of actual collateral factor of protocol"
        }
      },
      "updateFeeCollector(address)": {
        "params": {
          "_feeCollector": "fee collector address"
        }
      },
      "updateSwapper(address)": {
        "params": {
          "_swapper": "swapper address"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "Amount of collateral token"
        }
      }
    },
    "title": "This strategy will deposit collateral token in FraxLend and based on position it will borrow Frax and supplied borrowed tokens to Vesper pool.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addKeeper(address)": {
        "notice": "Add given address in keepers list."
      },
      "borrowBalance()": {
        "notice": "Gets amount of borrowed token in strategy + borrowed tokens deposited in vPool"
      },
      "claimAndSwapRewards(uint256)": {
        "notice": "Claim rewardToken and convert rewardToken into collateral token."
      },
      "collateral()": {
        "notice": "Returns address of token correspond to collateral token"
      },
      "keepers()": {
        "notice": "Return list of keepers"
      },
      "migrate(address)": {
        "notice": "Migrate all asset and vault ownership,if any, to new strategy"
      },
      "rebalance()": {
        "notice": "OnlyKeeper: Rebalance profit, loss and investment of this strategy.  Calculate profit, loss and payback of this strategy and realize profit/loss and  withdraw fund for payback, if any, and submit this report to pool."
      },
      "recoverBorrowToken(uint256)": {
        "notice": "Recover extra borrow tokens from strategy"
      },
      "removeKeeper(address)": {
        "notice": "Remove given address from keepers list."
      },
      "repayAll()": {
        "notice": "Repay all borrow amount and set min borrow limit to 0."
      },
      "swapToCollateral(address,uint256)": {
        "notice": "onlyKeeper:: Swap given token into collateral token."
      },
      "sweep(address)": {
        "notice": "sweep given token to feeCollector of strategy"
      },
      "token()": {
        "notice": "Returns address of token correspond to receipt token"
      },
      "tvl()": {
        "notice": "Returns total collateral locked in the strategy"
      },
      "updateBorrowLimit(uint256,uint256)": {
        "notice": "Update upper and lower borrow limit. Usually maxBorrowLimit < 100% of actual collateral factor of protocol."
      },
      "updateFeeCollector(address)": {
        "notice": "Update fee collector"
      },
      "updateSwapper(address)": {
        "notice": "Update swapper"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw collateral token from end protocol."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15000,
        "contract": "vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol:FraxLendVesperXy",
        "label": "receiptToken",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15006,
        "contract": "vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol:FraxLendVesperXy",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15009,
        "contract": "vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol:FraxLendVesperXy",
        "label": "swapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRoutedSwapper)13446"
      },
      {
        "astId": 15022,
        "contract": "vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol:FraxLendVesperXy",
        "label": "_keepers",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)3030_storage"
      },
      {
        "astId": 31753,
        "contract": "vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol:FraxLendVesperXy",
        "label": "NAME",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 31762,
        "contract": "vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol:FraxLendVesperXy",
        "label": "minBorrowLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 31765,
        "contract": "vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol:FraxLendVesperXy",
        "label": "maxBorrowLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRoutedSwapper)13446": {
        "encoding": "inplace",
        "label": "contract IRoutedSwapper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3030_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3029,
            "contract": "vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol:FraxLendVesperXy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2729_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2729_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2724,
            "contract": "vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol:FraxLendVesperXy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2728,
            "contract": "vesper-strategies/contracts/strategies/frax-lend/FraxLendVesperXy.sol:FraxLendVesperXy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}